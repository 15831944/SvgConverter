<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WW.Cad</name>
    </assembly>
    <members>
        <member name="T:WW.Cad.Windows.Forms.CadColorEditorDialog">
            <summary>
            A dialog to edit a color value.
            </summary>
        </member>
        <member name="F:WW.Cad.Windows.Forms.CadColorEditorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WW.Cad.Windows.Forms.CadColorEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WW.Cad.Windows.Forms.CadColorEditorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WW.Cad.Windows.Forms.CadColorEditorDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Windows.Forms.CadColorEditorDialog"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.Windows.Forms.CadColorEditorDialog.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Windows.Forms.CadColorEditorDialog.ShowColorBookTab">
            <summary>
            Gets or sets a value indicating whether to show the color book tab.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.WireframePathDrawer">
            <summary>
            Path drawer for wireframe context.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.IPathDrawer">
            <summary>
            Interface for classes which know how to display a path.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IPathDrawer.DrawPath(WW.Math.Geometry.IShape4D,WW.Drawing.ArgbColor,System.Int16)">
            <summary>
            Draw a path.
            </summary>
            <remarks>
            <para>
            The path is not considered to be from at text.
            </para>
            <para>
            Some implementations may be slow, so consider using the other <c>DrawPath()</c> method.
            </para>
            </remarks>
            <param name="path">path to draw</param>
            <param name="color">color used for path</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="M:WW.Cad.Model.IPathDrawer.DrawPath(WW.Math.Geometry.IShape2D,WW.Math.Matrix4D,WW.Drawing.ArgbColor,System.Int16,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Draw a path.
            </summary>
            <param name="path">path to draw</param>
            <param name="transform">transformation used on path</param>
            <param name="color">color used for path</param>
            <param name="lineWeight">The line weight.</param>
            <param name="filled">fill the path?</param>
            <param name="forText">is this a path created from a text?</param>
            <param name="extrusion">either <c>0</c> or the extrusion in z direction before transformation</param>
        </member>
        <member name="M:WW.Cad.Model.IPathDrawer.DrawCharPath(WW.Math.Geometry.IShape2D,WW.Math.Matrix4D,WW.Drawing.ArgbColor,System.Int16,System.Boolean,System.Double)">
            <summary>
            Draw a path for a character.
            </summary>
            <param name="path">
            path to draw. Is assumed to be the same shape instance for the same character of a font so
            based on this it can be used as a key for e.g. a cache lookup.
            </param>
            <param name="transform">transformation used on path</param>
            <param name="color">color used for path</param>
            <param name="lineWeight">The line weight.</param>
            <param name="filled">fill the path?</param>
            <param name="extrusion">either <c>0</c> or the extrusion in z direction before transformation</param>
        </member>
        <member name="M:WW.Cad.Model.IPathDrawer.IsSeparateCharDrawingPreferred">
            <summary>
            Is this drawer gaining from drawing separate chars rather than drawing complete strings?
            </summary>
            <remarks>
            Usually a complete string is draw as one path. 
            Splitting this into single paths for each letter is an order N algorithm (N being the number of letters),
            so if the drawer works with less effiency depending on the number of paths/points involved (N log N or worse)
            it should return <c>true</c> here. But be sure to test both cases with a TTF text intensive file because
            sometimes the memory overhead of creating all new paths eat up the gain.
            </remarks>
            <returns><c>true</c> if this drawer gains from small filled paths, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WW.Cad.Model.WireframePathDrawer.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">entity which is drawn</param>
            <param name="context">draw context</param>
            <param name="graphicsFactory">The graphics factory.</param>
        </member>
        <member name="T:WW.Cad.Model.Tables.LayerFlags">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfLayer">Layer</see> flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.LayerFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.LayerFlags.Frozen">
            <summary>
            Layer is frozen; otherwise layer is thawed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.LayerFlags.FrozenInNewViewport">
            <summary>
            Layer is frozen by default in new viewports.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.LayerFlags.Locked">
            <summary>
            Layer is locked.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.LayerFlags.IsExternallyDependent">
            <summary>
            If set, view is externally dependent on an xref.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.LayerFlags.IsResolvedExternalRef">
            <summary>
            If both this flag and <see cref="F:WW.Cad.Model.Tables.LayerFlags.IsExternallyDependent"/> are set, the externally dependent xref
            has been successfully resolved.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.LayerFlags.IsReferenced">
            <summary>
            If set, the table entry was referenced by at least one entity in the
            drawing the last time the drawing was edited.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.NamespaceDoc">
            <summary>
            This name space contains all <see cref="T:WW.Cad.Model.Entities.DxfEntity">entities</see> supported by CadLib.
            The entities are contained in <see cref="T:WW.Cad.Model.DxfModel"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.ImageExporter">
            <summary>
            <see cref="T:System.Drawing.Image"/> exporter to image formats .bmp, .tiff, .gif, .jpeg, .png.
            </summary>
            <example>
            An example of how to read a dxf file and export to the several image formats.
            <code lang="cs">
using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfExportExample
{
    class DxfExportExample
    {
        public static void Main(string[] args)
        {
            if (args.Length != 2) {
                Console.WriteLine("Usage: DxfExportExample [png|tiff|jpeg|bmp|gif|pdf] &lt;DXF or DWG file&gt;");
                Environment.Exit(0);
            }
            string format = args[0];
            string filename = args[1];

            DxfModel model = null;
            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
            string outfile = Path.GetFileNameWithoutExtension(Path.GetFullPath(filename));
            Stream stream;
            if (format == "pdf") {
                BoundsCalculator boundsCalculator = new BoundsCalculator();
                boundsCalculator.GetBounds(model);
                Bounds3D bounds = boundsCalculator.Bounds;
                PaperSize paperSize = PaperSizes.GetPaperSize(PaperKind.Letter);
                // Lengths in inches.
                float pageWidth = (float)paperSize.Width / 100f;
                float pageHeight = (float)paperSize.Height / 100f;
                float margin = 0.5f;
                // Scale and transform such that its fits max width/height
                // and the top left middle of the cad drawing will match the 
                // top middle of the pdf page.
                // The transform transforms to pdf pixels.
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    new Point3D(bounds.Center.X, bounds.Corner2.Y, 0d),
                    new Point3D(new Vector3D(margin, margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth - margin, pageHeight - margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth / 2d, pageHeight - margin, 0d) * PdfExporter.InchToPixel)
                );
                using (stream = File.Create(outfile + ".pdf")) {
                    PdfExporter pdfGraphics = new PdfExporter(stream);
                    pdfGraphics.DrawPage(
                        model, 
                        GraphicsConfig.WhiteBackgroundCorrectForBackColor, 
                        to2DTransform,
                        paperSize
                    );
                    pdfGraphics.EndDocument();
                }
            } else {
                GDIGraphics3D graphics = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
                Size maxSize = new Size(500, 500);
                Bitmap bitmap = 
                    ImageExporter.CreateAutoSizedBitmap(
                        model, 
                        graphics, 
                        Matrix4D.Identity, 
                        System.Drawing.Color.Black, 
                        maxSize
                    );
                switch (format) {
                    case "bmp":
                        using (stream = File.Create(outfile + ".bmp")) {
                            ImageExporter.EncodeImageToBmp(bitmap, stream);
                        }
                        break;
                    case "gif":
                        using (stream = File.Create(outfile + ".gif")) {
                            ImageExporter.EncodeImageToGif(bitmap, stream);
                        }
                        break;
                    case "tiff":
                        using (stream = File.Create(outfile + ".tiff")) {
                            ImageExporter.EncodeImageToTiff(bitmap, stream);
                        }
                        break;
                    case "png":
                        using (stream = File.Create(outfile + ".png")) {
                            ImageExporter.EncodeImageToPng(bitmap, stream);
                        }
                        break;
                    case "jpg":
                        using (stream = File.Create(outfile + ".jpg")) {
                            ImageExporter.EncodeImageToJpeg(bitmap, stream);
                        }
                        break;
                    default:
                        Console.WriteLine("Unknown format " + format + ".");
                        break;
                }
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="F:WW.Cad.IO.ImageExporter.Margin">
            <summary>
            Margin in pixels around images created from models. 
            </summary>
            <remarks>
            Without this margin Windows will not render the graphics on the outer edges. 
            Also there seems to be always an empty unused line around
            the bitmap. Not a real problem, just a minor waste of space.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,System.Drawing.Drawing2D.SmoothingMode,WW.Math.Matrix4D)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            <para>
            The bitmap created will be as big as the 2d bounds of the given CAD graphics
            plus a 2 pixel margin on every side.
            </para>
            <para>
            If the drawing is empty, then a 1 by 1 pixel empty bitmap is returned.
            </para>
            </remarks>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="transform">
            The to 2d transformation.
            Note that any translation will be lost.
            </param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,System.Drawing.Drawing2D.SmoothingMode,WW.Math.Matrix4D,System.Drawing.Color)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            <para>
            The bitmap created will be as big as the 2d bounds of the given CAD graphics
            plus a 2 pixel margin on every side.
            </para>
            <para>
            If the drawing is empty, then a 1 by 1 pixel empty bitmap is returned.
            </para>
            </remarks>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="transform">
            The to 2d transformation.
            Note that any translation will be lost.
            </param>
            <param name="backColor">The background color.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,WW.Math.Matrix4D)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            <para>
            The bitmap created will be as big as the 2d bounds of the given CAD graphics
            plus a 2 pixel margin on every side.
            </para>
            </remarks>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="transform">
            The to 2d transformation.
            Note that any translation will be lost.
            </param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,WW.Math.Matrix4D,System.Drawing.Color)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            <para>
            The bitmap created will be as big as the 2d bounds of the given CAD graphics
            plus a 2 pixel margin on every side.
            </para>
            </remarks>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="transform">
            The to 2d transformation.
            Note that any translation will be lost.
            </param>
            <param name="backColor">The background color.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,System.Drawing.Drawing2D.SmoothingMode,WW.Math.Matrix4D,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            </summary>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="transform">The to 2D transformation.</param>
            <param name="backColor">The background color.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <remarks>
            	<para>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateEmptyBitmap(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Create an empty bitmap.
            </summary>
            <param name="backColor">The background color.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,WW.Math.Matrix4D,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            </summary>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="transform">The to 2D transformation.</param>
            <param name="backColor">The background color.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <remarks>
            	<para>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,System.Drawing.Drawing2D.SmoothingMode,WW.Math.Matrix4D,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            </summary>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="transform">The to 2D transformation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,WW.Math.Matrix4D,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            </summary>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="transform">The to 2D transformation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,WW.Math.Matrix4D,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            </summary>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="transform">The to 2D transformation.</param>
            <param name="backColor">The background color.</param>
            <param name="size">The size.</param>
            <returns></returns>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Drawing.GDI.GDIGraphics3D,WW.Math.Matrix4D,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified CAD graphics.
            </summary>
            <param name="cadGraphics">The CAD graphics to draw.</param>
            <param name="transform">The to 2D transformation.</param>
            <param name="size">The size.</param>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GDI.GDIGraphics3D,System.Drawing.Drawing2D.SmoothingMode,WW.Math.Matrix4D,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            If the drawing is empty, then an empty bitmap is returned with the specified maxSize.
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="cadGraphics">
            The CAD graphics object to use for drawing.
            </param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="transform">
            The transform to apply to the drawing.
            Note that any scaling/translation will be lost.
            </param>
            <param name="maxSize">
            Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original 
            transform will be lost.
            </param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GDI.GDIGraphics3D,System.Drawing.Drawing2D.SmoothingMode,WW.Math.Matrix4D,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            If the drawing is empty, then an empty bitmap is returned with the specified maxSize.
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="cadGraphics">
            The CAD graphics object to use for drawing.
            </param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="transform">
            The transform to apply to the drawing.
            Note that any scaling/translation will be lost.
            </param>
            <param name="backColor">The background color.</param>
            <param name="maxSize">
            Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original 
            transform will be lost.
            </param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GDI.GDIGraphics3D,WW.Math.Matrix4D,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="cadGraphics">
            The CAD graphics object to use for drawing.
            </param>
            <param name="transform">
            The transform to apply to the drawing.
            Note that any scaling/translation will be lost.
            </param>
            <param name="maxSize">
            Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original 
            transform will be lost.
            </param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GDI.GDIGraphics3D,WW.Math.Matrix4D,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="cadGraphics">
            The CAD graphics object to use for drawing.
            </param>
            <param name="transform">
            The transform to apply to the drawing.
            Note that any scaling/translation will be lost.
            </param>
            <param name="backColor">The background color.</param>
            <param name="maxSize">
            Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original 
            transform will be lost.
            </param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            <para>
            Make sure that the given transform aligns the top left of the drawing to 
            coordinate (0, 0).
            </para>
            <para>
            The bitmap created will be as big as the 2d bounds of the given CAD graphics
            plus a 2 pixel margin on every side.
            </para>
            <para>
            If the drawing is empty, then an empty 1 by 1 pixel bitmap is returned.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="transform">
            The to 2d transformation.
            Note that any translation will be lost.
            </param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            <para>
            Make sure that the given transform aligns the top left of the drawing to 
            coordinate (0, 0).
            </para>
            <para>
            The bitmap created will be as big as the 2d bounds of the given CAD graphics
            plus a 2 pixel margin on every side.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="transform">The to 2d transformation.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="transform">The to 2d transformation.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <remarks>
            	<para>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="transform">The to 2d transformation.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <remarks>
            	<para>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="transform">The to 2d transformation.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="size">The size.</param>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="transform">The to 2d transformation.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="size">The size.</param>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateViewportConfigurationBitmap(WW.Cad.Model.DxfModel,System.String,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from a viewport configuration.
            </summary>
            <remarks>
            A viewport configuration is a number of <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> table entries with the same name,
            which together define the klayout of the vieports.
            </remarks>
            <param name="model">The model containing the viewport configuration.</param>
            <param name="vportName">The name of the viewport configuration.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="width">The width of the returned bitmap.</param>
            <param name="height">The height of the returned bitmap.</param>
            <return>
            A bitmap showing the viewport configuration.
            If there is not at least one <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> entry with the given <paramref name="vportName"/> 
            the bitmap will only show the background color of the <paramref name="graphicsConfig"/>.
            </return>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            If the drawing is empty, then an empty bitmap is returned with the specified maxSize.
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="transform">
            The transform to apply to the drawing.
            Note that any scaling/translation will be lost.
            </param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="maxSize">
            Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original 
            transform will be lost.
            </param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="transform">
            The transform to apply to the drawing.
            Note that any scaling/translation will be lost.
            </param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="maxSize">
            Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original 
            transform will be lost.
            </param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the entities in paper space.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">
            The to 2d transformation.
            Note that any translation will be lost.
            </param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <returns>the bitmap created from the layout</returns>
            <remarks>
            <para>
            The bitmap created will be as big as the 2d bounds of the given CAD graphics
            plus a 2 pixel margin on every side.
            </para>
            <para>
            If the drawing is empty, then an empty 1 by 1 pixel bitmap is returned.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the entities in paper space.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">
            The to 2d transformation.
            Note that any translation will be lost.
            </param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <returns>the bitmap created from the layout</returns>
            <remarks>
            <para>
            The bitmap created will be as big as the 2d bounds of the given CAD graphics
            plus a 2 pixel margin on every side.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the entities in paper space.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">The to 2d transformation.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the entities in paper space.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">The to 2d transformation.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the entities in paper space.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">The to 2d transformation.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="size">The size.</param>
            <remarks>
            Make sure that the given transform aligns the top left of the drawing to
            coordinate (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            If the drawing is empty, then an empty bitmap is returned with the specified maxSize.
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities to draw.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">The transform to apply to the drawing.
            Note that any scaling/translation will be lost.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="maxSize">Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original
            transform will be lost.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <remarks>
            If the drawing is empty, then an empty bitmap is returned with the specified maxSize.
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities to draw.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">The transform to apply to the drawing.
            Note that any scaling/translation will be lost.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="backColor">The background color.</param>
            <param name="maxSize">Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original
            transform will be lost.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities to draw.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">The transform to apply to the drawing.
            Note that any scaling/translation will be lost.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="backColor">The background color.</param>
            <param name="maxSize">Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original
            transform will be lost.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateAutoSizedBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D,WW.Cad.Drawing.GraphicsConfig,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            The size is calculated automatically based on the drawing.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities to draw.</param>
            <param name="viewports">The viewports.</param>
            <param name="transform">The transform to apply to the drawing.
            Note that any scaling/translation will be lost.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="backColor">The background color.</param>
            <param name="maxSize">Maximum bitmap size. A total transformation will be calculated such that the
            drawing will fit the bitmap.
            Thus any original scaling and translation in the original
            transform will be lost.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Color,WW.Math.Matrix4D,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities to draw.</param>
            <param name="viewports">The viewports.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="smoothingMode">The smoothing mode used for drawing.</param>
            <param name="backColor">The background color.</param>
            <param name="to2DTransform">The to 2D transform.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,System.Drawing.Color,WW.Math.Matrix4D,System.Int32,System.Int32)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities to draw.</param>
            <param name="viewports">The viewports.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="backColor">The background color.</param>
            <param name="to2DTransform">The to 2D transform.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.CreateBitmap(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,System.Drawing.Color,WW.Math.Matrix4D,System.Drawing.Size)">
            <summary>
            Create a bitmap from the specified model.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities to draw.</param>
            <param name="viewports">The viewports.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="backColor">The background color.</param>
            <param name="to2DTransform">The to 2D transform.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.EncodeImageToJpeg(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Encode image to jpeg.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.EncodeImageToTiff(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Encode image to tiff.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.EncodeImageToGif(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Encode image to gif.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.EncodeImageToPng(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Encode image to png.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.EncodeImageToBmp(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Encode image to bmp.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.EncodeImage(System.Drawing.Image,System.IO.Stream,System.String,System.Drawing.Imaging.EncoderParameters)">
            <summary>
            Encode image to output stream with given encoder and parameters.
            </summary>
            <remarks>
            See also <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> for more info.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.ImageExporter.GetEncoderInfo(System.String)">
            <summary>
            Gets encoder info for given mime type.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Shx1_0Reader">
            <summary>
            reader for shx 1.0 files.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Shx1_0Reader.#ctor(System.IO.BinaryReader,System.Text.Encoding,WW.Cad.Model.Entities.ShxFile)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Shx1_0Reader.Read">
            <summary>
            Read shapes into shape file.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.ShxFormat">
            <summary>
            Shx font format.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ShxFormat.shx1_0">
            <summary>
            Shx 1.0.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ShxFormat.shx1_1">
            <summary>
            Shx 1.1.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ShxFormat.shxBigFont1_0">
            <summary>
            Shx big font 1.0.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ShxFormat.shxUnicode1_0">
            <summary>
            Shx unicode 1.0.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.ShxFile">
            <summary>
            Shx file (can be an shx font).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.#ctor(System.String)">
            <summary>
            Constructor. Don't allow normal construction.
            </summary>
            <exception cref="T:WW.Cad.Model.Entities.ShxFile.ShxUnknownEncodingException">if a bigfont encoding is not known</exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.#ctor(System.String,System.Byte[])">
            <summary>
            Constructor. Don't allow normal construction.
            </summary>
            <param name="filename">The path of the SHX file.</param>
            <param name="data">In-memory data used for the SHX. If <c>null</c>, data will be read from <paramref name="filename"/>.</param>
            <exception cref="T:WW.Cad.Model.Entities.ShxFile.ShxUnknownEncodingException">if a bigfont encoding is not known</exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.Exists(System.String,System.String[])">
            <summary>
            Check if shx file with given file name exists.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.GetShxFile(System.String,System.String[])">
            <summary>
            Get shx file with given file name.
            </summary>
            <exception cref="T:System.IO.IOException">thrown when shx format is illegal.</exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.GetShape(System.Char)">
            <summary>
            Get a SHX shape for a given unicode character.
            </summary>
            <param name="unicode">unicode character</param>
            <returns>shape or <c>null</c> if the is no shape defined for the given character</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.GetShapeByIndex(System.UInt16)">
            <summary>
            Get a SHX shape for a given index as defined in the file.
            </summary>
            <param name="index">index of shape in file</param>
            <returns>shape or <c>null</c> if there is no shape with the given index</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.GetShapeIndexByDescription(System.String)">
            <summary>
            Gets the shape index by description. 
            </summary>
            <param name="desc">Description.</param>
            <returns>Shape index or <c>null</c> if not found.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.AddBigfontEncoding(System.String,System.Text.Encoding)">
            <summary>
            Add an encoding to the bigfont encoding mapping.
            </summary>
            <remarks>
            SHX files in bigfont format come in different encodings, but the 
            encoding is not defined in the file. These method gives a workaround
            allowing to define the encoding of a given file.
            </remarks>
            <param name="filename">Bigfont filename. It will be reduced to its basic part, so there is no need to give a complete path.</param>
            <param name="encoding">Encoding of the font contained in the given file</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.AddOldShxEncoding(System.String,System.Text.Encoding)">
            <summary>
            Add an encoding to the encoding mapping for old SHX files.
            </summary>
            <remarks>
            Modern SHX files are encoded in Unicode format. But SHX files in the 1.0 and 1.1 format
            have an unknown internal encoding. This allows to set the encoding for a given SHX file.
            If no encoding for an old file is defined, the file is assumed to be in <see cref="!:Encodings.Dos437"/> encoding.
            Setting the encoding here will only have an effect for SHX files in old 1.0 or 1.1  formats, newer SHX files in Unicode format with the same name 
            will not be affected.
            </remarks>
            <param name="filename">SHX filename. It will be reduced to its basic part, so there is no need to give a complete path.</param>
            <param name="encoding">encoding of the font contained in the given file</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.GetBigFontEncoding(System.String)">
            <summary>
            Get the encoding of a bigfont file.
            </summary>
            <param name="filename">SHX bigfont file name</param>
            <returns>encoding or <c>null</c> if the encoding is unknown</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.GetOldShxEncoding(System.String,WW.Cad.Model.DrawingCodePage)">
            <summary>
            Get the encoding of an old SHX file.
            </summary>
            <param name="filename">Old SHX file name.</param>
            <param name="defaultCodepage">Codepage used if no special encoding is defined.</param>
            <returns>encoding, or default if no special encoding is known.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.IsAvailable(System.String,System.String[])">
            <summary>
            Is a SHX file with the given name found?
            </summary>
            <param name="filename">SHX file name.</param>
            <param name="path">Paths for lookup.</param>
            <returns><c>true</c> if the file is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.GetFontType">
            <summary>
            Deduces the shx font type from the stream header.
            When a font type is deduced, the stream position is just after the header.
            </summary>
            <exception cref="T:System.IO.IOException">thrown when shx format is illegal.</exception>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.FileName">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.Description">
            <summary>
            Gets the file description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.Above">
            <summary>
            Gets the distance above the baseline (ascent).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.Below">
            <summary>
            Gets the distance below the baseline (descent).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.HorizontalLinefeedAdvance">
            <summary>
            Get the horizontal linefeed advance used for vertical fonts.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.VerticalLinefeedAdvance">
            <summary>
            Get the vertical linefeed advance used for horizontal fonts.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxFile.FileEncoding">
            <summary>
            File encoding.
            </summary>
            <remarks>This is only set for bigfont files.</remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.ShxFile.ShxUnknownEncodingException">
            <summary>
            Exception thrown if encoding of SHX bigfont is uinknown.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.DxfException">
            <summary>
            Represents a DXF exception.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfException.#ctor(System.String,WW.Cad.Base.DxfMessage[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="dxfMessages">The CAD messages.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfException.#ctor(WW.Cad.Base.DxfMessage[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfException"/> class.
            </summary>
            <param name="dxfMessage">The CAD message.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfException.#ctor(WW.Cad.Base.DxfMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfException"/> class.
            </summary>
            <param name="cadMessage">The CAD message.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfException.ToString">
            <summary>
            Gets the string representation.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.DxfException.Messages">
            <summary>
            Gets the array of Dxf messages.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxFile.ShxUnknownEncodingException.#ctor(System.String)">
            <summary>
            Construtor.
            </summary>
            <param name="message">exception message</param>
        </member>
        <member name="T:WW.Cad.Model.ValueUnitType">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DxfValue">value</see> unit type.
            </summary>
            <remarks>
            Is only relevant when the <see cref="T:WW.Cad.Model.ValueDataType"/> is <see cref="F:WW.Cad.Model.ValueDataType.Double"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.ValueUnitType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueUnitType.Distance">
            <summary>
            Distance.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueUnitType.Angle">
            <summary>
            Angle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueUnitType.Area">
            <summary>
            Area.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueUnitType.Volume">
            <summary>
            Volumne.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueUnitType.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueUnitType.Percentage">
            <summary>
            Percentage.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.EntityTypes">
            <summary>
            Cad Entity types as they appear in DXF files.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Arc">
            <summary>
            Arc entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.AttributeDefinition">
            <summary>
            Attribute definition entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Attribute">
            <summary>
            Attribute entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Block">
            <summary>
            Block entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.EndBlock">
            <summary>
            End block entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Circle">
            <summary>
            Circle entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Dimension">
            <summary>
            Dimension entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Ellipse">
            <summary>
            Ellipse entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Face">
            <summary>
            3DFace entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Hatch">
            <summary>
            Hatch entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Image">
            <summary>
            Image entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Insert">
            <summary>
            Insert entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Leader">
            <summary>
            Leader entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Line">
            <summary>
            Line entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.MLine">
            <summary>
            MLine entity (multiple parallel lines).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Point">
            <summary>
            Point entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.LwPolyline">
            <summary>
            LwPolyline entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Polyline3D">
            <summary>
            Polyline3D entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.ProxyEntity">
            <summary>
            Proxy entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Ray">
            <summary>
            Ray entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Region">
            <summary>
            Region entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Body">
            <summary>
            Body entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.SequenceEnd">
            <summary>
            Sequence end entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Shape">
            <summary>
            Shape entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Solid">
            <summary>
            Solid entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Spline">
            <summary>
            Spline entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Table">
            <summary>
            Table entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Trace">
            <summary>
            Trace entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Text">
            <summary>
            Text entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Tolerance">
            <summary>
            Tolerance entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Vertex">
            <summary>
            Vertex entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Viewport">
            <summary>
            View port entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.MText">
            <summary>
            MText (multiline text) entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Wipeout">
            <summary>
            Wipeout entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.XLine">
            <summary>
            XLine entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Solid3D">
            <summary>
            3DSOLID entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.Ole">
            <summary>
            Ole entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityTypes.IDBlockReference">
            <summary>
            ACIDBLOCKREFERENCE entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfVertex">
            <summary>
            Represents an abstract vertex base class.
            </summary>
            <remarks>
            <para>
            A vertex is always part of one of the <see cref="T:WW.Cad.Model.Entities.DxfPolylineBase"/> subclasses.
            </para>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntity">
            <summary>
            Base class for AutoCAD entities (graphical objects like lines, circles etc).
            </summary>
            <remarks>
            <para>
            The main properties of an entity are <see cref="P:WW.Cad.Model.Entities.DxfEntity.Layer"/>, <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/>, 
            <see cref="P:WW.Cad.Model.Entities.DxfEntity.LineType"/>, <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and <see cref="P:WW.Cad.Model.Entities.DxfEntity.PaperSpace"/>.
            </para>
            <para>
            An entity is either in model space or in paper space (see property <see cref="P:WW.Cad.Model.Entities.DxfEntity.PaperSpace"/>).
            By default an entity is in model space.
            A model space entity must be part of <see cref="P:WW.Cad.Model.DxfModel.Entities">DxfModel.Entities</see>,
            a paper space entity must be part of <see cref="P:WW.Cad.Model.Objects.DxfLayout.Entities">DxfLayout.Entities</see> of the paper space layout on
            which the entity is shown.
            The exception to this rule is when the entity is part of a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/>, which can
            be shown on either model or paper space, depending on if the referencing <see cref="T:WW.Cad.Model.Entities.DxfInsert"/>
            is in model or paper space.
            When showing model space (see <see cref="P:WW.Cad.Model.DxfHeader.ShowModelSpace">DxfHeader.ShowModelSpace</see>), entities in paper space are invisible.
            When showing paper space, entities in model space are first transformed to paper space
            as specified by a <see cref="T:WW.Cad.Model.Entities.DxfViewport">view port</see>. 
            Entities in paper space are not transformed.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.DxfModel.Entities"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Entities"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.Entities"/>
            <seealso cref="P:WW.Cad.Model.DxfHeader.ShowModelSpace"/>
        </member>
        <member name="T:WW.Cad.Model.DxfHandledObject">
            <summary>
            Base object with handle and <see cref="P:WW.Cad.Model.DxfHandledObject.OwnerObjectSoftReference">owner</see>.
            </summary>
            <remarks>
            From <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/> (AC1012) onward, handles are no longer optional.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.IDxfHandledObject">
            <summary>
            Represents an object with a handle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IDxfHandledObject.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IDxfHandledObject.OwnerObjectSoftReference">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IDxfHandledObject.Reference">
            <summary>
            Gets or sets the reference.
            For convenience use <see cref="M:WW.Cad.Model.DxfObjectReference.GetReference(WW.Cad.Model.IDxfHandledObject)"/> to get the reference,
            which handles <c>null</c> values more conveniently.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.IGraphCloneable">
            <summary>
            Represents a cloning interface to facilitate cloning object graphs.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IGraphCloneable.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
            <returns>Cloned object.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfHandledObject"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.#ctor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfHandledObject"/> class.
            </summary>
            <param name="ownerObjectSoftReference">The owner object soft reference.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Repair(WW.Cad.Model.DxfModelRepairer)">
            <summary>
            Attempts to repair this object if is invalid and if it's possible to repair it.
            </summary>
            <param name="model">The repairer that facilitates the repairing.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.ExecuteDeep(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Performs specified action using this instance as parameter and
            recurse into children if present.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.PrepareForWrite(WW.Cad.IO.WriteContext)">
            <summary>
            Prepares for write (called after all objects received a handle).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.SetHandleString(System.String)">
            <summary>
            Set handle.
            </summary>
            <param name="handleString">string containing hex representation of <c>ulong</c>.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.SetHandle(System.UInt64)">
            <summary>
            Set handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.SetOwnerObjectSoftReference(WW.Cad.Model.IDxfHandledObject)">
            <summary>
            Set handle to owner object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Register(WW.Cad.Model.DxfModel)">
            <summary>
            Registers this object in the context of specified model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Unregister(WW.Cad.Model.DxfModel)">
            <summary>
            Unregisters this object in the context of specified model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Parse(System.String)">
            <summary>
            Returns handle number from given handle string.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone of the same source object a new CloneContext instance has to be used.
            For cloning multiple objects once only one CloneContext is needed (as demonstrated in the example below).
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
            <returns>The cloned object.</returns>
            <example>
            Below an example is shown of how to clone entities from one <see cref="T:WW.Cad.Model.DxfModel"/> to another.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    // This class demonstrates how to clone entities from a source DxfModel to a target DxfModel.
    public class CloneContextExample {
        public static void DemonstrateEntityCloning() {
            DxfModel sourceModel = new DxfModel();
            DxfLineType lineType = new DxfLineType("DASH_DOT", 1d, -0.2d, 0d, -0.2d);
            sourceModel.LineTypes.Add(lineType);

            DxfCircle circle = new DxfCircle(Point2D.Zero, 5d);
            circle.LineType = lineType;
            sourceModel.Entities.Add(circle);

            DxfLine line = new DxfLine(Point2D.Zero, new Point2D(5d, 0d));
            line.LineType = lineType;
            sourceModel.Entities.Add(line);

            DxfModel targetModel = new DxfModel();

            // The ReferenceResolutionType.CloneMissing will result in the DASH_DOT line type created
            // above to also be cloned indirectly as a result of cloning the entities.
            CloneContext cloneContext = new CloneContext(sourceModel, targetModel, ReferenceResolutionType.CloneMissing);

            foreach(DxfEntity entity in sourceModel.Entities) {
                DxfEntity clonedEntity = (DxfEntity)entity.Clone(cloneContext);
                targetModel.Entities.Add(clonedEntity);
            }

            cloneContext.ResolveReferences();

            DxfWriter.Write("clone_source.dxf", sourceModel);
            DxfWriter.Write("clone_target.dxf", targetModel);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.RegisterClone(WW.Cad.Model.CloneContext,WW.Cad.Model.IGraphCloneable)">
            <summary>
            Registers the clone in the specified clone context.
            This is a helper method that is called by <see cref="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.AddPersistentReactor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Adds the specified persistent reactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.RemovePersistentReactor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Removes the specified persistent reactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.GetOrCreateXDicObject``1(System.String)">
            <summary>
            Gets an object from or creates and adds an object to the <see cref="P:WW.Cad.Model.DxfHandledObject.ExtensionDictionary">extension dictionary</see>.
            If the extension dictionary was <c>null</c> it is created.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Gets the DWG object type constant.
            </summary>
            <param name="w">The writer.</param>
            <returns>Object type constant, possibly depending on version.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.WriteFull(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Writes common handled object data.
            For object size fields, zeroes are written, that need to be corrected
            afterwards when the object size is known.
            Use method <see cref="!:WriteObjectSizes"/> to write these object sizes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Write(WW.Cad.IO.Dwg.DwgObjectWriter,System.Int16)">
            <summary>
            Writes common handled object data.
            For object size fields, zeroes are written, that need to be corrected
            afterwards when the object size is known.
            Use method <see cref="!:WriteObjectSizes"/> to write these object sizes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.WriteCommonHandledObjectReferences(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            At the moment only the bits of whether the references are present are written.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.ParseGroup(WW.Cad.IO.DxfReader,WW.Cad.IO.Builders.DxfHandledObjectBuilder)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.Compose(WW.Cad.Model.DxfModel)">
            <summary>
            This method is called after reading the raw objects from file.
            Some files with a certain version contain additional information from later versions, so
            older AutoCAD files can still read the simpler objects, but later AutoCAD files can
            "recompose" the original full objects from the simpler objects + recompose data.
            The recompose data is usually present in the form of xrecords in the extension dictionary
            of an object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObject.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObject.OwnerObjectSoftReference">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObject.ExtensionDictionary">
            <summary>
            Gets or sets the extension dictionary.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObject.Model">
            <summary>
            Gets the model (the root object).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObject.ExtendedDataCollection">
            <summary>
            Gets the extended data keyed collection.
            The collection key is the application name string.
            </summary>
            <remarks>
            <para>
            Note that the application name used in the extended data must be present in
            <see cref="P:WW.Cad.Model.DxfModel.AppIds">DxfModel.AppIds</see> or the written DXF file won't be valid!
            </para>
            <para>
            See also <see cref="T:WW.Cad.Model.DxfExtendedData"/> for more details.
            </para>
            <para>
            Note that in version <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/> files non-entities cannot contain extended data.</para>
            </remarks>
            <example>
            An example of how to write/read a DXF file containing an extended data.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test {
    public class DxfExtendedDataTest {
        public void TestWriteRead() {
            // Create and write a model with extended data.
            {
                DxfModel model = new DxfModel(DxfVersion.Dxf15);

                // App id must be known before it can be used in extended data.
                DxfAppId appIdPeUrl = new DxfAppId("PE_URL");
                model.AppIds.Add(appIdPeUrl);

                DxfLine line = new DxfLine(new Point2D(1d, 0d), new Point2D(3d, 2d));
                DxfExtendedData extendedData = new DxfExtendedData(appIdPeUrl);
                extendedData.Values.Add(new DxfExtendedData.String("line1.html"));
                extendedData.Values.Add(new DxfExtendedData.String(string.Empty));
                StringBuilder longString = new StringBuilder(2000);
                for (int i = 0; i &lt; 200; i++) {
                    longString.Append("0123456789");
                }
                extendedData.Values.Add(new DxfExtendedData.String(longString.ToString()));
                extendedData.Values.Add(new DxfExtendedData.String("Another string."));
                line.ExtendedDataCollection.Add(extendedData);
                model.Entities.Add(line);
                DxfWriter.Write("ExtendedData Example.dxf", model, false);
                DwgWriter.Write("ExtendedDataTest.dwg", model);
            }

            Console.WriteLine("Read from DXF");

            // Read a model with extended data.
            {
                DxfModel model = DxfReader.Read("ExtendedData Example.dxf");
                DxfAppId appIdPeUrl = model.AppIds["PE_URL"];
                foreach (DxfEntity entity in model.Entities) {
                    DxfExtendedData extendedData = entity.ExtendedDataCollection[appIdPeUrl];
                    if (extendedData != null) {
                        foreach (IExtendedDataValue value in extendedData.Values) {
                            Console.WriteLine(value.ToString());
                        }
                    }
                }
            }

            Console.WriteLine("Read from DWG");

            // Read a model with extended data.
            {
                DxfModel model = DwgReader.Read("ExtendedDataTest.dwg");
                DxfAppId appIdPeUrl = model.AppIds["PE_URL"];
                foreach (DxfEntity entity in model.Entities) {
                    DxfExtendedData extendedData = entity.ExtendedDataCollection[appIdPeUrl];
                    if (extendedData != null) {
                        foreach (IExtendedDataValue value in extendedData.Values) {
                            Console.WriteLine(value.ToString());
                        }
                    }
                }
            }
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.DxfExtendedData"/>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObject.PersistentReactors">
            <summary>
            Gets the persistent reactors.
            </summary>
            <remarks>
            A persistent reactor is an object that can react to an event, analogous to
            an event handler in .NET.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObject.HasDataStoreData">
            <summary>
            Gets or sets a value indicating whether this instance has data store data.
            </summary>
            <remarks>
            This property was introduced in version <see cref="F:WW.Cad.Model.DxfVersion.Dxf27"/>.
            </remarks>
            <seealso cref="!:DataStore"/>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObject.Reference">
            <summary>
            Gets or sets the reference.
            For convenience use <see cref="M:WW.Cad.Model.DxfObjectReference.GetReference(WW.Cad.Model.IDxfHandledObject)"/> to get the reference,
            which handles <c>null</c> values more conveniently.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfHandledObject.Util">
            <summary>
            Put this method in a separate class, because
            the overload with DxfHandledObject.SetHandle(ulong handle) with the same parameter causes
            a managed C++ compiler error otherwise:
            error C2686: cannot overload static and non-static member functions with the same parameter types.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfHandledObject.LateComposer">
            <summary>
            Helper class for later calling of Compose after a clone is created.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ICloneBuilder">
            <summary>
            Represents a clone builder interface (typically use for resolving references after all objects have been cloned).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ICloneBuilder.ResolveReferences(WW.Cad.Model.CloneContext)">
            <summary>
            Resolves references for the clone. To be called after all objects have been cloned.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObject.LateComposer.#ctor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">The object for later compose.</param>
        </member>
        <member name="T:WW.Cad.Model.Entities.IPlotPropertyOwner">
            <summary>
            Owner of plot properties. This interface gives access to all properties influencing plotting.
            Basically all entities implement this interface. 
            </summary>
            <remarks>
            <para>
            Please note that plot style support is not finished, so this interface is subject to change.
            </para>
            <para>
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.IPlotPropertyOwner.GetColor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <returns>The color (with <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> applied).</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.IPlotPropertyOwner.GetEntityColor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <returns>The entity color.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.IPlotPropertyOwner.GetAlpha(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IPlotPropertyOwner.GetLineType(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> of this entity depending 
            on the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> and <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> context.
            </summary>
            <remarks>
            <seealso cref="T:WW.Cad.Model.Tables.DxfLineType"/>
            </remarks>
            <returns>The line type.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.IPlotPropertyOwner.GetLineWeight(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the effective line weight of this entity depending 
            on the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> and <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> context.
            </summary>
            <remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/>
            </remarks>
            <returns>The effective line weight in 100th of mm.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.IPlotPropertyOwner.GetLayer(WW.Cad.Drawing.DrawContext)">
            <summary>
            Get the layer this entity is in, using the given drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.#ctor(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as a wire frame.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as a wire frame.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Draw(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Draw(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.InPaperSpace(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Gets whether this entity is in paper space when in given parent entity context
            (should be either <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> or <see cref="T:WW.Cad.Model.Entities.DxfDimension"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetLayer(WW.Cad.Drawing.DrawContext)">
            <summary>
            Get the layer this entity is in, using the given drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetColor(WW.Cad.Model.DxfIndexedColorSet)">
            <summary>
            Gets the entity's effective color based on the entity's <see cref="P:WW.Cad.Model.Entities.DxfEntity.DxfColor"/> and 
            <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/>.
            The <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> is not applied.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetColor">
            <summary>
            Gets the entity's effective color based on the entity's <see cref="P:WW.Cad.Model.Entities.DxfEntity.DxfColor"/> and 
            <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/>.
            The <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> is not applied.
            </summary>
            <remarks>
            Obsolete: use <see cref="M:WW.Cad.Model.Entities.DxfEntity.GetColor(WW.Cad.Model.DxfIndexedColorSet)"/> instead.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetColor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <returns>The color (with <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> applied).</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetEntityColor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <returns>The entity color.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetAlpha(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetColor(WW.Cad.Model.DxfIndexedColorSet,WW.Cad.Model.Color,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Objects.DxfColor,WW.Cad.Model.Tables.DxfLayer)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <param name="indexedColors">Indexed color mapping.</param>
            <param name="color">Entity's color.</param>
            <param name="byBlockColor">Color as defined by insertion.</param>
            <param name="byBlockDxfColor">DxfColor as defined by insertion.</param>
            <param name="layer">Effective layer.</param>
            <returns>The ARGB color.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetColor(WW.Cad.Model.Color,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Objects.DxfColor,WW.Cad.Model.Tables.DxfLayer)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <remarks>
            Obsolete: There is no one fix indexed color mapping, use 
            <see cref="M:WW.Cad.Model.Entities.DxfEntity.GetColor(WW.Cad.Model.DxfIndexedColorSet,WW.Cad.Model.Color,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Objects.DxfColor,WW.Cad.Model.Tables.DxfLayer)"/>
            instead.
            </remarks>
            <param name="color">Entity's color.</param>
            <param name="byBlockColor">Color as defined by insertion.</param>
            <param name="byBlockDxfColor">DxfColor as defined by insertion.</param>
            <param name="layer">Effective layer.</param>
            <returns>The ARGB color.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetLineType(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> of this entity depending 
            on the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> and <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> context.
            </summary>
            <remarks>
            <seealso cref="T:WW.Cad.Model.Tables.DxfLineType"/>
            </remarks>
            <returns>The line type.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetLineWeight(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the effective line weight of this entity depending 
            on the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> and <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> context.
            </summary>
            <remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/>
            </remarks>
            <returns>The effective line weight in 100th of mm.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
            <remarks>
            Depending on the entity not all transformations can be possibly. E.g. a non-uniform 
            scaling of a circle would create an ellipse, thereby changing the entity type.
            </remarks>
            <param name="config">Transformation  configuration.</param>
            <param name="matrix">Transformation matrix.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
            <remarks>
            <para>
            Depending on the entity not all transformations can be possibly. E.g. a non-uniform 
            scaling of a circle would create an ellipse, thereby changing the entity type.
            </para>
            <para>
            Overriding methods must add the action to the undoStack only if it succeeded.
            If it succeeded partially (in case of child actions), the undoStack should contain the successful child actions
            that succeeded, so they can be rolled back.
            </para>
            </remarks>
            <param name="config">Transformation  configuration.</param>
            <param name="matrix">Transformation matrix.</param>
            <param name="undoGroup">Stack for adding an undo operation for the changes done by the transforamtion.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates a create interactor.
            This functionality is works in progress and is not supported yet for all entities.
            Returns <c>null</c> if not supported.
            </summary>
            <param name="transaction">the temporary transaction for handling the temporary commands during the interaction</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            This functionality is works in progress and is not supported yet for all entities.
            Returns <c>null</c> if not supported.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetEditInteractorDescriptors">
            <summary>
            Gets the edit interactor descriptors.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CreateEditInteractor(System.Int32,WW.Actions.CommandInvoker)">
            <summary>
            Creates the edit interactor with specified index.
            The index should match the interactor descriptor index as returned by <see cref="M:WW.Cad.Model.Entities.DxfEntity.GetEditInteractorDescriptors"/>
            Returns <c>null</c> if not supported or no edit interactor at given index could be created.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified entity using the specified clone context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.IsEntityVisibleInContext(WW.Cad.Drawing.DrawContext,System.Boolean)">
            <summary>
            Is this entity visible in the given draw context.
            </summary>
            <param name="context">The draw context.</param>
            <param name="useLayerEnabled">if set to <c>true</c> use layer enabled to determine visibility.</param>
            <returns>
            	<c>true</c> if the entity is visible; <c>false</c> if it is invisible
            </returns>
            <remarks>
            This basically checks for layer visibility and uses
            the <see cref="M:WW.Cad.Drawing.DrawContext.IsVisible(WW.Cad.Model.Entities.DxfEntity)"/> method with this entity as parameter.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.ReadAcEntity(WW.Cad.IO.DxfReader,WW.Cad.IO.Builders.DxfEntityBuilder)">
            <summary>
            Read entity.
            </summary>
            <remarks>
            Precondition: expected to be at start of AcClasses.DxfEntity.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.ParseEntityGroups(WW.Cad.IO.DxfReader,WW.Cad.IO.Builders.DxfEntityBuilder)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.GetIsPaperSpace(System.Boolean)">
            <summary>
            Gets whether this entity is a paper space entity.
            Normally this is determined by the block it is in, with a 
            few exceptions (DxfBlockBegin, DxfViewport).
            Don't remember why the behavior is special for these objects or why.
            Only used by DXF at the moment?
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Repair(WW.Cad.Model.DxfModelRepairer)">
            <summary>
            Repair.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.SetDxfColor(WW.Cad.Model.Objects.DxfColor)">
            <summary>
            Sets the named color without affecting the color's color type property.
            (Might remove this later, no longer very useful since property ColorSource is gone).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.IsVisibleOnLayer(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Tables.DxfLayer,System.Boolean)">
            <summary>
            Determines whether this entity is visible on specified layer in the specified context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CopyBasicPropertiesFrom(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Copy the basic properties from another entity.
            </summary>
            <param name="from">Entity to copy from.</param>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.Layer">
            <summary>
            Layer in which entity is.
            </summary>
            <remarks>
            <para>
            Might be <c>null</c>. Use <see cref="M:WW.Cad.Model.DxfModel.GetLayer(WW.Cad.Model.Entities.DxfEntity)"/> to get a non-null layer.
            </para>
            <para>
            When the layer is the <see cref="P:WW.Cad.Model.DxfModel.ZeroLayer"/>, and the entity is in a block/insert,
            then the parent's layer is inherited. See also <see cref="M:WW.Cad.Model.Entities.DxfEntity.GetLayer(WW.Cad.Drawing.DrawContext)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.Color">
            <summary>
            Gets or sets the color of this entity.
            See also <see cref="T:WW.Cad.Model.Entities.EntityColors"/> for some very common entity colors.
            </summary>
            <remarks>
            <para>
            The default color is by layer (<see cref="F:WW.Cad.Model.Entities.EntityColors.ByLayer"/>).
            </para>
            <para>
            This property is not used when property <see cref="P:WW.Cad.Model.Entities.DxfEntity.DxfColor"/> is set.
            </para>
            </remarks>
            <example>
            Below is an example of how to create entities, assign a color to them, and extract the RGB color value.
            <code lang="cs">
using System;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class EntityColorExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            // The "by layer" color depends on the layer color the entity is on (default is the ZERO layer).
            model.Entities.Add(new DxfLine(EntityColors.ByLayer, new Point2D(0, 0), new Point2D(2, 0)));
            // This is one of the ACI colors. ACI stands for AutoCAD Color Index
            model.Entities.Add(new DxfLine(EntityColors.Green, new Point2D(0, 1), new Point2D(2, 1)));
            // This is an RGB color.
            model.Entities.Add(new DxfLine(EntityColor.CreateFromRgb(0xff, 0xa0, 0xa0), new Point2D(0, 2), new Point2D(2, 2)));

            foreach (DxfEntity entity in model.Entities) {
                // To get the ARGB value of a color, a specific color set must be provided which
                // is used to lookup ACI colors (ACI stands for AutoCAD Color Index).
                // There are several types of colors, of which ACI colors is one.
                //
                // For more details see types:
                // WW.Cad.Model.Color,
                // WW.Cad.Model.Entities.EntityColor,
                // WW.Cad.Model.ColorType
                int argb = entity.Color.ToArgb(DxfIndexedColorSet.AcadClassicIndexedColors);
                Console.WriteLine("Argb: {0}", argb);
            }
        }
    }
}
    </code>
            </example>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.DxfColor"/>
            <seealso cref="T:WW.Cad.Model.Entities.EntityColors"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.Transparency">
            <summary>
            Gets or sets the transparency. 
            The default value is <see cref="F:WW.Cad.Model.Transparency.ByLayer"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.DxfColor">
            <summary>
            Gets or sets the named color from a color book.
            </summary>
            <remarks>
            <para>
            Set this property to make use of named colors from a color book.
            When set the color must also be present in <see cref="P:WW.Cad.Model.DxfModel.Colors"/>.
            If <c>null</c> then property <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/> is effective.
            </para>
            <para>
            The default value is <c>null</c>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.DxfColor"/>
            <example>
            The example below demonstrates the use of the DxfColor class.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Math;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;

namespace WW.Cad.Test.Examples {
    public class DxfColorExample {
        public void ColorExample() {
            DxfModel model = new DxfModel();

            DxfColor color = new DxfColor(
                Color.CreateFromRgb(
                    217, 122, 120,
                    "PANTONE(R) Paints + Int.",
                    "PANTONE 16-1624 TPX"
                )
            );
            model.Colors.Add(color);

            DxfLine line = new DxfLine(new Point2D(0, 0), new Point2D(30, 15));
            line.DxfColor = color;
            model.Entities.Add(line);

            DxfWriter.Write("Color example.dxf", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.LineType">
            <summary>
            Gets or sets the line type of this entity. 
            </summary>
            <remarks>
            See also method <see cref="M:WW.Cad.Model.Entities.DxfEntity.GetLineType(WW.Cad.Drawing.DrawContext)"/> for getting the line type in a specific 
            <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </remarks>
            <example>
            Below is an example of how to a create line type and apply it to a circle.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class DxfLineTypeExample {
        public void DemonstrateDxfLineTypes() {
            DxfModel model = new DxfModel(DxfVersion.Dxf15);

            // A dash length of 0.5, followed by a space of 0.3.
            DxfLineType dashedLineType = new DxfLineType("Dashed", 0.5d, -0.3d);
            model.LineTypes.Add(dashedLineType);

            // A dash length of 0.5, followed by a space of 0.3, 
            // followed by a dot, followed by a space of 0.2.
            DxfLineType dashDotLineType = new DxfLineType("Dash dot", 0.5d, -0.3d, 0d, -0.2d);
            model.LineTypes.Add(dashDotLineType);

            // A complex line type.
            DxfLineType complexLineType = new DxfLineType("-- D - S");
            {
                DxfLineType.Element element = new DxfLineType.Element();
                element.Length = 2d;
                complexLineType.Elements.Add(element);
            }
            {
                DxfLineType.Element element = new DxfLineType.Element();
                element.Text = "D";
                element.IsText = true;
                element.TextStyle = model.DefaultTextStyle;
                complexLineType.Elements.Add(element);
            }
            {
                DxfLineType.Element element = new DxfLineType.Element();
                element.Length = 1d;
                complexLineType.Elements.Add(element);
            }
            {
                DxfLineType.Element element = new DxfLineType.Element();
                element.Text = "S";
                element.IsText = true;
                element.TextStyle = model.DefaultTextStyle;
                complexLineType.Elements.Add(element);
            }
            model.LineTypes.Add(complexLineType);

            DxfCircle circle1 = new DxfCircle(new Point2D(0d, 0d), 10d);
            circle1.LineType = dashedLineType;
            model.Entities.Add(circle1);

            DxfCircle circle2 = new DxfCircle(new Point2D(15d, 0d), 10d);
            circle2.LineType = dashDotLineType;
            model.Entities.Add(circle2);

            DxfLine line = new DxfLine();
            line.Start = new Point3D(-10d, -2d, 0d);
            line.End = new Point3D(30d, -2d, 0d);
            line.LineType = complexLineType;
            model.Entities.Add(line);

            DxfWriter.Write("LineType Example.dxf", model);
            DwgWriter.Write("LineType Example.dwg", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.LineWeight">
            <summary>
            Gets or sets the line weight (default value is <see cref="F:WW.Cad.Model.LineWeight.ByLayer"/>).
            </summary>
            <remarks>
            <para>
            A line weight in model space translates to a width in pixels, regardless of zoom level.
            In paper space the line weight translates to the exact physical width in mm.
            </para>
            <para>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>value</term>
            <description>meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WW.Cad.Model.LineWeight.Standard"/></term>
            <description>Standard</description>
            </item>
            <item>
            <term><see cref="F:WW.Cad.Model.LineWeight.ByLayer"/></term>
            <description>By layer</description>
            </item>
            <item>
            <term><see cref="F:WW.Cad.Model.LineWeight.ByBlock"/></term>
            <description>By block</description>
            </item>
            <item>
            <term>0-211</term>
            <description>an integer representing 100th of mm, must be one of the following values:
            0, 5, 9, 13, 15, 18, 20, 25, 30, 35, 40, 50, 53, 60, 70, 80, 90, 100, 106, 120, 140, 158, 200, 211.
            </description>
            </item>
            </list>
            </para>
            <para>
            For model space the whether line weight is displayed is controlled by property <see cref="P:WW.Cad.Model.DxfHeader.DisplayLineWeight"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.LineTypeScale">
            <summary>
            Line type scale (default 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.Visible">
            <summary>
            Gets or sets whether the entity is visible.
            </summary>
            <remarks>
            Default is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.PaperSpace">
            <summary>
            Gets whether the entity is in paper space. <see langword="false"/> if in model space.
            </summary>
            <remarks>
            <para>
            Default is <see langword="false"/>.
            CadLib sets this value depending on if the entity is added to a model or paper space <see cref="T:WW.Cad.Model.Objects.DxfLayout"/>
            </para>
            <para>
            When showing model space (see also <see cref="P:WW.Cad.Model.DxfHeader.ShowModelSpace"/>), entities in paper space are invisible.
            </para>
            <para>
            When showing paper space, entities in model space are first transformed to paper space
            as specified by a <see cref="T:WW.Cad.Model.Entities.DxfViewport">view port</see>. 
            Entities in paper space are not transformed.
            </para>
            <para>
            When an entity is part of a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> then this should always be false.
            Whether the entity is in paper space depends then on whether the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> 
            referencing the block is in paper space (see also <see cref="M:WW.Cad.Model.Entities.DxfEntity.InPaperSpace(WW.Cad.Model.Entities.DxfEntity)"/>).
            </para>
            </remarks>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEntity.InPaperSpace(WW.Cad.Model.Entities.DxfEntity)"/>
            <seealso cref="P:WW.Cad.Model.DxfHeader.ShowModelSpace"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfViewport"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfLayout"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.Transform">
            <summary>
            Gets the transform to transform coordinates from the object coordinate system (OCS) to the world coordinate system (WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntity.EditInteractor">
            <summary>
            A basic entity edit interactor that works on an entity's control points.
            </summary>
            <remarks>
            <para>
            A user can move a control point by first clicking once on a control point, and then
            clicking a second time on the control point's new position.
            </para>
            <para>
            The entity control points are expected to be defined in the object coordinate system (OCS).
            The translation to the world coordinate system (WCS) and back happens using the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transform"/>.
            </para>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntity.Interactor">
            <summary>
            Represents a base interactor for creating/editing an <see cref="T:WW.Cad.Model.Entities.DxfEntity">entity</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.#ctor(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity.Interactor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.TryCommit">
            <summary>
            Tries to commit the interaction. Returns whether the interaction was committed.
            This default implementation is empty and returns <c>false</c>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.Cancel">
            <summary>
            Cancels the interactions.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.GetWcsPosition(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Gets the WCS, defined in the world coordinate system (WCS).
            The position is processed by <see cref="M:WW.Cad.Model.Entities.DxfEntity.Interactor.ProcessWcsPosition(WW.Actions.InteractionContext,WW.Math.Point3D)"/> before it is returned.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.CreateWinFormsDrawable(WW.Actions.InteractionContext,System.Windows.Forms.Control)">
            <summary>
            Creates a win forms drawables for this interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.ProcessWcsPosition(WW.Actions.InteractionContext,WW.Math.Point3D)">
            <summary>
            Processes the specified position, defined in the world coordinate system (WCS).
            This default implementation just returns the value as is.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.OnEntityChanged(WW.Cad.Model.Entities.EntityEventArgs)">
            <summary>
            Raises the <see cref="E:EntityChanged"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.UpdateEntityPostAction">
            <summary>
            Perform an action after the entity's properties have been updated.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfEntity.Interactor.EntityChanged">
            <summary>
            Occurs when the entity changed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.Interactor.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.Interactor.ControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntity.Interactor.WinFormsDrawable">
            <summary>
            A drawable for drawing the edit handles for an entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.Interactor.WinFormsDrawable.#ctor(WW.Cad.Model.Entities.DxfEntity.Interactor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity.Interactor.WinFormsDrawable"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.Interactor.WinFormsDrawable.Interactor">
            <summary>
            Gets the interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.EditInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity.EditInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.EditInteractor.Cancel">
            <summary>
            Cancels the interactions.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.EditInteractor.CreateDoAction(System.Int32,WW.Math.Point3D)">
            <summary>
            Creates the do action.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.EditInteractor.CreateUndoAction(System.Int32,WW.Math.Point3D)">
            <summary>
            Creates the undo action.
            Overriding methods can e.g. use this to restore a complete state of the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.EditInteractor.Deactivate">
            <summary>
            Deactives this interactor.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.EditInteractor.ControlPointValueAtFirstMouseDown">
            <summary>
            Gets the control point value at mouse down.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.EditInteractor.ClickCount">
            <summary>
            Gets the click count.
            This is the number of subsequent single clicks (so double clicking does not result in click count being two).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.EditInteractor.ControlPointIndexAtFirstMouseDown">
            <summary>
            Gets the control point index at mouse down.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.EditInteractor.ControlPointIndexAtMousePosition">
            <summary>
            Gets the control point index at the mouse position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.EditInteractor.UserHint">
            <summary>
            Gets the hint to the user about what input the interactor is expecting next.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor">
            <summary>
            A default interactor for creating an entity based on its control points.
            </summary>
            <remarks>
            Control points are created or set until all entity's control points are defined. 
            At that point the <see cref="P:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.Transaction"/> is committed.
            When the user cancels the entity creation, the transaction is rolled back.
            The <see cref="P:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.Transaction"/> can be used to undo/redo the setting of individual control points,
            but once the transaction is committed, these individual commands are no longer of interest,
            and just one command can go unto the undo stack for adding the completed entity.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntity.CreateInteractor">
            <summary>
            Represents an interactor for creating an entity.
            </summary>
            <remarks>
            <para>
            The entity control points are expected to be defined in the object coordinate system (OCS).
            The translation to the world coordinate system (WCS) and back happens using the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transform"/>.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CreateInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity.CreateInteractor"/> class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntity.CreateInteractor.WinFormsDrawable">
            <summary>
            Represents a win forms drawable for the <see cref="T:WW.Cad.Model.Entities.DxfEntity.CreateInteractor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CreateInteractor.WinFormsDrawable.#ctor(WW.Cad.Model.Entities.DxfEntity.Interactor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity.CreateInteractor.WinFormsDrawable"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CreateInteractor.WinFormsDrawable.Draw(System.Windows.Forms.PaintEventArgs,WW.Drawing.GraphicsHelper,WW.Actions.InteractionContext)">
            <summary>
            Draws this drawable.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.CreateInteractor.WinFormsDrawable.GetCursor">
            <summary>
            Gets the cursor. Returns <c>null</c> if the cursor should remain unchanged.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity.CreateInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Actions.ITransaction,WW.Cad.Actions.IControlPointCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity.CreateInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.TryCommit">
            <summary>
            Tries to commit the interaction. Returns whether the interaction was committed.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.Cancel">
            <summary>
            Tries to cancel the interaction.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.Deactivate">
            <summary>
            Deactives this interactor.
            Rolls back the transaction if it was open.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is pressed.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when the mouse moves.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Sets the current control point's position and move on to the next control point.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.TransactionOnCompleted(System.Object,System.EventArgs)">
            <summary>
            Automatically deactivate this interactor when the transaction is completed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.ControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.ControlPointIndex">
            <summary>
            Gets the control point index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.ControlPointTemplate">
            <summary>
            Gets the control point template that is used for e.g. polylines where any arbitrary number of control points can be added.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.ControlPointCommitIndex">
            <summary>
            Gets the control point index at which the entity creation is committed.
            By default this is the control point count - 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.Transaction">
            <summary>
            Gets the transaction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntity.DefaultCreateInteractor.UserHint">
            <summary>
            Gets the hint to the user about what input the interactor is expecting next.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntity.DefaultEditInteractor">
            <summary>
            Default edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntity.DefaultEditInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntity.DefaultEditInteractor"/> class.
            </summary>
            <param name="entity">Entity which is edited.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (throws exception).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (throws exception).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfAppIdCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfAppId"/> keyed collection (application id name can be used as indexer parameter).
            </summary>
            <remarks>
            The key is the case insensitive app id name.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2">
            <summary>
            Basic collection holding keys to a value of type <see cref="T:WW.Cad.Model.DxfHandledObject"/>.
            </summary>
            <remarks>
            The purpose of this class is to provide the means for deep copy construction
            and deep copy add (see <see cref="M:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.AddCopiesFrom(WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection{`0,`1},WW.Cad.Model.CloneContext)"/>). 
            </remarks>
            <typeparam name="TKey">generic key</typeparam>
            <typeparam name="TItem">generic type extending <see cref="T:WW.Cad.Model.DxfHandledObject"/></typeparam>
        </member>
        <member name="T:WW.Cad.Model.KeyedDxfHandledObjectCollection`2">
            <summary>
            Represents a keyed collection containing <see cref="T:WW.Cad.Model.DxfHandledObject"/> items.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.KeyedDxfHandledObjectCollection`2"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.KeyedDxfHandledObjectCollection`2"/> class.
            </summary>
            <param name="comparer">key comparer</param>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.KeyedDxfHandledObjectCollection`2"/> class.
            </summary>
            <param name="comparer">key comparer</param>
            <param name="dictionaryCreationThreshold">dictionary creation threshold</param>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.Contains(`0)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.IndexOf(`1)">
            <summary>
            Searches for the specified item and returns the index of the first occurrence within the collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.Insert(System.Int32,`1)">
            <summary>
            Inserts an element at the specified index. 
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.Remove(`0)">
            <summary>
            Removes the element with the specified key.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the item with the specified key.
            Returns <c>false</c> if key not found.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.OnInserted(System.Int32,`1)">
            <summary>
            Called when an item is inserted.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.OnSet(System.Int32,`1,`1)">
            <summary>
            Called when an item is set.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.OnRemoved(System.Int32,`1)">
            <summary>
            Called when an item is removed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The key is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">thrown when element with specified key is not found.</exception>
        </member>
        <member name="P:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.Keys">
            <summary>
            Get a collection of the keys of this KeyedCollection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.DxfObjectReferenceKeyedCollection.InsertItem(System.Int32,WW.Cad.Model.DxfObjectReference)">
            <summary>
            Inserts an element into the <see cref="!:ActiveKeyedCollection&lt;TKey, TItem&gt;"/> at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.DxfObjectReferenceKeyedCollection.SetItem(System.Int32,WW.Cad.Model.DxfObjectReference)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.DxfObjectReferenceKeyedCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.DxfObjectReferenceKeyedCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="!:ActiveKeyedCollection&lt;TKey, TItem&gt;"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.KeyedDxfHandledObjectCollection`2.DxfObjectReferenceKeyedCollection.Keys">
            <summary>
            Get a collection of the keys of this KeyedCollection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor which allows to set a comparer for the keys.
            </summary>
            <param name="comparer">key comparer</param>
        </member>
        <member name="M:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Constructor allowing to set a key comparer and a dictionary creation threshold.
            </summary>
            <param name="comparer">key comparer</param>
            <param name="dictionaryCreationThreshold">dictionary creation threshold</param>
        </member>
        <member name="M:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.AddCopiesFrom(WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection{`0,`1},WW.Cad.Model.CloneContext)">
            <summary>
            Add all elements from another collection while cloning the values.
            </summary>
            <param name="from">collection to add from</param>
            <param name="cloneContext">
            clone context used for cloning, expected to have a <see cref="P:WW.Cad.Model.CloneContext.ReferenceResolutionType"/> of
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.CloneMissing"/>
            </param>
        </member>
        <member name="M:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.OnInserted(System.Int32,`1)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.Inserted"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.OnSet(System.Int32,`1,`1)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.Set"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.OnRemoved(System.Int32,`1)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveKeyedDxfHandledObjectCollection`2.Removed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppIdCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfAppIdCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppIdCollection.GetKeyForItem(WW.Cad.Model.Tables.DxfAppId)">
            <summary>
            Gets the key for specified appId.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfAppId">
            <summary>
            Represents an application ID.
            </summary>
            <remarks>
            <para>
            Application ID's are contained in <see cref="P:WW.Cad.Model.DxfModel.AppIds"/>.
            AutoCAD uses the "ACAD" application ID (use constant <see cref="F:WW.Cad.Model.Tables.DxfAppId.Names.Acad"/>).
            </para>
            <para>
            <see cref="T:WW.Cad.Model.DxfExtendedData">Extended data</see> for example makes use of application ID's. 
            See also <see cref="P:WW.Cad.Model.DxfHandledObject.ExtendedDataCollection"/> where the application ID is the
            key for extended data.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.DxfModel.AppIds"/>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfTableRecord">
            <summary>
            Represents an abstract table record.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.ITableRecord">
            <summary>
            Represents a table record interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecord.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.ITableRecord.Name">
            <summary>
            Gets or sets the table record name.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.DxfHandledObject.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.ITableRecord.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this table record is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.ITableRecord.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this table record is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.ITableRecord.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this table record is a referenced by at 
            least one entity in the drawing.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTableRecord.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTableRecord.Name">
            <summary>
            Gets or sets the table record name.
            </summary>
            <value></value>
            <remarks>
            	<para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            	<para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter,
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.DxfHandledObject.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTableRecord.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this dimension style is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTableRecord.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this table record is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTableRecord.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this table record is a referenced by at 
            least one entity in the drawing.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfAppId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfAppId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppId.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppId.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the application id.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppId.ToString">
            <summary>
            String representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppId.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfAppId.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified app ID object in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfAppId.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.Tables.DxfAppId.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfAppId.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this application ID is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfAppId.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this application ID is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfAppId.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this application ID is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfAppId.Names">
            <summary>
            This contains some standard application ID names.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfAppId.Names.Acad">
            <summary>
            The AutoCAD application ID name.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfAppId.Names.MLeaderVer">
            <summary>
            The MLEADERVER application ID name.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfAppId.Names.AcCmTransparency">
            <summary>
            The application ID name AcCmTransparency.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ReferenceResolutionType">
            <summary>
            How to handle missing referenced objects when cloning objects
            from one <see cref="T:WW.Cad.Model.DxfModel"/> to another.
            </summary>
            <remarks>
            E.g. a <see cref="T:WW.Cad.Model.Entities.DxfText"/> entity references a <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/>
            with name "X" that is not yet present in the target model where the entity
            is cloned to. 
            In that case three options are available to resolve this:
            <list type="bullet">
                <item>
                    <description>
                        Ignore the missing reference and use the default of
                        the target model.
                    </description>
                </item>
                <item>
                    <description>
                        Clone the referenced objects, too.
                    </description>
                </item>
                <item>
                    <description>
                        Throw an exception when a reference is missing.
                    </description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.ReferenceResolutionType.IgnoreMissing">
            <summary>
            Ignore missing reference.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ReferenceResolutionType.CloneMissing">
            <summary>
            Clone missing reference.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing">
            <summary>
            Throw an exception when a reference is missing.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfPlaceHolder">
            <summary>
            Place holder object.
            </summary>
            <remarks>
            This object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15">release 15</see>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfObject">
            <summary>
            Base object for objects in the DXF OBJECTS section. 
            An object have no graphical or geometrical meaning.
            </summary>
            <remarks>
            Objects are similar to <see cref="T:WW.Cad.Model.Entities.DxfEntity">entities</see>, 
            except that they have no graphical or
            geometric meaning. All objects that are not entities 
            (namespace <see cref="N:WW.Cad.Model.Entities"/> or symbol table records
            or symbol tables (namespace <see cref="N:WW.Cad.Model.Tables"/>) are stored in this section.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfObject.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfObject.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.</returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfObject.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfObject.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlaceHolder.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlaceHolder.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlaceHolder.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlaceHolder.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlaceHolder.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.INamedObject">
            <summary>
            Named object interface.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.INamedObject.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.AbstractBasicTextMetrics">
            <summary>
            Base class for text metrics, containing basic settings.
            It takes care of transforming the results to match a certain
            <see cref="T:WW.Cad.Model.Text.TextBlockSettings"/>.
            </summary>
            <remarks>
            Extending classes only need to define the metrics for canonical texts,
            i.e. texts with an ascent size of <c>1</c> and no specialities like slant
            or aspect ratio. But they still have to take care of the char spacing factor
            (<see cref="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.CharSpacingFactor"/> when calculating their metrics.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Text.ITextMetrics">
            <summary>
            Interface for a provider of text metrics.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextMetrics.GetBounds(System.String,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounds of some text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <param name="whiteSpaceHandling">how to handle white space</param>
            <returns>bounds if the text was written at position 0,0</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextMetrics.GetAdvance(System.String,System.Collections.Generic.IList{WW.Math.Vector2D})">
            <summary>
            Get the advance of a text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <param name="characterAdvances">Optional: the character advances.</param>
            <returns>
            advance vector
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextMetrics.FontHeight">
            <summary>
            Get the font height of this metrics.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextMetrics.Ascent">
            <summary>
            Get the ascent of this metrics.
            </summary>
            <remarks>The ascent is the normal extent above the baseline</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextMetrics.Descent">
            <summary>
            Get the descent of this metrics.
            </summary>
            <remarks>The descent is the normal extent below the baseline</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextMetrics.LineFeedAdvance">
            <summary>
            Get the advance of a line feed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextMetrics.CharTransformation">
            <summary>
            Get the basic transformation used to scale each character of the canonical font so size, aspect ratio etc are correct.
            </summary>
            <remarks>Note that additional inter char spacing may add another factor, <see cref="P:WW.Cad.Model.Text.ITextMetrics.CharSpacingFactor"/></remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextMetrics.CharSpacingFactor">
            <summary>
            Get the character spacing factor. 
            </summary>
            <remarks>
            A factor not equal to <c>1</c> will add (if greater) or reduce (if less) the interchar spacing.
            Expect something between <c>0.75</c> and <c>4</c>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextMetrics.SystemFontHeight">
            <summary>
            Get the height of the associated system font.
            If there is no associated system font this returns the same as <see cref="P:WW.Cad.Model.Text.ITextMetrics.FontHeight"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextMetrics.IsVertical">
            <summary>
            Is the text running vertically?
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.AbstractBasicTextMetrics.LineFeedFactor">
            <summary>
            Factor used to calculate line feed advance from font size.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.AbstractBasicTextMetrics.#ctor(WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">text block settings</param>
        </member>
        <member name="M:WW.Cad.Model.Text.AbstractBasicTextMetrics.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="height">Text height.</param>
        </member>
        <member name="M:WW.Cad.Model.Text.AbstractBasicTextMetrics.GetBounds(System.String)">
            <summary>
            Get the bounds of some text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <returns>bounds if the text was written at position 0,0</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.AbstractBasicTextMetrics.GetBounds(System.String,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounds of some text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <param name="whiteSpaceHandling">how to handle white space</param>
            <returns>bounds if the text was written at position 0,0</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.AbstractBasicTextMetrics.GetBounds(System.String,WW.Math.Matrix2D,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounds of some text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <param name="transformation">transformation from canonical font to real font</param>
            <param name="wsh">How to include white space in the bounding box</param>
            <returns>
            bounds if the text was written at position 0,0
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.AbstractBasicTextMetrics.GetAdvance(System.String,System.Collections.Generic.IList{WW.Math.Vector2D})">
            <summary>
            Get the advance of a text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <returns>advance vector</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.AbstractBasicTextMetrics.CanonicalAdvance(System.String,System.Collections.Generic.IList{WW.Math.Vector2D})">
            <summary>
            Get the canonical advance of a text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <param name="characterAdvances">The character advances.</param>
            <returns>
            advance vector
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.SystemFontScaling">
            <summary>
            Get the height scaling for system fonts.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.FontHeight">
            <summary>
            Get the font height of this metrics.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.SystemFontHeight">
            <summary>
            Get the height of the associated system font.
            If there is no associated system font this returns the same as <see cref="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.FontHeight"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.Ascent">
            <summary>
            Get the ascent of this metrics.
            </summary>
            <remarks>The ascent is the normal extent above the baseline</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.Descent">
            <summary>
            Get the descent of this metrics.
            </summary>
            <remarks>The descent is the normal extent below the baseline</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.CanonicalAscent">
            <summary>
            Get the canonical ascent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.CanonicalDescent">
            <summary>
            Get the canonical descent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.LineFeedAdvance">
            <summary>
            Get the advance of a line feed.
            </summary>
            <remarks>
            This only handles the line feed, not the carriage return.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.CharTransformation">
            <summary>
            Get the basic transformation used to scale each character of the canonical font so size, aspect ratio etc are correct.
            </summary>
            <remarks>Note that additional inter char spacing may add another factor, <see cref="P:WW.Cad.Model.Text.ITextMetrics.CharSpacingFactor"/></remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.CharSpacingFactor">
            <summary>
            Get the character spacing factor. 
            </summary>
            <remarks>
            A factor not equal to <c>1</c> will enlarge (if greater) or reduce (if less) the inter char spacing.
            Expect values between <c>0.75</c> and <c>4</c>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.AbstractBasicTextMetrics.IsVertical">
            <summary>
            Is the text running vertically?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfLinkedData">
            <summary>
            Represents linked data. For internal use only.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedData.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedData.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents from specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedData.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedData.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedData.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedData.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedData.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedData.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.IndexCreationFlags">
            <summary>
            Control flags for index creation.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.IndexCreationFlags.NoIndex">
            <summary>
            Don't create indices.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.IndexCreationFlags.LayerIndex">
            <summary>
            Create layer index.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.IndexCreationFlags.SpatialIndex">
            <summary>
            Create spatial index.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.IndexCreationFlags.LayerAndSpatialIndex">
            <summary>
            Create layer and spatial index.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntityCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> collection.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ActiveDxfHandledObjectCollection`1">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DxfHandledObject"/> collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:WW.Cad.Model.DxfHandledObjectCollection`1">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DxfHandledObject"/> collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfHandledObjectCollection`1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfHandledObjectCollection`1"/> class.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new list.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfHandledObjectCollection`1"/> class.
            </summary>
            <param name="capacity">
            The number of elements that the new list can initially store.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index 
            of the first occurrence within the entire <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. The value can be a null reference.
            </param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:WW.Collections.Generic.ActiveList`1"/> at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be a null reference.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
            <param name="item">
            The object to be added to the end of the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            The value can be a null reference.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:WW.Collections.Generic.ActiveList`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. The value can be a null reference.
            </param>
            <returns>
            true if item is found in the <see cref="T:WW.Collections.Generic.ActiveList`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:WW.Collections.Generic.ActiveList`1"/> to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination 
            of the elements copied from <see cref="T:WW.Collections.Generic.ActiveList`1"/>. The Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. The value can be a null reference.
            </param>
            <returns>
            true if item is successfully removed; otherwise, false. 
            This method also returns false if item was not found in the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection. 
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList">IList</see>. 
            </summary>
            <param name="value">The Object to add to the 
            <see cref="T:System.Collections.IList">IList</see>.
            </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the 
            <see cref="T:System.Collections.IList">IList</see>.
            </summary>
            <param name="value">
            The object to remove from the 
            <see cref="T:System.Collections.IList">IList</see>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the 
            <see cref="T:System.Collections.IList">IList</see>
            contains a specific value.
            </summary>
            <param name="value">
            The Object to locate in the <see cref="T:System.Collections.IList">IList</see>.
            </param>
            <returns>
            true if item is found in the IList; otherwise, false.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList">IList</see>.
            </summary>
            <param name="value">
            The object to locate in the <see cref="T:System.Collections.IList">IList</see>.
            </param>
            <returns>
            The index of item if found in the list; otherwise, –1.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList">IList</see> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="value">
            The object to insert into the <see cref="T:System.Collections.IList">IList</see>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the 
            <see cref="T:System.Collections.ICollection">ICollection</see>
            to an Array, starting at a particular Array index.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection">ICollection</see>. 
            The Array must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator">IEnumerator</see> 
            object that can be used to iterate through the collection.  
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            The collection itself cannot be a null reference (<c>Nothing</c> in Visual Basic), 
            but it can contain elements that are a null reference (<c>Nothing</c> in Visual Basic), 
            if type T is a reference type.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:WW.Collections.Generic.ActiveList`1"/> to a new array.
            </summary>
            <returns>
            An array containing copies of the elements of the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:WW.Collections.Generic.ActiveList`1"/> using the default comparer.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:WW.Collections.Generic.ActiveList`1"/> using the specified <c>System.Comparison</c>. 
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:WW.Collections.Generic.ActiveList`1"/> using the specified comparer.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:WW.Collections.Generic.ActiveList`1"/> using the specified comparer.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the first occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the last occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object collection in the context of given model context.
            </summary>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
            <returns>Cloned collection.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.OnSet(System.Int32,`0,`0)">
            <summary>
            Fires <see cref="!:Set"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.OnSetting(System.Int32,`0,`0)">
            <summary>
            Fires <see cref="!:Setting"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.OnAdded(System.Int32,`0)">
            <summary>
            Fires <see cref="!:Added"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.OnAdding(System.Int32,`0)">
            <summary>
            Fires <see cref="!:Adding"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.OnRemoving(System.Int32,`0)">
            <summary>
            Fires <see cref="!:Removing"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHandledObjectCollection`1.OnRemoved(System.Int32,`0)">
            <summary>
            Fires <see cref="!:Removed"/> event.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:WW.Collections.Generic.ActiveList`1"/>. 
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:WW.Collections.Generic.ActiveList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index">
            The zero-based index of the element to get or set.
            </param>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the 
            <see cref="T:System.Collections.IList">IList</see> is read-only. 
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the 
            <see cref="T:System.Collections.IList">IList</see> has a fixed size. 
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the 
            <see cref="T:System.Collections.ICollection">ICollection</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection">ICollection</see> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHandledObjectCollection`1.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.ActiveDxfHandledObjectCollection`1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.ActiveDxfHandledObjectCollection`1"/> class.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new list.
            </param>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.ActiveDxfHandledObjectCollection`1"/> class.
            </summary>
            <param name="capacity">
            The number of elements that the new list can initially store.
            </param>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object collection in the context of given model context.
            </summary>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
            <returns>Cloned collection.</returns>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.OnSet(System.Int32,`0,`0)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.Set"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.OnSetting(System.Int32,`0,`0)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.Setting"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.OnAdded(System.Int32,`0)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.Added"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.OnAdding(System.Int32,`0)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.Adding"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.OnRemoving(System.Int32,`0)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.Removing"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.OnRemoved(System.Int32,`0)">
            <summary>
            Fires <see cref="E:WW.Cad.Model.ActiveDxfHandledObjectCollection`1.Removed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntityCollection.AddRange(WW.Cad.Model.Entities.DxfEntity[])">
            <summary>
            Adds specified entities.
            </summary>
            <example>
            using System;
            using WW.Cad.Model;
            using WW.Cad.Model.Entities;
            
            public class AddRangeExample {
                public static DxfModel CreateTestModel() {
                    DxfModel model = new DxfModel();
                    model.Entities.AddRange(
                        new DxfLine(new Point2D(12, 3), new Point2D(7, 2)),
                        new DxfLine(new Point2D(0, 2), new Point2D(8, 4)),
                        new DxfLine(new Point2D(23, 0), new Point2D(9, 2))
                    );
                    return model;
                }
            }
            </example>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntityCollection.Actions">
            <summary>
            Contains actions for operating on an entity collection.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Add">
            <summary>
            Action for adding an entity to an entity collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Add.#ctor(WW.Cad.Model.Entities.DxfEntityCollection,WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Add"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Add.Do(WW.Actions.CommandInvoker)">
            <summary>
            Perform a do.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Add.Undo(WW.Actions.CommandInvoker)">
            <summary>
            Perform an undo.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Add.Target">
            <summary>
            Gets the target object of the command.
            This is the object that is being affected/changed by the command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Remove">
            <summary>
            Action for removing an entity from an entity collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Remove.#ctor(WW.Cad.Model.Entities.DxfEntityCollection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Remove"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Remove.Do(WW.Actions.CommandInvoker)">
            <summary>
            Perform a do.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Remove.Undo(WW.Actions.CommandInvoker)">
            <summary>
            Perform an undo.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEntityCollection.Actions.Remove.Target">
            <summary>
            Gets the target object of the command.
            This is the object that is being affected/changed by the command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.CellAlignment">
            <summary>
            A table cell alignment (for <see cref="T:WW.Cad.Model.Entities.DxfTableCell2005"/>).
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTable2005"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableCell2005"/>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.MiddleCenter">
            <summary>
            Middle center.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAlignment.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.TableCellContentType">
            <summary>
            Represents the type of content for a <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellContentType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellContentType.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellContentType.Field">
            <summary>
            Field.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellContentType.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.CellType">
            <summary>
            Represents a table cell type (see <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/>)
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellType.Data">
            <summary>
            Data cell type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellType.Label">
            <summary>
            Label cell type.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.PdfExporter">
            <summary>
            This class will draw a CAD drawing onto a PDF document.
            </summary>
            <remarks>
            <para>
            Add pages to the PDF document by calling one of the <b>DrawPage</b> overloads
            and call <see cref="M:WW.Cad.IO.PdfExporter.EndDocument"/> to close the document.
            </para>
            <para>
            Note that the PDF x-axis points right and the y-axis points up,
            and the origin is at the bottom left. 
            </para>
            <para>
            The PDF exporter supports retaining text entities as text in PDF so the PDF can be searched for text and
            the text can be copied to the clipboard from the PDF file.
            To retain the text, set property 
            <see cref="P:WW.Cad.Drawing.GraphicsConfig.TryDrawingTextAsText">GraphicsConfig.TryDrawingTextAsText</see> to <c>true</c>.
            For some fonts and unicode characters this will not work properly, 
            therefore the PDF exporter also supports font embedding. 
            To enable font embedding set property <see cref="P:WW.Cad.IO.PdfExporter.EmbedFonts"/> to <c>true</c> 
            (<see cref="P:WW.Cad.Drawing.GraphicsConfig.TryDrawingTextAsText">GraphicsConfig.TryDrawingTextAsText</see> must be <c>true</c> as well).
            Font embedding does make the PDF file larger.
            </para>
            </remarks>
            <example>
            Below is an example of how to read a DXF file and export to pdf.
            <code lang="cs">
using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfExportExample
{
    class DxfExportExample
    {
        public static void Main(string[] args)
        {
            if (args.Length != 2) {
                Console.WriteLine("Usage: DxfExportExample [png|tiff|jpeg|bmp|gif|pdf] &lt;DXF or DWG file&gt;");
                Environment.Exit(0);
            }
            string format = args[0];
            string filename = args[1];

            DxfModel model = null;
            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
            string outfile = Path.GetFileNameWithoutExtension(Path.GetFullPath(filename));
            Stream stream;
            if (format == "pdf") {
                BoundsCalculator boundsCalculator = new BoundsCalculator();
                boundsCalculator.GetBounds(model);
                Bounds3D bounds = boundsCalculator.Bounds;
                PaperSize paperSize = PaperSizes.GetPaperSize(PaperKind.Letter);
                // Lengths in inches.
                float pageWidth = (float)paperSize.Width / 100f;
                float pageHeight = (float)paperSize.Height / 100f;
                float margin = 0.5f;
                // Scale and transform such that its fits max width/height
                // and the top left middle of the cad drawing will match the 
                // top middle of the pdf page.
                // The transform transforms to pdf pixels.
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    new Point3D(bounds.Center.X, bounds.Corner2.Y, 0d),
                    new Point3D(new Vector3D(margin, margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth - margin, pageHeight - margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth / 2d, pageHeight - margin, 0d) * PdfExporter.InchToPixel)
                );
                using (stream = File.Create(outfile + ".pdf")) {
                    PdfExporter pdfGraphics = new PdfExporter(stream);
                    pdfGraphics.DrawPage(
                        model, 
                        GraphicsConfig.WhiteBackgroundCorrectForBackColor, 
                        to2DTransform,
                        paperSize
                    );
                    pdfGraphics.EndDocument();
                }
            } else {
                GDIGraphics3D graphics = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
                Size maxSize = new Size(500, 500);
                Bitmap bitmap = 
                    ImageExporter.CreateAutoSizedBitmap(
                        model, 
                        graphics, 
                        Matrix4D.Identity, 
                        System.Drawing.Color.Black, 
                        maxSize
                    );
                switch (format) {
                    case "bmp":
                        using (stream = File.Create(outfile + ".bmp")) {
                            ImageExporter.EncodeImageToBmp(bitmap, stream);
                        }
                        break;
                    case "gif":
                        using (stream = File.Create(outfile + ".gif")) {
                            ImageExporter.EncodeImageToGif(bitmap, stream);
                        }
                        break;
                    case "tiff":
                        using (stream = File.Create(outfile + ".tiff")) {
                            ImageExporter.EncodeImageToTiff(bitmap, stream);
                        }
                        break;
                    case "png":
                        using (stream = File.Create(outfile + ".png")) {
                            ImageExporter.EncodeImageToPng(bitmap, stream);
                        }
                        break;
                    case "jpg":
                        using (stream = File.Create(outfile + ".jpg")) {
                            ImageExporter.EncodeImageToJpeg(bitmap, stream);
                        }
                        break;
                    default:
                        Console.WriteLine("Unknown format " + format + ".");
                        break;
                }
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="F:WW.Cad.IO.PdfExporter.CmToInch">
            <summary>
            Conversion factor from cm to inch.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.PdfExporter.InchToPixel">
            <summary>
            Conversion factor from inch to pdf pixels.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.PdfExporter.CmToPixel">
            <summary>
            Conversion factor from cm to pdf pixels.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.PdfExporter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.EndDocument">
            <summary>
            Ends the document and writes the contents to file.
            </summary>
            <remarks>
            By default this method also closes the stream.
            To not automatically close the stream, set <see cref="P:WW.Cad.IO.PdfExporter.AutoCloseStream"/> to <c>false</c>.
            </remarks>
            <seealso cref="P:WW.Cad.IO.PdfExporter.AutoCloseStream"/>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.DrawPage(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,System.Drawing.Printing.PaperSize)">
            <summary>
            Draw given model on a new PDF page.
            </summary>
            <remarks>
            Draws only the model space entities.
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="modelToPdfTransform">Transform from model space to pdf paper space.</param>
            <param name="paperSize">
            The paper size 
            (see also <see cref="T:WW.Cad.Drawing.PaperSizes"/> and <see cref="T:System.Drawing.Printing.PaperKind"/> to
            get a paper size from a paper kind.)
            </param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.DrawPage(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,System.Drawing.Printing.PaperSize,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given model on a new PDF page.
            </summary>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="modelToPdfTransform">Transform from model space to pdf paper space.</param>
            <param name="paperSize">The paper size
            (see also <see cref="T:WW.Cad.Drawing.PaperSizes"/> and <see cref="T:System.Drawing.Printing.PaperKind"/> to
            get a paper size from a paper kind.)</param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
            <remarks>
            Draws only the model space entities.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.DrawPage(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,System.Double,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},System.Drawing.Printing.PaperSize)">
            <summary>
            Draw given model on a new PDF page using given layout and view ports.
            </summary>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="paperToPdfTransform">Transform from paper space to pdf paper space.</param>
            <param name="paperToPdfScaleFactor">
            The paper space to PDF scale factor (used to determine the line width based on each entity's <see cref="F:WW.Cad.Model.Entities.DxfEntity.lineWeight">line weight</see>).
            Use e.g. <see cref="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,System.Double@)"/>
            to calculate a scaling transform and scale factor.
            </param>
            <param name="layout">The layout to draw.</param>
            <param name="viewports">The view ports to use for rendering (optional).</param>
            <param name="paperSize">The paper size
            (see also <see cref="T:WW.Cad.Drawing.PaperSizes"/> and <see cref="T:System.Drawing.Printing.PaperKind"/> to
            get a paper size from a paper kind.)</param>
            <remarks>
            Entities in model space are transformed to paper space according to
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> represents paper space
            itself and should not be displayed.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.DrawPage(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,System.Double,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},System.Drawing.Printing.PaperSize,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given model on a new PDF page using given layout and view ports.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="paperToPdfTransform">Transform from paper space to pdf paper space.</param>
            <param name="paperToPdfScaleFactor">
            The paper space to PDF scale factor (used to determine the line width based on each entity's <see cref="F:WW.Cad.Model.Entities.DxfEntity.lineWeight">line weight</see>).
            Use e.g. <see cref="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,System.Double@)"/>
            to calculate a scaling transform and scale factor.
            </param>
            <param name="layout">The layout to draw (paper space).</param>
            <param name="viewports">The view ports to use for rendering (optional).</param>
            <param name="paperSize">
            The paper size 
            (see also <see cref="T:WW.Cad.Drawing.PaperSizes"/> and <see cref="T:System.Drawing.Printing.PaperKind"/> to
            get a paper size from a paper kind.)
            </param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.DrawPage(WW.Cad.IO.PdfPageConfiguration)">
            <summary>
            Draw given model on a new PDF page using specified page configuration.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see> in the page configuartion.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="pageConfiguration">The page configuration.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.DrawPage(WW.Cad.IO.PdfPageConfiguration,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given model on a new PDF page using specified page configuration.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see> in the page configuartion.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="pageConfiguration">The page configuration.</param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.CreatePage(WW.Cad.IO.PdfPageConfiguration,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Call this to actually write the pdf file.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.AutoCloseStream">
            <summary>
            Gets or sets whether to automatically close the stream after writing (the default value is <c>true</c>).
            </summary>
            <seealso cref="M:WW.Cad.IO.PdfExporter.EndDocument"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.Author">
            <summary>
            Gets or sets the author.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.LineWidth">
            <summary>
            Gets or sets the line width.
            The default value is 0.1.
            </summary>
            <remarks>
            <para>
            Quote from the PDF spec:
            It is a nonnegative number expressed in user space units.
            A line width of 0 denotes the thinnest line that can be rendered at device resolution:
            1 device pixel wide.
            </para>
            <para>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight">GraphicsConfig.DisplayLineWeight</see> 
            is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used multiplied by 
            <see cref="P:WW.Cad.IO.PdfExporter.ModelSpaceLineWeightToPdfPixels"/>.
            To choose a proper <see cref="P:WW.Cad.IO.PdfExporter.ModelSpaceLineWeightToPdfPixels"/> value, take into account that the size of a PDF pixel is 1 / 72th of an inch.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.IO.PdfExporter.TextLineWidth"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.TextLineWidth">
            <summary>
            Gets or sets the line width for text entities.
            The default value is 0.1.
            </summary>
            <remarks>
            <para>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight">GraphicsConfig.DisplayLineWeight</see> 
            is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used multiplied by 
            <see cref="P:WW.Cad.IO.PdfExporter.ModelSpaceLineWeightToPdfPixels"/>.
            To choose a proper <see cref="P:WW.Cad.IO.PdfExporter.ModelSpaceLineWeightToPdfPixels"/> value, take into account that the size of a PDF pixel is 1 / 72th of an inch.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.IO.PdfExporter.LineWidth"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.Document">
            <summary>
            Gets the PDF document.
            </summary>
            <remarks>
            The document can be used to add further pages to the document, not using this exporter object.
            Pages have to be added to the <see cref="P:WW.Cad.IO.PdfExporter.Body"/> object.
            </remarks>
            <seealso cref="P:WW.Cad.IO.PdfExporter.Body"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.Body">
            <summary>
            Gets the PDF body.
            </summary>
            <remarks>
            The document can be used to add further pages to the document, not using this exporter object.
            A PDF document can have 1 or more bodies. A single body represents a document revision.
            Since this exporter creates a new PDF document, there is just one body object.
            </remarks>
            <seealso cref="P:WW.Cad.IO.PdfExporter.Document"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.ModelSpaceLineWeightToPdfPixels">
            <summary>
            Gets or sets the factor that is used to convert <see cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight">line weight</see> to PDF pixels 
            (used for model space only, not for paper space layouts).
            </summary>
            <remarks>
            The default value is 0.001 * <see cref="F:WW.Cad.IO.PdfExporter.CmToPixel"/>, 
            so line weight is translated to have the correct line width expressed in PDF pixels.
            Note that in model space the line weight is applied irrespective of the zoom factor or drawing units.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.UseMultipleLayers">
            <summary>
            Gets or sets a value indicating whether to use multiple layers.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            <para>
            By default the elements are just drawn in the order in which they appear in the drawing.
            </para>
            <para>
            When set to <c>true</c> the PDF exporter puts filled elements on the bottom layer,
            on top of this the stroked elements are put, and on the very top all text is drawn.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.ExportLayers">
            <summary>
            Gets or sets a value indicating whether to export ACAD layers.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            <para>
            Layers will be exported as PDF optional content groups and will be grouped by pages.
            </para>
            <para>
            The layer order may be changed by setting the <see cref="P:WW.Cad.IO.PdfExporter.LayerComparer"/>.
            The default value is <c>null</c>, meaning that the layer order of the drawing is used.
            </para>
            <para>
            The PDF layer's enabled (on/off) state is determined by the layer's <see cref="P:WW.Cad.Model.Tables.DxfLayer.Enabled"/>
            and <see cref="P:WW.Cad.Model.Tables.DxfLayer.Frozen"/> property by default, but this behavior can be overridden by
            <see cref="P:WW.Cad.IO.PdfExporter.IsPdfLayerEnabledFunction"/>.
            Entities are included in the exported PDF based on whether the layer's enabled/frozen state,
            but the behavior can be adjusted with properties <see cref="P:WW.Cad.Drawing.GraphicsConfig.ShowDisabledLayers"/>
            and <see cref="P:WW.Cad.Drawing.GraphicsConfig.ShowFrozenLayers"/>.
            </para>
            <para>
            Each page label will be formatted by <see cref="P:WW.Cad.IO.PdfExporter.PageFormatString"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.IO.PdfExporter.PageFormatString"/>
            <seealso cref="P:WW.Cad.IO.PdfExporter.IsPdfLayerEnabledFunction"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.PageFormatString">
            <summary>
            Gets or sets the page format string used when <see cref="P:WW.Cad.IO.PdfExporter.ExportLayers"/> is <c>true</c>.
            The default value is "Page {0}".
            </summary>
            <remarks>
            This property can be used to provide translations to other languages.
            </remarks>
            <seealso cref="P:WW.Cad.IO.PdfExporter.ExportLayers"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.LayerComparer">
            <summary>
            Gets or sets the layer comparer used for defining the layer order in the layer navigation window
            when <see cref="P:WW.Cad.IO.PdfExporter.ExportLayers"/> is <c>true</c>.
            The default value is <c>null</c>, meaning that the layer order of the drawing is used.
            </summary>
            <remarks>
            Use e.g. <see cref="F:WW.Cad.Model.Tables.DxfLayer.CaseInsensitiveNameComparer"/>.
            </remarks>
            <seealso cref="P:WW.Cad.IO.PdfExporter.ExportLayers"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.IsPdfLayerEnabledFunction">
            <summary>
            Gets or sets the function to determine whether the PDF layer is enabled based on the CAD layer passed
            to the function.
            This function is called when <see cref="P:WW.Cad.IO.PdfExporter.ExportLayers"/> is true.
            The default value is <c>null</c>.
            </summary>
            <seealso cref="P:WW.Cad.IO.PdfExporter.ExportLayers"/>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.EmbedFonts">
            <summary>
            Gets or sets a value indicating whether to embed TrueType fonts in the PDF file.
            The default value is <c>false</c>.
            Set property <see cref="P:WW.Cad.Drawing.GraphicsConfig.TryDrawingTextAsText">GraphicsConfig.TryDrawingTextAsText</see> 
            to <c>true</c> for this property to take effect.
            </summary>
            <remarks>
            <para>
            Please take care that embedding a font is only allowed if you have the 
            proper license to embed the font.
            </para>
            <para>
            This will only have an effect if text entities are converted as text.
            </para>
            <para>
            PDF is notoriously bad displaying certain Unicode characters by default, 
            so in order for them to appear correctly you may need to set this to <c>true</c>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Drawing.GraphicsConfig.TryDrawingTextAsText">GraphicsConfig.TryDrawingTextAsText</seealso>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.PackContent">
            <summary>
            Compress the content of the PDF?
            </summary>
            <remarks>
            This should be <c>true</c> (the default) usually to keep the resulting PDF small.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.ExportLayerHelper">
            <summary>
            Get the layer helper if there is one.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.PdfExporter.PdfStreamWriter">
            <summary>
            This object contains the contents of a single page.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.IWireframeGraphicsFactory">
            <summary>
            Factory interface for wireframe graphics objects.
            </summary>
            <seealso cref="T:WW.Cad.Drawing.ISurfaceGraphicsFactory"/>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Begin graphics creation for specified entity.
            End creation with <see cref="M:WW.Cad.Drawing.IWireframeGraphicsFactory.EndEntity"/>.
            </summary>
            <remarks>
            Implementations of this interface can use the begin/end markers of an entity to be able to later update graphics
            for a specific entity when e.g. an entity changes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.EndEntity">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.IWireframeGraphicsFactory.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Begin graphics creation for specified insert.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.EndInsert">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.IWireframeGraphicsFactory.BeginInsert(WW.Cad.Model.Entities.DxfInsert)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreateDot(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D)">
            <summary>
            Create a colored dot.
            </summary>
            <param name="entity">The entity creating the dot.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the dot is created for text.</param>
            <param name="position">the position</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreateLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Create a colored line segment.
            </summary>
            <param name="entity">The entity creating the line segment.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the line segment is created for text.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreateRay(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored ray (infinite line in one direction).
            </summary>
            <param name="entity">The entity creating the ray.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="segment">
              The line segment, first point must be the starting point,
              the second point goes towards infinity.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreateXLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored DxfXLine (infinite line in both direction).
            </summary>
            <param name="entity">The entity creating the xline.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="startPoint">Starting point (for bounding box calculation).</param>
            <param name="segment">The line segment, both points approach infinity.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of dots, lines and polylines.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreatePathAsOne(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of lines and polylines.
            Similar to <see cref="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)"/> but in GDI graphics 
            this matches drawing using <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <remarks>
            This is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <remarks>
            Ownership of the shape is transferred to the implementor of this interface.
            </remarks>
            <param name="entity">The entity creating the shape.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the shape is created for text.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreateText(WW.Cad.Model.Entities.DxfText,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.IWireframeGraphicsFactory.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreateMText(WW.Cad.Model.Entities.DxfMText,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.IWireframeGraphicsFactory.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
            <param name="rasterImage">The raster image.</param>
            <param name="drawContext">The draw context.</param>
            <param name="clipPolygon">The clip polygon (optional).</param>
            <param name="imageBoundary">The image boundary.</param>
            <param name="transformedOrigin">The transformed image origin (top left of image).</param>
            <param name="transformedXAxis">The transformed image origin + 1 * x-axis.</param>
            <param name="transformedYAxis">The transformed image origin + 1 * y-axis.</param>
        </member>
        <member name="P:WW.Cad.Drawing.IWireframeGraphicsFactory.SupportsText">
            <summary>
            Gets a value indicating whether the object supports text.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.#ctor(WW.Cad.IO.PdfExporter,WW.Pdf.Components.PdfPage,System.Drawing.Printing.PaperSize,System.Single,WW.Cad.Drawing.GraphicsConfig,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.PdfExporter.PdfStreamWriter"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="page">The page.</param>
            <param name="paperSize">Size of the paper.</param>
            <param name="lineWeightToPdfPixels">The line weight to PDF pixels factor.</param>
            <param name="graphicsConfig">The graphics configuzratiion.</param>
            <param name="useMultipleElementLayers">if set to <c>true</c> use multiple element layers.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Begin graphics creation for specified entity.
            End creation with <see cref="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.EndEntity"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.EndEntity">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Begin graphics creation for specified insert.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.EndInsert">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.BeginInsert(WW.Cad.Model.Entities.DxfInsert)"/>
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreateDot(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D)">
            <summary>
            Create a colored dot.
            </summary>
            <param name="entity">The entity creating the dot.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the dot is created for text.</param>
            <param name="position">the position</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreateLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Create a colored line segment.
            </summary>
            <param name="entity">The entity creating the line segment.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the line segment is created for text.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreateRay(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored ray (infinite line in one direction).
            </summary>
            <param name="entity">The entity creating the ray.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="segment">The line segment, first point must be the starting point,
              the second point goes towards infinity.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreateXLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored DxfXLine (infinite line in both direction).
            </summary>
            <param name="entity">The entity creating the xline.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="startPoint">Starting point (for bounding box calculation).</param>
            <param name="segment">The line segment, both points approach infinity.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of dots, lines and polylines.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreatePathAsOne(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of lines and polylines.
            Similar to <see cref="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)"/> but in GDI graphics
            this matches drawing using <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
            <remarks>
            This is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the shape is created for text.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.ToAccurateString(System.Double)">
            <summary>
            Convert a number to a string value with a good accuracy.
            </summary>
            <param name="val">Value to convert.</param>
            <returns>String with good accuracy.</returns>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.TextToPdfElement(System.String)">
            <summary>
            Helper method for text to string conversion, taking care of the pecularities of multibyte chars in PDF.
            </summary>
            <remarks>
            PDF seems not to be able to access high range Unicode characters which are not embedded as I can tell so far.
            There is a possibility to embed them in the comments, but no chance in displayed text.
            </remarks>
            <param name="text">Text to convert.</param>
            <returns>PDF element which outputs the given text.</returns>
        </member>
        <member name="P:WW.Cad.IO.PdfExporter.PdfStreamWriter.PaperSize">
            <summary>
            Gets or sets the paper size (Default is letter).
            </summary>
            <remarks>
            See <see cref="T:System.Drawing.Printing.PaperKind"/> for standard paper sizes.
            </remarks>
        </member>
        <member name="T:WW.Cad.IO.PdfExporter.PdfStreamWriter.PdfPathDrawer">
            <summary>
            Path drawer for drawing character paths.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfExporter.PdfStreamWriter.PdfPathDrawer.#ctor(WW.Cad.IO.PdfExporter.PdfStreamWriter)">
            <summary>
            Constructor.
            </summary>
            <param name="outer">reference to outer class</param>
        </member>
        <member name="T:WW.Cad.IO.DxfWriter">
            <summary>
            Represents a class for writing a <see cref="T:WW.Cad.Model.DxfModel">model</see> to an AutoCAD DXF file.
            </summary>
            <remarks>
            <para>
            Supported versions for writing are currently DXF versions 
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf12">12</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">13</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">14</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf15">15 (AutoCAD 2000)</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf18">18 (AutoCAD 2004)</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf21">21 (AutoCAD 2007)</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf24">24 (AutoCAD 2010)</see> and
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf27">27 (AutoCAD 2013)</see>.
            </para>
            <para>
            See also <see cref="P:WW.Cad.Model.DxfHeader.AcadVersion"/>.
            </para>
            </remarks>
            <example>
            Below is an example of how to create and write a DXF file.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create a line, circle, text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Line.
            DxfLine line1 = new DxfLine(new Point3D(-20d, -4d, 3d), new Point3D(-11d, -3.9d, 3d));
            model.Entities.Add(line1);

            // Circle.
            DxfCircle circle = new DxfCircle(new Point3D(-20d, -4d, 3d), 9d);
            circle.Color = EntityColors.Green;
            model.Entities.Add(circle);
            
            // Invisible blue circle.
            DxfCircle circle2 = new DxfCircle(new Point3D(3d, -4d, 3d), 4d);
            circle2.Color = EntityColors.Blue;
            circle2.Visible = false;
            model.Entities.Add(circle2);
            
            // Extruded circle with line type.
            DxfLineType lineType = 
                new DxfLineType(
                    "SpecialLineType", 
                    "description", 
                    new double[] {0.5d, -0.3d, 0, -0.3d}
                );
            model.LineTypes.Add(lineType);
            DxfCircle circle3 = new DxfCircle(new Point3D(0d, -4d, 3d), 9d);
            circle3.Color = EntityColors.Red;
            circle3.LineType = lineType;
            circle3.Thickness = 0.4;
            model.Entities.Add(circle3);

            // Arc.
            DxfArc arc = new DxfArc(new Point3D(20d, -4d, 3d), 9d, Math.PI * 0.2d, Math.PI * 1.7d);
            arc.Color = EntityColors.Blue;
            model.Entities.Add(arc);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.IO.DxfReader"/>
            <seealso cref="T:WW.Cad.IO.DwgWriter"/>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.#ctor(System.IO.Stream,WW.Cad.Model.DxfModel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DxfWriter"/> class.
            </summary>
            <param name="stream">the stream to write to.</param>
            <param name="model">the model to write.</param>
            <param name="binary">whether to write binary or ascii.</param>
            <remarks>
            	<para>
            Supported versions for writing are currently DXF versions
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf12">12</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">13</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">14</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf15">15 (AutoCAD 2000)</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf18">18 (AutoCAD 2004)</see>,
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf21">21 (AutoCAD 2007)</see>, 
            and <see cref="F:WW.Cad.Model.DxfVersion.Dxf24">24 (AutoCAD 2010)</see>
            </para>
            	<para>
            See also <see cref="P:WW.Cad.Model.DxfHeader.AcadVersion"/>.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            thrown when an attempting to write an unsupported DXF version.
            </exception>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.Write(System.String,WW.Cad.Model.DxfModel,System.Boolean)">
            <summary>
            Write the specified model.
            </summary>
            <remarks>
            <para>
            Before writing <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called to check if the model is valid.
            When it is not valid a <see cref="T:WW.Cad.Base.DxfException"/> is thrown with a 
            list of <see cref="T:WW.Cad.Base.DxfMessage">messages</see>.
            </para>
            </remarks>
            <param name="filename">the filename of the file to write to.</param>
            <param name="model">the model to write.</param>
            <param name="binary">whether to write binary or ascii.</param>
            <example>
            An example of how to create and write a dxf file.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create a line, circle, text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Line.
            DxfLine line1 = new DxfLine(new Point3D(-20d, -4d, 3d), new Point3D(-11d, -3.9d, 3d));
            model.Entities.Add(line1);

            // Circle.
            DxfCircle circle = new DxfCircle(new Point3D(-20d, -4d, 3d), 9d);
            circle.Color = EntityColors.Green;
            model.Entities.Add(circle);
            
            // Invisible blue circle.
            DxfCircle circle2 = new DxfCircle(new Point3D(3d, -4d, 3d), 4d);
            circle2.Color = EntityColors.Blue;
            circle2.Visible = false;
            model.Entities.Add(circle2);
            
            // Extruded circle with line type.
            DxfLineType lineType = 
                new DxfLineType(
                    "SpecialLineType", 
                    "description", 
                    new double[] {0.5d, -0.3d, 0, -0.3d}
                );
            model.LineTypes.Add(lineType);
            DxfCircle circle3 = new DxfCircle(new Point3D(0d, -4d, 3d), 9d);
            circle3.Color = EntityColors.Red;
            circle3.LineType = lineType;
            circle3.Thickness = 0.4;
            model.Entities.Add(circle3);

            // Arc.
            DxfArc arc = new DxfArc(new Point3D(20d, -4d, 3d), 9d, Math.PI * 0.2d, Math.PI * 1.7d);
            arc.Color = EntityColors.Blue;
            model.Entities.Add(arc);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
            <exception cref="T:WW.Cad.Base.DxfException">Thrown when model is invalid.</exception>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.Write(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Write the specified model to an ASCII DXF file.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="model">the model to write.</param>
            <remarks>
            Before writing <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called to check if the model is valid.
            When it is not valid a <see cref="T:WW.Cad.Base.DxfException"/> is thrown with a
            list of <see cref="T:WW.Cad.Base.DxfMessage">messages</see>.
            </remarks>
            <example>
            An example of how to create and write a dxf file.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create a line, circle, text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Line.
            DxfLine line1 = new DxfLine(new Point3D(-20d, -4d, 3d), new Point3D(-11d, -3.9d, 3d));
            model.Entities.Add(line1);

            // Circle.
            DxfCircle circle = new DxfCircle(new Point3D(-20d, -4d, 3d), 9d);
            circle.Color = EntityColors.Green;
            model.Entities.Add(circle);
            
            // Invisible blue circle.
            DxfCircle circle2 = new DxfCircle(new Point3D(3d, -4d, 3d), 4d);
            circle2.Color = EntityColors.Blue;
            circle2.Visible = false;
            model.Entities.Add(circle2);
            
            // Extruded circle with line type.
            DxfLineType lineType = 
                new DxfLineType(
                    "SpecialLineType", 
                    "description", 
                    new double[] {0.5d, -0.3d, 0, -0.3d}
                );
            model.LineTypes.Add(lineType);
            DxfCircle circle3 = new DxfCircle(new Point3D(0d, -4d, 3d), 9d);
            circle3.Color = EntityColors.Red;
            circle3.LineType = lineType;
            circle3.Thickness = 0.4;
            model.Entities.Add(circle3);

            // Arc.
            DxfArc arc = new DxfArc(new Point3D(20d, -4d, 3d), 9d, Math.PI * 0.2d, Math.PI * 1.7d);
            arc.Color = EntityColors.Blue;
            model.Entities.Add(arc);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
            <exception cref="T:WW.Cad.Base.DxfException">Thrown when model is invalid.</exception>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.Write(System.IO.Stream,WW.Cad.Model.DxfModel,System.Boolean)">
            <summary>
            Write the specified model.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="model">the model to write.</param>
            <param name="binary">whether to write binary or ascii.</param>
            <remarks>
            Before writing <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called to check if the model is valid.
            When it is not valid a <see cref="T:WW.Cad.Base.DxfException"/> is thrown with a
            list of <see cref="T:WW.Cad.Base.DxfMessage">messages</see>.
            </remarks>
            <example>
            An example of how to create and write a dxf file.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create a line, circle, text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Line.
            DxfLine line1 = new DxfLine(new Point3D(-20d, -4d, 3d), new Point3D(-11d, -3.9d, 3d));
            model.Entities.Add(line1);

            // Circle.
            DxfCircle circle = new DxfCircle(new Point3D(-20d, -4d, 3d), 9d);
            circle.Color = EntityColors.Green;
            model.Entities.Add(circle);
            
            // Invisible blue circle.
            DxfCircle circle2 = new DxfCircle(new Point3D(3d, -4d, 3d), 4d);
            circle2.Color = EntityColors.Blue;
            circle2.Visible = false;
            model.Entities.Add(circle2);
            
            // Extruded circle with line type.
            DxfLineType lineType = 
                new DxfLineType(
                    "SpecialLineType", 
                    "description", 
                    new double[] {0.5d, -0.3d, 0, -0.3d}
                );
            model.LineTypes.Add(lineType);
            DxfCircle circle3 = new DxfCircle(new Point3D(0d, -4d, 3d), 9d);
            circle3.Color = EntityColors.Red;
            circle3.LineType = lineType;
            circle3.Thickness = 0.4;
            model.Entities.Add(circle3);

            // Arc.
            DxfArc arc = new DxfArc(new Point3D(20d, -4d, 3d), 9d, Math.PI * 0.2d, Math.PI * 1.7d);
            arc.Color = EntityColors.Blue;
            model.Entities.Add(arc);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
            <exception cref="T:WW.Cad.Base.DxfException">Thrown when model is invalid.</exception>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.Write(System.String,WW.Cad.Model.DxfModel)">
            <summary>
            Write the specified model to a DXF file (ASCII).
            </summary>
            <remarks>
            <para>
            Before writing <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called to check if the model is valid.
            When it is not valid a <see cref="T:WW.Cad.Base.DxfException"/> is thrown with a 
            list of <see cref="T:WW.Cad.Base.DxfMessage">messages</see>.
            </para>
            </remarks>
            <param name="filename">the filename of the file to write to.</param>
            <param name="model">the model to write.</param>
            <example>
            An example of how to create and write a dxf file.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create a line, circle, text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Line.
            DxfLine line1 = new DxfLine(new Point3D(-20d, -4d, 3d), new Point3D(-11d, -3.9d, 3d));
            model.Entities.Add(line1);

            // Circle.
            DxfCircle circle = new DxfCircle(new Point3D(-20d, -4d, 3d), 9d);
            circle.Color = EntityColors.Green;
            model.Entities.Add(circle);
            
            // Invisible blue circle.
            DxfCircle circle2 = new DxfCircle(new Point3D(3d, -4d, 3d), 4d);
            circle2.Color = EntityColors.Blue;
            circle2.Visible = false;
            model.Entities.Add(circle2);
            
            // Extruded circle with line type.
            DxfLineType lineType = 
                new DxfLineType(
                    "SpecialLineType", 
                    "description", 
                    new double[] {0.5d, -0.3d, 0, -0.3d}
                );
            model.LineTypes.Add(lineType);
            DxfCircle circle3 = new DxfCircle(new Point3D(0d, -4d, 3d), 9d);
            circle3.Color = EntityColors.Red;
            circle3.LineType = lineType;
            circle3.Thickness = 0.4;
            model.Entities.Add(circle3);

            // Arc.
            DxfArc arc = new DxfArc(new Point3D(20d, -4d, 3d), 9d, Math.PI * 0.2d, Math.PI * 1.7d);
            arc.Color = EntityColors.Blue;
            model.Entities.Add(arc);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
            <exception cref="T:WW.Cad.Base.DxfException">Thrown when model is invalid.</exception>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.Write">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
            <remarks>
            <para>
            Before writing <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called to check if the model is valid.
            When it is not valid a <see cref="T:WW.Cad.Base.DxfException"/> is thrown with a 
            list of <see cref="T:WW.Cad.Base.DxfMessage">messages</see>.
            </para>
            <para>
            After writing the underlying stream is closed if <see cref="P:WW.Cad.IO.DxfWriter.AutoCloseStream"/> is <c>true</c>.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">Thrown when model is invalid.</exception>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.Write(System.Boolean)">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
            <remarks>
            <para>
            Before writing optionally <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called to check if the model is valid.
            When it is not valid a <see cref="T:WW.Cad.Base.DxfException"/> is thrown with a 
            list of <see cref="T:WW.Cad.Base.DxfMessage">messages</see>.
            </para>
            <para>
            After writing the underlying stream is closed if <see cref="P:WW.Cad.IO.DxfWriter.AutoCloseStream"/> is <c>true</c>.
            </para>
            </remarks>
            <param name="validate">
            Specifies whether <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called before writing.
            </param>
            <exception cref="T:WW.Cad.Base.DxfException">Thrown when model is invalid.</exception>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteClasses">
            <summary>
            The CLASSES section was introduced in DXF release 13.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteEntityBase(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Writes entity attributes.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteChunkedText(System.String)">
            <summary>
            Write a text, while dividing it into chunks if necessary.
            </summary>
            <remarks>
            This uses default values for base group (<c>1</c>), 
            extension group (<c>3</c>) and chunk size (<c>250</c>).
            </remarks>
            <param name="text">text to write</param>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteChunkedText(System.Int32,System.Int32,System.String)">
            <summary>
            Write a text, while dividing it into chunks if necessary.
            </summary>
            <remarks>
            This uses a default values for chunk size (<c>250</c>).
            </remarks>
            <param name="baseGroup">base group code for text</param>
            <param name="extGroup">extension froup code for text</param>
            <param name="text">text to write</param>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteChunkedText(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Write a text, while dividing it into chunks if necessary.
            </summary>
            <param name="baseGroup">base group code for text</param>
            <param name="extGroup">extension froup code for text</param>
            <param name="maxChunkSize">chunk size for text</param>
            <param name="text">text to write</param>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteBinaryData(System.Int32,System.IO.Stream,System.Int32)">
            <summary>
            Writes binary data in specified stream.
            Cuts the data in 64 byte chunks, and writes all of the chunks.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteVector2DWithWidth(WW.Cad.Model.Entities.DxfLwPolyline.Vertex,System.Boolean)">
            <summary>
            Write vertex with width.
            Note that widths must be written either for none or for all vertices.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteViewportR14(WW.Cad.Model.Entities.DxfViewport)">
            <summary>
            Most of the R13-R14 viewport fields are stored in its extended data.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.WriteCellStyleMap(WW.Cad.Model.Objects.DxfCellStyleMap)">
            <summary>
            The CELLSTYLEMAP object contains more info than the TABLESTYLE object.
            The TABLESTYLE object only contains the Data, Header and Title cell styles,
            whereas the CELLSTYLEMAP may also contain user defined cell styles.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.DxfWriter.AutoCloseStream">
            <summary>
            Gets or sets whether to automatically close the stream after writing (the default value is <c>true</c>).
            </summary>
            <seealso cref="M:WW.Cad.IO.DxfWriter.Write"/>
        </member>
        <member name="P:WW.Cad.IO.DxfWriter.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.DxfWriter.Version">
            <summary>
            The version of the file being written.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.IEntityVisitor">
            <summary>
            Represents an <see cref="T:Entity"/> visitor interface.
            With this interface the so-called visitor design pattern can be applied to entities.
            </summary>
            <remarks>
            An example would be to build a <c>EntityTranslator</c> class that has specific translation
            code to translate each type of entity.
            Without needing to know the type of the entity, a user could write in a polymorphic fashion
            the following piece of code:
            <code>
                public void Translate(DxfEntity entity) {
                    EntityTranslator translator = new EntityTranslator(2d, 3d, 0d);
                    entity.Accept(translator);
                }
            </code>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.BasicEntityVisitor"/>
            <seealso cref="T:WW.Cad.Model.Entities.ConsolidatingEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.Dxf3DFace)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.Dxf3DSolid)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfArc)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfAttribute)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfAttributeDefinition)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfCircle)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Aligned)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Angular3Point)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Angular4Point)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Diametric)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Linear)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Ordinate)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Radial)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfEllipse)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfHatch)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfImage)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfProxyEntity)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfWipeout)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.InventorDrawing.DxfIDBlockReference)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLeader)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>        
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLine)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLwPolyline)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMeshFace)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMLine)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMText)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPoint)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyfaceMesh)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolygonMesh)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolygonSplineMesh)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline2D)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline2DSpline)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline3D)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline3DSpline)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfRay)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfShape)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfRegion)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfBody)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSequenceEnd)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSolid)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSpline)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfTable)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfText)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfTolerance)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfVertex2D)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfViewport)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfXLine)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IEntityVisitor.Visit(WW.Cad.Model.Entities.DxfOle)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfWriter.EntityWriteDispatcher.#ctor(WW.Cad.IO.DxfWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.IExtendedDataValueVisitor">
            <summary>
            Visitor interface for <see cref="T:IExtendedDataValue"/> implementations.
            See also <see cref="T:DxfExtendedData."/>
            </summary>
            <seealso cref="T:DxfExtendedData"/>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.BinaryData)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.DatabaseHandle)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.Distance)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.Double)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.LayerReference)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.PointOrVector)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.ScaleFactor)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.Int16)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.Int32)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.String)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.Bracket)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.WorldDirection)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.WorldSpacePosition)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValueVisitor.Visit(WW.Cad.Model.DxfExtendedData.ValueCollection)">
            <summary>
            Visits the specified value.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.DxfReader">
            <summary>
            Class for reading an AutoCAD DXF file into a <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
            <remarks>
            The DXF file format is specified by Autodesk, Inc
            (see <see href="http://www.autodesk.com/techpubs/autocad/acad2000/dxf/"/>).
            </remarks>
            <example>
            Below an example is shown of how to read and view a DXF file.
            <code lang="cs">
using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfViewExample {
    /// &lt;summary&gt;
    /// A basic DXF viewer example.
    /// &lt;/summary&gt;
    public partial class DxfViewExample : Form {
        private DxfModel model;
        private GDIGraphics3D gdiGraphics3D;
        private Bounds3D bounds;
        private Matrix4D modelTransform = Matrix4D.Identity;
        
        public DxfViewExample(string filename)
        {
            //
            // The InitializeComponent() call is required for Windows Forms designer support.
            //
            InitializeComponent();

            // To prevent flicker.
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            SetStyle(ControlStyles.DoubleBuffer, true);
            SetStyle(ControlStyles.UserPaint, true);
            
            BackColor = System.Drawing.Color.Black;

            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                MessageBox.Show("Error occurred: " + e.Message);
                Environment.Exit(1);
            }

            gdiGraphics3D = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
            gdiGraphics3D.CreateDrawables(model);

            // Uncomment for rotation example.
//            modelTransform = Transformation4D.RotateX(-30d * Math.PI / 180d) *
//                Transformation4D.RotateZ(150d * Math.PI / 180d);
            bounds = new Bounds3D();
            gdiGraphics3D.BoundingBox(bounds, modelTransform);
            CalculateTo2DTransform();
        }
        
        private void CalculateTo2DTransform() {
            if (bounds != null) {
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    bounds.Center,
                    new Point3D(0d, ClientSize.Height, 0d),
                    new Point3D(ClientSize.Width, 0d, 0d),
                    new Point3D(ClientSize.Width / 2, ClientSize.Height / 2, 0d)
                );
                gdiGraphics3D.To2DTransform = to2DTransform * modelTransform;
            }
        }
        
        protected override void OnResize(EventArgs e) {
            base.OnResize(e);
            CalculateTo2DTransform();
            Invalidate();
        }
        
        protected override void OnPaint(PaintEventArgs e) {
            e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            gdiGraphics3D.Draw(e.Graphics, ClientRectangle);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.IO.DxfWriter"/>
            <seealso cref="T:WW.Cad.IO.DwgReader"/>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DxfReader"/> class.
            </summary>
            <param name="stream">The stream to read.</param>
            <remarks>
            Default code page is <see href="Encodings.Default.CodePage"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DxfReader"/> class.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="defaultCodePage">The code page to use when $DWGCODEPAGE is not defined by the DXF file.</param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DxfReader"/> class.
            </summary>
            <param name="filename">The filename of the file to read.</param>
            <remarks>
            Default code page is <see href="Encodings.Default.CodePage"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DxfReader"/> class.
            </summary>
            <param name="filename">The filename of the file to read.</param>
            <param name="defaultCodePage">The code page to use when $DWGCODEPAGE is not defined by the DXF file.</param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.#ctor(WW.Cad.Model.DxfModel,WW.Cad.IO.IGroupReader)">
            <summary>
            Internally used constructor used for constructing an entity from an DxfXRecord.
            </summary>
            <param name="model">Model used for references.</param>
            <param name="groupReader">Group reader prividing the entity informatiuon.</param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.String)">
            <summary>
            Reads a model from a DXF file with the specified file name.
            </summary>
            <remarks>
            Accepts *.dxf or compressed versions of it (*.zip, *.bz2, *.gzip, *.tar).
            </remarks>
            <example>
            An example of how to read and view a DXF file.
            <code lang="cs">
using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfViewExample {
    /// &lt;summary&gt;
    /// A basic DXF viewer example.
    /// &lt;/summary&gt;
    public partial class DxfViewExample : Form {
        private DxfModel model;
        private GDIGraphics3D gdiGraphics3D;
        private Bounds3D bounds;
        private Matrix4D modelTransform = Matrix4D.Identity;
        
        public DxfViewExample(string filename)
        {
            //
            // The InitializeComponent() call is required for Windows Forms designer support.
            //
            InitializeComponent();

            // To prevent flicker.
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            SetStyle(ControlStyles.DoubleBuffer, true);
            SetStyle(ControlStyles.UserPaint, true);
            
            BackColor = System.Drawing.Color.Black;

            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                MessageBox.Show("Error occurred: " + e.Message);
                Environment.Exit(1);
            }

            gdiGraphics3D = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
            gdiGraphics3D.CreateDrawables(model);

            // Uncomment for rotation example.
//            modelTransform = Transformation4D.RotateX(-30d * Math.PI / 180d) *
//                Transformation4D.RotateZ(150d * Math.PI / 180d);
            bounds = new Bounds3D();
            gdiGraphics3D.BoundingBox(bounds, modelTransform);
            CalculateTo2DTransform();
        }
        
        private void CalculateTo2DTransform() {
            if (bounds != null) {
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    bounds.Center,
                    new Point3D(0d, ClientSize.Height, 0d),
                    new Point3D(ClientSize.Width, 0d, 0d),
                    new Point3D(ClientSize.Width / 2, ClientSize.Height / 2, 0d)
                );
                gdiGraphics3D.To2DTransform = to2DTransform * modelTransform;
            }
        }
        
        protected override void OnResize(EventArgs e) {
            base.OnResize(e);
            CalculateTo2DTransform();
            Invalidate();
        }
        
        protected override void OnPaint(PaintEventArgs e) {
            e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            gdiGraphics3D.Draw(e.Graphics, ClientRectangle);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.String,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Reads a model from a DXF file with the specified file name.
            </summary>
            <remarks>
            Accepts *.dxf or compressed versions of it (*.zip, *.bz2, *.gzip, *.tar).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.String,System.Int32)">
            <summary>
            Reads a model from a DXF file with the specified file name.
            </summary>
            <remarks>
            Accepts *.dxf or compressed versions of it (*.zip, *.bz2, *.gzip, *.tar).
            </remarks>
            <param name="filename">
            The file to read.
            </param>
            <param name="defaultCodePage">
            The code page to use when $DWGCODEPAGE is not defined by the dxf file.
            </param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.String,System.Int32,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Reads a model from a DXF file with the specified file name.
            </summary>
            <remarks>
            Accepts *.dxf or compressed versions of it (*.zip, *.bz2, *.gzip, *.tar).
            </remarks>
            <param name="filename">
            The file to read.
            </param>
            <param name="defaultCodePage">
            The code page to use when $DWGCODEPAGE is not defined by the dxf file.
            </param>
            <param name="progressEventHandler">
            Progress event handler.
            </param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.String,System.Int32,WW.Cad.Base.ProgressEventHandler,WW.Cad.Base.DxfMessageCollection@)">
            <summary>
            Reads a model from a DXF file with the specified file name.
            </summary>
            <remarks>
            Accepts *.dxf or compressed versions of it (*.zip, *.bz2, *.gzip, *.tar).
            </remarks>
            <param name="filename">
            The file to read.
            </param>
            <param name="defaultCodePage">
            The code page to use when $DWGCODEPAGE is not defined by the dxf file.
            </param>
            <param name="progressEventHandler">
            Progress event handler, possibly <c>null</c>.
            </param>
            <param name="messageReturn">A collection of the messages and warnings issued during the read process.</param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.String,WW.Cad.Base.ProgressEventHandler,WW.Cad.Base.DxfMessageCollection@)">
            <summary>
            Reads a model from a DXF file with the specified file name.
            </summary>
            <remarks>
            Accepts *.dxf or compressed versions of it (*.zip, *.bz2, *.gzip, *.tar).
            </remarks>
            <param name="filename">
            The file to read.
            </param>
            <param name="progressEventHandler">
            Progress event handler, possibly <c>null</c>.
            </param>
            <param name="messageReturn">A collection of the messages and warnings issued during the read process.</param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.IO.Stream)">
            <summary>
            Reads a model from the specified DXF stream.
            </summary>
            <example>
            An example of how to read and view a DXF file.
            <code lang="cs">
using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfViewExample {
    /// &lt;summary&gt;
    /// A basic DXF viewer example.
    /// &lt;/summary&gt;
    public partial class DxfViewExample : Form {
        private DxfModel model;
        private GDIGraphics3D gdiGraphics3D;
        private Bounds3D bounds;
        private Matrix4D modelTransform = Matrix4D.Identity;
        
        public DxfViewExample(string filename)
        {
            //
            // The InitializeComponent() call is required for Windows Forms designer support.
            //
            InitializeComponent();

            // To prevent flicker.
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            SetStyle(ControlStyles.DoubleBuffer, true);
            SetStyle(ControlStyles.UserPaint, true);
            
            BackColor = System.Drawing.Color.Black;

            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                MessageBox.Show("Error occurred: " + e.Message);
                Environment.Exit(1);
            }

            gdiGraphics3D = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
            gdiGraphics3D.CreateDrawables(model);

            // Uncomment for rotation example.
//            modelTransform = Transformation4D.RotateX(-30d * Math.PI / 180d) *
//                Transformation4D.RotateZ(150d * Math.PI / 180d);
            bounds = new Bounds3D();
            gdiGraphics3D.BoundingBox(bounds, modelTransform);
            CalculateTo2DTransform();
        }
        
        private void CalculateTo2DTransform() {
            if (bounds != null) {
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    bounds.Center,
                    new Point3D(0d, ClientSize.Height, 0d),
                    new Point3D(ClientSize.Width, 0d, 0d),
                    new Point3D(ClientSize.Width / 2, ClientSize.Height / 2, 0d)
                );
                gdiGraphics3D.To2DTransform = to2DTransform * modelTransform;
            }
        }
        
        protected override void OnResize(EventArgs e) {
            base.OnResize(e);
            CalculateTo2DTransform();
            Invalidate();
        }
        
        protected override void OnPaint(PaintEventArgs e) {
            e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            gdiGraphics3D.Draw(e.Graphics, ClientRectangle);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.IO.Stream,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Reads a model from the specified DXF stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.IO.Stream,System.Int32)">
            <summary>
            Reads a model from the specified DXF stream.
            </summary>
            <param name="stream">
            The stream to read from.
            </param>
            <param name="defaultCodePage">
            The code page to use when $DWGCODEPAGE is not defined by the dxf file.
            </param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.IO.Stream,System.Int32,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Reads a model from the specified DXF stream.
            </summary>
            <param name="stream">
            The stream to read from.
            </param>
            <param name="defaultCodePage">
            The code page to use when $DWGCODEPAGE is not defined by the dxf file.
            </param>
            <param name="progressEventHandler">
            Progress event handler.
            </param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.IO.Stream,System.Int32,WW.Cad.Base.ProgressEventHandler,WW.Cad.Base.DxfMessageCollection@)">
            <summary>
            Reads a model from the specified DXF stream.
            </summary>
            <param name="stream">
            The stream to read from.
            </param>
            <param name="defaultCodePage">
            The code page to use when $DWGCODEPAGE is not defined by the dxf file.
            </param>
            <param name="progressEventHandler">
            Progress event handler.
            </param>
            <param name="messageReturn">A collection of the messages and warnings issued during the read process.</param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(System.IO.Stream,WW.Cad.Base.ProgressEventHandler,WW.Cad.Base.DxfMessageCollection@)">
            <summary>
            Reads a model from the specified DXF stream.
            </summary>
            <param name="stream">
            The stream to read from.
            </param>
            <param name="progressEventHandler">
            Progress event handler.
            </param>
            <param name="messageReturn">A collection of the messages and warnings issued during the read process.</param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read(WW.Cad.Model.DxfModel)">
            <summary>
            Reads the contents of the DXF file into given <see cref="T:WW.Cad.Model.DxfModel"/> object.
            </summary>
            <param name="dxfModel">Empty model to read into.</param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Read">
            <summary>
            Creates <see cref="T:WW.Cad.Model.DxfModel"/> and reads the DXF file contents into the created model.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.GetGroup">
            <summary>
            Get the next non-comment DXF group.
            </summary>
            <remarks>
            Side effect: modifies currentGroup.
            <para/>
            Fires <see cref="E:WW.Cad.IO.DxfReader.Progress"/> event every now and then.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.GetGroupTryParse">
            <summary>
            Get the next non-comment DXF group.
            </summary>
            <remarks>
            Side effect: modifies currentGroup.
            <para/>
            Fires <see cref="E:WW.Cad.IO.DxfReader.Progress"/> event every now and then.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.GetGroup(System.Int32)">
            <summary>
            Get DXF group.
            </summary>
            <remarks>
            Side effect: modifies currentGroup.
            <para/>
            Fires <see cref="E:WW.Cad.IO.DxfReader.Progress"/> event every now and then.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertSubClassMarker(System.String)">
            <summary>
            Throws exception if not currentGroup is not a subclass marker 
            with given subclass.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.IsEndOfSubClass(System.String)">
            <returns>
            true if at end of given subclass.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.CreateEntityFromGroupReader(WW.Cad.Model.DxfModel,WW.Cad.IO.IGroupReader,WW.Cad.IO.Group)">
            <summary>
            Tricky method to create an entity from a dedicated group reader.
            </summary>
            <remarks>
            Currently used to create MTEXT from an XRECORD as happens in ATTRIB/ATTDEF.
            This method has to stay internally as the current implementation does not handle resolving of references,
            which has to be done elsewhere.
            </remarks>
            <param name="model">Model used for references.</param>
            <param name="groupReader">Group reader providing group information, should return <see cref="F:WW.Cad.IO.Group.Empty"/> after the entity is read.</param>
            <param name="endGroup">Group ending the model groups.</param>
            <returns>The entity or <c>null</c> when something goes wrong.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ReadHeader">
            <summary>
            TODO: detail this further for variable value consisting of more than 1 group.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ReadTables">
            <summary>
            Read tables section.
            </summary>
            <remarks>
            Precondition: position should be at or before table header.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ReadLayerTable">
            <summary>
            Read layer table.
            </summary>		
            <remarks>
            Precondition: position should be before first layer.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseDimStyleGroup(WW.Cad.Model.Tables.DxfDimensionStyle,WW.Cad.IO.Builders.DxfDimensionStyleBuilder,System.Int32,System.Int32@)">
            <summary>
            Parses the dim style group.
            </summary>
            <remarks>
            Keep in synch with method <see cref="!:DxfDimensionStyleBuilder.Init"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ReadBlocks">
            <summary>
            Read DXF blocks section.
            </summary>		
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ReadBlock">
            <summary>
            Read a block.
            </summary>
            <remarks>
            Precondition: start of block is already read.
            Reads until end of block.
            The content of a block is the same as the entities section.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ResolveReferences">
            <summary>
            Resolve all references between objects.
            The ultimate goal is to have a fully connected object graph.
            Still needs some work to have all ownership relations correct.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssignEntitiesToLayouts">
            <summary>
            Assigns entities and viewports to their layouts.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.GetObjectWithHandle(System.UInt64)">
            <summary>
            Gets the object with the given handle.
            </summary>
            <remarks>
            To avoid ClassCastExceptions prefer the parametrized method with the same name!
            </remarks>
            <param name="handle">The handle.</param>
            <returns>Object or <c>null</c>.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.GetObjectWithHandle``1(System.UInt64)">
            <summary>
            Get an object with a given handle as a defined type.
            </summary>
            <remarks>This method will add warnings if the given handle is undefined or the found object is of wrong type.</remarks>
            <typeparam name="T">Object type, extending <see cref="T:WW.Cad.Model.DxfHandledObject"/></typeparam>
            <param name="handle">Handle of the requested object.</param>
            <returns>
            An object of the given type or <c>null</c> if there is no object 
            with the given handle or the object is of a different type.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ReadEntities">
            <summary>
            Read entities section.
            </summary>		
            <remarks>
            Precondition: position must be at start of section.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ReadEntities(System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.IO.Group)">
            <summary>
            Read entities until given end marker is read.
            </summary>		
            <remarks>
            <para>
            Precondition: position must be at start of first entity.
            </para>
            <para>
            Model space entities are added to specified entities collection.
            Paper space entities are added to collection paperSpaceEntities which 
            will be assigned to layouts during reference resolution.
            Similarly viewports are added to collection viewports.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ReadAcEntity(WW.Cad.IO.Builders.DxfEntityBuilder)">
            <summary>
            Read entity.
            </summary>
            <remarks>
            Precondition: expected to be at start of AcClasses.DxfEntity.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseEntityGroups(WW.Cad.IO.Builders.DxfEntityBuilder)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode_Byte(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested. Read byte value and return it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode_Bool(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested. Read bool value and return it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode_String(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested. Read string value and return it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode_Short(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested. Read short value and return it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode_Double(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested. Read double value and return it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode_Int(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested. Read int value and return it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode_Handle(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested. Read handle value and return it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.AssertGroupCode_ULong(System.Int32)">
            <summary>
            Throws exception if not currentGroup is not equal to 
            requested. Read ulong value and return it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParsePointGroups(WW.Cad.IO.Builders.DxfEntityBuilder,WW.Cad.Model.Entities.DxfPoint)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseLineGroups(WW.Cad.IO.Builders.DxfEntityBuilder,WW.Cad.Model.Entities.DxfLine)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseRayGroups(WW.Cad.IO.Builders.DxfEntityBuilder,WW.Cad.Model.Entities.DxfRay)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseXLineGroups(WW.Cad.IO.Builders.DxfEntityBuilder,WW.Cad.Model.Entities.DxfXLine)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseMLineGroups(WW.Cad.IO.Builders.DxfEntityBuilder,WW.Cad.Model.Entities.DxfMLine,WW.Cad.Model.Entities.DxfMLine.Segment@,WW.Cad.Model.Entities.DxfMLine.Segment.Element@)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseVertexGroups(WW.Cad.IO.Builders.DxfEntityBuilder,WW.Cad.IO.DxfReader.VertexInfo)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseMLineStyle(WW.Cad.IO.Builders.DxfObjectBuilder,WW.Cad.Model.Objects.DxfMLineStyle,WW.Cad.Model.Objects.DxfMLineStyle.Element@)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParsePlotSettings(WW.Cad.IO.Builders.DxfObjectBuilder,WW.Cad.Model.Objects.DxfPlotSettings)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseTableStyle(WW.Cad.IO.Builders.DxfTableStyleBuilder,System.Collections.Generic.List{System.Int32})">
            <returns>true if parsed.</returns>
            <param name="tableStyleBuilder">table style builder, where the parsed styles are set</param>
            <param name="currentCellStyleGroupCodes">
            This list is used to detect if a new cell style is started.
            </param>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseCellStyleMap(WW.Cad.IO.Builders.DxfCellStyleMapBuilder)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseLayout(WW.Cad.IO.Builders.DxfLayoutBuilder,WW.Cad.Model.Objects.DxfLayout)">
            <returns>true if parsed.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.ParseViewportGroupsR14(WW.Cad.IO.Builders.DxfViewportBuilder,WW.Cad.Model.Entities.DxfViewport)">
            <summary>
            In R13 and R14 most viewport fields are stored in its extended data.
            This is resolved by the viewport builder.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.SkipUntil(WW.Cad.IO.Group)">
            <summary>
            Reads from reader until given group.
            </summary>
            <returns>true if group found.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.SkipUntil(System.Int32)">
            <summary>
            Reads from reader until given group code.
            </summary>
            <returns>true if group code found.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.SkipUntilCheckEndOfFile(WW.Cad.IO.Group)">
            <summary>
            Reads from reader until after given group.
            Also checks for end of file.
            The normal SkipUntil doesn't do this for performance.
            </summary>
            <returns>true if group found.</returns>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.GetStreamType(System.IO.Stream)">
            <summary>
            Detect the stream type.
            </summary>
            <remarks>
            Autocad prior to release 14 has single byte group codes.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.GetTextStyleWithName(System.String)">
            <summary>
            Tries to get text style with given name, and if it's not found a text style is created.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.OnProgress(System.Single)">
            <summary>
            Fire the <see cref="E:WW.Cad.IO.DxfReader.Progress"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DxfReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:WW.Cad.IO.DxfReader.Progress">
            <summary>
            The progress event.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.DxfReader.LoadUnknownObjects">
            <summary>
            Gets or sets a value indicating whether to load unknown objects.
            The default value is <c>false</c>.
            Unknown entities might contain proxy graphics that can be displayed by CadLib.
            Proxy graphics contain the graphical representation of the object that is not directly supported
            by the DWG and DXF format.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.DxfReader.Messages">
            <summary>
            Gets the messages that were produced during the reading of a DXF file.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.DxfReader.ThrowExceptionOnInvalidGroupCode">
            <summary>
            Gets or sets a value indicating whether to throw an exception when encountering an invalid group codes.
            The default value is <c>true</c>.
            </summary>
            <remarks>
            Some older CadLib versions wrote invalid group codes under rare circumstances. 
            By default CadLib does not read these invalid group codes, but by setting this property to <c>false</c> 
            it will accept these group codes.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.DxfReader.Model">
            <summary>
            Contains the complete DXF model after reading.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.DxfReader.EntityInfo">
            <summary>
            Raw entity info class with unresolved references for storing info before 
            creating the concrete DxfEntity.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.DxfReader.DimensionInfo">
            <summary>
            Raw entity to store dimension info in before 
            creating the actual DxfDimension subclass.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.DxfReader.VertexInfo">
            <summary>
            Raw entity to store vertex info in before 
            creating the actual DxfVertex subclass.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.DxfReader.Polyline3DInfo">
            <summary>
            Fake temporary entity to store polyline info in before 
            creating the actual DxfPolylineBase subclass.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter">
            <summary>
            Represents base class for parameters with two controll points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameter">
            <summary>
            Represents the base class for all dynamic block parameters.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement">
            <summary>
            Represents the base class for all dynamic block elements.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphConnectable">
            <summary>
            Represents the base class for all connectable nodes of eval graph.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression">
            <summary>
            Represents the base class for all evaluation graph related classes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.DataValue">
            <summary>
            Gets or sets the attached data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.VersionMajor">
            <summary>
            Gets or sets the major version. Default value is 29.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.NodeId">
            <summary>
            Gets or sets the eval graph node id.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.VersionMinor">
            <summary>
            Gets or sets the minor version. Default value is 6.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.UnknownField">
            <summary>
            Gets or sets the field with unknon meaning. Default value is -1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphExpression.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphConnectable.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphConnectable.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphConnectable.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraphConnectable.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.Name">
            <summary>
            Gets or sets the user friendly name of the element.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.VersionMajor">
            <summary>
            Gets or sets the major version. Default value is 29.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.VersionMinor">
            <summary>
            Gets or sets the minor version. Default value is 6.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.UnknownField">
            <summary>
            Gets or sets the field with unknown meaning. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockElement.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameter.ShowProperties">
            <summary>
            Gets the show proterties flag. Default value is true.
            </summary>
            <remarks>
            Control that showing of parameter in property window.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameter.ChainActions">
            <summary>
            Gets the show chain actions flag. Default value is false.
            </summary>
            <remarks>
            Define the behavour of parameter if parameter is in selection set for some action.
            If true, parameter wil be changed and linked action will be executed. 
            if false action owner of selection set will not modify the parameter.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter.BasePoint">
            <summary>
            Gets or sets the base point type. Default value is PointType.StartPoint.
            </summary>
            <remarks>
            Defines which point will be base point.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter.GripIds">
            <summary>
            Gets or sets the grip id. Array of size 4
            </summary>
            <remarks>
            Links to associated grip points.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter.FirstPoint">
            <summary>
            Gets or sets the first point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter.SecondPoint">
            <summary>
            Gets or sets the second point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockTwoPointsParameter.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <remarks>
            As examople DisplacementX, DisplacementY for LinearParameter.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.DefaultPlotStyle">
            <summary>
            Basic plot style, which just takes its settings directly from an entity and its draw context.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.IPlotStyle">
            <summary>
            Plot style settings.
            </summary>
            <remarks>
            This interface is subject to change!
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.IPlotStyle.Color">
            <summary>
            Get the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IPlotStyle.LineWeight">
            <summary>
            Get the line weight.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DefaultPlotStyle.#ctor(WW.Cad.Model.Entities.IPlotPropertyOwner,WW.Cad.Drawing.DrawContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DefaultPlotStyle"/> class.
            </summary>
            <param name="plotPropertyOwner">The entity or other plot property owner.</param>
            <param name="drawContext">The draw context.</param>
        </member>
        <member name="P:WW.Cad.Model.DefaultPlotStyle.Color">
            <summary>
            Get the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DefaultPlotStyle.LineWeight">
            <summary>
            Get the line weight.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaSearchData.SchemaNameIndex">
            <summary>
            Gets or sets the schema name index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaSearchData.SortedIndexes">
            <summary>
            Gets the sorted indexes.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaSearchData.IdIndexesSet">
            <summary>
            Gets or sets the ID indexes set.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.SchemaSearchData.IdEntry">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DataStorage.SchemaSearchData"/> ID entry.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaSearchData.IdEntry.Handle">
            <summary>
            Gets or sets the handle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaSearchData.IdEntry.Indexes">
            <summary>
            Gets the indexes.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.Schema">
            <summary>
            Represents a data storage schema, which is basically a collection of properties (name/value pairs).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.Schema.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.Schema.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.Schema.Indexes">
            <summary>
            Gets the indexes.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.Schema.PropertyDescriptors">
            <summary>
            Gets the property descriptors.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.Schema.Properties">
            <summary>
            Gets the properties.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment">
            <summary>
            Represents a file segment.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.Read(WW.Cad.Model.DataStorage.DataStore.FileSerializer)">
            <summary>
            Reads this file segment from the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.Write(WW.Cad.Model.DataStorage.DataStore.FileSerializer)">
            <summary>
            Writes this file segment to the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.WriteContents(WW.Cad.Model.DataStorage.DataStore.FileSerializer)">
            <summary>
            Sub type specific data is written by this method.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Header">
            <summary>
            Gets the header.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.StartOffset">
            <summary>
            Gets or sets the start offset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SystemDataOffset">
            <summary>
            Gets or sets the system data offset (used in schema data and schema index segments).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.DataOffset">
            <summary>
            Gets or sets the data offset (used in data segment).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.Search">
            <summary>
            Represents a search file segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Search.Schemas">
            <summary>
            Gets the schemas.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.SegmentIndex">
            <summary>
            Represents a segment index file segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SegmentIndex.Entries">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.SegmentIndex.Entry">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DataStorage.FileSegment.SegmentIndex"/> entry.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SegmentIndex.Entry.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SegmentIndex.Entry.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.Data">
            <summary>
            Represents a data file segment, containing daata records (smaller byte arrays) and 
            data blob entries (larger byte arrays that are split into pages).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.Data.WriteContents(WW.Cad.Model.DataStorage.DataStore.FileSerializer)">
            <summary>
            Writes the data, this will also add index entries to the data index during writing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.Entries">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference">
            <summary>
            Represents a data blob entry reference.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.IDataRecord.Read(WW.Cad.IO.Dwg.ByteStream,System.Int32)">
            <summary>
            Read the data record, assuming the uint dataSize was already read.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.IDataRecord.Write(WW.Cad.IO.Dwg.ByteStream)">
            <summary>
            Write the data record, including the uint dataSize.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.SetTotalDataSize(System.UInt64)">
            <summary>
            Sets the <see cref="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.TotalDataSize"/> and based on this calculate
            the page count and page size.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.GetDataStream(WW.Cad.Model.DataStorage.DataStore.FileSerializer)">
            <summary>
            Reads blobs as specified from the pages, and returns a stream to access the data in the pages.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.Read(WW.Cad.IO.Dwg.ByteStream,System.Int32)">
            <summary>
            Reads the page information, but no binary data yet. The binary data is read in <see cref="M:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.GetDataStream(WW.Cad.Model.DataStorage.DataStore.FileSerializer)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.TotalDataSize">
            <summary>
            Gets or sets the total size of the data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.PageCount">
            <summary>
            Gets or sets the page count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.LastPageSize">
            <summary>
            Gets or sets the last size of the page.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.Pages">
            <summary>
            Gets the pages.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.PageInfo">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference"/> page.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.PageInfo.SegmentIndex">
            <summary>
            Gets or sets the index of the segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataBlobEntryReference.PageInfo.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.Data.DataRecordHeader">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DataStorage.FileSegment.Data"/> file segment data record header.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.FileSegment.Data.DataRecordHeader.Size">
            <summary>
            The size of this record in bytes.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataRecordHeader.Handle">
            <summary>
            Gets or sets the handle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataRecordHeader.LocalOffset">
            <summary>
            Gets or sets the local offset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Data.DataRecordHeader.ReferencedObject">
            <summary>
            Gets or sets the referenced object.
            This is either a data record (byte[]) or DataBlobReference.
            Might change this into an interface in the future.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.Data.OffsetType">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DataStorage.FileSegment.Data.DataRecordHeader"/> offset type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.FileSegment.Data.OffsetType.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.FileSegment.Data.OffsetType.StreamOffset">
            <summary>
            Stream offset.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.FileSegment.Data.OffsetType.DataRecordIndex">
            <summary>
            Data record index.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.FileSegment.Data.OffsetType.BlobRecordIndex">
            <summary>
            Blob record index.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.EntryBase">
            <summary>
            Represents a file segment entry base class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex">
            <summary>
            Represents a schema index file segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.SegmentIndexes">
            <summary>
            Gets the segment indexes into the <see cref="P:WW.Cad.Model.DataStorage.FileSegment.SegmentIndex.Entries"/>.
            Each segment index corresponds to a <see cref="T:WW.Cad.Model.DataStorage.FileSegment.SchemaData"/> file segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.SchemaNames">
            <summary>
            Gets the schema names.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.SchemaEntries">
            <summary>
            Gets the schema entries.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.PropertyEntries">
            <summary>
            Gets the property entries.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.SchemaEntry">
            <summary>
            Represents a schema entry.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.SchemaEntry.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.SchemaEntry.SegmentIndex">
            <summary>
            Gets or sets the segment index of the <see cref="T:WW.Cad.Model.DataStorage.FileSegment.SchemaData"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.SchemaEntry.LocalOffset">
            <summary>
            Gets or sets the local offset.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.PropertyEntry">
            <summary>
            Represents a property entry.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.PropertyEntry.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.PropertyEntry.SegmentIndex">
            <summary>
            Gets or sets the segment index of the <see cref="T:WW.Cad.Model.DataStorage.FileSegment.SchemaData"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex.PropertyEntry.LocalOffset">
            <summary>
            Gets or sets the local offset.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.DataIndex">
            <summary>
            Represents a data index file segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.DataIndex.Entries">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.DataIndex.Entry">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DataStorage.FileSegment.DataIndex"/> entry.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.DataIndex.Entry.SegmentIndex">
            <summary>
            Gets or sets segment index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.DataIndex.Entry.IsStubEntry">
            <summary>
            Gets a value indicating whether this instance is a stub entry.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.DataIndex.Entry.LocalOffset">
            <summary>
            Gets or sets the local offset.
            This is a local offset in the stream relative to a file segment's stream start position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.DataIndex.Entry.SchemaIndex">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.SchemaData">
            <summary>
            Represents a schema data file segment.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.SchemaData.Read(WW.Cad.Model.DataStorage.DataStore.FileSerializer)">
            <summary>
            Reads this schema data from the specified stream.
            Prerequisites: the <see cref="T:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex"/> must be set.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.FileSegment.SchemaData.WriteContents(WW.Cad.Model.DataStorage.DataStore.FileSerializer)">
            <summary>
            Writes the schema data, and updates the schema index while writing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaData.Schemas">
            <summary>
            Gets the schemas.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.SchemaData.UnknownProperties">
            <summary>
            Gets the unknown properties.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegment.Blob01">
            <summary>
            Represents a blob file segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Blob01.TotalDataSize">
            <summary>
            Gets or sets the total data size.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Blob01.PageStartOffset">
            <summary>
            Gets or sets the page start offset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Blob01.PageIndex">
            <summary>
            Gets or sets the page index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Blob01.PageCount">
            <summary>
            Gets or sets the page count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Blob01.PageDataSize">
            <summary>
            Gets or sets the page data size.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegment.Blob01.BinaryData">
            <summary>
            Gets or sets the binary data.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfObjectReference">
            <summary>
            Represents a reference to a <see cref="T:WW.Cad.Model.DxfHandledObject"/>.
            For null references use <see cref="F:WW.Cad.Model.DxfObjectReference.Null"/> where possible.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfObjectReference.Null">
            <summary>
            A pseudo null reference, which saves doing some null checks.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfObjectReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:DxfObjectReference&lt;T&gt;"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfObjectReference.#ctor(WW.Cad.Model.IDxfHandledObject)">
            <summary>
            Initializes a new instance of the <see cref="!:DxfObjectReference&lt;T&gt;"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfObjectReference.GetReference(WW.Cad.Model.IDxfHandledObject)">
            <summary>
            Gets the reference associated with specified object, or <see cref="F:WW.Cad.Model.DxfObjectReference.Null"/> if it is <C>null</C>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfObjectReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfObjectReference.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfObjectReference.Handle">
            <summary>
            Gets or sets the handle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfObjectReference.Value">
            <summary>
            Gets or sets the handled object value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfModelRepairer">
            <summary>
            Represents a repairer to repair a <see cref="T:WW.Cad.Model.DxfModel"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModelRepairer.#ctor(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfModelRepairer"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModelRepairer.Repair">
            <summary>
            Repairs the model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModelRepairer.Cleanup">
            <summary>
            Cleans up objects that were flagged for removal during the repair phase.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModelRepairer.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModelRepairer.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModelRepairer.BlockToEntityRemovalIndices">
            <summary>
            Gets the block to entity removal indices.
            The indices are expected to be in ascending order.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.ISatObject">
            <summary>
            Basic interface for everything which can appear in a SAT file.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatObject.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatObject.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.ITagged">
            <summary>
            Basic interface for SAT entities with name... "cone"
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ITagged.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatShader.NameToEntityCreator">
            <summary>
            Dictionary for SAT entity creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatShader.SatShader.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatWrappedCheckerShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatWrappedCheckerShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatWrappedCheckerShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatWrappedCheckerShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatMirrorShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatMirrorShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatMirrorShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatMirrorShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatSurface">
            <summary>
            SAT surface entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatGraphicalEntity">
            <summary>
            Class only inserted to allow for reading new reference introduced in 
            <see cref="F:WW.Cad.Model.Acis.SatConstants.ExtraEntityDataVersion"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEntity.index">
            <summary>The entity index.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEntity.attribute">
            <summary>The attribute reference.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEntity.someValue">
            <summary>Another value (whatever?).</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEntity.usedAsBase">
            <summary>
            Used as a base for other classes?
            </summary>
            <remarks>
            This is a workaround for the stupid definition of Curve and Surface which expect their data at the end of the
            data of the extending class.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.IsAttributeChainValid">
            <summary>
            Return true if attribute list is valid.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.RegisterToFile(WW.Cad.Model.Acis.SatFile)">
            <summary>
            Register this entity to a SAT file.
            </summary>
            <remarks>
            Most entities are not registered directly to a SAT file.
            </remarks>
            <param name="satFile">SAT file to register to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.MarkUsedAsBase">
            <summary>
            Mark that this object is used as a base.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.GetEntityList``1(``0)">
            <summary>
            Get the collection of entities which starts with a given entity.
            </summary>
            <param name="startEntity">entity to start with (may be <c>null</c> which will result in an empty list)</param>
            <returns>collection of entities starting with <paramref name="startEntity"/></returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.GetEntityList``1(``0,WW.Cad.Model.Acis.SatEntities.SatEntity.FilterEntity)">
            <summary>
            Get a collection of special entities which starts with a given entity.
            </summary>
            <param name="startEntity">entity to start with (may be <c>null</c> which will result in an empty list)</param>
            <param name="filter">entity filter to decide which entities are accepted into the list</param>
            <returns>filtered collection of entities starting with <paramref name="startEntity"/></returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEntity.CollectWiresForList(WW.Cad.Model.Acis.SatEntities.SatEntity,WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to a list of entities.
            </summary>
            <param name="startEntity">entity to start with (may be <code>null</code>)</param>
            <param name="wires">wireframe collection where to collect</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEntity.Index">
            <summary>
            Get/set the index of this entity.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEntity.Attribute">
            <summary>
            Get/set the attribute.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEntity.SomeValue">
            <summary>
            Unknown value with unknown purpose.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEntity.Next">
            <summary>
            Get the next entity of the same type if this entity is a member in a list.
            </summary>
            <remarks>
            Returns <c>null</c> if this entity is not in a list or if it is the last member of the list
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEntity.UsedAsBase">
            <summary>
            Is this object used as a base?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatEntity.FilterEntity">
            <summary>
            Decide whether an entity is accepted.
            </summary>
            <param name="entity">entity to check</param>
            <returns><c>true</c> if the entity is accepted,
                    <c>false</c> if it is not accepted</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatGraphicalEntity.pattern">
            <summary>Reference to pattern.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatGraphicalEntity.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatGraphicalEntity.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatGraphicalEntity.Pattern">
            <summary>
            Another entity reference, purpose unknown.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSurface.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSurface.surfacePrimitive">
            <summary>The underlying surface primitive.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSurface.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSurface.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSurface.CreateSurfacePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of surface primitive.
            </summary>
            <returns>newly created surface primitive</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatSurface.SurfacePrimitive">
            <summary>
            Get the underlying surface primitive.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhLightEntity">
            <summary>
            SAT Rh background entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhEntity">
            <summary>
            SAT Rh entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhEntity.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhEntity.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhEntity.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhEntity.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhLightEntity.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhLightEntity.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhLightEntity.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhLightEntity.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatNullSurfacePrimitive">
            <summary>
            SAT cone primitive.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive">
            <summary>
            SAT surface primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.MinimalWires">
            <summary>Minimal numbers of extra isoline wires to create.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.intervalU">
            <summary>The u interval.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.intervalV">
            <summary>The v interval.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.NameToEntityCreator">
            <summary>
            Dictionary for SAT curve primitives creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.AddIsoLines(WW.Cad.Model.Acis.IndexedWireframeCollection,WW.Math.Geometry.Polygon2D[],WW.Cad.Model.Acis.IPointParamMapper)">
            <summary>
            Add iso lines.
            </summary>
            <remarks>
            This adds iso lines to a complex shape so the wireframe image is more detailed.
            </remarks>
            <param name="wires">wireframe collection where to add iso lines</param>
            <param name="paramShape">parameter space shape</param>
            <param name="mapper">mapper between world and param space</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.GetParameterPolyline(WW.Cad.Model.Acis.SatEntities.SatCoedge)">
            <summary>
            Get a parametric polylin shape for a mapped edge.
            </summary>
            <remarks>
            Take care of singularities!
            </remarks>
            <param name="edge">edge to map</param>
            <returns>polyline in parameter space or <code>null</code> if there is no useful mapping</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.CollectWireframes(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect the wires.
            </summary>
            <param name="firstLoop">first loop belonging to face</param>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.IntervalU">
            <summary>
            Get the interval of the U parameter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.IntervalV">
            <summary>
            Get the interval of the V parameter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.ExtendedIntervalU">
            <summary>
            Get the extended interval for U direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.ExtendedIntervalV">
            <summary>
            Get the extended interval for V direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.PointParamMapper">
            <summary>
            Get a mapper from model space to the param space of this surface and back.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSurfacePrimitive.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatNullSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatNullSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatNullSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatNullSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineRationalityType">
            <summary>
            B-spline surface rationality type
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineRationalityType.BSplineRationalityTypeEnumValues">
            <summary> B-spline curve or surface type strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineRationalityType.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineRationalityType.WriteDataTo(WW.Cad.Model.Acis.ISatWriter,WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineRationalityType.BSplineRationalityTypeEnum)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineRationalityType.BSplineRationalityTypeEnum">
            <summary>
            B-spline curve or surface type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLawSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive">
            <summary>
            SAT base class for Spline surface sub surface primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatSubEntity">
            <summary>
            SAT base class for SAT sub-entities.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSubEntity.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSubEntity.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to its stored format.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSubEntity.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.saveApproxLevel">
            <summary>Approximation save level.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.summaryUKnots">
            <summary>Summary level information.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.entityDataVersion">
            <summary>Version of sub surface data stream.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.booleanFlag">
            <summary>True\False boolean flag. The meaning of flag is unknown.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.NameToEntityCreator">
            <summary>
            Dictionary for SAT sub curves creation.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.ApproximationLevelEnumValues">
            <summary> Approximation level strings.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.CurveOpenStateEnumValues">
            <summary> Curve open state strings.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.SingularityStateEnumValues">
            <summary> Singularity state strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSurfacePrimitive.ApproximationLevel">
            <summary>
            Approximation level.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLawSplineSurfacePrimitive.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLawSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLawSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLawSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatLawIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive">
            <summary>
            SAT base class for interpolated curve primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.NoSurface">
            <summary>Null surface constant.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.NoCurve">
            <summary>Null curve constant.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.saveApproxLevel">
            <summary>Approximation save level.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.summaryKnots">
            <summary>Summary approximation level.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.range">
            <summary>Sub curve range.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.curveOpenState">
            <summary>Sub curve Open state.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.unknownVersion">
            <summary>Version of interpolated curve data stream.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.NameToEntityCreator">
            <summary>
            Dictionary for SAT sub curves creation.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.ApproximationLevelEnumValues">
            <summary> Approximation level strings.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.CurveOpenStateEnumValues">
            <summary> Curve open state strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubCurvePrimitive.ApproximationLevel">
            <summary>
            Approximation level.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatLawIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatLawIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatLawIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatLawIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline2DPrimitive">
            <summary>
            SAT spline in model coordinates primitive.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive">
            <summary>
            SAT curve primitive.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.IApproximatableCurve">
            <summary>
            A curve which can present an approximation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.IApproximatableCurve.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.interval">
            <summary>The interval.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.NameToEntityCreator">
            <summary>
            Dictionary for SAT curve primitives creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.ReadBasicDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the basic curve data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.WriteBasicDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the basic curve data to writer.
            </summary>
            <param name="writer">writer to write to</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.Interval">
            <summary>
            Get the interval of this curve.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatCurvePrimitive.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline2DPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline2DPrimitive.ReadBasicDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the basic curve data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline2DPrimitive.WriteBasicDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the basic curve data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline2DPrimitive.Type">
            <summary>
            Gets the entity that this interactor operates on.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.nextAttribute">
            <summary>The next attribute in the chain.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.prevAttribute">
            <summary>The prev attribute in the chain.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.ownEntity">
            <summary>The own entity.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.OwnEntity">
            <summary>
            Return own entity of the attribute
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.NextAttribute">
            <summary>
            Next attribute in the entity attribute chain.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute.PrevAttribute">
            <summary>
            Prev attribute in the entity attribute chain.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.RBase.SatRBaseAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.RBase.SatRBaseAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealIndividualEntityAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealIndividualEntityAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealSimGeomBaseEntityAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealSimGeomBaseEntityAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealEntityGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealEntityGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealShellGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealShellGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealShellGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealShellGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateBodyAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateBodyAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateGeomBuildBaseAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateGeomBuildBaseAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSecondaryAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSecondaryAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSecondaryAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSecondaryAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameVectorAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameVectorAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameVectorAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameVectorAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyeAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyeAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyeRefinementVertexTemplateAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyeRefinementVertexTemplateAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyeRefinementVertexTemplateAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyeRefinementVertexTemplateAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskSplineDataAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskSplineDataAttribute.points">
            <summary>Control points.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskSplineDataAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskSplineDataAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskSplineDataAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatConstants">
            <summary>
            Static class used to hold various constants.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.NonPeriodicLength">
            <summary>Return value used for non-periodic intervals. </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.EorMarker">
            <summary>
            The end-of-record marker. 
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.EofMarker">
            <summary>
            Special EOF marker in SAT file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.EofAsmMarker">
            <summary>
            Special EOF marker in SAT file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.NullIndex">
            <summary>
            Index for null pointer. 
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.EorMarkerString">
            <summary>
            The end-of-record marker as a string.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ParamVersion">
            <summary>
            The version at which the start parameter and end parameter values of edges were removed from the save file,
            and recomputed if required.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.LumpVersion">
            <summary>
            The version at which LUMPs were introduced, to subdivide bodies
            into disjoined connected regions.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.CurveVersion">
            <summary>
            The version at which curve types were first output to the save
            file as character strings instead of integers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.SurfaceVersion">
            <summary>
            The version at which surface types were first output to the save
            file as character strings instead of integers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.IntcurveVersion">
            <summary>
            The version at which subtypes of intcurves were defined requiring
            classification in the save file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.SplineVersion">
            <summary>
            The version at which subtypes of splines were defined requiring
            classification in the save file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.DollarVersion">
            <summary>
            The version at which pointers were first distinguished from integers
            in text files by a dollar sign.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.SharableVersion">
            <summary>
            The version at which sharable objects like int_cur and spl_sur
            were first surrounded by curly braces, and could be shared in the
            save file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.BlendVersion">
            <summary>
            The version at which blend attributes lost their ?form? integer
            value (which was always zero, and so redundant).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ParcurVersion">
            <summary>
            The version at which parameter curves may have the defining
            parameter curve and surface in either slot 1 or 2.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.PcurveVersion">
            <summary>
            The version at which pcurves may have different subtypes, and so
            need a type code.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.TwosideVersion">
            <summary>
            The version at which faces may be double?sided, either free sheets
            or embedded in material.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.LogioVersion">
            <summary>
            The version at which logical values are written to the save file
            as 'T' or 'F' instead of as integers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.SortcoedVersion">
            <summary>
            The version at which coedges were first expected to be sorted clockwise
            around the edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.InfintVersion">
            <summary>
            The version at which intervals could be (semi?)infinite, and so require
            different save file format.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.BndcurVersion">
            <summary>
            The version at which curves have a subset range to bound them within
            their natural range.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.BndsurVersion">
            <summary>
            The version at which surfaces have a subset range to bound them within
            their natural range.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.MultsavVersion">
            <summary>
            The version at which multiple entities can be saved into a single save
            file unit (as opposed to multiple self?contained sections of a file).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.FileinterfaceVersion">
            <summary>
            The version in which save and restore started using a FileInterface
            object to do the io.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.WireboolVersion">
            <summary>
            The version in which ?Wire Booleans? were implemented, requiring
            extensions to the data structure.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ThreedeyeRefVersion">
            <summary>
            The version in which ?3D eye refinements? were implemented.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.HistoryVersion">
            <summary>
            Version in which the History Manager was introduced
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.SaferangeVersion">
            <summary>
            The version in which ?Safe Ranges? for intcurves were implemented,
            requiring an extra field in the data structure.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.AngXcurVersion">
            <summary>
            The version which introduced angled cross curves at the ends of
            face?face blends, requiring extra fields in ATTRIB_FFBLEND.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.AdvBlVersion">
            <summary>
            The version at which advanced blending facilities were first made
            available.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.EnumAsStringVersion">
            <summary>
            The version where the enum values were started being saved as string.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ConsistentVersion">
            <summary>
            The version where the save/restore of logicals, enums was made consistent
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.FileinfoVersion">
            <summary>
            The version where the additional header information was added
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.MeshVersion">
            <summary>
            The version where the mesh classes were added
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ExtCuSfVersion">
            <summary>
            The version where extended curves and surfaces were introduced.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.CoedgeSenseVersion">
            <summary>
            The version where coedges were given sense enumeration strings.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ArcwiseSkinVersion">
            <summary>
            The version at which Skin/Loft surfaces have a subset range to bound them
            within their natural range.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.AdvVarBlendTwoRadiiVersion">
            <summary>
            The version in which adv_var_blend attributes output a logical
            specifying if two radii functions are used
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.LawVersion">
            <summary>
            The version in which laws first where added to ACIS
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.OffsetRevVersion">
            <summary>
            The version in which reflection of offset_spl_surs was handled
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.DiscontinuityVersion">
            <summary>
            The version in which discontinuity information was stored in int_curs and
            spl_surs
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.TaperExistenceVersion">
            <summary>
            The version in which taper_spl_surs came into existence
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.TaperVersion">
            <summary>
            The version in which taper_spl_surs were split into derived classes
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.NetSplVersion">
            <summary>
            The version in which net surface was added to ACIS
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.LawSplVersion">
            <summary>
            The version in which law curves and surfaces where added to ACIS
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ConeScalingVersion">
            <summary>
            The version at which cones have a new member, representing the
            scaling factor of the u parameter.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.LoftLawVersion">
            <summary>
            The version in which laws in lofts where added to ACIS
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.RefMinUvGridVersion">
            <summary>
            The version in which refinement ?min_u_grid_lines and min_v_grid_lines?
            were added.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.VblendAutoVersion">
            <summary>
            The version at which vertex blend attributes were given a new member
            describing the method of auto setback calculation, if any.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.BlEnvSfVersion">
            <summary>
            The version at which the true rolling?ball envelope surface was introduced
            for var_blend_spl_sur?s.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.EllipseOffsetVersion">
            <summary>
            The version in which ellipse offset with an ellipse base curve so that they
            will extend the ellipse and not linearly.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.TolModelingVersion">
            <summary>
            The version at which Tolerant Modeling was introduced.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ApproxSummaryVersion">
            <summary>
            The version in which approximating geometry could be stored in summary
            form.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.TaperScalingVersion">
            <summary>
            The version at which a scaling factor was saved for tapers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.LazyBSplineVersion">
            <summary>
            The version at which lazy b-splines were introduced.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.DmMultiSurfVersion">
            <summary>
            The version at which multi?surfaces were introduced to Deformable Modelling
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.DmMultiSurfColorVersion">
            <summary>
            The version at which link constraint color persistence was introduced to
            Deformable Modelling
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.RecalSkinErrorVersion">
            <summary>
            The version at which Skin/Loft surfaces error should be recalculated
            so that the intersector will not box out valid skin intersections.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.TaperURuledVersion">
            <summary>
            The version at which the fact whether the ruled taper was
            ruled in u or in v was saved for tapers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.TaperRuledVersionNewField">
            <summary>
            new filed was added to ruled taper surface
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Dm60Version">
            <summary>
            Multiple changes to DM SAT file in 6.0
            including point tangent constraints
            and saving of default shapes
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.LoftPcurveVersion">
            <summary>
            The version in which pcurves in lofts where added to ACIS
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.EelistOwnerVersion">
            <summary>
            The version in which an EELIST saves its owner and ownership policy
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.CopyActionVersion">
            <summary>
            The version in which an copy action was removed
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.AnnoHookedVersion">
            <summary>
            The version in which an ANNOTATION saves whether members are hooked
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.PatternVersion">
            <summary>
            The version in which patterns were added to ACIS
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.EntityTagsVersion">
            <summary>
            The version in which tags were added to ENTITYs
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.AtVersion">
            <summary>
            The version at which strings were first distinguished
            in text files by a @ sign.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.NetLawVersion">
            <summary>
            The version in which net law surface were added to ACIS
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.StringlessHistoryVersion">
            <summary>
            The version in which the 'bulletin' and 'bulletin_board' strings
            were removed from the history portion of the save file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.ExtraEntityDataVersion">
            <summary>
            The version in which there's extra entity data contained in the file.
            Attention: this is a guess!
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.VertexExtraIntVersion">
            <summary>
            The version in which there's an extra integer value in a vertex.
            Attention: this is a guess!
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version21200">
            <summary>
            Exact definition for 21200
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version21500">
            <summary>
            Exact definition for 21500
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version21600">
            <summary>
            Exact definition for 21600
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version21700">
            <summary>
            Exact definition for 21700
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version21800">
            <summary>
            Exact definition for 21800
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version20800">
            <summary>
            Exact definition for 20800
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version106">
            <summary>
            Exact definition for 106
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version201">
            <summary>
            Exact definition for 201
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version200">
            <summary>
            Exact definition for 200
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version400">
            <summary>
            Exact definition for 400
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatConstants.Version500">
            <summary>
            Exact definition for 500
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.DollarSatReader">
            <summary>
            SAT reader expecting a $ prefix for referenced indices.
            </summary>
            <remarks>
            This reader is fit for versions from <see cref="F:WW.Cad.Model.Acis.SatConstants.DollarVersion"/>
            until <see cref="F:WW.Cad.Model.Acis.SatConstants.AtVersion"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Acis.BasicSatReader">
            <summary>
            Basic implementation of a SAT reader.
            </summary>
            <remarks>
            This reader is fit for versions until <see cref="F:WW.Cad.Model.Acis.SatConstants.DollarVersion"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Acis.ISatReader">
            <summary>
            Access interface for SAT data.
            </summary>
            <remarks>
            All methods here may throw a SatFormatException.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Acis.ISatEntityResolver">
            <summary>
            Handler for entity resolve.
            </summary>
            <remarks>
            Entities in SAT refer to other entities by an index.
            The resolver allows to access the entities per index,
            and to register a handler to bind entities which are 
            not yet read.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatEntityResolver.RegisterEntityBinder(System.Int32,WW.Cad.Model.Acis.BindEntity)">
            <summary>
            Register an entity binder.
            </summary>
            <remarks>
            The binder is never called if the index is less than <c>0</c>,
            it is called immediately if the index can be resolved to an entity,
            and it may be called later as soon as an entity with the given index
            is registered. 
            </remarks>
            <param name="index">index for which binder is called</param>
            <param name="binder">binder to be called for the given index</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.ISatEntityResolver.Item(System.Int32)">
            <summary>
            Get an entity for a given index.
            </summary>
            <param name="index">entity index</param>
            <returns>
            entity or <c>null</c> if the index is less than <c>0</c>
            or the entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.ISatSubEntityResolver">
            <summary>
            Handler for entity resolve.
            </summary>
            <remarks>
            Entities in SAT refer to other entities by an index.
            The resolver allows to access the entities per index,
            and to register a handler to bind entities which are 
            not yet read.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatSubEntityResolver.SubEntity(System.Int32)">
            <summary>
            Get an sub-entity for a given index.
            </summary>
            <param name="index">sub-entity index</param>
            <returns>
            sub-entity or <c>null</c> if the index is less than <c>0</c>
            or the sub-entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatSubEntityResolver.RegisterNextSubEntity(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Register a sub-entity.
            </summary>
            <param name="subEntity">subEntity to registrate</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatSubEntityResolver.SubEntityIndex(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Get a sub-entity index for a given sub entity.
            </summary>
            <param name="subEntity">sub-entity</param>
            <returns>
            sub-entity index or -1 if sub-entity was not indexed
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadOptionalSequenceNumber(System.Int32)">
            <summary>
            Read an optional sequence number.
            </summary>
            <param name="defaultNumber">number returned if no sequence number is provided</param>
            <returns>sequence number</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadInt">
            <summary>
            Read the next integer value. 32 bits.
            </summary>
            <returns>integer value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadEOL">
            <summary>
            Read the end of line.
            </summary>
            <returns>integer value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadIndex">
            <summary>
            Read the next index value.
            </summary>
            <returns>index value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadDouble">
            <summary>
            Read the next double value.
            </summary>
            <returns>double value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadSubtypeEndMarker">
            <summary>
            Read the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadSubtypeStartMarker">
            <summary>
            Read the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadString">
            <summary>
            Read the next string value.
            </summary>
            <returns>string value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadEnum(System.String[])">
            <summary>
            Read the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <returns>selected enum index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadEnum(System.String[],System.Int32[])">
            <summary>
            Read the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <param name="indexes">Possible enum index values.</param>
            <returns>selected enum index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadLogical(WW.Cad.Model.Acis.ILogical)">
            <summary>
            Read the next logical string value.
            </summary>
            <param name="values">Logical to init.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadKeyword">
            <summary>
            Read the next keyword.
            </summary>
            <remarks>
            This may eg be an entity name.
            </remarks>
            <returns>keyword or <c>null</c></returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadRest(System.Collections.Generic.List{WW.Cad.Model.Acis.SatEntities.UnknownDataElementBase}@)">
            <summary>
            Read everything until the end-of-record marker.
            </summary>
            <param name="unknownData">store for unknow data.</param>
            <returns>true if source is SAT format</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadEndOfRecord(System.Boolean)">
            <summary>
            Read the end-of-record marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadHeader(WW.Cad.Model.Acis.SatHeader)">
            <summary>
            Read the header section.
            </summary>
            <param name="header">Header to fill</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadPosition">
            <summary>
            Read the next position.
            </summary>
            <returns>filled position</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.ReadVector">
            <summary>
            Read the next vector.
            </summary>
            <returns>filled vector</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatReader.GetSubTypeReader">
            <summary>
            Get a sub type definition reader.
            </summary>
            <returns>sub type definition reader</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.ISatReader.FileFormatVersion">
            <summary>
            Get the version of the file format.
            </summary>
            <returns>file format version</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.SequencePrefix">
            <summary>Prefix for sequence numbers.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.resolver">
            <summary>Wrapped entity resolver.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.subResolver">
            <summary>Wrapped sub-entity resolver.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.version">
            <summary>Version number.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.marker">
            <summary>Read marker.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.#ctor(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,WW.Cad.Model.Acis.BasicSatReader.ReadMarker)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">entity resolver</param>
            <param name="version">file version</param>
            <param name="marker">read marker</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.GetNextWord">
            Get the next word from the file content.
            @return next word
            @throws de.caff.sat.SatPrematureEndException if there is no further word
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.GetNextChars(System.Int32)">
            <summary>
            Get the next chars.
            </summary>
            <param name="numChars"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.CreateSubtypeReader(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,WW.Cad.Model.Acis.BasicSatReader.ReadMarker)">
            <summary>
            Create a reader for a sub part.
            </summary>
            <param name="entityResolver">entity resolver</param>
            <param name="subEntityResolver">sub-entity resolver</param>
            <param name="fileFormatVersion">file format version</param>
            <param name="subReadMarker">read marker for sub part</param>
            <returns>sub type reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadOptionalSequenceNumber(System.Int32)">
            <summary>
            Read an optional sequence number.
            </summary>
            <param name="defaultNumber">number returned if no sequence number is provided</param>
            <returns>sequence number</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadInt">
            <summary>
            Read the next integer value. 32 bits.
            </summary>
            <returns>integer value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadIndex">
            <summary>
            Read the next index value.
            </summary>
            <returns>index value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadDouble">
            <summary>
            Read the next double value.
            </summary>
            <returns>double value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadSubtypeEndMarker">
            <summary>
            Read the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadSubtypeStartMarker">
            <summary>
            Read the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadString">
            <summary>
            Read the next string value.
            </summary>
            <returns>string value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadEnum(System.String[],System.Int32[])">
            <summary>
            Read the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <param name="indexes">Possible enum index values.</param>
            <returns>selected enum index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadEnum(System.String[])">
            <summary>
            Read the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <returns>selected enum index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadLogical(WW.Cad.Model.Acis.ILogical)">
            <summary>
            Read the next logical string value.
            </summary>
            <param name="values">Possible logical values.</param>
            <returns>selected logical index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadKeyword">
            <summary>
            Read the next keyword.
            </summary>
            <remarks>
            This may eg be an entity name.
            </remarks>
            <returns>keyword or <c>null</c></returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadRest(System.Collections.Generic.List{WW.Cad.Model.Acis.SatEntities.UnknownDataElementBase}@)">
            <summary>
            Read everything until the end-of-record marker.
            </summary>
            <param name="unknownData">store for unknow data.</param>
            <returns>true if source is SAT format</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadEndOfRecord(System.Boolean)">
            <summary>
            Read the end-of-record marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadHeader(WW.Cad.Model.Acis.SatHeader)">
            <summary>
            Read a header section.
            </summary>
            <param name="header">Header to fill</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadPosition">
            <summary>
            Read the next position.
            </summary>
            <returns>filled position</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadVector">
            <summary>
            Read the next vector.
            </summary>
            <returns>filled vector</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadEOL">
            <summary>
            Read the end of line.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.GetSubTypeReader">
            <summary>
            Get a sub type definition reader.
            </summary>
            <returns>sub type definition reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.RegisterEntityBinder(System.Int32,WW.Cad.Model.Acis.BindEntity)">
            <summary>
            Register an entity binder.
            </summary>
            <remarks>
            The binder is never called if the index is less than <c>0</c>,
            it is called immediately if the index can be resolved to an entity,
            and it may be called later as soon as an entity with the given index
            is registered. 
            </remarks>
            <param name="index">index for which binder is called</param>
            <param name="binder">binder to be called for the given index</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.SubEntity(System.Int32)">
            <summary>
            Get an sub-entity for a given index.
            </summary>
            <param name="index">sub-entity index</param>
            <returns>
            sub-entity or <c>null</c> if the index is less than <c>0</c>
            or the sub-entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.RegisterNextSubEntity(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Register a sub-entity.
            </summary>
            <param name="subEntity">subEntity to registration</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.SubEntityIndex(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Get a sub-entity index for a given sub entity.
            </summary>
            <param name="subEntity">sub-entity</param>
            <returns>
            sub-entity index or -1 if sub-entity was not indexed
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSatReader.FileFormatVersion">
            <summary>
            Get the version of the file format.
            </summary>
            <returns>file format version</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSatReader.Item(System.Int32)">
            <summary>
            Get an entity for a given index.
            </summary>
            <param name="index">entity index</param>
            <returns>
            entity or <c>null</c> if the index is less than <c>0</c>
            or the entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.BasicSatReader.ReadMarker">
            <summary>Helper class for string read.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.SubtypeStart">
            <summary>Marker for start of a subtype.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.SubtypeEnd">
            <summary>Marker for end of a subtype.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.length">
            <summary>Content length.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.content">
            <summary>Content.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.pos">
            <summary>Current position.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="content">SAT file content</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.SkipWhiteSpace">
            <summary>
            Move pos over all whitespace.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.ReadEOL">
            <summary>
            Read the end of line.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.GetNextWord">
            <summary>
            Get the next word.
            </summary>
            <returns>next word or <c>null</c> if there are no further words</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.GetNextChars(System.Int32)">
            <summary>
            Get the next chars.
            </summary>
            <param name="numChars">Number of chars to retrieve.</param>
            <returns>String with <paramref name="numChars"/> chars or <c>null</c></returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.GetAllUntilEor">
            <summary>
            Get the rest of a record.
            </summary>
            <returns>Remaining record until EOR or <c>null</c>.</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.PeekNextChar">
            <summary>
            Peek for the next char waiting.
            </summary>
            <returns>next char</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.GetSubContentMarker">
            <summary>
            Get a marker for the content of an embedded subtype.
            </summary>
            <remarks>
            This moves the current position behind the content of the subtype.
            </remarks>
            <returns>marker</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatReader.ReadMarker.ToString">
            <summary>
            Get a string representation.
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.DollarSatReader.IndexPrefix">
            <summary>Marker for referenced indices.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.DollarSatReader.#ctor(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,WW.Cad.Model.Acis.BasicSatReader.ReadMarker)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="version">file version</param>
            <param name="marker">read marker</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.DollarSatReader.ReadIndex">
            <summary>
            Read the next index value.
            </summary>
            <returns>index value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.DollarSatReader.CreateSubtypeReader(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,WW.Cad.Model.Acis.BasicSatReader.ReadMarker)">
            <summary>
            Create a reader for a sub part.
            </summary>
            <param name="entityResolver">entity reaolver</param>
            <param name="fileFormatVersion">file format version</param>
            <param name="subReadMarker">read marker for sub part</param>
            <returns>sub type reader</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.BasicSatWriter">
            <summary>
            Basic implementation of a SAT writer.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Acis.ISatWriter">
            <summary>
            Access interface for SAT data.
            </summary>
            <remarks>
            All methods here may throw a SatFormatException.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteInt(System.Int32)">
            <summary>
            Write the next integer value. 32 bits.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteIndex(System.Int32)">
            <summary>
            Write the next index value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteIndex(WW.Cad.Model.Acis.SatEntities.SatEntity)">
            <summary>
            Write the next index value.
            </summary>
            <remarks>
            entity can be null
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteDouble(System.Double)">
            <summary>
            Write the next double value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteSubtypeEndMarker">
            <summary>
            Write the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteSubtypeStartMarker">
            <summary>
            Write the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteString(System.String)">
            <summary>
            Write the next string value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteEnum(System.String[],System.Int32)">
            <summary>
            Write the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteEnum(System.String[],System.Int32[],System.Int32)">
            <summary>
            Write the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <param name="indexes">Possible enum index values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteLogical(WW.Cad.Model.Acis.ILogical)">
            <summary>
            Write the next logical string value.
            </summary>
            <param name="values">Logical to init.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteKeyword(System.String)">
            <summary>
            Write the next keyword.
            </summary>
            <remarks>
            This may eg be an entity name.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteEndOfRecord">
            <summary>
            Write the end-of-record marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteEndOfLine">
            <summary>
            Write the end-of-line marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteHeader(WW.Cad.Model.Acis.SatHeader)">
            <summary>
            Write the header section.
            </summary>
            <param name="header">Header to fill</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WritePosition(WW.Math.Point3D)">
            <summary>
            Write the next position.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteVector(WW.Math.Vector3D)">
            <summary>
            Write the next vector.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.WriteRest(System.Collections.Generic.List{WW.Cad.Model.Acis.SatEntities.UnknownDataElementBase},System.Boolean)">
            <summary>
            Write unknown entity data.
            </summary>
            <param name="unknownData">store for unknow data.</param>
            <param name="comesFromSat">true if source is SAT format.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.ISatWriter.GetSubTypeWriter">
            <summary>
            Get a sub type definition writer.
            </summary>
            <returns>sub type definition writer</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.ISatWriter.FileFormatVersion">
            <summary>
            Get the version of the file format.
            </summary>
            <returns>file format version</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.ISatWriter.SAT">
            <summary>
            Get the string with data stream in SAT format.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatWriter.SequencePrefix">
            <summary>Prefix for sequence numbers.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatWriter.resolver">
            <summary>Wrapped entity resolver.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatWriter.subResolver">
            <summary>Wrapped sub-entity resolver.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatWriter.version">
            <summary>Version number.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatWriter.store">
            <summary>The storadge.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.#ctor(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">entity resolver</param>
            <param name="version">file version</param>
            <param name="marker">read marker</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.PutNextWord(System.String)">
            Get the next word from the file content.
            @return next word
            @throws de.caff.sat.SatPrematureEndException if there is no further word
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.CreateSubtypeWriter(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32)">
            <summary>
            Create a writer for a sub part.
            </summary>
            <param name="entityResolver">entity resolver</param>
            <param name="subEntityResolver">sub-entity resolver</param>
            <param name="fileFormatVersion">file format version</param>
            <param name="subWriteMarker">read marker for sub part</param>
            <returns>sub type writer</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteInt(System.Int32)">
            <summary>
            Write the next integer value. 32 bits.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteIndex(System.Int32)">
            <summary>
            Write the next index value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteIndex(WW.Cad.Model.Acis.SatEntities.SatEntity)">
            <summary>
            Write the next index value.
            </summary>
            <remarks>
            entity can be null
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteDouble(System.Double)">
            <summary>
            Write the next double value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteSubtypeEndMarker">
            <summary>
            Write the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteSubtypeStartMarker">
            <summary>
            Write the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteString(System.String)">
            <summary>
            Write the next string value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteEnum(System.String[],System.Int32[],System.Int32)">
            <summary>
            Write the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <param name="indexes">Possible enum index values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteEnum(System.String[],System.Int32)">
            <summary>
            Write the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteLogical(WW.Cad.Model.Acis.ILogical)">
            <summary>
            Write the next logical string value.
            </summary>
            <param name="values">Possible logical values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteKeyword(System.String)">
            <summary>
            Write the next keyword.
            </summary>
            <remarks>
            This may eg be an entity name.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteEndOfRecord">
            <summary>
            Write the end-of-record marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteEndOfLine">
            <summary>
            Write the end-of-line marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteHeader(WW.Cad.Model.Acis.SatHeader)">
            <summary>
            Write a header section.
            </summary>
            <param name="header">Header to fill</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WritePosition(WW.Math.Point3D)">
            <summary>
            Write the next position.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteVector(WW.Math.Vector3D)">
            <summary>
            Write the next vector.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.WriteRest(System.Collections.Generic.List{WW.Cad.Model.Acis.SatEntities.UnknownDataElementBase},System.Boolean)">
            <summary>
            Write unknown entity data.
            </summary>
            <param name="unknownData">store for unknow data.</param>
            <param name="comesFromSat">true if source is SAT format.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.RegisterEntityBinder(System.Int32,WW.Cad.Model.Acis.BindEntity)">
            <summary>
            Register an entity binder.
            </summary>
            <remarks>
            The binder is never called if the index is less than <c>0</c>,
            it is called immediately if the index can be resolved to an entity,
            and it may be called later as soon as an entity with the given index
            is registered. 
            </remarks>
            <param name="index">index for which binder is called</param>
            <param name="binder">binder to be called for the given index</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.SubEntity(System.Int32)">
            <summary>
            Get an sub-entity for a given index.
            </summary>
            <param name="index">sub-entity index</param>
            <returns>
            sub-entity or <c>null</c> if the index is less than <c>0</c>
            or the sub-entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.RegisterNextSubEntity(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Register a sub-entity.
            </summary>
            <param name="subEntity">subEntity to registration</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.GetSubTypeWriter">
            <summary>
            Get a sub type definition writer.
            </summary>
            <returns>sub type definition writer</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatWriter.SubEntityIndex(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Get a sub-entity index for a given sub entity.
            </summary>
            <param name="subEntity">sub-entity</param>
            <returns>
            sub-entity index or -1 if sub-entity was not indexed
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSatWriter.SAT">
            <summary>
            Get the string with data stream in SAT format.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSatWriter.FileFormatVersion">
            <summary>
            Get the version of the file format.
            </summary>
            <returns>file format version</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSatWriter.Item(System.Int32)">
            <summary>
            Get an entity for a given index.
            </summary>
            <param name="index">entity index</param>
            <returns>
            entity or <c>null</c> if the index is less than <c>0</c>
            or the entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.AcisUnknownEntity">
            <summary>
            An unknown ACIS entity.
            </summary>
            <remarks>
            Unknown ACIS entities are read by CadLib and stored in <c>AcisUnknownEntity</c> instances
            so they can be read later as is without losing information.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Acis.AcisEntity">
            <summary>
            An ACIS entity base class as used in <see cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisUnknownEntity.Lines">
            <summary>
            Gets the lines.
            </summary>
            <remarks>
            Each line must contain less than 255 characters.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Acis.Accuracy">
            <summary>
            A relative or absolute accuracy.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.Accuracy.epsilon">
            <summary>The epsilon defining the accuracy.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.Accuracy.absolute">
            <summary>Is this an absolute accuracy.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.Accuracy.#ctor(System.Double,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="epsilon">epsilon (a small positive value)</param>
            <param name="absolute">
            <c>true</c>: the accuracy value is absolute,
            <c>false</c>: the accuracy value is relative        
            </param>
        </member>
        <member name="M:WW.Cad.Model.Acis.Accuracy.GetEpsilon(System.Double)">
            <summary>
            Get the epsilon.
            </summary>
            <param name="size">typical size of an object</param>
            <returns>epsilon value, depending on size if this accuracy is relative</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.Accuracy.Epsilon">
            <summary>
            Get the epsilon.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.Accuracy.Absolute">
            <summary>
            Is the epsilon absolute?
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Builders.DxfHandledObjectBuilder.ResolveReferences(WW.Cad.IO.ModelBuilder)">
            <summary>
            Resolves the references.
            </summary>
            <remarks>
            Override must call the base method.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.Builders.DxfHandledObjectBuilder.ListNode">
            <summary>
            Gets or sets the list node.
            This is stored so it's easy to remove an object builder if needed.
            This happens in e.g. cases of text styles with duplicate names where the previous text style with that name has to be discarded.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.DwgImageSectionWriter">
            <summary>
            Writer for the image section (writes empty section currently).
            </summary>
        </member>
        <member name="T:WW.Cad.IO.DwgWriter">
            <summary>
            Represents a class for writing a <see cref="T:WW.Cad.Model.DxfModel">model</see> to an AutoCAD DWG file.
            </summary>
            <remarks>
            Currently supported versions are versions 
            13, 14, 15 (AutoCAD 2000), 18 (AutoCAD 2004), 21 (AutoCAD 2007), 24 (AutoCAD 2010) and 27 (AutoCAD 2013).
            </remarks>
            <example>
            Below is an example of how to create and write a DWG file.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class DwgWriteExample {
        public static void WriteDwgFile() {
            DxfModel model = new DxfModel(DxfVersion.Dxf15);

            DxfCircle circle = new DxfCircle(EntityColors.Blue, new Point2D(3, 2), 2d);
            model.Entities.Add(circle);

            DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
            dimension.DimensionLineLocation = new Point3D(7, 2, 0);
            // Touches bottom side of the circle.
            dimension.ExtensionLine1StartPoint = new Point3D(3, 0, 0);
            // Touches top side of the circle.
            dimension.ExtensionLine2StartPoint = new Point3D(3, 4, 0);
            model.Entities.Add(dimension);

            DxfVPort activeViewport = DxfVPort.CreateActiveVPort();
            activeViewport.Center = new Point2D(3, 2);
            activeViewport.Height = 15;
            model.VPorts.Add(activeViewport);

            DwgWriter.Write("Drawing.dwg", model);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.IO.DxfWriter"/>
            <seealso cref="T:WW.Cad.IO.DwgReader"/>
        </member>
        <member name="M:WW.Cad.IO.DwgWriter.#ctor(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DwgWriter"/> class.
            </summary>
            <param name="stream">
            The stream to which the DWG file is written.
            The stream must support writing and seeking.
            </param>
            <param name="model">The model to write.</param>
        </member>
        <member name="M:WW.Cad.IO.DwgWriter.Write(System.String,WW.Cad.Model.DxfModel)">
            <summary>
            Writes the specified model to a file with specified file name.
            </summary>
            <example>
            Below is an example of how to create and write a DWG file.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class DwgWriteExample {
        public static void WriteDwgFile() {
            DxfModel model = new DxfModel(DxfVersion.Dxf15);

            DxfCircle circle = new DxfCircle(EntityColors.Blue, new Point2D(3, 2), 2d);
            model.Entities.Add(circle);

            DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
            dimension.DimensionLineLocation = new Point3D(7, 2, 0);
            // Touches bottom side of the circle.
            dimension.ExtensionLine1StartPoint = new Point3D(3, 0, 0);
            // Touches top side of the circle.
            dimension.ExtensionLine2StartPoint = new Point3D(3, 4, 0);
            model.Entities.Add(dimension);

            DxfVPort activeViewport = DxfVPort.CreateActiveVPort();
            activeViewport.Center = new Point2D(3, 2);
            activeViewport.Height = 15;
            model.VPorts.Add(activeViewport);

            DwgWriter.Write("Drawing.dwg", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.IO.DwgWriter.Write(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Writes the specified model to the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgWriter.Write">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
            <remarks>
            <para>
            Before writing <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called to check if the model is valid.
            When it is not valid a <see cref="T:WW.Cad.Base.DxfException"/> is thrown with a 
            list of <see cref="T:WW.Cad.Base.DxfMessage">messages</see>.
            </para>
            <para>
            After writing the underlying stream is closed if <see cref="P:WW.Cad.IO.DwgWriter.AutoCloseStream"/> is <c>true</c>.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">Thrown when model is invalid.</exception>
        </member>
        <member name="M:WW.Cad.IO.DwgWriter.Write(System.Boolean)">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
            <remarks>
            <para>
            Before writing optionally <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called to check if the model is valid.
            When it is not valid a <see cref="T:WW.Cad.Base.DxfException"/> is thrown with a 
            list of <see cref="T:WW.Cad.Base.DxfMessage">messages</see>.
            </para>
            <para>
            After writing the underlying stream is closed if <see cref="P:WW.Cad.IO.DwgWriter.AutoCloseStream"/> is <c>true</c>.
            </para>
            </remarks>
            <param name="validate">
            Specifies whether <see cref="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)"/> is called before writing.
            </param>
            <exception cref="T:WW.Cad.Base.DxfException">Thrown when model is invalid.</exception>
        </member>
        <member name="P:WW.Cad.IO.DwgWriter.AutoCloseStream">
            <summary>
            Gets or sets whether to automatically close the stream after writing (the default value is <c>true</c>).
            </summary>
            <seealso cref="M:WW.Cad.IO.DwgWriter.Write"/>
        </member>
        <member name="M:WW.Cad.IO.Builders.DxfTableCellBuilder.AddAttribute">
            <summary>
            Used by DXF reader.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Builders.DxfTableCellBuilder.AddAttributeBuilder(WW.Cad.IO.Builders.DxfTableAttributeBuilder)">
            <summary>
            Used by DWG reader.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Builders.DxfTableCellBuilder.EdgeFlags">
            <summary>
            Gets or sets the edge flags.
            1 = top, 2 = right, 4 = bottom, 8 = left.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Builders.DxfTableCellBuilder.VirtualEdgeFlags">
            <summary>
            Gets or sets the virtual edge flags.
            A virtual edge is an edge that is shared with the adjacent cell,
            but since the adjacent's cell's edge is saved, the edge of this cell is virtual (i.e. not saved).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Builders.DxfEntityBuilder.GetNextHandle">
            <summary>
            Gets the next handle.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Builders.DxfEntityBuilder.EntityMode">
            <summary>
            Gets or sets the entity mode.
            </summary>
            <value>
            See <see cref="T:WW.Cad.IO.Dwg.EntityType"/>.
            </value>
        </member>
        <member name="M:WW.Cad.IO.Builders.DxfDimensionStyleBuilder.InitFromExtendedData(WW.Cad.Model.Tables.DxfDimensionStyleOverrides,WW.Cad.Model.DxfExtendedData,WW.Cad.IO.ModelBuilder)">
            <summary>
            Inits the specified extended data.
            </summary>
            <param name="dimensionStyle">The dimension style.</param>
            <param name="extendedData">The extended data (with app id "ACAD").</param>
            <param name="modelBuilder">The model builder.</param>
            <remarks>
            Keep in synch with method <see cref="M:WW.Cad.IO.DxfReader.ParseDimStyleGroup(WW.Cad.Model.Tables.DxfDimensionStyle,WW.Cad.IO.Builders.DxfDimensionStyleBuilder,System.Int32,System.Int32@)"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphicsFactoryColorChanger">
            <summary>
            This is a wireframe graphics factory wrapper class to forward drawing calls and change the drawable color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactoryColorChanger.#ctor(WW.Cad.Drawing.IWireframeGraphicsFactory,System.Func{WW.Drawing.ArgbColor,WW.Drawing.ArgbColor})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.WireframeGraphicsFactoryColorChanger"/> class.
            </summary>
            <param name="graphicsFactory">The wrapped graphics factory.</param>
            <param name="colorChanger">The color changer function.</param>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsFactoryColorChanger.GraphicsFactory">
            <summary>
            Gets the wrapped graphics factory.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsFactoryColorChanger.ColorChanger">
            <summary>
            Gets or sets the color changer function.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.QuadWithEdges">
            <summary>
            Represents a quad primitive with edges.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.IPrimitive">
            <summary>
            Represents a geometric surface drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitive.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadWithEdges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.QuadWithEdges"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadWithEdges.#ctor(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.QuadWithEdges"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadWithEdges.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadWithEdges.V0">
            <summary>
            Gets or sets vertex 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadWithEdges.V1">
            <summary>
            Gets or sets vertex 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadWithEdges.V2">
            <summary>
            Gets or sets vertex 2.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadWithEdges.V3">
            <summary>
            Gets or sets vertex 3.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadWithEdges.Edge0Visible">
            <summary>
            Gets or sets a value indicating whether edge 0 is visible.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadWithEdges.Edge1Visible">
            <summary>
            Gets or sets a value indicating whether edge 1 is visible.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadWithEdges.Edge2Visible">
            <summary>
            Gets or sets a value indicating whether edge 2 is visible.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadWithEdges.Edge3Visible">
            <summary>
            Gets or sets a value indicating whether edge 3 is visible.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Quad">
            <summary>
            Represents a quad primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Quad.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Quad"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Quad.#ctor(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Quad"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Quad.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Quad.V0">
            <summary>
            Gets or sets vertex 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Quad.V1">
            <summary>
            Gets or sets vertex 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Quad.V2">
            <summary>
            Gets or sets vertex 2.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Quad.V3">
            <summary>
            Gets or sets vertex 3.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert">
            <summary>
            Represents a processed graphic element insert (i.e. line type and extrusion have been applied).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.UnclippedBlock">
            <summary>
            Gets or sets the unclipped block.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.AttributeBlock">
            <summary>
            Gets or sets the attribute block.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.InsertCells">
            <summary>
            Gets or sets the insert cells (index is row, column, often just has 1 row/column).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.AttributeBlockCells">
            <summary>
            Gets or sets the attribute block cells (index is row, column, often just has 1 row/column).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.InsertCell">
            <summary>
            Represents an insert's cell at a certain row and column.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.InsertCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.InsertCell"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.InsertCell.#ctor(WW.Math.Matrix4D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.InsertCell"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.InsertCell.ClippedBlock">
            <summary>
            Gets or sets the clipped block.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementInsert.InsertCell.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Polyline2DN">
            <summary>
            Polyline based on <see cref="T:WW.Cad.Drawing.Point2D2WN"/> objects.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DN.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DN.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DN.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DN.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{WW.Cad.Drawing.Point2DN})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DN.#ctor(System.Boolean,WW.Cad.Drawing.Point2DN[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DN.#ctor(WW.Cad.Drawing.Point2DN[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DN"/> class.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Point2DE">
            <summary>
            Represents an extended 2D point.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.IExtendedPoint2D`1">
            <summary>
            An interface for an extended 2D point.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.IExtendedPoint2D">
            <summary>
            Basic interface for an extended point.
            </summary>
            <remarks>
            Classes should not implement this interface, but <see cref="T:WW.Cad.Drawing.IExtendedPoint2D`1"/> instead.
            This interface is only used where the exact type of the point is of no interest.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.IExtendedPoint2D.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.IExtendedPoint2D.IsInterpolatedPoint">
            <summary>
            Gets or sets whether this is an interpolated point.
            </summary>
            <remarks>
            Interpolated points are not used as splitting points when Plinegen is used
            when applying a line type.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.IExtendedPoint2D`1.GetPoint(`0,System.Double)">
            <summary>
            Gets the point between this point and the next vertex at the given fraction (0-1).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IExtendedPoint2D`1.GetEndPoint(`0,System.Double)">
            <summary>
            Gets the end point of a polyline, which lies between this point and the next vertex at the given fraction (0-1).
            </summary>
            <remarks>
            This method is intended to be faster in cases where the last point doesn't need all extended properties.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.IExtendedPoint2D`1.SetEndProperties(`0,System.Double)">
            <summary>
            Sets the vertex end properties based on given previous vertex and 
            this vertex is at given fraction (0-1) between the previous and next vertex
            (where next vertex is not passed to this method, but was used to construct this instance).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IExtendedPoint2D`1.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DE.#ctor(WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DE.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DE.GetPoint(WW.Cad.Drawing.Point2DE,System.Double)">
            <summary>
            Gets the point between this point and the nextVertex at the given fraction (0-1).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DE.GetEndPoint(WW.Cad.Drawing.Point2DE,System.Double)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.IExtendedPoint2D`1.GetEndPoint(`0,System.Double)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DE.SetEndProperties(WW.Cad.Drawing.Point2DE,System.Double)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.IExtendedPoint2D`1.SetEndProperties(`0,System.Double)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DE.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2DE.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2DE.IsInterpolatedPoint">
            <summary>
            See <see cref="!:IExtendedPoint2D&lt;T&gt;.IsInterpolatedPoint"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.IntersectionUtil">
            <summary>
            Utility class for calculating intersections.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.IntersectionUtil.GetIntersectionAngles(WW.Math.Geometry.Segment2D,WW.Math.Geometry.Circle2D)">
            <summary>
            Gets intersection angles (radians) between line and circle if they intersect.
            </summary>
            <returns>
            Array with 0, 1 or 2 elements.
            Each angle is between 0 and 2 Pi.
            </returns>
        </member>
        <member name="M:WW.Cad.Base.IntersectionUtil.GetIntersectionAngles(WW.Math.Geometry.Segment2D,WW.Math.Geometry.Arc2D)">
            <summary>
            Gets intersection angles (radians) between line and arc if they intersect.
            </summary>
            <returns>
            Array with 0, 1 or 2 elements.
            Each angle is between 0 and 2 Pi.
            </returns>
        </member>
        <member name="M:WW.Cad.Base.IntersectionUtil.CutRectangleFromArc(WW.Math.Vector2D,WW.Math.Vector2D,WW.Math.Vector2D,WW.Math.Geometry.Arc2D)">
            <summary>
            Cuts given rectangle from given arc.
            </summary>
            <param name="rectOrigin">Rectangle origin.</param>
            <param name="rectDx">Rectangle x-axis.</param>
            <param name="rectDy">
            Rectangle y-axis. 
            Must be at 90 degrees counter clockwise with respect to rectDx.
            </param>
            <param name="arc">The arc.</param>
            <returns>
            Returns between 0 and 3 arcs.
            </returns>
        </member>
        <member name="M:WW.Cad.Base.IntersectionUtil.IntersectionAngle.#ctor(System.Double,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.IntersectionUtil.IntersectionAngle.CompareTo(System.Object)">
            <summary>
            Sort by angle.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.IntersectionUtil.IntersectionAngle.Angle">
            <summary>
            Gets the intersection angle.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.IntersectionUtil.IntersectionAngle.IsStartOfCut">
            <summary>
            Intersecting line either is the start or the end of a cut in the arc.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.PointDisplayType">
            <summary>
            Represents a point display type.
            </summary>
        </member>
        <member name="F:WW.Cad.Actions.PointDisplayType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Actions.PointDisplayType.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:WW.Cad.Actions.PointDisplayType.EditHandle">
            <summary>
            Edit handle.
            </summary>
        </member>
        <member name="F:WW.Cad.Actions.PointDisplayType.CrossHair">
            <summary>
            Cross hair.
            </summary>
        </member>
        <member name="T:WW.Cad.Windows.Forms.CadColorEditor">
            <summary>
            A color editor for the <see cref="P:WW.Cad.Windows.Forms.CadColorEditor.Color"/> object.
            </summary>
        </member>
        <member name="M:WW.Cad.Windows.Forms.CadColorEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Windows.Forms.CadColorEditor"/> class.
            </summary>
        </member>
        <member name="F:WW.Cad.Windows.Forms.CadColorEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:WW.Cad.Windows.Forms.CadColorEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WW.Cad.Windows.Forms.CadColorEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:WW.Cad.Windows.Forms.CadColorEditor.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Windows.Forms.CadColorEditor.ColorSet">
            <summary>
            Gets or sets the color set.
            The default value is<see cref="F:WW.Cad.Model.DxfIndexedColorSet.AcadClassicIndexedColors"/>.
            The index colors RGB values are dependent on the color set.
            On a dark background the colors are displayed brigther, on a light
            background the colors are displayed darked.
            </summary>
        </member>
        <member name="P:WW.Cad.Windows.Forms.CadColorEditor.ShowColorBookTab">
            <summary>
            Gets or sets a value indicating whether to show the color book tab.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.EdgeType">
            <summary>
            Edge type for <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EdgeType.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EdgeType.CircularArc">
            <summary>
            Circular arc.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EdgeType.EllipticArc">
            <summary>
            Elliptic arc.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EdgeType.Spline">
            <summary>
            Spline.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.LogStatistics">
            <summary>
            Log statistics.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.LogStatistics.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.LogStatistics.DebugCount">
            <summary>
            Gets the number of debug messages.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.LogStatistics.ErrorCount">
            <summary>
            Gets the number of error messages.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.LogStatistics.TotalCount">
            <summary>
            Gets the number of total messages.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.LogStatistics.WarningCount">
            <summary>
            Gets the number of warning messages.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColoredComplexPathAsOne">
            <summary>
            Path that can consist of several sub drawables and is drawn using a single 
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <remarks>
            This class is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.BaseColoredPath">
            <summary>
            Base colored path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.BaseColoredPath.#ctor(WW.Drawing.ArgbColor,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.BaseColoredPath.Color">
            <summary>
            Get the path color.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.IColoredDrawable">
            <summary>
            Colored drawable interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.IColoredDrawable.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the colored path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.IColoredDrawable.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the colored path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.IColoredDrawable.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredComplexPathAsOne.#ctor(WW.Drawing.ArgbColor,WW.Cad.Drawing.GDI.IDrawable[],System.Boolean,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredComplexPathAsOne.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredComplexPathAsOne.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredComplexPathAsOne.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.BinaryGroupWriterSB">
            <summary>
            Binary group writer (single byte group codes).
            </summary>
        </member>
        <member name="T:WW.Cad.IO.IGroupWriter">
            <summary>
            Interface for writing groups.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.IGroupWriter.WriteGroup(WW.Cad.IO.Group)">
            <summary>
            Write given group.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.IGroupWriter.WriteGroup(System.Int32,WW.Cad.IO.Group)">
            <summary>
            Write given group.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.IGroupWriter.WriteGroupAsInt16(WW.Cad.IO.Group)">
            <summary>
            Write given group as Int16.
            </summary>
            <remarks>
            Needed because some groups are not consistently signed or unsigned (e.g. group 71).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.IGroupWriter.WriteGroupAsUInt16(WW.Cad.IO.Group)">
            <summary>
            Write given group as UInt16.
            </summary>
            <remarks>
            Needed because some groups are not consistently signed or unsigned (e.g. group 71).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.IGroupWriter.WriteGroupAsString(WW.Cad.IO.Group)">
            <summary>
            Write given group as string.
            </summary>
            <remarks>
            Needed because some handle groups are not consistently a handle (e.g. group 5).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.IGroupWriter.Flush">
            <summary>
            Flush the writer.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.IGroupWriter.Close">
            <summary>
            Close the writer and underlying stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupWriterSB.#ctor(System.IO.BinaryWriter,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupWriterSB.WriteGroup(WW.Cad.IO.Group)">
            <summary>
            Write a group. See <see cref="T:WW.Cad.IO.IGroupWriter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupWriterSB.WriteGroup(System.Int32,WW.Cad.IO.Group)">
            <summary>
            Write a group. See <see cref="T:WW.Cad.IO.IGroupWriter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupWriterSB.WriteGroupAsInt16(WW.Cad.IO.Group)">
            <summary>
            Write given group as Int16. See <see cref="T:WW.Cad.IO.IGroupWriter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupWriterSB.WriteGroupAsUInt16(WW.Cad.IO.Group)">
            <summary>
            Write given group as UInt16. See <see cref="T:WW.Cad.IO.IGroupWriter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupWriterSB.Flush">
            <summary>
            Flushes the writer.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupWriterSB.Close">
            <summary>
            Close the writer and underlying stream.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolyline2D">
            <summary>
            Represents a 2D polyline (entity POLYLINE), built from <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> objects.
            </summary>
            <remarks>
            <para>
            A 2D polyline consists of straight lines and arcs.
            Arc curvature is defined by its <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.Bulge"/> property.
            </para>
            <para>
            The object coordinate system that affects all <see cref="P:WW.Cad.Model.Entities.DxfPolyline2D.Vertices"/> 
            is defined by properties <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DBase.ZAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DBase.Elevation"/>.
            </para>
            </remarks>
            <example>
            An example of how to create and write a dxf file containing a DxfPolyline2D.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace Examples {
    public class Polyline2DExample {
        public void Demonstrate()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            // Simple 2D polygon.
            DxfPolyline2D polyline2D = new DxfPolyline2D(
                new DxfVertex2D[] {
                    new DxfVertex2D(-2, 0),
                    new DxfVertex2D(-2, 1),
                    new DxfVertex2D(-1, 1),
                    new DxfVertex2D(-1, 0)
                }
            );
            polyline2D.Closed = true;
            model.Entities.Add(polyline2D);
    
            DxfWriter.Write("WriteDxfPolyline3DTest-R14.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfVertex2D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolyline2DBase">
            <summary>
            Represents an abstract Polyline2D base class.
            </summary>
            <remarks>
            The object coordinate system is defined by properties <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DBase.ZAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DBase.Elevation"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolylineBase">
            <summary>
            Represents an abstract polyline base class.
            </summary>
            <remarks>
            There are several 2D and 3D polyline sub types.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolylineBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolylineBase"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolylineBase.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolylineBase.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified polyline in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolylineBase.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolylineBase.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolylineBase.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.IClipBoundaryProvider">
            <summary>
            An interface for retrieving a clip boundary.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IClipBoundaryProvider.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified 2D polyline in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.GetPolylines(WW.Cad.Drawing.DrawContext,WW.Cad.Drawing.ILineTypeScaler,System.Collections.Generic.IList{System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D}}@,System.Collections.Generic.IList{System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D}}@,System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D}@,System.Boolean@)">
            <summary>
            Gets both sides of the wide line contour polylines.
            </summary>
            <param name="context">The draw context.</param>
            <param name="lineTypeScaler">The line type scaler.</param>
            <param name="polylines1">The polylines for a polyline with no width, or one sie of the contour.</param>
            <param name="polylines2">The second side of the contour, or <c>null</c> for a polyline with no width.</param>
            <param name="shapes">Shapes form polyline fitting, or <c>null</c> if there are no shapes.</param>
            <param name="fill">Fill wide polyline?</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.GetPolylines(WW.Cad.Drawing.DrawContext,WW.Cad.Drawing.ILineTypeScaler,System.Collections.Generic.IList{System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N}}@,System.Collections.Generic.IList{System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N}}@,System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D}@,System.Boolean@)">
            <summary>
            Gets both sides of the wide line contour polylines.
            </summary>
            <param name="context">The draw context.</param>
            <param name="lineTypeScaler">The line type scaler.</param>
            <param name="polylines1">The polylines for a polyline with no width, or one sie of the contour.</param>
            <param name="polylines2">The second side of the contour, or <c>null</c> for a polyline with no width.</param>
            <param name="shapes">Shapes form polyline fitting, or <c>null</c> if there are no shapes.</param>
            <param name="fill">Fill wide polyline?</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DBase.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DBase.Elevation">
            <summary>
            Get or sets the elevation.
            </summary>
            <remarks>
            Elevation in object coordinate system (OCS).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DBase.ZAxis">
            <summary>
            z-axis of object coordinate system (OCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DBase.DefaultEndWidth">
            <summary>
            Gets or sets the default end width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DBase.DefaultStartWidth">
            <summary>
            Gets or sets the default start width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DBase.Thickness">
            <summary>
            Gets or sets the extrusion thickness.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DBase.Closed">
            <summary>
            Gets or sets whether the polyline is closed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DBase.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DBase.Transform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.#ctor(WW.Cad.Model.Entities.DxfVertex2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.#ctor(WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.#ctor(System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.#ctor(WW.Cad.Model.Entities.EntityColor,System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.#ctor(WW.Math.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified 2D polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2D.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2D.Vertices">
            <summary>
            Get all vertices (<see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/>) of the polyline.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2D.Plinegen">
            <summary>
            If <see langword="true"/> then the line type is applied on the polyline as a whole,
            other wise on each line segment separately.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.IDxfFont">
            <summary>
            Interface for DXF fonts.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.IDxfFont.GetText(System.String,WW.Drawing.ArgbColor,System.Int16,System.Boolean)">
            <summary>
            Get the shape for a given text.
            </summary>
            <param name="text">character</param>
            <param name="color">color of the text</param>
            <param name="lineWeight">The line weight.</param>
            <param name="vertical">Is the text vertical?</param>
            <returns>the graphics path for a given character</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.IDxfFont.IsDefinedCharacter(System.Char)">
            <summary>
            Is this character defined in the font?
            </summary>
            <param name="ch">character</param>
            <returns><c>true</c> if this font contains the character</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.IDxfFont.GetCanonicalGlyph(System.Char,System.Boolean)">
            <summary>
            Gets the glyph for specified character.
            </summary>
            <param name="c">The character.</param>
            <param name="vertical">Is the glyph drawn vertically? (only for SHX)</param>
        </member>
        <member name="P:WW.Cad.Model.Text.IDxfFont.Filled">
            <summary>
            Are the shapes of this font drawn filled?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.IDxfFont.Metrics">
            <summary>
            Get the text metrics defined by this font.
            </summary>
            <remarks>The metrics returned includes the transformation defined by <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.IDxfFont.SystemFont">
            <summary>
            Get the system font which is the base of this font.
            In case of an SHX font which has no underlying system font, this may return <c>null</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolygonMesh">
            <summary>
            A polygon mesh built out of a grid of m x n <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> objects.
            </summary>
            <remarks>
            The polygon mesh is optionally closed in m and/or n direction.
            See properties <see cref="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.ClosedInMDirection"/> and
            <see cref="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.ClosedInNDirection"/>.
            </remarks>
            <example>
            An example of how to create and write a DXF file containing DxfPolygonMesh objects.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace Examples {
    public class PolygonMeshExample {
        public void Demonstrate()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            // Create a polygon mesh surface of some function.
            DxfPolygonMesh polyline5 = new DxfPolygonMesh();
            polyline5.Color = EntityColors.Red;
            polyline5.MVertexCount = 10;
            polyline5.NVertexCount = 8;
            for (int i = 0; i &lt; polyline5.MVertexCount; i++) {
                for (int j = 0; j &lt; polyline5.NVertexCount; j++) {
                    double id = 0.5d * ((double)i - (double)(polyline5.MVertexCount - 1) / 2d);
                    double jd = 0.5d * ((double)j - (double)(polyline5.NVertexCount - 1) / 2d);
                    DxfVertex3D vertex =
                        new DxfVertex3D(
                            (double)(i + 4),
                            (double)j,
                            4d / (1d + System.Math.Sqrt((double)(id * id + jd * jd)))
                        );
                    polyline5.Vertices.Add(vertex);
                }
            }
            model.Entities.Add(polyline5);
    
            DxfWriter.Write("WriteDxfPolyline3DTest-R14.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolygonSplineMesh"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolygonMeshBase">
            <summary>
            Abstract polygon mesh base class.
            </summary>
            <remarks>
            The polygon mesh is optionally closed in m and/or n direction.
            See properties <see cref="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.ClosedInMDirection"/> and
            <see cref="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.ClosedInNDirection"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMeshBase.GetSurface(System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},WW.Cad.Model.Entities.DxfVertex3D[0:,0:],System.Int32,System.Int32)">
            <summary>
            Fills polylines according to the specified surfaceVertices.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMeshBase.GetSurface(System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfVertex3D},System.Int32,System.Int32)">
            <summary>
            Fills polylines according to the specified surfaceVertices.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.ClosedInMDirection">
            <summary>
            Gets or sets whether the polygon mesh is closed in M direction.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfPolylineBase.Flags"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.ClosedInNDirection">
            <summary>
            Gets or sets whether the polyline is closed in N direction.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfPolylineBase.Flags"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.Transform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolygonMesh"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolygonMesh"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified polygon mesh in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonMesh.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonMesh.Vertices">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> list.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonMesh.MVertexCount">
            <summary>
            Gets or sets the vertex count in M direction.
            </summary>
            <remarks>
            Resizes the <see cref="P:WW.Cad.Model.Entities.DxfPolygonMesh.Vertices"/> 2D array first dimension.
            All old vertices will be lost.
            </remarks>
            <seealso cref="!:SetDimensionLengths"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonMesh.NVertexCount">
            <summary>
            Gets or sets the vertex count in N direction.
            </summary>
            <remarks>
            Resizes the <see cref="P:WW.Cad.Model.Entities.DxfPolygonMesh.Vertices"/> 2D array second dimension.
            All old vertices will be lost.
            </remarks>
            <seealso cref="!:SetDimensionLengths"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.BackgroundFillInfo">
            <summary>
            Represents background fill information for <see cref="T:WW.Cad.Model.Entities.DxfMText">MTEXT</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BackgroundFillInfo.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.BackgroundFillInfo.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Entities.BackgroundFillInfo)">
            <summary>
            Copies from the specified object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.BackgroundFillInfo.BorderOffsetFactor">
            <summary>
            Gets or sets the scale factor.
            The default value is 1.5.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.BackgroundFillInfo.Color">
            <summary>
            Gets or sets the color.
            The default value is <see cref="F:WW.Cad.Model.Color.ByLayer"/>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfColor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.BackgroundFillInfo.Transparency">
            <summary>
            Gets or sets the transparency.
            The default value is transparency by layer.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.AttachmentPoint">
            <summary>
            Attachment point for e.g. <see cref="T:WW.Cad.Model.Entities.DxfMText">Multiline text</see> and <see cref="T:WW.Cad.Model.Entities.DxfDimension"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.TopLeft">
            <summary>Top left.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.TopCenter">
            <summary>Top center.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.TopRight">
            <summary>Top right.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.MiddleLeft">
            <summary>Middle left.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.MiddleCenter">
            <summary>Middle center.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.MiddleRight">
            <summary>Middle right.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.BottomLeft">
            <summary>Bottom left.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.BottomCenter">
            <summary>Bottom center.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttachmentPoint.BottomRight">
            <summary>Bottom right.</summary>
        </member>
        <member name="T:WW.Cad.Model.DimensionAssociativity">
            <summary>
            Dimension associativity for new dimension objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DimensionAssociativity.Exploded">
            <summary>
            Creates exploded dimensions; there is no association
            between elements of the dimension, and the lines, arcs,
            arrowheads, and text of a dimension are drawn as separate
            objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DimensionAssociativity.NonAssociative">
            <summary>
            Creates non-associative dimension objects; the elements
            of the dimension are formed into a single object, and if the
            definition point on the object moves, then the dimension
            value is updated.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DimensionAssociativity.Associative">
            <summary>
            Creates associative dimension objects; the elements of
            the dimension are formed into a single object and one or
            more definition points of the dimension are coupled with
            association points on geometric objects.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableColumnCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Entities.DxfTableColumn"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableColumnCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableColumnCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableColumnCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableColumnCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableColumnCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfTableColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableColumnCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableBreakData">
            <summary>
            Represents a break data for <see cref="T:WW.Cad.Model.Entities.DxfTable"/>.
            </summary>
            <remarks>
            A table may have sub tables, the breaks are defined by break data.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableBreakData.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableBreakData.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Entities.DxfTableBreakData)">
            <summary>
            Copies the contents from specified instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.HasData">
            <summary>
            Gets or sets a value indicating whether this instance has data.
            If <c>false</c> no break data is written to file.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.OptionFlags">
            <summary>
            Gets or sets the option flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.FlowDirection">
            <summary>
            Gets or sets the flow direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.BreakHeights">
            <summary>
            Gets the break heights.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.BreakSpacing">
            <summary>
            Gets or sets the break spacing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.RowRanges">
            <summary>
            Gets the row ranges. For internal use only.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.SubTables">
            <summary>
            Gets the sub tables.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.Flags">
            <summary>
            Gets or sets the has data flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.UnknownFlags1">
            <summary>
            Gets or sets the unknown flags1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakData.UnknownFlags2">
            <summary>
            Gets or sets the unknown flags2.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.XamlExporter">
            <summary>
            Represents a class for exporting a CAD drawing to the XAML format (Extensible Application Markup Language; pronounced "zammel").
            </summary>
            <remarks>
            <para>
            Because a XAML file cannot contain embedded images this exporter silently discards all images
            contained in the model.
            </para>
            <para>
            For display of lines on screen, it is important to set a proper <see cref="P:WW.Cad.Drawing.GraphicsConfig.DotsPerInch"/> value so
            a fitting pen stroke thickness can be calculated.
            </para>
            </remarks>
            <example>
            Below an example is shown of how to export a model to XAML.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Model;
using WW.Cad.IO;
using WW.Math;

namespace WW.Cad.Test {
    public class XamlExporterExample {
        public static void ExportToXaml(DxfModel model, string filename) {
            BoundsCalculator boundsCalculator = new BoundsCalculator();
            boundsCalculator.GetBounds(model);
            Bounds3D bounds = boundsCalculator.Bounds;

            // Scale to fit in a 400 x 400 rectangle.
            Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                bounds.Corner1,
                bounds.Corner2,
                new Point3D(bounds.Corner1.X, bounds.Corner2.Y, 0d),
                new Point3D(0d, 800d, 0d),
                new Point3D(800d, 0d, 0d),
                new Point3D(0d, 0d, 0d)
            );

            GraphicsConfig graphicsConfig = GraphicsConfig.WhiteBackgroundCorrectForBackColor;
            using (Stream stream = File.Create(filename)) {
                using (XmlTextWriter w = new XmlTextWriter(stream, Encoding.UTF8)) {
                    w.Formatting = Formatting.Indented;

                    w.WriteStartElement("Page");
                    w.WriteAttributeString("xmlns", "http://schemas.microsoft.com/winfx/2006/xaml/presentation");
                    w.WriteAttributeString("xmlns:x", "http://schemas.microsoft.com/winfx/2006/xaml");
                    w.WriteStartElement("Canvas");

                    XamlExporter xamlExporter = new XamlExporter(w);
                    xamlExporter.Draw(model, graphicsConfig, to2DTransform);

                    w.WriteEndElement(); // Canvas
                    w.WriteEndElement(); // Page

                    w.Close();
                }
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.IO.XamlExporter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.XamlExporter"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.XamlExporter.#ctor(System.Xml.XmlTextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.XamlExporter"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.XamlExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Draw given model on the XAML stream.
            </summary>
            <remarks>
            Draws only the model space entities.
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="modelToXamlTransform">Transform from model space to XAML paper space.</param>
        </member>
        <member name="M:WW.Cad.IO.XamlExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given model on the XAML stream.
            </summary>
            <remarks>
            Draws only the model space entities.
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="modelToXamlTransform">Transform from model space to XAML paper space.</param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.IO.XamlExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Draw given model on the XAML stream using given view port.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="layout">The layout to draw (optional).</param>
            <param name="viewports">The view ports to use for rendering (optional).</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="paperToXamlTransform">Transform from paper space to XAML paper space.</param>
        </member>
        <member name="M:WW.Cad.IO.XamlExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given model on the XAML stream using given view port.
            </summary>
            <param name="model">Model to draw.</param>
            <param name="layout">The layout to draw (optional).</param>
            <param name="viewports">The view ports to use for rendering (optional).</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="paperToXamlTransform">Transform from paper space to XAML paper space.</param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
            <remarks>
            Entities in model space are transformed to paper space according to
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.XamlExporter.Write(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Call this to actually write the XAML file.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.XamlExporter.NonTextPenWidth">
            <summary>
            Gets or sets the non-text pen width (default value is 1).
            </summary>
            <remarks>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight"/> is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.XamlExporter.TextPenWidth">
            <summary>
            Gets or sets the text pen width (default value is 1).
            </summary>
            <remarks>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight"/> is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.XamlExporter.Description">
            <summary>
            Gets or sets the description that is stored in the XAML drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.XamlExporter.Title">
            <summary>
            Gets or sets the title that is stored in the XAML drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.XamlExporter.CoordinateFormat">
            <summary>
            Gets or sets the coordinate format.
            The default value is "0.##".
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.IWireframeGraphicsFactory2">
            <summary>
            Factory interface for wireframe graphics objects.
            </summary>
            <seealso cref="T:WW.Cad.Drawing.ISurfaceGraphicsFactory"/>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Begin graphics creation for specified entity.
            End creation with <see cref="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.EndEntity"/>.
            </summary>
            <remarks>
            Implementations of this interface can use the begin/end markers of an entity to be able to later update graphics
            for a specific entity when e.g. an entity changes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.EndEntity">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Begin graphics creation for specified insert.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.EndInsert">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.BeginInsert(WW.Cad.Model.Entities.DxfInsert)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.BeginGeometry(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Begins a geometry.
            Geometries may not be nested.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when nesting of geometries is detected.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.EndGeometry">
            <summary>
            Ends the currently open geometry.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when no geometry is current.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreateDot(WW.Cad.Model.Entities.DxfEntity,WW.Math.Vector4D)">
            <summary>
            Create a colored dot.
            </summary>
            <param name="entity">The entity creating the dot.</param>
            <param name="position">the position</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreateLine(WW.Cad.Model.Entities.DxfEntity,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Create a colored line segment.
            </summary>
            <param name="entity">The entity creating the line segment.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreateRay(WW.Cad.Model.Entities.DxfEntity,WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored ray (infinite line in one direction).
            </summary>
            <param name="entity">The entity creating the ray.</param>
            <param name="segment">
            The line segment, first point must be the starting point,
            the second point goes towards infinity.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreateXLine(WW.Cad.Model.Entities.DxfEntity,System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored DxfXLine (infinite line in both direction).
            </summary>
            <param name="entity">The entity creating the xline.</param>
            <param name="startPoint">Starting point (for bounding box calculation).</param>
            <param name="segment">The line segment, both points approach infinity.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreatePolyline(WW.Cad.Model.Entities.DxfEntity,WW.Math.Geometry.Polyline4D)">
            <summary>
            Creates a polyline.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="polyline">The polyline to draw.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <remarks>
            Ownership of the shape is transferred to the implementor of this interface.
            </remarks>
            <param name="entity">The entity creating the shape.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreateText(WW.Cad.Model.Entities.DxfText)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.IWireframeGraphicsFactory2.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreateMText(WW.Cad.Model.Entities.DxfMText)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.IWireframeGraphicsFactory2.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeGraphicsFactory2.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Math.Point2D,WW.Math.Point2D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Create an image from a raster image entity.
            </summary>
            <param name="rasterImage">Raster image entity.</param>
            <param name="imageCorner1">The image rectangle corner1 (in images coordinates).</param>
            <param name="imageCorner2">The image rectangle corner2 (in images coordinates).</param>
            <param name="transformedOrigin">The transformed image origin (top left of image).</param>
            <param name="transformedXAxis">The transformed image origin + 1 * x-axis.</param>
            <param name="transformedYAxis">The transformed image origin + 1 * y-axis.</param>
            <param name="drawContext">The draw context in which the image is drawn.</param>
        </member>
        <member name="P:WW.Cad.Drawing.IWireframeGraphicsFactory2.SupportsText">
            <summary>
            Gets a value indicating whether the object supports text.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.PatternWriter">
            <summary>
            Writer for <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> objects to pattern files with extension .pat.
            </summary>
            <remarks>
            <para>
            Custom pattern files have the same file name as the pattern name, but with the .pat extension.
            </para>
            <para>
            Note that no pattern files are supplied with CadLib, but free .pat files are present on the internet.
            AutoCAD stores its predefined patterns in <b>Acad.pat</b>.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfHatch"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPattern"/>
            <seealso cref="T:WW.Cad.IO.PatternReader"/>
        </member>
        <member name="M:WW.Cad.IO.PatternWriter.WritePatterns(System.String,WW.Cad.Model.Entities.DxfPattern[])">
            <summary>
            Writes given <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> objects to file with given filename.
            </summary>
            <remarks>
            The filename should be the same as the pattern name when the file represents
            a single custom pattern.
            The filename should end in .pat. If it doesn't ".pat" is appended.
            </remarks>
            <param name="filename">The filename of the file to write the patterns to.</param>
            <param name="patterns">The patters to write.</param>
        </member>
        <member name="M:WW.Cad.IO.PatternWriter.WritePatterns(System.IO.TextWriter,WW.Cad.Model.Entities.DxfPattern[])">
            <summary>
            Writes given <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> objects to given writer.
            </summary>
            <param name="writer">The text writer to write the patterns to.</param>
            <param name="patterns">The patters to write.</param>
        </member>
        <member name="T:WW.Cad.IO.PatternReader">
            <summary>
            Reader for <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> objects from pattern files with extension .pat.
            </summary>
            <remarks>
            Note that no pattern files are supplied with CadLib, but free .pat files are present on the internet.
            AutoCAD stores its predefined patterns in <b>Acad.pat</b>.
            </remarks>
            <example>
            An example of how to read a pattern file and applying one of its patterns to a hatch.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

namespace Examples {
    public class PatternReaderExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfPatternStore.Add(PatternReader.ReadPatterns("Acad.pat"));

            DxfHatch hatch = new DxfHatch();
            hatch.Pattern = DxfPatternStore.GetPatternWithName("BRSTONE");
            DxfHatch.BoundaryPath boundaryPath = new DxfHatch.BoundaryPath();
            boundaryPath.Type = BoundaryPathType.Polyline;
            hatch.BoundaryPaths.Add(boundaryPath);
            boundaryPath.PolylineData =
                new DxfHatch.BoundaryPath.Polyline(
                    new DxfHatch.BoundaryPath.Polyline.Vertex[] {
                        new DxfHatch.BoundaryPath.Polyline.Vertex(-0.5, -40.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(-0.5, -2.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(40.5, -2.5)
                    }
                );
            boundaryPath.PolylineData.Closed = true;
            model.Entities.Add(hatch);
    
            DxfWriter.Write("Hatch Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfHatch"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPattern"/>
            <seealso cref="T:WW.Cad.IO.PatternWriter"/>
        </member>
        <member name="M:WW.Cad.IO.PatternReader.ReadPatterns(System.String)">
            <summary>
            Reads all <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> objects from file with given filename.
            </summary>
            <param name="filename">The filename of the file to read the patterns from.</param>
        </member>
        <member name="M:WW.Cad.IO.PatternReader.ReadPatterns(System.IO.TextReader)">
            <summary>
            Reads all <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> objects from given reader.
            </summary>
            <param name="reader">The text reader to read the patterns from.</param>
        </member>
        <member name="M:WW.Cad.Model.Surface2PathDrawer.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter">
            <summary>
            Represents the dynamic block visibility parameter.
            </summary>
            <remarks>
            A visibility parameter controls the visibility of object set. 
            You may add some number of visibility states and define visible and invisible entities for each state.
            Block may have only one visibility parameter.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockSinglePointParameter">
            <summary>
            Represents the dynamic block single point parameter.
            </summary>
            <remarks>
            Base class for parameters which control at least one point.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockSinglePointParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockSinglePointParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockSinglePointParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockSinglePointParameter.BasePoint">
            <summary>
            Gets or sets the base point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockSinglePointParameter.GripId">
            <summary>
            Gets or sets the grip point id.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockSinglePointParameter.FirstProperty">
            <summary>
            Gets or sets the first property.
            </summary>
            <remarks>
            Properties by X coordinate.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockSinglePointParameter.SecondProperty">
            <summary>
            Gets or sets the second property.
            </summary>
            <remarks>
            Properties by Y coordinate.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.UnknownFlag">
            <summary>
            Gets or sets the unknow flag 1. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.UnknownFlag2">
            <summary>
            Gets or sets the unknow flag 2. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.VisibilityStates">
            <summary>
            Gets or sets the visibility state information.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.HandleSet">
            <summary>
            Gets or sets the handles.
            </summary>
            <remarks>
            List of all non dynamic block entities (grips, actions, parameters) in the block.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter">
            <summary>
            Represents the dynamic block look up parameter.
            </summary>
            <remarks>
            LookUp parameter is "custom" parameter for dynamic blocks.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter.ActionId">
            <summary>
            Gets or sets the action id.
            </summary>
            <remarks>
            Typically link to lookUp action.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction">
            <summary>
            Represents the base class for the dynamic block actions.
            </summary>
            <remarks>
            Action defines how the dynamic block will be changed in case if some dynamic block parameter modified.
            Action typically assigned with set of Parameters and with set of database geometry.
            Also key point of action relative to Parameters should be specified (in this position action icon will be shown)
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.Position">
            <summary>
            Gets or sets the position of action icon insert.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.AttachedElements">
            <summary>
            Gets or sets the attached dynamic block elements (typically accociated parameters).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.AttachedEntities">
            <summary>
            Gets or sets the attached database entities list. This geometry will be modified by action if
            associated parameter is modified.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAction.ScaleTypeXY">
            <summary>
            Some of actions have special field in case of assotiated with XY parameter.
            </summary>
            <remarks>
            Used in derived classes.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.PlotStyleProvider">
            <summary>
            A provider which returns a plot style to be used based on specified plot properties.
            </summary>
            <remarks>
            The returned plot style might be found through a lookup or it might be created on the fly
            based on the original plot properties as specified by <paramref name="plotPropertyOwner"/>.
            </remarks>
            <param name="plotPropertyOwner">The plot property owner (usually an entity) for which a plot style is returned.</param>
            <param name="drawContext">The draw context.</param>
        </member>
        <member name="T:WW.Cad.Model.Entities.OleHelper">
            <summary>
            Helper class for the DXFOle entity. Hides pivoke calls to win32 API.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OleHelper.OleItemType(WW.Cad.Model.Entities.DxfOle)">
            <summary>
            Return OLE item type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OleHelper.OleUserType(WW.Cad.Model.Entities.DxfOle)">
            <summary>
            Return OLE user type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OleHelper.OleHiMetrics(WW.Cad.Model.Entities.DxfOle,System.Int32@,System.Int32@)">
            <summary>
            Return OLE link path.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OleHelper.OleLinkPath(WW.Cad.Model.Entities.DxfOle)">
            <summary>
            Return OLE link path.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OleHelper.Preview(WW.Cad.Model.Entities.DxfOle,System.Int32,System.Int32)">
            <summary>
            Return bitmap preview of OLE.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.SchemaDxfProperty">
            <summary>
            Represents a schema DXF property.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaDxfProperty.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaDxfProperty.IdName">
            <summary>
            Gets or sets the ID name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaDxfProperty.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaDxfProperty.Item">
            <summary>
            Gets or sets the item.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfProxyEntity">
            <summary>
            Represents a proxy entity containing graphics data for custom objects.
            This allows systems that do not support these custom objects to display their graphical data.
            </summary>
            <remarks>
            <para>
            At the moment this entity only supported for <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/> and later.
            </para>
            <para>
            Note that proxy graphics may also be part of <see cref="T:WW.Cad.Model.Entities.DxfUnknownEntity"/>.
            By default unknown entities are not read from DWG/DXF files. 
            To read them pass <c>true</c> for the <c>loadUnknownObjects</c> in the <see cref="M:WW.Cad.IO.CadReader.Read(System.String,System.Boolean)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfProxyEntity.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfProxyEntity.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfProxyEntity.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfProxyEntity.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfProxyEntity.ReadUnknownGroups(WW.Cad.IO.DxfReader,WW.Cad.IO.Builders.DxfHandledObjectBuilder)">
            <summary>
            Reads unknown groups into the binary/string data streams.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfProxyEntity.GetClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfProxyEntity.DxfConversionNeeded(WW.Cad.Model.DxfVersion)">
            <summary>
            Gets whether merging or splitting of the DXF data in the custom object data streams is needed.
            After R18 strings are stored in a separate string data stream. And therefore
            data from before R18 needs to be split.
            The other way around holds as well, split streams may need to be merged when
            writing to R18 and earlier.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.OriginalCustomObjectClass">
            <summary>
            Gets or sets the original custom object class.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.ProxyGraphics">
            <summary>
            Gets or sets the proxy graphics.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.Version">
            <summary>
            Gets or sets the version during which the graphics data was created.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.MaintenanceVersion">
            <summary>
            Gets or sets the maintenance version during which the graphics data was created.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.OriginalCustomObjectDataFormatIsDxf">
            <summary>
            Gets or sets a value indicating whether the original custom object data format is DXF.
            I.e. the data stored in the binary blobs is formatted as DXF groups (code value pairs).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.BinaryDataSizeInBits">
            <summary>
            Gets or sets the size in bits.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.BinaryDataStream">
            <summary>
            Gets or sets the binary data stream.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.StringDataSizeInBits">
            <summary>
            Gets or sets the string data size in bits.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.StringDataStream">
            <summary>
            Gets or sets the string data stream.
            The string stream was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, 
            in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/> and before string data was stored in the <see cref="P:WW.Cad.Model.Entities.DxfProxyEntity.BinaryDataStream"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfProxyEntity.ObjectReferences">
            <summary>
            Gets the object references.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfTimeSpan">
            <summary>
            Represents a time span.
            The <see cref="T:System.TimeSpan"/> struct cannot hold enough days, so this special struct is needed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfTimeSpan.MillisecondsPerDay">
            <summary>
            The number of milliseconds that fit in a day.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTimeSpan.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTimeSpan"/> struct.
            </summary>
            <param name="days">The days.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfTimeSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTimeSpan"/> class.
            </summary>
            <param name="days">The days.</param>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfTimeSpan.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTimeSpan.Days">
            <summary>
            Gets or sets the number of days.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTimeSpan.Milliseconds">
            <summary>
            Gets or sets the milliseconds.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTimeSpan.TotalMilliseconds">
            <summary>
            Gets the total milliseconds.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTimeSpan.TotalDays">
            <summary>
            Gets the total number of days.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatChromeShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatChromeShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatChromeShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatChromeShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatPrematureEndException">
            <summary>
            Special exception if SAT file is ending too early.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatFormatException">
            <summary>
            Exception thrown when anything in a SAT file is broken.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatPrematureEndException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatStraight">
            <summary>
            SAT straight entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatCurve">
            <summary>
            SAT curve entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCurve.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCurve.curvePrimitive">
            <summary>The curve primitive.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCurve.ReadCurveData(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the curve data.
            </summary>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCurve.WriteCurveData(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the curve data.
            </summary>
            <param name="writer">writer to write from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCurve.CreateCurvePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of curve primitive.
            </summary>
            <returns>newly created and initialized curve primitive</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCurve.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCurve.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCurve.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCurve.CurvePrimitive">
            <summary>
            Get the curve primitive.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCurve.Reversed">
            <summary>
            Is this curve reversed?
            </summary>
            <remarks>
            To be overwritten.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatStraight.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatStraight.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatStraight.CreateCurvePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of curve primitive.
            </summary>
            <returns>newly created and initialized curve primitive</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatStraight.StraightPrimitive">
            <summary>
            Get the straight primitive describing this curve.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatPlane">
            <summary>
            SAT plane entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatPlane.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPlane.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPlane.CreateSurfacePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of surface primitive.
            </summary>
            <returns>newly created surface primitive</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatTwoEnds">
            <summary>
            SAT class for two ends var radius object.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatVariableRadius">
            <summary>
            This class defines a variable radius.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatVariableRadius.NameToEntityCreator">
            <summary>
            Dictionary for SAT sub curves creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatVariableRadius.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatVariableRadius.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatVariableRadius.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatVariableRadius.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatTwoEnds.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatTwoEnds.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatTwoEnds.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatTwoEnds.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatClLoftSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatClLoftSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatClLoftSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatClLoftSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatClLoftSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryPlanar">
            <summary>
            SAT body geometry class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometry">
            <summary>
            SAT base body geometry class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometry.NameToEntityCreator" -->
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometry.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometry.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometry.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometry.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryPlanar.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryPlanar.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryPlanar.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryPlanar.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSurfIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSurfIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSurfIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSurfIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSurfIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline3DPrimitive">
            <summary>
            SAT spline in model coordinates primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline3DPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline3DPrimitive.ReadBasicDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the basic curve data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline3DPrimitive.WriteBasicDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the basic curve data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatSpline3DPrimitive.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendAttribute">
            <summary>Defines a base class that contains a pointer to the original input entity as
            well as a flag indicating if the entity still exists.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstRoundAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstRoundAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstRoundAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstRoundAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSharpedAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSharpedAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSharpedAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSharpedAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameEntityAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameEntityAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameEntityAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameEntityAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.IO.ModelBuilder">
            <summary>
            Helper class to build the model.
            All object references can be collected using this object during reading from a DXF or DWG file.
            When reading of the model is complete the references can be resolved.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ModelBuilder.Register(WW.Cad.IO.Builders.DxfHandledObjectBuilder)">
            <summary>
            Registers the specified builder so it can be found back later with the handle as key.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ModelBuilder.Register(WW.Cad.IO.Builders.HandledObjectInfo)">
            <summary>
            Registers the specified handled object info so it can be found back later with the handle as key.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ModelBuilder.GetObjectWithHandle(System.UInt64)">
            <summary>
            Get an object with a given handle.
            </summary>
            <remarks>
            In difference to the same method with type parameter this method will not issue any messages if the handle
            cannot be resolved.
            </remarks>
            <param name="handle">Handle of the requested object.</param>
            <returns>
            Object with the given handle or <c>null</c> if there is no such object. 
            </returns>
        </member>
        <member name="M:WW.Cad.IO.ModelBuilder.GetObjectWithHandle``1(System.UInt64)">
            <summary>
            Get an object with a given handle as a defined type.
            </summary>
            <remarks>This method will add warnings if the given handle is undefined or the found object is of wrong type.</remarks>
            <typeparam name="T">Object type, extending <see cref="T:WW.Cad.Model.DxfHandledObject"/></typeparam>
            <param name="handle">Handle of the requested object.</param>
            <returns>
            An object of the given type or <c>null</c> if there is no object 
            with the given handle or the object is of a different type.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.ModelBuilder.SynchronizeModelEntitiesWithModelLayout">
            <summary>
            The model space block's entities should be the same instance as DxfModel.Entities.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ModelBuilder.LogObjects">
            <summary>
            For diagnostics.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ModelBuilder.GetNextObjectRenameSeed">
            <summary>
            Get the next seed for object rename during audit.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Cad.IO.ModelBuilder.HandledObjects">
            <summary>
            Just used for diagnostics currently.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.GroupValueType">
            <summary>
            Represents the value type of a <see cref="T:WW.Cad.IO.Group"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupValueType.Bool">
            <summary>
            Introduced in R18.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupValueType.ObjectId">
            <summary>
            In DXF an ObjectId is the same as Handle, but in DWG it is stored differently.
            Don't know of any functional difference.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupValueType.Int64">
            <summary>
            Introduced in R24.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfBlockBeginBuilderDxf">
            <summary>
            A block begin builder, used by the DXF reader.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual">
            <seealso cref="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D"/>
            <seealso cref="T:WW.Cad.IO.XamlExporter"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.CreateDrawingVisuals(WW.Cad.Model.DxfModel)">
            <summary>
            Creates the WPF framework elements for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.CreateDrawingVisuals(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Creates the WPF framework elements for specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.CreateDrawingVisuals(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the WPF framework elements for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.CreateDrawingVisuals(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout)">
            <summary>
            Creates framework elements for given DXF model using specified layout (see property <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>).
            </summary>
            <remarks>
            <para>
            The old framework elements are cleared before creating the new ones.
            </para>
            <para>
            The entities in model space are transformed to paper space according to 
            the <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see> in specified layout.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.CreateDrawingVisuals(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates framework elements for given DXF model using given view port (see property <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>).
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.CreateDrawingVisuals(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates framework elements for given dxf model using given view port (see property <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>).
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in model space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.CreateGraphicsFactory">
            <summary>
            Creates a graphics factory that can be used for creating the <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/> in this 
            graphics object.
            </summary>
            <remarks>
            The returned graphics factory can be used for instance to create <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals"/> 
            from cached drawables in <see cref="T:WW.Cad.Drawing.WireframeGraphics2Cache"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.Config">
            <summary>
            Gets or sets the graphics configuration determining
            various aspects of the rendering process.
            The default value is <see cref="F:WW.Cad.Drawing.GraphicsConfig.WhiteBackgroundCorrectForBackColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.Canvas">
            <summary>
            Gets the canvas that holds all drawing visuals.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.DrawingVisuals">
            <summary>
            Gets the drawing visuals.
            Use <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.Canvas"/> to insert the drawing visual into another UI element.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.To2DTransform">
            <summary>
            Gets or sets the projection transform that transforms all 3D points
            onto the 2D plane.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.NonTextPenWidth">
            <summary>
            Gets or sets the non-text pen width (default value is 1).
            </summary>
            <remarks>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight"/> is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.TextPenWidth">
            <summary>
            Gets or sets the text pen width (default value is 1).
            </summary>
            <remarks>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight"/> is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.GraphicsFactory.BeginGeometry(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Begins a geometry.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.GraphicsFactory.EndGeometry">
            <summary>
            Ends the currently open geometry.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.GraphicsFactory.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.VisualContainer">
            <summary>
            Represents a canvas containing <see cref="T:System.Windows.Media.DrawingVisual"/> objects.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.VisualContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.Canvas"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.VisualContainer.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.VisualContainer.Visuals">
            <summary>
            Gets the visual collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual.VisualContainer.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.IClippingTransformer">
            <summary>
            Transformer that transforms and clips points.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IClippingTransformer.Transform(WW.Math.Point3D)">
            <summary>
            Transforms and clips given vertex.
            </summary>
            <returns><b>null</b> if point was clipped away.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.IClippingTransformer.Transform(WW.Math.Geometry.Segment3D)">
            <summary>
            Transforms and clips given line segment.
            </summary>
            <returns>Segments after clipping.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.IClippingTransformer.Transform(WW.Math.Geometry.Polyline3D)">
            <summary>
            Transforms and clips points in given polyline.
            </summary>
            <returns>Resulting polyline parts which have more or less points than the input polyline.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.IClippingTransformer.Transform(WW.Math.Geometry.IShape4D)">
            <summary>
            Transforms and clips a generic shape.
            </summary>
            <param name="shape">
            Generic shape to transform. It is expected that this shape is a temporary object, 
            which may be changed by this method.
            </param>
            <returns>Transformed and possibly clipped result shape.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.IClippingTransformer.SetPreTransform(WW.Math.Matrix4D)">
            <summary>
            Applies given transform (pre) before all other transforms.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IClippingTransformer.TryIsInside(WW.Math.Bounds3D)">
            <summary>
            Quick check a given volume for its clipping.
            </summary>
            <remarks>
            This method may not be exact, but provides a good means for optimization.
            </remarks>
            <param name="bounds">Volume bounds.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.IClippingTransformer.IsInside(WW.Math.Geometry.IShape4D)">
            <summary>
            Check a shape how it is clipped.
            </summary>
            <remarks>
            This is performing the whole clipping process without performing the actual clipping,
            so in most cases this is useless and it is much better to use the <see cref="M:WW.Cad.Drawing.IClippingTransformer.Transform(WW.Math.Geometry.IShape4D)"/>
            method directly. But in some circumstances like outputting text as text this method is useful
            to check whether a given text is clipped.
            </remarks>
            <param name="shape">Shape to check for clipping, possibly changed during the check.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="P:WW.Cad.Drawing.IClippingTransformer.Matrix">
            <summary>
            Gets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.IClippingTransformer.Matrix3D">
            <summary>
            Gets the 3x3 matrix for transforming a line segment before line type is applied to it.
            Line type is applied in the world coordinate system (for model space), or in paper space,
            but the perspective transformation component is omitted from this matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.IClippingTransformer.LineTypeScaler">
            <summary>
            Gets the line type scaler.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColorContextWithBackgroundColor">
            <summary>
            Color context to change color schemes depending on the back ground color 
            (on screen usually black, on paper white).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColorContextWithBackgroundColor.#ctor(System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColorContextWithBackgroundColor.DrawDot(System.Drawing.Graphics,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draw a dot onto given graphics object.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.ColorContextWithBackgroundColor.BackColor">
            <summary>
            Gets the back ground color.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext">
            <summary>
            Abstract draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.DrawContext"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.#ctor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.DrawContext"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.IsVisible(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Returns whether the entity is visible in this draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.GetEffectiveLayer(WW.Cad.Model.Tables.DxfLayer)">
            <summary>
            Gets the effective layer of specified entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.GetPlotColor(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Gets the effective plot color used for drawing an entity in this context.
            </summary>
            <remarks>
            This takes care of the context and a possibly defined <see cref="P:WW.Cad.Drawing.GraphicsConfig.PlotStyleManager"/>.
            If more than the color is of interest it is more efficient to use the <see cref="M:WW.Cad.Drawing.DrawContext.GetEffectivePlotStyle(WW.Cad.Model.Entities.IPlotPropertyOwner)"/> 
            method.
            </remarks>
            <param name="entity">DXF entity for which the correct draw color is needed.</param>
            <returns>The color for drawing the entity.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.GetPlotColor(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Color)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Color"/> of an entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <param name="localBlockContext">The local block context.</param>
            <param name="color">Basic color.</param>
            <returns>The color (with <see cref="T:WW.Cad.Model.Transparency"/> applied).</returns>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.GetLineWeight(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Return the line weight of an entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.GetEffectivePlotStyle(WW.Cad.Model.Entities.IPlotPropertyOwner)">
            <summary>
            Gets the effective plot style for drawing an entity in this context.
            </summary>
            <remarks>
            This takes care of the context and a possibly defined <see cref="P:WW.Cad.Drawing.GraphicsConfig.PlotStyleManager"/>.
            If only the color is of interest it is more efficient to use the <see cref="M:WW.Cad.Drawing.DrawContext.GetPlotColor(WW.Cad.Model.Entities.DxfEntity)"/> method.
            </remarks>
            <param name="plotPropertyOwner">Plot property owner (usually an entity) for which the correct plot style is needed.</param>
            <returns>The plot style for drawing the entity.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.HaveSameBlockContextChain(WW.Cad.Drawing.DrawContext)">
            <summary>
            Returns whether this draw context has the same block context chain as given draw context.
            The <see cref="P:WW.Cad.Drawing.DrawContext.BlockContext"/> of both block contexts are compared and this is also done
            for the parent block contexts.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Clone">
            <summary>
            Clones the draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.CopyFrom(WW.Cad.Drawing.DrawContext)">
            <summary>
            Copies fields from given draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.SetParent(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Copies fields from given parent draw context and sets given parent as this context's parent.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.SetExternalBlock(WW.Cad.Model.Tables.DxfBlock,WW.Cad.Model.DxfModel)">
            <summary>
            Sets the external block and model.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.PushClipper(WW.Cad.Drawing.IClippingTransformer)">
            <summary>
            Add an additional clipper.
            </summary>
            <param name="clipper">Additional clipper.</param>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.PopClipper">
            <summary>
            Remove the clipper added with the last call to <see cref="M:WW.Cad.Drawing.DrawContext.PushClipper(WW.Cad.Drawing.IClippingTransformer)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Layer">
            <summary>
            Gets or sets the layer context.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.RootContext">
            <summary>
            Gets the root drawing context.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.BlockContext">
            <summary>a
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context (e.g. <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> or <see cref="T:WW.Cad.Model.Entities.DxfDimension"/>). 
            Can be <c>null</c>.
            </summary>
            <remarks>
            An insert may also appear again in the parent context.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.ExternalBlock">
            <summary>
            Gets or sets the external block.
            Is non-<c>null</c> for xrefs.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.RootBlockContext">
            <summary>
            Gets the root block context.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Config">
            <summary>
            Gets the graphics configuration.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Layout">
            <summary>
            Gets the layout.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.ParentContext">
            <summary>
            Gets the parent context. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.ByBlockColor">
            <summary>
            Gets or sets the BYBLOCK color.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.ByBlockDxfColor">
            <summary>
            Gets or sets the BYBLOCK named color object.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.ByBlockTransparency">
            <summary>
            Gets or sets the BYBLOCK transparency.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.ByBlockLineType">
            <summary>
            Gets or sets the BYBLOCK line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.ByBlockLineWeight">
            <summary>
            Gets or sets the BYBLOCK line weight.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Row">
            <summary>
            Gets or sets the row.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Column">
            <summary>
            Gets or sets the column.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.WipeoutVariables">
            <summary>
            Gets the wipeout variables.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext.Wireframe">
            <summary>
            Draw context used in wireframe drawings.
            </summary>
            <remarks>
            The specific subclasses determine how the model is drawn.
            <see cref="T:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace"/> draws model space entities in model space.
            <see cref="T:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace"/> draws model space entities in paper space 
            (after <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> transformation).
            <see cref="T:WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace"/> draws paper space entities in paper space.
            </remarks>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEntity.InPaperSpace(WW.Cad.Model.Entities.DxfEntity)"/>
            <seealso cref="T:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace"/>
            <seealso cref="T:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace"/>
            <seealso cref="T:WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace"/>
        </member>
        <member name="T:WW.Cad.Drawing.IDrawContext`1">
            <summary>
            Draw context interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IDrawContext`1.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IDrawContext`1.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D,WW.Cad.Model.Tables.DxfBlock,WW.Cad.Model.DxfModel)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.IDrawContext`1.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.IDrawContext`1.Layout">
            <summary>
            Gets the layout.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.IDrawContext`1.BlockContext">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context (e.g. <see cref="T:WW.Cad.Model.Entities.DxfInsert"/>, <see cref="T:WW.Cad.Model.Entities.DxfDimension"/> or <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/>). 
            Can be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.IDrawContext`1.ExternalBlock">
            <summary>
            Gets or sets the external block.
            Is non-<c>null</c> for xrefs.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.IDrawContext`1.Layer">
            <summary>
            Gets the layer context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Drawing.IClippingTransformer)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.#ctor(WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.GetTransformer">
            <summary>
            Gets the transformer.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D,WW.Cad.Model.Tables.DxfBlock,WW.Cad.Model.DxfModel)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.CopyFrom(WW.Cad.Drawing.DrawContext)">
            <summary>
            Copies fields from given draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.PushClipper(WW.Cad.Drawing.IClippingTransformer)">
            <summary>
            Add an additional clipper.
            </summary>
            <param name="clipper">Additional clipper.</param>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.PopClipper">
            <summary>
            Remove the clipper added with the last call to <see cref="M:WW.Cad.Drawing.DrawContext.Wireframe.PushClipper(WW.Cad.Drawing.IClippingTransformer)"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace">
            <summary>
            Draw context for drawing model space entities into model space.
            Paper space entities are not drawn.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace.IsVisible(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.DrawContext.IsVisible(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace.Clone">
            <summary>
            Clones the draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace">
            <summary>
            Draw context for drawing model space entities into paper space.
            Only entities in model space are drawn as specified by the viewport.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.Entities.DxfViewport,WW.Math.Matrix4D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace.#ctor(WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace.IsVisible(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.DrawContext.IsVisible(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace.Clone">
            <summary>
            Clones the draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace.CopyFrom(WW.Cad.Drawing.DrawContext)">
            <summary>
            Copies fields from given draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Wireframe.ModelToPaperSpace.Viewport">
            <summary>
            Gets associated DxfViewport. Read only.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace">
            <summary>
            Draw context for drawing paper space entities into paper space.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace.#ctor(WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace.IsVisible(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.DrawContext.IsVisible(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace.Clone">
            <summary>
            Clones the draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Wireframe.PaperToPaperSpace.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext.Surface">
            <summary>
            Draw context used in surface drawings.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.CharTriangulationCache)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.#ctor(WW.Cad.Drawing.DrawContext.Surface)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.GetTransformer">
            <summary>
            Gets the transformer.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D,WW.Cad.Model.Tables.DxfBlock,WW.Cad.Model.DxfModel)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.CopyFrom(WW.Cad.Drawing.DrawContext)">
            <summary>
            Copies fields from given draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.PushClipper(WW.Cad.Drawing.IClippingTransformer)">
            <summary>
            Add an additional clipper.
            </summary>
            <param name="clipper">Additional clipper.</param>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.PopClipper">
            <summary>
            Remove the clipper added with the last call to <see cref="M:WW.Cad.Drawing.DrawContext.Surface.PushClipper(WW.Cad.Drawing.IClippingTransformer)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Surface.CharTriangulationCache">
            <summary>
            Gets the chararcter triangulation cache.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext.Surface.ModelSpace">
            <summary>
            Draw context for drawing model space entities into model space.
            Paper space entities are not drawn.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelSpace.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.CharTriangulationCache)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelSpace.IsVisible(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.DrawContext.IsVisible(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelSpace.Clone">
            <summary>
            Clones the draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelSpace.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace">
            <summary>
            Draw context for drawing model space entities into paper space.
            Only entities in model space are drawn as specified by the viewport.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.Entities.DxfViewport,WW.Math.Matrix4D,WW.Cad.Drawing.CharTriangulationCache)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace.#ctor(WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace.IsVisible(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.DrawContext.IsVisible(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace.Clone">
            <summary>
            Clones the draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace.CopyFrom(WW.Cad.Drawing.DrawContext)">
            <summary>
            Copies fields from given draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.DrawContext.Surface.ModelToPaperSpace.Viewport">
            <summary>
            Gets associated DxfViewport. Read only.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawContext.Surface.PaperToPaperSpace">
            <summary>
            Draw context for drawing paper space entities into paper space.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.PaperToPaperSpace.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.CharTriangulationCache)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.PaperToPaperSpace.#ctor(WW.Cad.Drawing.DrawContext.Surface.PaperToPaperSpace)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.PaperToPaperSpace.IsVisible(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.DrawContext.IsVisible(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.PaperToPaperSpace.Clone">
            <summary>
            Clones the draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawContext.Surface.PaperToPaperSpace.CreateChildContext(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Creates child context and sets this context as its parent context.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.BasicTransformer">
            <summary>
            Basic transform for transforming from model to model space or from paper to paper space.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BasicTransformer.Transform(WW.Math.Point3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BasicTransformer.Transform(WW.Math.Geometry.Segment3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BasicTransformer.Transform(WW.Math.Geometry.Polyline3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BasicTransformer.Transform(WW.Math.Geometry.IShape4D)">
            <summary>
            Transforms and clips a generic shape.
            </summary>
            <param name="shape">
            Generic shape to transform. It is expected that this shape is a temporary object, 
            which may be changed by this method.
            </param>
            <returns>Transformed and possibly clipped result shape.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.BasicTransformer.SetPreTransform(WW.Math.Matrix4D)">
            <summary>
            Multiplies transformation with given transform (pre).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BasicTransformer.TryIsInside(WW.Math.Bounds3D)">
            <summary>
            Check a given volume for its clipping.
            </summary>
            <remarks>
            This method may not be exact, but provides a good means for optimization.
            </remarks>
            <param name="bounds">Volume bounds.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.BasicTransformer.IsInside(WW.Math.Geometry.IShape4D)">
            <summary>
            Check a shape how it is clipped.
            </summary>
            <remarks>
            This is performing the whole clipping process without performing the actual clipping,
            so in most cases this is useless and it is much better to use the <see cref="!:IClippingTransformer.Transform(WW.Cad.Drawing.IShape4D)"/>
            method directly. But in some circumstances like outputting text as text this method is useful
            to check whether a given text is clipped.
            </remarks>
            <param name="shape">Shape to check for clipping.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.BasicTransformer.Clone">
            <summary>
            Clones the transformer.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.BasicTransformer.Matrix">
            <summary>
            Gets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.BasicTransformer.Matrix3D">
            <summary>
            Gets the 3x3 matrix for transforming a line segment before line type is applied to it.
            Line type is applied in the world coordinate system (for model space), or in paper space,
            but the perspective transformation component is omitted from this matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.BasicTransformer.LineTypeScaler">
            <summary>
            Gets the line type scaler.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.PointShape">
            <summary>
            A class for creating point shapes based on a drawing's PDMODE/PDSIZE settings.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.PointShape.CreateShape(WW.Cad.Model.PointDisplayMode,System.Double)">
            <summary>
            Gets the shape for specified point display mode and size.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor">
            <summary>
            Represents an interactor to select one or more entities.
            Use the <see cref="T:WW.Cad.Actions.SelectInteractor.TransformInteractor"/> sub classes to scale and move the selection.
            </summary>
            <remarks>
            <para>
            Property <see cref="P:WW.Cad.Actions.SelectInteractor.ProjectionTransform"/> must be set and updated every time the projection transform for displaying the drawing changes.
            </para>
            <para>
            In model space this interactor operates on model space entities only.
            In paper space this interactor operates on paper space entities only.
            </para>
            <para>
            Attributes are treated as part of inserts based on property <see cref="P:WW.Cad.Drawing.GraphicsConfig.TreatAttributesAsPartOfInsert"/>.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Actions.SelectInteractor.ScaleInteractor"/>
            <seealso cref="T:WW.Cad.Actions.SelectInteractor.MoveInteractor"/>
            <seealso cref="T:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor"/>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.#ctor(WW.Cad.Drawing.WireframeGraphicsCache,WW.Cad.Drawing.GraphicsConfig,WW.Actions.CommandInvoker)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor"/> class.
            </summary>
            <param name="wireframeGraphicsCache">The wireframe graphics cache.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="commandInvoker">The command invoker.</param>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.#ctor(WW.Cad.Drawing.WireframeGraphicsCache,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,WW.Cad.Model.Entities.DxfEntityCollection,WW.Actions.CommandInvoker)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor"/> class.
            </summary>
            <param name="wireframeGraphicsCache">The wireframe graphics cache.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model.</param>
            <param name="entities">The entity collection on which this interactor operates.</param>
            <param name="commandInvoker">The command invoker.</param>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.#ctor(WW.Cad.Drawing.WireframeGraphicsCache,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Model.Entities.DxfEntityCollection,WW.Actions.CommandInvoker)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor"/> class.
            </summary>
            <param name="wireframeGraphicsCache">The wireframe graphics cache.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model.</param>
            <param name="layout">The layout. If <c>null</c> then this interactor works in model space, otherwise if the layout
            is a paper space layout it works in paper space.</param>
            <param name="entities">The entity collection on which this interactor operates.</param>
            <param name="commandInvoker">The command invoker.</param>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.SetLayout(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Model.Entities.DxfEntityCollection)">
            <summary>
            Sets the layout.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout (optional, e.g. can be used on block entities).</param>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is pressed.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when the mouse moves.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is released.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.Transform(WW.Math.Matrix4D,WW.Math.Vector3D,WW.Math.Vector3D,System.Boolean)">
            <summary>
            Transforms the selection using specified transformation matrix.
            The scaling and translation parameters are redundant, but are used to inform subscribers of
            the scaling and translation components of the transformation matrix in the <see cref="E:WW.Cad.Actions.SelectInteractor.SelectionTransformed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.Select(System.Collections.Generic.List{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Select the specified entities.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.OnSelectionTransformed(WW.Cad.Actions.SelectInteractor.TransformEventArgs)">
            <summary>
            Raises the <see cref="E:WW.Cad.Actions.SelectInteractor.SelectionTransformed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:WW.Cad.Actions.SelectInteractor.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.StartTransformInteraction">
            <summary>
            This method has to be called by transform interactors when their interaction starts.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.GetEntitiesCloseToPoint(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the closest entities to specified 2D reference point for paper space entities only.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities enclosed in specified 2D rectangle for paper space entities only.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.GetEntitiesInFilter(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities enclosed in specified filter for paper space entities only.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.UndoTransform">
            <summary>
            Undo the previous transform.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.UpdateGraphicsCache">
            <summary>
            Update the graphics cache.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.SelectionTransformed">
            <summary>
            Occurs when the selection has been transformed.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.SelectionChanged">
            <summary>
            Occurs when the selection changed.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.SelectedEntities">
            <summary>
            Gets the selected entities.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.YAxisPointsDown">
            <summary>
            Gets or sets a value indicating whether the Y axis points down.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.ProjectionTransform">
            <summary>
            Gets or sets the projection transform.
            This is needed to calculate the bounds of the selection in the display coordinate system (DCS), which
            is used for hit testing.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.SelectionBounds">
            <summary>
            Gets the selection bounds in the display coordinate system (DCS).
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.TransformInteractor">
            <summary>
            Represents a base transformation interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.TransformInteractor.#ctor(WW.Cad.Actions.SelectInteractor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.TransformInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.TransformInteractor.OnActivated(System.EventArgs)">
            <summary>
            Is called when this interactor is activated.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.TransformInteractor.SelectInteractor">
            <summary>
            Gets the select and transform interactor.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.MoveInteractor">
            <summary>
            Represents a move transformation interactor.
            </summary>
            <remarks>
            The user can either click and drag the selection,
            or he can click at the start position and then click a second time at the end position
            (and optional enter the x/y distances in the two text boxes).
            </remarks>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.#ctor(WW.Cad.Actions.SelectInteractor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.MoveInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is pressed.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when the mouse moves.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is released.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.Cancel">
            <summary>
            Cancels the translation.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.OnStartWcsPositionSet(System.EventArgs)">
            <summary>
            Raises the <see cref="E:StartWcsPositionSet"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="!:Deactivated"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.MoveInteractor.Changed">
            <summary>
            Occurs when this object changed.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.MoveInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.MoveInteractor.MoveSelectionWhenMouseDownAtArea">
            <summary>
            Gets or sets the the area at which a mouse down will start moving the selected entities.
            The default value is <see cref="F:WW.Cad.Actions.SelectInteractor.SelectionRectangleArea.SelectionRectangle"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.MoveInteractor.StartInteractionOnMouseDownAtSelectionRectangle">
            <summary>
            Gets or sets a value indicating whether to start interaction on mouse down at the selection rectangle.
            The default value is <c>true</c>. If <c>false</c> the user may click anywhere and the interaction will start.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.MoveInteractor.WinFormsDrawable">
            <summary>
            Represents a GDI drawable for <see cref="T:WW.Cad.Actions.SelectInteractor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.WinFormsDrawable.#ctor(WW.Cad.Actions.SelectInteractor.MoveInteractor,WW.Actions.InteractionContext,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.MoveInteractor.WinFormsDrawable"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MoveInteractor.WinFormsDrawable.GetCursor">
            <summary>
            Gets the cursor. Returns <c>null</c> if the cursor should remain unchanged.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.WinFormsDrawable">
            <summary>
            Represents a GDI drawable for <see cref="T:WW.Cad.Actions.SelectInteractor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.WinFormsDrawable.#ctor(WW.Cad.Actions.SelectInteractor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.WinFormsDrawable"/> class.
            </summary>
            <param name="interactor">The interactor.</param>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.WinFormsDrawable.Draw(System.Windows.Forms.PaintEventArgs,WW.Drawing.GraphicsHelper,WW.Actions.InteractionContext)">
            <summary>
            Draw this object.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.TransformEventArgs">
            <summary>
            The event arguments containing the transform and undoable action when a transformation is performend.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.TransformEventArgs.#ctor(WW.Math.Matrix4D,WW.Math.Vector3D,WW.Math.Vector3D,WW.Actions.ICommand,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.TransformEventArgs"/> class.
            </summary>
            <param name="transform">The transform.</param>
            <param name="scaling">The scaling component of the transformation matrix.</param>
            <param name="translation">The translation component of the transformation matrix.</param>
            <param name="command">The undoable action.</param>
            <param name="isIntermediateTransform">if set to <c>true</c> this is an intermediate transform.
            A mouse move results in an intermediate transform, a mouse up results in a non-intermediate transform.</param>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.TransformEventArgs.Transform">
            <summary>
            Gets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.TransformEventArgs.Scaling">
            <summary>
            Gets the scaling component of the transformation matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.TransformEventArgs.Translation">
            <summary>
            Gets the translation component of the transformation matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.TransformEventArgs.Command">
            <summary>
            Gets the undoable action.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.TransformEventArgs.IsIntermediateTransform">
            <summary>
            Gets a value indicating whether this instance is an intermediate transform.
            A mouse move results in an intermediate transform, a mouse up results in a non-intermediate transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.SelectionRectangleArea">
            <summary>
            The selection rectangle area.
            </summary>
        </member>
        <member name="F:WW.Cad.Actions.SelectInteractor.SelectionRectangleArea.SelectionRectangle">
            <summary>
            The selection rectangle itself, excluding the inside.
            </summary>
        </member>
        <member name="F:WW.Cad.Actions.SelectInteractor.SelectionRectangleArea.InsideSelectionRectangle">
            <summary>
            The selection rectangle, including the inside.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor">
            <summary>
            Represents a scale from base point transformation interactor.
            This interactor has to be activated by an external trigger to work (call method <see cref="!:Activate"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.#ctor(WW.Cad.Actions.SelectInteractor,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is pressed.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when the mouse moves.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is released.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="!:Deactivated"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.Changed">
            <summary>
            Occurs when this object changed.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.UserHint">
            <summary>
            Gets the hint to the user about what input the interactor is expecting next.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.WinFormsDrawable">
            <summary>
            The view for <see cref="T:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor.WinFormsDrawable.#ctor(WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor,WW.Actions.InteractionContext,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="!:WinformsDrawable"/> class.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.MirrorInteractor">
            <summary>
            Represents a selection mirroring interactor.
            This interactor has to be activated by an external trigger to work (call method <see cref="!:Activate"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MirrorInteractor.#ctor(WW.Cad.Actions.SelectInteractor,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.MirrorInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MirrorInteractor.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is pressed.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MirrorInteractor.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when the mouse moves.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MirrorInteractor.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is released.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MirrorInteractor.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="!:Deactivated"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MirrorInteractor.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MirrorInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.MirrorInteractor.Changed">
            <summary>
            Occurs when this object changed.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.MirrorInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.MirrorInteractor.UserHint">
            <summary>
            Gets the hint to the user about what input the interactor is expecting next.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.MirrorInteractor.WinFormsDrawable">
            <summary>
            The view for <see cref="T:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.MirrorInteractor.WinFormsDrawable.#ctor(WW.Cad.Actions.SelectInteractor.MirrorInteractor,WW.Actions.InteractionContext,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="!:WinformsDrawable"/> class.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.RotateInteractor">
            <summary>
            Represents a selection rotation interactor.
            This interactor has to be activated by an external trigger to work (call method <see cref="!:Activate"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.RotateInteractor.#ctor(WW.Cad.Actions.SelectInteractor,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.RotateInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.RotateInteractor.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is pressed.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.RotateInteractor.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when the mouse moves.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.RotateInteractor.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is released.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.RotateInteractor.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="!:Deactivated"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.RotateInteractor.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.RotateInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.RotateInteractor.Changed">
            <summary>
            Occurs when this object changed.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.SelectInteractor.RotateInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.RotateInteractor.DegreeRounding">
            <summary>
            Gets or sets the number of degrees to round to when setting the rotation using the mouse.
            The default value is 5 degrees.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.RotateInteractor.UserHint">
            <summary>
            Gets the hint to the user about what input the interactor is expecting next.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.RotateInteractor.WinFormsDrawable">
            <summary>
            The view for <see cref="T:WW.Cad.Actions.SelectInteractor.ScaleFromBasePointInteractor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.RotateInteractor.WinFormsDrawable.#ctor(WW.Cad.Actions.SelectInteractor.RotateInteractor,WW.Actions.InteractionContext,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="!:WinformsDrawable"/> class.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.ScaleInteractor">
            <summary>
            Represents a scale transformation interactor.
            Set properties <see cref="P:WW.Cad.Actions.SelectInteractor.ScaleInteractor.KeepAspectRatioDiagonal"/> and <see cref="P:WW.Cad.Actions.SelectInteractor.ScaleInteractor.KeepAspectRatioDiagonal"/> to
            configure the scaling behavior.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleInteractor.#ctor(WW.Cad.Actions.SelectInteractor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.ScaleInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleInteractor.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is pressed.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleInteractor.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when the mouse moves.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleInteractor.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when a mouse button is released.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.ScaleInteractor.KeepAspectRatioDiagonal">
            <summary>
            Gets or sets a value indicating whether to keep the aspect ratio when scaling entities diagonally.
            The default value is <c>true</c>.
            See also <seealso cref="P:WW.Cad.Actions.SelectInteractor.ScaleInteractor.KeepAspectRatioNonDiagonal"/>.
            </summary>
            <seealso cref="P:WW.Cad.Actions.SelectInteractor.ScaleInteractor.KeepAspectRatioNonDiagonal"/>
        </member>
        <member name="P:WW.Cad.Actions.SelectInteractor.ScaleInteractor.KeepAspectRatioNonDiagonal">
            <summary>
            Gets or sets a value indicating whether to keep the aspect ratio when scaling entities non-diagonally.
            The default value is <c>false</c>.
            See also <seealso cref="P:WW.Cad.Actions.SelectInteractor.ScaleInteractor.KeepAspectRatioDiagonal"/>.
            </summary>
            <seealso cref="P:WW.Cad.Actions.SelectInteractor.ScaleInteractor.KeepAspectRatioDiagonal"/>
        </member>
        <member name="T:WW.Cad.Actions.SelectInteractor.ScaleInteractor.WinFormsDrawable">
            <summary>
            Represents a GDI drawable for <see cref="T:WW.Cad.Actions.SelectInteractor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleInteractor.WinFormsDrawable.#ctor(WW.Cad.Actions.SelectInteractor.ScaleInteractor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.SelectInteractor.ScaleInteractor.WinFormsDrawable"/> class.
            </summary>
            <param name="interactor">The interactor.</param>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleInteractor.WinFormsDrawable.Draw(System.Windows.Forms.PaintEventArgs,WW.Drawing.GraphicsHelper,WW.Actions.InteractionContext)">
            <summary>
            Draw this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.SelectInteractor.ScaleInteractor.WinFormsDrawable.GetCursor">
            <summary>
            Gets the cursor. Returns <c>null</c> if the cursor should remain unchanged.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.IControlPointCollection">
            <summary>
            An interface for control points intended for editing graphical objects.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.IControlPointCollection.Set(System.Int32,WW.Math.Point3D)">
            <summary>
            Sets the control point at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.IControlPointCollection.Get(System.Int32)">
            <summary>
            Gets the control point at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.IControlPointCollection.GetDescription(System.Int32)">
            <summary>
            Gets the description of the control point at the specified index.
            Uses a <see cref="!:ResourceManager"/> to look up a culture specific value based on the current UI culture.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.IControlPointCollection.GetDisplayType(System.Int32)">
            <summary>
            Gets the display type.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.IControlPointCollection.Insert(System.Int32)">
            <summary>
            Creates and inserts a new control point at the specified index.
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when <see cref="P:WW.Cad.Actions.IControlPointCollection.IsCountFixed"/> is <c>true</c></exception>
        </member>
        <member name="M:WW.Cad.Actions.IControlPointCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the control point at the specified index.
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when <see cref="P:WW.Cad.Actions.IControlPointCollection.IsCountFixed"/> is <c>true</c></exception>
        </member>
        <member name="P:WW.Cad.Actions.IControlPointCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.IControlPointCollection.IsCountFixed">
            <summary>
            Gets a value indicating whether the control point count is fixed.
            If <c>true</c> then no control points can be added or removed.
            </summary>
        </member>
        <member name="T:WW.WWF.IWoutWareFont">
            <summary>
            Simplified font access.
            </summary>
            <remarks>
            A WoutWareFont represents a simplified form of a TrueType font.
            It mostly contains a number of simplified glyphs.
            It is assumed that the glyphs and other measures are given for a (DXF) font size of 1.
            </remarks>
        </member>
        <member name="M:WW.WWF.IWoutWareFont.GetGlyph(System.Char)">
            <summary>
            Get the glyph for a letter.
            </summary>
            <param name="letter">The letter.</param>
            <returns>The glyph representing the letter, or <c>null</c> if there is no glyph for the letter.</returns>
        </member>
        <member name="M:WW.WWF.IWoutWareFont.GetGlyph(System.Char,WW.Text.ICanonicalGlyph)">
            <summary>
            Get the glyph for a letter.
            </summary>
            <param name="letter">The letter.</param>
            <param name="fallbackGlyph">Fallback glyph returned if the letter is not present.</param>
            <returns>
            The glyph representing the letter, or <paramref name="fallbackGlyph"/> if 
            there is no glyph for the letter.
            </returns>
        </member>
        <member name="P:WW.WWF.IWoutWareFont.Ascent">
            <summary>
            Get the font's canonical ascent.
            </summary>
        </member>
        <member name="P:WW.WWF.IWoutWareFont.Descent">
            <summary>
            Get the font's canonical descent.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Wireframe2PathDrawer">
            <summary>
            Path drawer for wireframe context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Wireframe2PathDrawer.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">entity which is drawn</param>
            <param name="context">draw context</param>
            <param name="graphicsFactory">The graphics factory.</param>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTolerance">
            <summary>
            Represents a tolerance entity showing boxed tolerance text fields.
            </summary>
            <remarks>
            <para>
            The main properties are <see cref="T:WW.Cad.Model.Entities.DxfText"/> defining the text,
            <see cref="P:WW.Cad.Model.Entities.DxfTolerance.InsertionPoint"/> defining the position,
            <see cref="P:WW.Cad.Model.Entities.DxfTolerance.XAxis"/> defining the direction.
            </para>
            <para>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </para>
            </remarks>
            <example>
            An example of how to create and write a dxf file containing tolerance objects.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class ToleranceExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfCircle circle = new DxfCircle(Point3D.Zero, 2);
            circle.Color = EntityColors.Red;
            model.Entities.Add(circle);
            
            DxfLine line1 = new DxfLine(new Point3D(2, 2, 0), Point3D.Zero);
            model.Entities.Add(line1);
    
            DxfTolerance tolerance1 = new DxfTolerance(model);
            tolerance1.InsertionPoint = new Point3D(2, 2, 0);
            tolerance1.Text = "DxfTolerance text 1";
            tolerance1.DimensionStyleOverrides.ScaleFactor = 2;
            tolerance1.DimensionStyleOverrides.TextHeight= 0.1;
            tolerance1.DimensionStyleOverrides.TextColor = Colors.Green;
            model.Entities.Add(tolerance1);
    
            DxfLine line2 = new DxfLine(new Point3D(2, -2, 0), Point3D.Zero);
            model.Entities.Add(line2);
    
            DxfTolerance tolerance2 = new DxfTolerance(model);
            tolerance2.InsertionPoint = new Point3D(2, -2, 0);
            tolerance2.Text = @"DxfTolerance text 2%%vPart 2^JSecond line";
            tolerance2.DimensionStyleOverrides.ScaleFactor = 4;
            tolerance2.DimensionStyleOverrides.TextHeight= 0.1;
            tolerance2.DimensionStyleOverrides.TextColor = Colors.Red;
            model.Entities.Add(tolerance2);
    
            DxfLine line3 = new DxfLine(new Point3D(-2, -2, 0), Point3D.Zero);
            model.Entities.Add(line3);
    
            DxfTolerance tolerance3 = new DxfTolerance(model);
            tolerance3.InsertionPoint = new Point3D(-2, -2, 0);
            tolerance3.Text = @"DxfTolerance text 4%%vPart 2^JSecond line^JThird line";
            tolerance3.DimensionStyleOverrides.ScaleFactor = 1;
            tolerance3.DimensionStyleOverrides.TextHeight= 0.1;
            tolerance3.DimensionStyleOverrides.TextColor = Colors.Red;
            model.Entities.Add(tolerance3);
    
            DxfWriter.Write("Tolerance Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.IAnnotative">
            <summary>
            Interface implemented by the entities supporting annotations (scale specific rendering).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.IAnnotative.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.IAnnotative.IsAnnotative">
            <summary>
            Gets or sets a value indicating whether the entity is annotative.
            </summary>
            <value>
              <c>true</c> if entity is annotative; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTolerance"/> class.
            </summary>
            <param name="model">
            The model, of which the <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/> is used for the dimension style.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTolerance"/> class.
            </summary>
            <param name="dimensionStyle">The dimension style.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified tolerance object in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.DrawInternal(WW.Cad.Model.IPathDrawer,WW.Drawing.ArgbColor,System.Int16)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
            <param name="pathDrawer">path drawer to draw to</param>
            <param name="color">color to use</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.DimensionStyleOverrides">
            <summary>
            Gets the dimension style overrides.
            </summary>
            <remarks>
            The overrides override properties of <see cref="P:WW.Cad.Model.Entities.DxfTolerance.DimensionStyle"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTolerance.DimensionStyle"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.DimensionStyle">
            <summary>
            Gets or sets the dimension style.
            </summary>
            <remarks>
            <para>
            Together with the <see cref="P:WW.Cad.Model.Entities.DxfTolerance.DimensionStyleOverrides"/> the dimension style
            determines the style aspects of the dimension.
            </para>
            <para>
            The dimension style is shared and must be present in <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTolerance.DimensionStyleOverrides"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.InsertionPoint">
            <summary>
            Gets or sets the insertion point (in world coordinate system).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <remarks>
            <para>
            The table of special character sequences that affect the rendering of the text:
            <list type="table">
             <listheader>
              <term>Character sequence</term>
              <description>Description</description>
             </listheader>
             <item>
              <term>%%p</term>
              <description>Field separator (max 4).</description>
             </item>
             <item>
              <term>^J</term>
              <description>New line.</description>
             </item>
            </list>
            </para>
            <para>
            Example text: <c>Field 1%%vField 2^JField on next line</c>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.XAxis">
            <summary>
            Gets or sets the text x-axis direction.
            </summary>
            <remarks>
            Default value is (1, 0, 0).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.ZAxis">
            <summary>
            Gets or sets the z-axis.
            </summary>
            <remarks>
            Default value is (0, 0, 1).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.Transform">
            <summary>
            Get the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTolerance.IsAnnotative">
            <summary>
            Gets or sets a value indicating whether the entity is annotative.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTolerance.ToleranceField.Draw(WW.Cad.Model.Entities.DxfTolerance,WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,WW.Drawing.ArgbColor,System.Int16,System.Double)">
            <summary>
            Draw one box of the tolerance text to a path drawer.
            </summary>
            <param name="tolerance">tolerance entity</param>
            <param name="pathDrawer">path drawer</param>
            <param name="preTransform">transformation to apply</param>
            <param name="color">color to use</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfDimensionStyle">
            <summary>
            Represents the style of dimension lines, arrows, text and units.
            </summary>
            <remarks>
            	<para>
            The dimension style determines how entities <see cref="T:WW.Cad.Model.Entities.DxfDimension"/>,
            <see cref="T:WW.Cad.Model.Entities.DxfLeader"/> and <see cref="T:WW.Cad.Model.Entities.DxfTolerance"/> are visualized.
            </para>
            	<para>
            To use feet and inches as linear units, set property <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat"/> to
            either <see cref="F:WW.Cad.Model.LinearUnitFormat.Architectural">Architectural</see> (feet and decimal inches) or
            <see cref="F:WW.Cad.Model.LinearUnitFormat.Engineering">Engineering</see> (feet and fractional inches).
            In both cases drawing units are interpreted as inches.
            </para>
            <para>
            Dimension styles are an ever evolving feature which get additional properties with nearly each release of the formats.
            This means that not all features are supported in all versions. Refer to the documentation of each property to see if 
            it is supported for your required save version or not.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension"/>
            <seealso cref="T:WW.Cad.Model.LinearUnitFormat"/>
        </member>
        <member name="T:WW.Cad.Model.Tables.IDimensionStyle">
            <summary>
            Represents a dimension style.
            </summary>
            <remarks>
            Dimension styles are an ever evolving feature which get additional properties with nearly each release of the formats.
            This means that not all features are supported in all versions. Refer to the documentation of each property to see if 
            it is supported for your required save version or not.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateDimensioningSuffix">
            <summary>
            Gets or sets the alternate dimensioning suffix (corresponds to the DIMAPOST system variable).
            To define a pre-fix, use the "[]" string as a place holder for the measurement.
            For example value "mm" would be shown as a postfix, "A[]B" would show A as prefix and B as postfix.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitDecimalPlaces">
            <summary>
            Gets or sets the alternate unit decimal places (corresponds to the DIMALTD system variable).
            </summary>
            <remarks>
            <para>Default is 2.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitDimensioning">
            <summary>
            Gets or sets the use of an alternate unit dimensioning (corresponds to the DIMALT system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitFormat">
            <summary>
            Gets or sets the units format for alternate units of all dimension style families except angular 
            (corresponds to the DIMALTU system variable).
            </summary>
            <remarks>
            <para>Default is <see cref="F:WW.Cad.Model.Tables.AlternateUnitFormat.Decimal">Decimal</see>.</para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitScaleFactor">
            <summary>
            Gets or sets the alternate unit scale factor. (Default is 1) (corresponds to the DIMALTF system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitToleranceDecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for tolerance values of an alternative units dimension 
            (corresponds to the DIMALTTD system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitToleranceZeroHandling">
            <summary>
            Gets or sets the supression of zeros for alternate tolerance values 
            (corresponds to the DIMALTTZ system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitZeroHandling">
            <summary>
            Gets or sets the supression of zeros for alternate unit dimension values 
            (corresponds to the DIMALTZ system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitRounding">
            <summary>
            Gets or sets the rounding of alternate units (corresponds to the DIMALTRND system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AngularDimensionDecimalPlaces">
            <summary>
            Gets or sets the number of precision digits in angular dimensions 
            (corresponds to the DIMADEC system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AngularUnit">
            <summary>
            Gets or sets the angular unit (corresponds to the DIMAUNIT system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.AngularZeroHandling">
            <summary>
            Gets or sets the controls supression of zeros for angular dimensions 
            (corresponds to the DIMAZIN system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ArrowBlock">
            <summary>
            Gets or sets the arrow block (the block name corresponds to the DIMBLK system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ArrowSize">
            <summary>
            Gets or sets the arrow size (corresponds to the DIMASZ system variable).
            </summary>
            <remarks>
            <para>
            If <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.TickSize"/> is non zero, then diagonal tick marks are drawn in stead of an arrows
            at the ends of a dimension line.
            </para>
            <para>
            Default size is 0.18.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.TickSize"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ArrowsTextFit">
            <summary>
            Gets or sets the fit type for dimension arrows and text if they don't fit between the extension lines
            (corresponds to DIMATFIT system variable).
            The default value is 
            <see cref="F:WW.Cad.Model.ArrowsTextFitType.MoveBoth">MoveBoth</see>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.CenterMarkSize">
            <summary>
            Gets or sets the center mark size (corresponds to the DIMCEN system variable).
            The default value is 0.09.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.CursorUpdate">
            <summary>
            Gets or sets the cursor functionality for user positioned text (corresponds to the DIMUPT system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for the tolerance values of primary units dimensions 
            (corresponds to the DIMDEC system variable).
            </summary>
            <remarks>
            <para>
            The default value is 4.
            </para>
            <para>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.DecimalSeparator">
            <summary>
            Gets or sets the single character decimal separator used when creating dimensions whose unit format is decimal 
            (corresponds to the DIMDSEP system variable).
            </summary>
            <remarks>
            <para>Default is a dot.</para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ExtensionLineColor">
            <summary>
            Gets or sets the extension line color (default is <see cref="F:WW.Cad.Model.Color.ByBlock"/>) (corresponds to the DIMCLRE system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ExtensionLineExtension">
            <summary>
            Gets or sets the extension line extension (corresponds to the DIMEXE system variable).
            </summary>
            <remarks>
            <para>Default is 0.18.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ExtensionLineOffset">
            <summary>
            Gets or sets the extension line offset (corresponds to the DIMEXO system variable).
            </summary>
            <remarks>
            <para>Default is 0.0625.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ExtensionLineWeight">
            <summary>
            Gets or sets the extension line weight in 100ths of millimeters 
            (corresponds to the DIMLWE system variable).
            The default value is <see cref="F:WW.Cad.Model.LineWeight.ByBlock"/>.
            </summary>
            <remarks>
            <para>
            See also <see cref="T:WW.Cad.Model.LineWeight"/> for values smaller than zero.
            For non-negative values this is the line weight in 100ths of millimeters.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.FirstArrowBlock">
            <summary>
            Gets or sets the first arrow block (the block name corresponds to the DIMBLK1 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.GenerateTolerances">
            <summary>
            Gets or sets whether to generate dimension tolerances (corresponds to the DIMTOL system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.LeaderArrowBlock">
            <summary>
            Gets or sets the leader arrow block (the block name corresponds to the DIMLDRBLK system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.LimitsGeneration">
            <summary>
            Gets or sets the dimension limits generation flag (corresponds to the DIMLIM system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.LinearScaleFactor">
            <summary>
            Gets or sets the linear measurements scale factor (corresponds to the DIMLFAC system variable). 
            The default value is 1.
            </summary>
            <remarks>
            <para>
            If the scale factor is negative, then the (positive) scale factor is only applied
            to paper space dimensions.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.LinearUnitFormat">
            <summary>
            Gets or sets the units for all dimension types except angular (corresponds to the DIMLUNIT system variable).
            Default value is <see cref="F:WW.Cad.Model.LinearUnitFormat.Decimal">LinearUnitFormat.Decimal</see>.
            </summary>
            <remarks>
            <para>
            To use feet (and/or inches) as linear units, set property <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.LinearUnitFormat"/> to
            either <see cref="F:WW.Cad.Model.LinearUnitFormat.Architectural">Architectural</see> (feet and inches) or
            <see cref="F:WW.Cad.Model.LinearUnitFormat.Engineering">Engineering</see> (feet and fractional feet).
            </para>
            <para>
            For architectural and fractional formats the <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.FractionFormat"/> property determines 
            between horizontal, diagonal or no stacking of the numerator and denominator.
            For alternate dimension units this property does not exist and is covered by property <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateUnitFormat"/>.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.FractionFormat"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.FractionFormat">
            <summary>
            Gets or sets the fraction format (corresponds to the DIMFRAC system variable).
            The default value is <see cref="F:WW.Cad.Model.FractionFormat.HorizontalStacking"/>.
            </summary>
            <remarks>
            <para>
            This value is relevant when the linear unit format is set to architectural or fractional.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.LinearUnitFormat"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.DimensionLineColor">
            <summary>
            Gets or sets the dimension line color (corresponds to the DIMCLRD system variable).
            The default value is <see cref="F:WW.Cad.Model.Color.ByBlock"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.DimensionLineExtension">
            <summary>
            Gets or sets the dimension line extension (corresponds to the DIMDLE system variable).
            </summary>
            <remarks>
            <para>
            This value is only relevant when there are tick marks in stead of arrows
            at the ends of a dimension line (see <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.TickSize"/>).
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.TickSize"/>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.ArrowSize"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.DimensionLineGap">
            <summary>
            Gets or sets the dimension line gap (corresponds to the DIMGAP system variable).
            </summary>
            <remarks>
            <para>
            This is the distance between the dimension text and dimension line when the text cuts
            the dimension line in two.
            A value smaller than zero only affects the horizontal distance.
            A value greather than zero affects both the horizontal and vertical distance.
            </para>
            <para>
            Default is 0.09.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.DimensionLineIncrement">
            <summary>
            Gets or sets the dimension line increment (corresponds to the DIMDLI system variable).
            </summary>
            <remarks>
            <para>Default value is 0.38.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.DimensionLineWeight">
            <summary>
            Gets or sets the dimension line weight in 100ths of millimeters 
            (corresponds to the DIMLWD system variable).
            The default value is <see cref="F:WW.Cad.Model.LineWeight.ByBlock"/>.
            </summary>
            <remarks>
            <para>
            See also <see cref="T:WW.Cad.Model.LineWeight"/> for values smaller than zero.
            For non-negative values this is the line weight in 100ths of millimeters.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.MinusTolerance">
            <summary>
            Gets or sets the minus tolerance (corresponds to the DIMTM system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.PlusTolerance">
            <summary>
            Gets or sets the plus tolerance (corresponds to the DIMTP system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.PostFix">
            <summary>
            Gets or sets the general dimension postfix (corresponds to the DIMPOST system variable).
            To define a pre-fix, use the "&lt;&gt;" string as a place holder for the measurement.
            For example value "mm" would be shown as a postfix, "A&lt;&gt;B" would show A as prefix and B as postfix.
            When the postfix ends with the string "\X", the alternate dimension units are shown on the next line
            rather than on the same line as the primary dimension units.
            </summary>
            <remarks>
            <para>
            Property <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateDimensioningSuffix"/> is the counterpart for alternate dimension units.
            </para>
            <para>
            Available in all supported versions.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.AlternateDimensioningSuffix"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.Rounding">
            <summary>
            Gets or sets the rounding value for dimension distances 
            (corresponds to the DIMRND system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ScaleFactor">
            <summary>
            Gets or sets the overall dimension scale factor (corresponds to the DIMSCALE system variable). 
            The default is 1.
            </summary>
            <remarks>
            <para>
            The following properties are scaled by the scale factor:
            <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.ArrowSize"/>,
            <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.CenterMarkSize"/>,
            <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.DimensionLineExtension"/>,
            <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.ExtensionLineExtension"/>,
            <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.ExtensionLineOffset"/>,
            <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.DimensionLineGap"/>,
            <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.TickSize"/>,
            <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.TextHeight"/>.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.SecondArrowBlock">
            <summary>
            Gets or sets the second arrow block name (the block name corresponds to the DIMBLK2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.SeparateArrowBlocks">
            <summary>
            Gets or sets whether to use seperate arrow blocks (corresponds to the DIMSAH system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.SuppressFirstDimensionLine">
            <summary>
            Gets or sets the suppression of first dimension line (corresponds to the DIMSD1 system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.SuppressFirstExtensionLine">
            <summary>
            Gets or sets the suppression of first extension line (corresponds to the DIMSD2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.SuppressOutsideExtensions">
            <summary>
            Gets or sets the supression outside extensions dimension lines flag 
            (corresponds to the DIMSOXD system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.SuppressSecondDimensionLine">
            <summary>
            Gets or sets the suppression of second dimension line (corresponds to the DIMSD2 system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.SuppressSecondExtensionLine">
            <summary>
            Gets or sets the suppression of second extension line (corresponds to the DIMSE2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextAboveDimensionLine">
            <summary>
            Gets or sets the text above dimension line flag (corresponds to the DIMTAD system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextAlignment">
            <summary>
            Gets or sets the horizontal dimension text position (corresponds to the DIMJUST system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextColor">
            <summary>
            Gets or sets the text color (corresponds to the DIMCLRT system variable).
            The default value is by <see cref="F:WW.Cad.Model.Color.ByBlock"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextHeight">
            <summary>
            Gets or sets the text height (corresponds to the DIMTXT system variable).
            </summary>
            <remarks>
            <para>
            Default value is 0.18.
            </para>
            <para>
            The text height corresponds with the text font's ascent.
            </para>
            <para>
            If the <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.TextStyle"/> is set and its <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.FixedHeight">fixed height</see>
            is non-zero, then that value overrides the <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.TextHeight"/> value.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextInsideExtensions">
            <summary>
            Gets or sets the text inside extensions flag (corresponds to the DIMTIX system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextInsideHorizontal">
            <summary>
            Gets or sets the force text inside extension flag (corresponds to the DIMTIH system variable).
            </summary>
            <remarks>
            <para>Default is <see langword="true"/>.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextMovement">
            <summary>
            Gets or sets the dimension text movement rules (corresponds to the DIMTMOVE system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextOutsideExtensions">
            <summary>
            Gets or sets whether to force the dimension line to be drawn between the extension lines even when the
            text and arrow heads are outside the extension lines (corresponds to the DIMTOFL system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextOutsideHorizontal">
            <summary>
            Gets or sets the text outside horizontal flag (corresponds to the DIMTOH system variable).
            </summary>
            <remarks>
            <para>Default is <see langword="true"/>.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextStyle">
            <summary>
            The text style. By default it is set to the "STANDARD" text style 
            (corresponds to the DIMTXSTY system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextVerticalPosition">
            <summary>
            Gets or sets the text vertical position (corresponds to the DIMTVP system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TickSize">
            <summary>
            Gets or sets the tick size (corresponds to the DIMTSZ system variable).
            </summary>
            <remarks>
            <para>
            The tick size defines the distance the tick extends beyond the extension lines, 
            parallel to the dimension line.
            </para>
            <para>
            If non zero, then diagonal tick marks are drawn at the ends of the dimension line.
            Otherwise arrows of size <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.ArrowSize"/> are drawn.
            </para>
            <para>
            The default size is 0.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.ArrowSize"/>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.DimensionLineExtension"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ToleranceAlignment">
            <summary>
            Gets or sets the vertical justification for tolerance values (corresponds to the DIMTOLJ system variable).
            </summary>
            <remarks>
            <para>Default is <see cref="F:WW.Cad.Model.Tables.ToleranceAlignment.Middle">Middle</see>.</para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ToleranceDecimalPlaces">
            <summary>
            Gets or sets the tolerance decimal places (corresponds to the DIMTDEC system variable).
            </summary>
            <remarks>
            <para>The default value is 4.</para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ToleranceScaleFactor">
            <summary>
            Gets or sets the scale factor used to calculate the height for dimension fractions and tolerances 
            (corresponds to the DIMTFAC system variable).
            The default value is 1.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ToleranceZeroHandling">
            <summary>
            Gets or sets the supression of zeros for tolerance values (corresponds to the DIMTZIN system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ZeroHandling">
            <summary>
            Gets or sets the supression of zeros for primary unit values (corresponds to the DIMZIN system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.FixedExtensionLineLength">
            <summary>
            Gets or sets the fixed length of the extension line
            (corresponds to DIMFXL system variable).
            The default value is 1.
            The value is in effect only if <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.IsExtensionLineLengthFixed"/> is <c>true</c>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.IsExtensionLineLengthFixed"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.IsExtensionLineLengthFixed">
            <summary>
            Gets or sets whether the extension line length is fixed (corresponds to the DIMFXLON system variable).
            See also <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.FixedExtensionLineLength"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.FixedExtensionLineLength"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.JoggedRadiusDimensionTransverseSegmentAngle">
            <summary>
            Gets or sets the jogged radius dimension transverse segment angle (radians).
            This property corresponse to the DIMJOGANG system variable.
            The angle should be in between the radian equivalents of 5 and 90 degrees.
            The default value is 0.7853981633974483 (45 degrees).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextBackgroundFillMode">
            <summary>
            Gets or sets the dimension text background fill mode.
            This property corresponse to the DIMTFILL system variable.
            The default value is <see cref="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.NoBackground"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.TextBackgroundColor"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.TextBackgroundColor">
            <summary>
            Gets or sets the color of the dimension text background.
            This property corresponse to the DIMTFILLCLR system variable.
            This setting is in effect when <see cref="P:WW.Cad.Model.Tables.IDimensionStyle.TextBackgroundFillMode"/> is set to
            <see cref="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.DimensionTextBackgroundColor"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.TextBackgroundFillMode"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.IDimensionStyle.ArcLengthSymbolPosition">
            <summary>
            Gets or sets the arc length symbol position.
            This property corresponse to the DIMARCSYM system variable.
            The default value is <see cref="F:WW.Cad.Model.Tables.ArcLengthSymbolPosition.BeforeDimensionText"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfDimensionStyle.DefaultDimensionStyleName">
            <summary>
            The default dimension style name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.#ctor(WW.Cad.Model.DxfModel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.GetEffectiveTextHeight">
            <summary>
            Gets the effective height of the text.
            </summary>
            <remarks>
            If the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextStyle"/> is set and its <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.FixedHeight">fixed height</see>
            is non-zero, then that value overrides the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextHeight"/> value.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.GetEffectiveTextHeight(WW.Cad.Model.Tables.IDimensionStyle)">
            <summary>
            Gets the effective height of the text.
            </summary>
            <remarks>
            If the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextStyle"/> is set and its <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.FixedHeight">fixed height</see>
            is non-zero, then that value overrides the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextHeight"/> value.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the dimension style.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified dimension style in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.Clone">
            <summary>
            Creates a copy of this object in the context of the same model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateDimensioningSuffix">
            <summary>
            Gets or sets the alternate dimensioning suffix (corresponds to the DIMAPOST system variable).
            To define a pre-fix, use the "[]" string as a place holder for the measurement.
            For example value "mm" would be shown as a postfix, "A[]B" would show A as prefix and B as postfix.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitDecimalPlaces">
            <summary>
            Gets or sets the alternate unit decimal places (corresponds to the DIMALTD system variable).
            </summary>
            <remarks>
            <para>Default is 2.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitDimensioning">
            <summary>
            Gets or sets the use of an alternate unit dimensioning (corresponds to the DIMALT system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitFormat">
            <summary>
            Gets or sets the units format for alternate units of all dimension style families except angular 
            (corresponds to the DIMALTU system variable).
            </summary>
            <remarks>
            <para>Default is <see cref="F:WW.Cad.Model.Tables.AlternateUnitFormat.Decimal">Decimal</see>.</para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitScaleFactor">
            <summary>
            Gets or sets the alternate unit scale factor. (Default is 1) (corresponds to the DIMALTF system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitToleranceDecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for tolerance values of an alternative units dimension 
            (corresponds to the DIMALTTD system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitToleranceZeroHandling">
            <summary>
            Gets or sets the supression of zeros for alternate tolerance values 
            (corresponds to the DIMALTTZ system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitZeroHandling">
            <summary>
            Gets or sets the supression of zeros for alternate unit dimension values 
            (corresponds to the DIMALTZ system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitRounding">
            <summary>
            Gets or sets the rounding of alternate units (corresponds to the DIMALTRND system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AngularDimensionDecimalPlaces">
            <summary>
            Gets or sets the number of precision digits in angular dimensions 
            (corresponds to the DIMADEC system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AngularUnit">
            <summary>
            Gets or sets the angular unit (corresponds to the DIMAUNIT system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AngularZeroHandling">
            <summary>
            Gets or sets the controls supression of zeros for angular dimensions 
            (corresponds to the DIMAZIN system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArrowBlock">
            <summary>
            Gets or sets the arrow block (the block name corresponds to the DIMBLK system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArrowSize">
            <summary>
            Gets or sets the arrow size (corresponds to the DIMASZ system variable).
            </summary>
            <remarks>
            <para>
            If <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TickSize"/> is non zero, then diagonal tick marks are drawn in stead of an arrows
            at the ends of a dimension line.
            </para>
            <para>
            Default size is 0.18.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TickSize"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArrowsTextFit">
            <summary>
            Gets or sets the fit type for dimension arrows and text if they don't fit between the extension lines
            (corresponds to DIMATFIT system variable).
            The default value is 
            <see cref="F:WW.Cad.Model.ArrowsTextFitType.MoveBoth">MoveBoth</see>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.FixedExtensionLineLength">
            <summary>
            Gets or sets the fixed length of the extension line
            (corresponds to DIMFXL system variable).
            The default value is 1.
            The value is in effect only if <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.IsExtensionLineLengthFixed"/> is <c>true</c>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.IsExtensionLineLengthFixed"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.IsExtensionLineLengthFixed">
            <summary>
            Gets or sets whether the extension line length is fixed (corresponds to the DIMFXLON system variable).
            See also <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.FixedExtensionLineLength"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.FixedExtensionLineLength"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.JoggedRadiusDimensionTransverseSegmentAngle">
            <summary>
            Gets or sets the jogged radius dimension transverse segment angle (radians).
            This property corresponse to the DIMJOGANG system variable.
            The angle should be in between the radian equivalents of 5 and 90 degrees.
            The default value is 0.7853981633974483 (45 degrees).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextBackgroundFillMode">
            <summary>
            Gets or sets the dimension text background fill mode.
            This property corresponse to the DIMTFILL system variable.
            The default value is <see cref="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.NoBackground"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextBackgroundColor"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextBackgroundColor">
            <summary>
            Gets or sets the color of the dimension text background.
            This property corresponse to the DIMTFILLCLR system variable.
            This setting is in effect when <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextBackgroundFillMode"/> is set to
            <see cref="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.DimensionTextBackgroundColor"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextBackgroundFillMode"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArcLengthSymbolPosition">
            <summary>
            Gets or sets the arc length symbol position.
            This property corresponse to the DIMARCSYM system variable.
            The default value is <see cref="F:WW.Cad.Model.Tables.ArcLengthSymbolPosition.BeforeDimensionText"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextDirection">
            <summary>
            Gets or sets the text direction (corresponds to the DIMTXTDIRECTION system variable). 
            The default value is left-to-right.
            </summary>
            <remarks>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.Mzf">
            <summary>
            Gets or sets the MZF setting. The default value is 100.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.Mzs">
            <summary>
            Gets or sets the MZS setting. The default value is an empty string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AltMzf">
            <summary>
            Gets or sets the DIMALTMZF setting. The default value is 100.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.AltMzs">
            <summary>
            Gets or sets the DIMALTMZS setting. The default value is an empty string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.CenterMarkSize">
            <summary>
            Gets or sets the center mark size (corresponds to the DIMCEN system variable).
            The default value is 0.09.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.CursorUpdate">
            <summary>
            Gets or sets the cursor functionality for user positioned text (corresponds to the DIMUPT system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for the tolerance values of primary units dimensions 
            (corresponds to the DIMDEC system variable).
            </summary>
            <remarks>
            <para>
            The default value is 4.
            </para>
            <para>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.DecimalSeparator">
            <summary>
            Gets or sets the single character decimal separator used when creating dimensions whose unit format is decimal 
            (corresponds to the DIMDSEP system variable).
            </summary>
            <remarks>
            <para>Default is a dot.</para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ExtensionLineColor">
            <summary>
            Gets or sets the extension line color (default is <see cref="F:WW.Cad.Model.Color.ByBlock"/>) (corresponds to the DIMCLRE system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ExtensionLineExtension">
            <summary>
            Gets or sets the extension line extension (corresponds to the DIMEXE system variable).
            </summary>
            <remarks>
            <para>Default is 0.18.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ExtensionLineOffset">
            <summary>
            Gets or sets the extension line offset (corresponds to the DIMEXO system variable).
            </summary>
            <remarks>
            <para>Default is 0.0625.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ExtensionLineWeight">
            <summary>
            Gets or sets the extension line weight in 100ths of millimeters 
            (corresponds to the DIMLWE system variable).
            The default value is <see cref="F:WW.Cad.Model.LineWeight.ByBlock"/>.
            </summary>
            <remarks>
            <para>
            See also <see cref="T:WW.Cad.Model.LineWeight"/> for values smaller than zero.
            For non-negative values this is the line weight in 100ths of millimeters.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.FirstArrowBlock">
            <summary>
            Gets or sets the first arrow block (the block name corresponds to the DIMBLK1 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.Flags">
            <summary>
            Gets or sets the standard flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this dimension style is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this dimension style is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this dimension style is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.GenerateTolerances">
            <summary>
            Gets or sets whether to generate dimension tolerances (corresponds to the DIMTOL system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.LeaderArrowBlock">
            <summary>
            Gets or sets the leader arrow block (the block name corresponds to the DIMLDRBLK system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.LimitsGeneration">
            <summary>
            Gets or sets the dimension limits generation flag (corresponds to the DIMLIM system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearScaleFactor">
            <summary>
            Gets or sets the linear measurements scale factor (corresponds to the DIMLFAC system variable). 
            The default value is 1.
            </summary>
            <remarks>
            <para>
            If the scale factor is negative, then the (positive) scale factor is only applied
            to paper space dimensions.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat">
            <summary>
            Gets or sets the units for all dimension types except angular (corresponds to the DIMLUNIT system variable).
            Default value is <see cref="F:WW.Cad.Model.LinearUnitFormat.Decimal">LinearUnitFormat.Decimal</see>.
            </summary>
            <remarks>
            <para>
            To use feet (and/or inches) as linear units, set property <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat"/> to
            either <see cref="F:WW.Cad.Model.LinearUnitFormat.Architectural">Architectural</see> (feet and inches) or
            <see cref="F:WW.Cad.Model.LinearUnitFormat.Engineering">Engineering</see> (feet and fractional feet).
            </para>
            <para>
            For architectural and fractional formats the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.FractionFormat"/> property determines 
            between horizontal, diagonal or no stacking of the numerator and denominator.
            For alternate dimension units this property does not exist and is covered by property <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitFormat"/>.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.FractionFormat"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.FractionFormat">
            <summary>
            Gets or sets the fraction format (corresponds to the DIMFRAC system variable).
            The default value is <see cref="F:WW.Cad.Model.FractionFormat.HorizontalStacking"/>.
            </summary>
            <remarks>
            <para>
            This value is relevant when the linear unit format is set to architectural or fractional.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.DimensionLineColor">
            <summary>
            Gets or sets the dimension line color (corresponds to the DIMCLRD system variable).
            The default value is <see cref="F:WW.Cad.Model.Color.ByBlock"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.DimensionLineExtension">
            <summary>
            Gets or sets the dimension line extension (corresponds to the DIMDLE system variable).
            </summary>
            <remarks>
            <para>
            This value is only relevant when there are tick marks in stead of arrows
            at the ends of a dimension line (see <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TickSize"/>).
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TickSize"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArrowSize"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.DimensionLineGap">
            <summary>
            Gets or sets the dimension line gap (corresponds to the DIMGAP system variable).
            </summary>
            <remarks>
            <para>
            This is the distance between the dimension text and dimension line when the text cuts
            the dimension line in two.
            A value smaller than zero only affects the horizontal distance.
            A value greather than zero affects both the horizontal and vertical distance.
            </para>
            <para>
            Default is 0.09.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.DimensionLineIncrement">
            <summary>
            Gets or sets the dimension line increment (corresponds to the DIMDLI system variable).
            </summary>
            <remarks>
            <para>Default value is 0.38.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.DimensionLineWeight">
            <summary>
            Gets or sets the dimension line weight in 100ths of millimeters 
            (corresponds to the DIMLWD system variable).
            The default value is <see cref="F:WW.Cad.Model.LineWeight.ByBlock"/>.
            </summary>
            <remarks>
            <para>
            See also <see cref="T:WW.Cad.Model.LineWeight"/> for values smaller than zero.
            For non-negative values this is the line weight in 100ths of millimeters.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.MinusTolerance">
            <summary>
            Gets or sets the minus tolerance (corresponds to the DIMTM system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.Tables.DxfDimensionStyle.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.PlusTolerance">
            <summary>
            Gets or sets the plus tolerance (corresponds to the DIMTP system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.PostFix">
            <summary>
            Gets or sets the general dimension postfix (corresponds to the DIMPOST system variable).
            To define a pre-fix, use the "&lt;&gt;" string as a place holder for the measurement.
            For example value "mm" would be shown as a postfix, "A&lt;&gt;B" would show A as prefix and B as postfix.
            When the postfix ends with the string "\X", the alternate dimension units are shown on the next line
            rather than on the same line as the primary dimension units.
            </summary>
            <remarks>
            <para>
            Property <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateDimensioningSuffix"/> is the counterpart for alternate dimension units.
            </para>
            <para>
            Available in all supported versions.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateDimensioningSuffix"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.Rounding">
            <summary>
            Gets or sets the rounding value for dimension distances 
            (corresponds to the DIMRND system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ScaleFactor">
            <summary>
            Gets or sets the overall dimension scale factor (corresponds to the DIMSCALE system variable). 
            The default is 1.
            </summary>
            <remarks>
            <para>
            The following properties are scaled by the scale factor:
            <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArrowSize"/>,
            <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.CenterMarkSize"/>,
            <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.DimensionLineExtension"/>,
            <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.ExtensionLineExtension"/>,
            <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.ExtensionLineOffset"/>,
            <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.DimensionLineGap"/>,
            <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TickSize"/>,
            <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextHeight"/>.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.SecondArrowBlock">
            <summary>
            Gets or sets the second arrow block name (the block name corresponds to the DIMBLK2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.SeparateArrowBlocks">
            <summary>
            Gets or sets whether to use seperate arrow blocks (corresponds to the DIMSAH system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.SuppressFirstDimensionLine">
            <summary>
            Gets or sets the suppression of first dimension line (corresponds to the DIMSD1 system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.SuppressFirstExtensionLine">
            <summary>
            Gets or sets the suppression of first extension line (corresponds to the DIMSD2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.SuppressOutsideExtensions">
            <summary>
            Gets or sets the supression outside extensions dimension lines flag 
            (corresponds to the DIMSOXD system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.SuppressSecondDimensionLine">
            <summary>
            Gets or sets the suppression of second dimension line (corresponds to the DIMSD2 system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.SuppressSecondExtensionLine">
            <summary>
            Gets or sets the suppression of second extension line (corresponds to the DIMSE2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextAboveDimensionLine">
            <summary>
            Gets or sets the text above dimension line flag (corresponds to the DIMTAD system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextAlignment">
            <summary>
            Gets or sets the horizontal dimension text position (corresponds to the DIMJUST system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextColor">
            <summary>
            Gets or sets the text color (corresponds to the DIMCLRT system variable).
            The default value is by <see cref="F:WW.Cad.Model.Color.ByBlock"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextHeight">
            <summary>
            Gets or sets the text height (corresponds to the DIMTXT system variable).
            </summary>
            <remarks>
            <para>
            Default value is 0.18.
            </para>
            <para>
            The text height corresponds with the text font's ascent.
            </para>
            <para>
            If the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextStyle"/> is set and its <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.FixedHeight">fixed height</see>
            is non-zero, then that value overrides the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextHeight"/> value.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextInsideExtensions">
            <summary>
            Gets or sets the text inside extensions flag (corresponds to the DIMTIX system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextInsideHorizontal">
            <summary>
            Gets or sets the force text inside extension flag (corresponds to the DIMTIH system variable).
            </summary>
            <remarks>
            <para>Default is <see langword="true"/>.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextMovement">
            <summary>
            Gets or sets the dimension text movement rules (corresponds to the DIMTMOVE system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextOutsideExtensions">
            <summary>
            Gets or sets whether to force the dimension line to be drawn between the extension lines even when the
            text and arrow heads are outside the extension lines (corresponds to the DIMTOFL system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextOutsideHorizontal">
            <summary>
            Gets or sets the text outside horizontal flag (corresponds to the DIMTOH system variable).
            </summary>
            <remarks>
            <para>Default is <see langword="true"/>.</para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextStyle">
            <summary>
            The text style. By default it is set to the "STANDARD" text style 
            (corresponds to the DIMTXSTY system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextStyleInternal">
            <summary>
            Get the dimension text style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TextVerticalPosition">
            <summary>
            Gets or sets the text vertical position (corresponds to the DIMTVP system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.TickSize">
            <summary>
            Gets or sets the tick size (corresponds to the DIMTSZ system variable).
            </summary>
            <remarks>
            <para>
            The tick size defines the distance the tick extends beyond the extension lines, 
            parallel to the dimension line.
            </para>
            <para>
            If non zero, then diagonal tick marks are drawn at the ends of the dimension line.
            Otherwise arrows of size <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArrowSize"/> are drawn.
            </para>
            <para>
            The default size is 0.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArrowSize"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.DimensionLineExtension"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ToleranceAlignment">
            <summary>
            Gets or sets the vertical justification for tolerance values (corresponds to the DIMTOLJ system variable).
            </summary>
            <remarks>
            <para>Default is <see cref="F:WW.Cad.Model.Tables.ToleranceAlignment.Middle">Middle</see>.</para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ToleranceDecimalPlaces">
            <summary>
            Gets or sets the tolerance decimal places (corresponds to the DIMTDEC system variable).
            </summary>
            <remarks>
            <para>The default value is 4.</para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ToleranceScaleFactor">
            <summary>
            Gets or sets the scale factor used to calculate the height for dimension fractions and tolerances 
            (corresponds to the DIMTFAC system variable).
            The default value is 1.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ToleranceZeroHandling">
            <summary>
            Gets or sets the supression of zeros for tolerance values (corresponds to the DIMTZIN system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyle.ZeroHandling">
            <summary>
            Gets or sets the supression of zeros for primary unit values (corresponds to the DIMZIN system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch">
            <summary>
            Represents a hatch pattern entity.
            </summary>
            <remarks>
            <para>
            To define the hatch border, <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/> objects must be defined 
            and added to <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPaths"/>.
            </para>
            <para>
            There are two types of hatch filling: solid and pattern fill.
            To create a pattern fill hatch, set property <see cref="T:WW.Cad.Model.Entities.DxfPattern"/>.
            To create a solid fill hatch, set property <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> to <b>null</b> (the default).
            Note that when the system variable FILLMODE (<see cref="P:WW.Cad.Model.DxfHeader.FillMode"/>) is set to <c>false</c>,
            hatches are not displayed.
            </para>
            <para>
            A pattern can be either created from code or by reading from a pattern file (see <see cref="T:WW.Cad.IO.PatternReader"/>).
            </para>
            <para>
            The object coordinate system is 
            defined by the <see cref="P:WW.Cad.Model.Entities.DxfHatch.ZAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfHatch.ElevationPoint"/>.
            </para>
            <para>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">release 14</see>.
            </para>
            </remarks>
            <example>
            Below an example is shown of how to create and write a dxf file containing a hatch object.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class HatchExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfHatch hatch = new DxfHatch();
            hatch.Color = EntityColors .Green;
            hatch.ElevationPoint = new Point3D(0, 0, 2);
            hatch.ZAxis = new Vector3D(-0.707, 0, 0.707);
    
            // A boundary path bounded by lines.
            DxfHatch.BoundaryPath boundaryPath1 = new DxfHatch.BoundaryPath();
            boundaryPath1.Type = BoundaryPathType.None;
            hatch.BoundaryPaths.Add(boundaryPath1);
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 0), new Point2D(1, 0)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(1, 0), new Point2D(1, 1)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(1, 1), new Point2D(0, 1)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 1), new Point2D(0, 0)));
    
            // A boundary path bounded by an ellipse.
            DxfHatch.BoundaryPath boundaryPath2 = new DxfHatch.BoundaryPath();
            boundaryPath2.Type = BoundaryPathType.None;
            hatch.BoundaryPaths.Add(boundaryPath2);
            DxfHatch.BoundaryPath.EllipseEdge edge = new DxfHatch.BoundaryPath.EllipseEdge();
            edge.CounterClockWise = true;
            edge.Center = new Point2D(1, 1);
            edge.MajorAxisEndPoint = new Vector2D(0.4d, -0.2d);
            edge.MinorToMajorRatio = 0.7;
            edge.StartAngle = 0d;
            edge.EndAngle = System.Math.PI * 2d / 3d;
            boundaryPath2.Edges.Add(edge);
            
            // A boundary path bounded by lines and an arc.
            DxfHatch.BoundaryPath boundaryPath3 = new DxfHatch.BoundaryPath();
            boundaryPath3.Type = BoundaryPathType.Outermost;
            hatch.BoundaryPaths.Add(boundaryPath3);
            DxfHatch.BoundaryPath.ArcEdge arcEdge = new DxfHatch.BoundaryPath.ArcEdge();
            arcEdge.Center = new Point2D(0, 1);
            arcEdge.Radius = 0.5d;
            arcEdge.StartAngle = 0;
            arcEdge.EndAngle = System.Math.PI / 2d;
            arcEdge.CounterClockWise = true;
            boundaryPath3.Edges.Add(arcEdge);
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 1.5d), new Point2D(-0.5, 1d)));
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(-0.5, 1d), new Point2D(0d, 0.5d)));
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0d, 0.5d), new Point2D(0.5d, 1d)));
            
            // A boundary path bounded by a polyline.
            DxfHatch.BoundaryPath boundaryPath6 = new DxfHatch.BoundaryPath();
            boundaryPath6.Type = BoundaryPathType.Polyline;
            hatch.BoundaryPaths.Add(boundaryPath6);
            boundaryPath6.PolylineData =
                new DxfHatch.BoundaryPath.Polyline(
                    new DxfHatch.BoundaryPath.Polyline.Vertex[] {
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.5, -0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.5, 0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.5, 0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.5, 0-.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.75, -0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.75, 0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.25, 0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.25, -0.5)
                    }
                );
            boundaryPath6.PolylineData.Closed = true;
    
            // Define the hatch fill pattern.
            // Don't set a pattern for solid fill.
            hatch.Pattern = new DxfPattern();
            DxfPattern.Line patternLine = new DxfPattern.Line();
            hatch.Pattern.Lines.Add(patternLine);
            patternLine.Angle = System.Math.PI / 4d;
            patternLine.Offset = new Vector2D(0.02, -0.01d);
            patternLine.DashLengths.Add(0.02d);
            patternLine.DashLengths.Add(-0.01d);
            patternLine.DashLengths.Add(0d);
            patternLine.DashLengths.Add(-0.01d);
            
            model.Entities.Add(hatch);
    
            DxfWriter.Write("Hatch Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPattern"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPatternStore"/>
            <seealso cref="T:WW.Cad.IO.PatternReader"/>
            <seealso cref="P:WW.Cad.Model.DxfHeader.FillMode"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="!:Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified hatch in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.Repair(WW.Cad.Model.DxfModelRepairer)">
            <summary>
            Attempts to repair this object if is invalid and if it's possible to repair it.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WW.Cad.Model.Entities.DxfHatch.AllBoundaryPathsFilter(WW.Cad.Model.Entities.DxfHatch.BoundaryPath)" -->
        <!-- Badly formed XML comment ignored for member "M:WW.Cad.Model.Entities.DxfHatch.IsOutermostOrExternal(WW.Cad.Model.Entities.DxfHatch.BoundaryPath)" -->
        <!-- Badly formed XML comment ignored for member "M:WW.Cad.Model.Entities.DxfHatch.IsOutermost(WW.Cad.Model.Entities.DxfHatch.BoundaryPath)" -->
        <!-- Badly formed XML comment ignored for member "M:WW.Cad.Model.Entities.DxfHatch.IsExternal(WW.Cad.Model.Entities.DxfHatch.BoundaryPath)" -->
        <member name="M:WW.Cad.Model.Entities.DxfHatch.GetValidContours(WW.Cad.Drawing.GraphicsConfig,System.Predicate{WW.Cad.Model.Entities.DxfHatch.BoundaryPath},System.Boolean)">
            <summary>
            Get the valid closed contours, possibly filtering the set of boundary paths.
            </summary>
            <param name="config">Config parameters used during bounds creation.</param>
            <param name="filter">Filter used for determining which boundaries to include.</param>
            <param name="includeUnclosed">
            Include unclosed boundaries? 
            For solid hatches unclosed boundaries are not included, for pattern hatches they are.
            </param>
            <returns>Array of closed contours, possibly empty.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.AdaptWindingToEvenOddFill(WW.Math.Exact.Geometry.Polygon2LR.BooleanOperations.Context,WW.Math.Exact.Geometry.Polygon2LR.BooleanOperations.Region)">
            <summary>
            Assume that a list of polygons is filled in even-odd mode, and adapt their windings 
            accordingly.
            </summary>
            <param name="region">Original polygon list.</param>
            <returns>list with polygons with adapted winding.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.GetHatchPolylines(WW.Cad.Drawing.DrawContext,System.Boolean@)">
            <summary>
            Get the polylines which build the hatching pattern.
            </summary>
            <param name="context">Drawing context.</param>
            <param name="hatchRepeatCountTooLarge">Will be set to <c>true</c> when there will be too many hatch lines created.</param>
            <returns>Resulting hatch lines or code <c>null</c> if there is no hatch pattern, there are no boundaries or too many hatch lines will be created.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.CombineSeeds(WW.Math.Geometry.Polyline2D[])">
            <summary>
            Combine seeds with possibly also combined boundaries.
            </summary>
            <remarks>
            It is allowed to define seed points differently for different parts of the hatch.
            This method is trying to connect seed points with the boundaries to which they belong.
            Eg an O shape can only be hatched in one go, so if the hatch contains an H boundary with
            a seed point inside and two circle boundaries with same center but different radius and 
            a second seed which is inside the larger circle, but outside the smaller, this method will return
            one pair of the seed point inside the H together with the H boundary and the second seed point
            together with both O boundaries.
            </remarks>
            <param name="boundaries">Boundaries, possibly overlapping.</param>
            <returns>Seed-boundary combinations.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.GetDisjunctPolylineGroups(WW.Math.Geometry.Polyline2D[])">
            <summary>
            Get disjunct polyline groups from a bunch of polylines.
            </summary>
            <param name="polylines">Set of closed polylines, which are possibly overlapping</param>
            <returns>Disjunct groups of polylines.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.Associative">
            <summary>
            Gets or sets whether the hatch is associative.
            </summary>
            <remarks>
            If one or more boundary paths have a boundary object (<see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.BoundaryObjects"/>),
            then the hatch is associative.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.BoundaryObjects"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPaths">
            <summary>
            Gets the boundary path model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.ElevationPoint">
            <summary>
            Gets or sets the elevation point (specified in the OCS).
            </summary>
            <remarks>
            Position and Y coordinates of this elevation point are ignored and should be 0.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.FillColor">
            <summary>
            Gets or sets the fill color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.HatchPatternAngle">
            <summary>
            Gets or sets the hatch pattern angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.PatternOffset">
            <summary>
            Gets or sets the basic offset of the pattern.
            </summary>
            <remarks>
            This will move the pattern and the seed points.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.HatchPatternType">
            <summary>
            Gets or sets the hatch pattern type 
            (default is <see cref="P:WW.Cad.Model.Entities.DxfHatch.HatchPatternType">HatchPatternType.UserDefined</see>.
            </summary>
            <remarks>
            <para>
            This property does not affect the display of the hatch pattern.
            It merely indicates the original source of the hatch pattern.
            </para>
            <para>
            AutoCAD allows a user to select predefined hatch patterns with
            names like e.g. "ANGLE" and "ESCHER". 
            These patterns are not included in CadLib.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.HatchStyle">
            <summary>
            Gets or sets the hatch style 
            (default is <see cref="P:WW.Cad.Model.Entities.DxfHatch.HatchStyle">HatchStyle.Normal</see>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsOutermost"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.IsDouble">
            <summary>
            Gets or sets whether the pattern is double (pattern fill only).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.Name">
            <summary>
            Gets or sets the pattern name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.Pattern">
            <summary>
            Gets or sets the <see cref="T:WW.Cad.Model.Entities.DxfPattern"/>.
            </summary>
            <remarks>
            <para>
            The pattern may be <b>null</b>. 
            If <b>null</b> then solid fill is applied to the hatch.
            </para>
            <para>
            When setting a pattern, the pattern is cloned.
            When scaling the hatch the local cloned version of the pattern is rescaled 
            (see property <see cref="P:WW.Cad.Model.Entities.DxfHatch.Scale"/>).  When rotating the pattern, the clone version
            is rotated (see property <see cref="P:WW.Cad.Model.Entities.DxfHatch.HatchPatternAngle"/>).
            </para>
            <para>
            Takes over the <see cref="P:WW.Cad.Model.Entities.DxfPattern.Name">DxfPattern.Name</see> 
            as the hatch pattern <see cref="P:WW.Cad.Model.Entities.DxfHatch.Name"/> if the pattern has a name.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfHatch.Scale"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.ColorGradient">
            <summary>
            Gets or sets the color gradient (optional, this may be <c>null</c>).
            Color gradients are supported from version <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.PixelSize">
            <summary>
            Gets or sets the 
            pixel size used to determine the density to perform various intersection
            and ray casting operations in hatch pattern computation for associative
            hatches and hatches created with the Flood method of hatching.
            </summary>
            <remarks>
            Not written to file.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.Scale">
            <summary>
            Gets or sets the scale (only applies to pattern fill).
            The default value is 1.
            </summary>
            <remarks>
            <para>
            Rescales the <see cref="P:WW.Cad.Model.Entities.DxfHatch.Pattern"/> by the new scale divided by the old
            scale value if it is not <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.SeedPoints">
            <summary>
            Gets the pattern seed points (<see cref="T:WW.Math.Point2D"/> objects).
            </summary>
            <remarks>
            This property does not apply for solid filled hatches 
            (i.e. <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> is <b>null</b>).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.ZAxis">
            <summary>
            Gets or sets the extrusion direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.IsAnnotative">
            <summary>
            Gets or sets a value indicating whether the entity is annotative.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath">
            <summary>
            Boundary path model for <see cref="T:WW.Cad.Model.Entities.DxfHatch"/>.
            </summary>
            <remarks>
            A boundary path is either defined by a <see cref="T:WW.Math.Geometry.Polyline2D"/> or
            a list of <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge"/> objects depending on the <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Type"/>.
            </remarks>
            <example>
            An example of how to create and write a DXF file containing a hatch object.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class HatchExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfHatch hatch = new DxfHatch();
            hatch.Color = EntityColors .Green;
            hatch.ElevationPoint = new Point3D(0, 0, 2);
            hatch.ZAxis = new Vector3D(-0.707, 0, 0.707);
    
            // A boundary path bounded by lines.
            DxfHatch.BoundaryPath boundaryPath1 = new DxfHatch.BoundaryPath();
            boundaryPath1.Type = BoundaryPathType.None;
            hatch.BoundaryPaths.Add(boundaryPath1);
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 0), new Point2D(1, 0)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(1, 0), new Point2D(1, 1)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(1, 1), new Point2D(0, 1)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 1), new Point2D(0, 0)));
    
            // A boundary path bounded by an ellipse.
            DxfHatch.BoundaryPath boundaryPath2 = new DxfHatch.BoundaryPath();
            boundaryPath2.Type = BoundaryPathType.None;
            hatch.BoundaryPaths.Add(boundaryPath2);
            DxfHatch.BoundaryPath.EllipseEdge edge = new DxfHatch.BoundaryPath.EllipseEdge();
            edge.CounterClockWise = true;
            edge.Center = new Point2D(1, 1);
            edge.MajorAxisEndPoint = new Vector2D(0.4d, -0.2d);
            edge.MinorToMajorRatio = 0.7;
            edge.StartAngle = 0d;
            edge.EndAngle = System.Math.PI * 2d / 3d;
            boundaryPath2.Edges.Add(edge);
            
            // A boundary path bounded by lines and an arc.
            DxfHatch.BoundaryPath boundaryPath3 = new DxfHatch.BoundaryPath();
            boundaryPath3.Type = BoundaryPathType.Outermost;
            hatch.BoundaryPaths.Add(boundaryPath3);
            DxfHatch.BoundaryPath.ArcEdge arcEdge = new DxfHatch.BoundaryPath.ArcEdge();
            arcEdge.Center = new Point2D(0, 1);
            arcEdge.Radius = 0.5d;
            arcEdge.StartAngle = 0;
            arcEdge.EndAngle = System.Math.PI / 2d;
            arcEdge.CounterClockWise = true;
            boundaryPath3.Edges.Add(arcEdge);
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 1.5d), new Point2D(-0.5, 1d)));
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(-0.5, 1d), new Point2D(0d, 0.5d)));
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0d, 0.5d), new Point2D(0.5d, 1d)));
            
            // A boundary path bounded by a polyline.
            DxfHatch.BoundaryPath boundaryPath6 = new DxfHatch.BoundaryPath();
            boundaryPath6.Type = BoundaryPathType.Polyline;
            hatch.BoundaryPaths.Add(boundaryPath6);
            boundaryPath6.PolylineData =
                new DxfHatch.BoundaryPath.Polyline(
                    new DxfHatch.BoundaryPath.Polyline.Vertex[] {
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.5, -0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.5, 0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.5, 0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.5, 0-.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.75, -0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.75, 0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.25, 0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.25, -0.5)
                    }
                );
            boundaryPath6.PolylineData.Closed = true;
    
            // Define the hatch fill pattern.
            // Don't set a pattern for solid fill.
            hatch.Pattern = new DxfPattern();
            DxfPattern.Line patternLine = new DxfPattern.Line();
            hatch.Pattern.Lines.Add(patternLine);
            patternLine.Angle = System.Math.PI / 4d;
            patternLine.Offset = new Vector2D(0.02, -0.01d);
            patternLine.DashLengths.Add(0.02d);
            patternLine.DashLengths.Add(-0.01d);
            patternLine.DashLengths.Add(0d);
            patternLine.DashLengths.Add(-0.01d);
            
            model.Entities.Add(hatch);
    
            DxfWriter.Write("Hatch Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this boundary path.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones the specified target model in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Validate(WW.Cad.Model.DxfModel,WW.Cad.Model.Entities.DxfEntity,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Repair">
            <summary>
            Attempts to repair this object if is invalid and if it's possible to repair it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.CopyFrom(WW.Cad.Model.Entities.DxfHatch.BoundaryPath,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified boundary path in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.PolylineData">
            <summary>
            Gets or sets the boundary path polyline. The default value is null.
            </summary>
            <remarks>
            When set, the property <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsPolyline"/> is set depending on if the value is <c>null</c>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edges">
            <summary>
            Gets the boundary path <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge">edges</see>.
            </summary>
            <remarks>
            Filled only if <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Type"/> is not <see cref="F:WW.Cad.Model.Entities.BoundaryPathType.Polyline"/>.
            Elements are a sub type of <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Type">
            <summary>
            Gets or sets the path type.
            </summary>
            <remarks>
            The default is <see cref="F:WW.Cad.Model.Entities.BoundaryPathType.None"/> which means that the boundary path is
            defined by edges.
            Use <see cref="F:WW.Cad.Model.Entities.BoundaryPathType.Polyline"/> to use a polyline as boundary.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsPolyline">
            <summary>
            Gets or sets a value indicating whether this instance is a polyline (see property <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.PolylineData"/>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.PolylineData"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsOutermost">
            <summary>
            Gets or sets a value indicating whether this instance is outermost.
            This is used when the <see cref="P:WW.Cad.Model.Entities.DxfHatch.HatchStyle"/> is <see cref="!:HatchStyle.Outer"/>,
            but see also <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsExternal"/> and <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsOutermostOrExternal"/>
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.PolylineData"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsExternal">
            <summary>
            Gets or sets a value indicating whether this instance is external.
            This is used when the <see cref="P:WW.Cad.Model.Entities.DxfHatch.HatchStyle"/> is either
            <see cref="!:HatchStyle.Outer"/> or <see cref="!:HatchStyle.Ignore"/>.
            </summary>
            <value>
            	<c>true</c> if this boundary is external; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsNotClosed">
            <summary>
            Gets or sets a value indicating whether this boundary is unclosed.
            </summary>
            <remarks>
            Unclosed boundaries are not used for solid hatches.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsOutermostOrExternal">
            <summary>
            Gets a value indicating whether this instance is outer or external.
            </summary>
            <remarks>
            When this is <c>true</c> the boundary is used when the <see cref="P:WW.Cad.Model.Entities.DxfHatch.HatchStyle"/> is <see cref="!:HatchStyle.Outer"/>.
            </remarks>
            <value>
            	<c>true</c> if this boundary is outer or external; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.BoundaryObjects">
            <summary>
            Gets the boundary objects.
            </summary>
            <remarks>
            If one or more boundary objects are present, then the hatch
            is <see cref="P:WW.Cad.Model.Entities.DxfHatch.Associative"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline">
            <summary>
            Polyline for <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/>.
            </summary>
            <remarks>
            Note that when the polyline is closed, the last vertex may
            not be the same as the first vertex.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.#ctor(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex[])">
            <summary>
            Constructs a non-closed polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.#ctor(System.Boolean,WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.#ctor(WW.Math.Point2D[])">
            <summary>
            Constructs a non closed polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.#ctor(System.Boolean,WW.Math.Point2D[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.#ctor(System.Collections.Generic.ICollection{WW.Math.Point2D})">
            <summary>
            Constructs a non closed polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.#ctor(System.Boolean,System.Collections.Generic.ICollection{WW.Math.Point2D})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Repair">
            <summary>
            Attempts to repair this object if is invalid and if it's possible to repair it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.CopyFrom(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified polyline in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Closed">
            <summary>
            Gets or sets whether the polyline is closed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertices">
            <summary>
            Gets the polyline vertices (<see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex"/> objects).
            </summary>
            <remarks>
            Note that when the polyline is closed, the last vertex may
            not be the same as the first vertex.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline"/> vertex with <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.Position"/> and <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.Bulge"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.#ctor(WW.Math.Point2D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this vertex.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.Equals(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex)">
            <summary>
            Returns whether this vertex is equal to the specified vertex.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones vertex in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.CopyFrom(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified vertex in the context of specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.X">
            <summary>
            Gets or sets the x coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.Y">
            <summary>
            Gets or sets the y coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Polyline.Vertex.Bulge">
            <summary>
            Gets or sets the bulge.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the
            included angle for an arc segment, made negative if the arc goes
            clockwise from the start point to the endpoint. A bulge of 0 indicates a
            straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge">
            <summary>
            Abstract <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/> edge class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge.Accept(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clone the edge (see <see cref="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge.Validate(WW.Cad.Model.DxfModel,WW.Cad.Model.Entities.DxfEntity,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="entity">The entity.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge.AddPoints(WW.Math.Geometry.Polyline2D,WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Add the approximation points of this boundary to the given polyline.
            </summary>
            <param name="polyline">Polyline to which points are added</param>
            <param name="config">Graphical configuration.</param>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge">
            <summary>
            Line edge boundary path.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge.#ctor(WW.Math.Point2D,WW.Math.Point2D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clone the edge (see <see cref="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)"/>) in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge.Accept(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge.CopyFrom(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified line edge in the context of specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge.End">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge.Start">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge">
            <summary>
            Circular arc edge boundary path.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clone the edge (see <see cref="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)"/>) in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.Accept(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.CopyFrom(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified arc edge in the context of specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.Center">
            <summary>
            Gets or sets the center point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.EndAngle">
            <summary>
            Gets or sets the end angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.StartAngle">
            <summary>
            Gets or sets the start angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge.CounterClockWise">
            <summary>
            Gets or sets whether the ellipse is to be drawn counter clockwise.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge">
            <summary>
            Ellipse edge boundary path.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clone the edge (see <see cref="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)"/>) in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.Accept(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.CopyFrom(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified ellipse edge in the context of specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.Center">
            <summary>
            Gets or sets the center point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.MajorAxisEndPoint">
            <summary>
            Gets or sets the major axis end point (relative to <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.Center"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.EndAngle">
            <summary>
            Gets or sets the end angle (radians).
            The end parameter is calculated from the end angle using <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.AngleToParameter(System.Double,System.Double)"/>, which is used
            to calculate the ellipse points.
            The end point is defined as: Center + MajorAxisEndPoint * cos(EndParameter) + MinorAxisEndPoint * sin(EndParameter).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.AngleToParameter(System.Double,System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.ParameterToAngle(System.Double,System.Double)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.MinorToMajorRatio">
            <summary>
            Gets or sets ratio between minor and major axis (default value is 1).
            </summary>
            <remarks>
            Value should not be larger than 1.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.StartAngle">
            <summary>
            Gets or sets the start angle (radians).
            The start parameter is calculated from the start angle using <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.AngleToParameter(System.Double,System.Double)"/>, which is used
            to calculate the ellipse points.
            The start point is defined as: Center + MajorAxisEndPoint * cos(StartParameter) + MinorAxisEndPoint * sin(StartParameter).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.AngleToParameter(System.Double,System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.ParameterToAngle(System.Double,System.Double)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge.CounterClockWise">
            <summary>
            Gets or sets whether the ellipse is to be drawn counter clockwise.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge">
            <summary>
            Spline edge boundary path.
            </summary>
            <example>
            Below an example is shown of how to create a drawing containing a hatch object with spline edges.
            <code lang="cs">
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class HatchExample {
        public void DemonstrateHatchWithSplineEdge() {
            DxfModel model = new DxfModel();

            DxfHatch hatch = new DxfHatch();

            DxfHatch.BoundaryPath boundaryPath = new DxfHatch.BoundaryPath();
            {
                DxfHatch.BoundaryPath.SplineEdge edge = new DxfHatch.BoundaryPath.SplineEdge();
                edge.Degree = 3;
                edge.ControlPoints.Add(new Point2D(-1, 0));
                edge.ControlPoints.Add(new Point2D(-1, 2));
                edge.ControlPoints.Add(new Point2D(1, 2));
                edge.ControlPoints.Add(new Point2D(1, 0));
                edge.Knots.AddRange(BSplineD.CreateDefaultKnotValues(edge.Degree, 4, false));
                boundaryPath.Edges.Add(edge);
            }
            {
                DxfHatch.BoundaryPath.SplineEdge edge = new DxfHatch.BoundaryPath.SplineEdge();
                edge.Degree = 3;
                edge.ControlPoints.Add(new Point2D(1, 0));
                edge.ControlPoints.Add(new Point2D(1, -2));
                edge.ControlPoints.Add(new Point2D(-1, -2));
                edge.ControlPoints.Add(new Point2D(-1, 0));
                edge.Knots.AddRange(BSplineD.CreateDefaultKnotValues(edge.Degree, 4, false));
                boundaryPath.Edges.Add(edge);
            }

            hatch.BoundaryPaths.Add(boundaryPath);
            model.Entities.Add(hatch);

            DxfWriter.Write("HatchExample.DemonstrateHatchWithSplineEdge.dxf", model);
            DwgWriter.Write("HatchExample.DemonstrateHatchWithSplineEdge.dwg", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clone the edge (see <see cref="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)"/>) in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Accept(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Validate(WW.Cad.Model.DxfModel,WW.Cad.Model.Entities.DxfEntity,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="entity">The entity.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.CopyFrom(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified spline edge in the context of specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.ControlPoints">
            <summary>
            Gets the control points (<see cref="T:WW.Math.Point2D"/> objects).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Degree">
            <summary>
            Gets or sets the spline's degree.
            Quadratic splines have degree 2, cubic splines have degree 3.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Knots">
            <summary>
            Gets the knot values (<see cref="T:System.Double"/>s).
            Use method <see cref="M:WW.Cad.Base.BSplineD.CreateDefaultKnotValues(System.Int32,System.Int32,System.Boolean)"/> to create default knot values.
            </summary>
            <remarks>
            When defining a spline the number of knots should be equal to the <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Degree"/>
            + number of <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.ControlPoints"/> + 1 (also when the spline is closed).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Periodic">
            <summary>
            Gets or sets whether the spline is periodic (closed).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Rational">
            <summary>
            Gets or sets whether the spline is rational.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Weights">
            <summary>
            Gets the weights (<see cref="T:System.Double"/>s).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.FitPointData">
            <summary>
            Gets or sets the fit point data. The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.ExpectedKnotCount">
            <summary>
            Gets the expected knot count (<see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.ControlPoints"/>.Count + <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.Degree"/> + 1/&gt;).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.KnotsValid">
            <summary>
            Gets whether the knots are valid.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge.WeightsValid">
            <summary>
            Gets whether the weights are valid.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/> visitor interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor.Visit(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.LineEdge)">
            <summary>
            Visits the specified edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor.Visit(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.ArcEdge)">
            <summary>
            Visits the specified edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor.Visit(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.EllipseEdge)">
            <summary>
            Visits the specified edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IEdgeVisitor.Visit(WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge)">
            <summary>
            Visits the specified edge.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.CloneBuilder">
            <summary>
            Represents a hatch boundary path clone builder.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.CloneBuilder.ResolveReferences(WW.Cad.Model.CloneContext)">
            <summary>
            Resolves references for the clone. To be called after all objects have been cloned.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.CloneBuilder.ClonedBoundaryPath">
            <summary>
            Gets or sets the cloned boundary path.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.CloneBuilder.OriginalBoundaryObjects">
            <summary>
            Gets the original boundary objects.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfHatch.FitPointData">
            <summary>
            Represents fit point data for a <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.SplineEdge"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.FitPointData.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this fit point data.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.FitPointData.Clone">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfHatch.FitPointData.CopyFrom(WW.Cad.Model.Entities.DxfHatch.FitPointData)">
            <summary>
            Copies from specified fit point data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.FitPointData.FitPoints">
            <summary>
            Gets the fit points.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.FitPointData.StartTangent">
            <summary>
            Gets or sets the start tangent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfHatch.FitPointData.EndTangent">
            <summary>
            Gets or sets the end tangent.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfMText">
            <summary>
            Represents a multiline text entity.
            </summary>
            <remarks>
            <para>
            See property <see cref="T:WW.Cad.Model.Entities.DxfText"/> for more information on special processing characters.
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </para>
            <para>
            See also class <see cref="T:WW.Cad.Model.Entities.DxfText"/> for non-multiline text.
            </para>
            </remarks>
            <example>
            An example of how to create and write a DXF file containing multiline text.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class MTextExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            DxfMText mtext = new DxfMText(
                @"Multiline1, \P\C003;Multiline2 in Green", 
                new Point3D(-2d, -3d, 1d), 
                1d
            );
            model.Entities.Add(mtext);
            DxfWriter.Write("MText Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfText"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMText"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.#ctor(System.String,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMText"/> class.
            </summary>
            <remarks>
            The text height is by default the <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/>'s <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.FixedHeight">FixedHeight</see>.
            </remarks>
            <param name="text">The text.</param>
            <param name="insertionPoint">The insertion point.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.#ctor(System.String,WW.Math.Point3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMText"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="insertionPoint">The insertion point.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified multiline text in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.DrawToPathDrawer(WW.Cad.Drawing.DrawContext,WW.Cad.Model.IPathDrawer)">
            <summary>
            Draw the text to a path drawer.
            </summary>
            <param name="context">draw context</param>
            <param name="pathDrawer">the path drawer to which everything is drawn</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMText.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.AttachmentPoint">
            <summary>
            Gets or sets the attachment point.
            The default value is <see cref="F:WW.Cad.Model.Entities.AttachmentPoint.TopLeft">AttachmentPoint.TopLeft</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.DrawingDirection">
            <summary>
            Gets or sets the drawing direction.
            The default value is <see cref="F:WW.Cad.Model.Entities.DrawingDirection.ByStyle">DrawingDirection.ByStyle</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.BoxWidth">
            <summary>
            Gets the width of the text box.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.BoxHeight">
            <summary>
            Gets height of the text box.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.Height">
            <summary>
            Gets or sets the height. The height corresponds with the font ascent.
            The default value is 0.2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.LineSpacingFactor">
            <summary>
            Gets or sets the line spacing factor (optional):
            Percentage of default (3-on-5) line spacing to be applied. Valid values
            range from 0.25 to 4.00.
            The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.BackgroundFillFlags">
            <summary>
            Gets or sets the type of the background fill.
            The default value is <see cref="!:BackgroundFillFlags.None">BackgroundFillFlags.None</see>.
            </summary>
            <remarks>
            When the background fill type is UseBackgroundFillColor, then
            property <see cref="P:WW.Cad.Model.Entities.DxfMText.BackgroundFillInfo"/> should be set.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfMText.BackgroundFillInfo"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.BackgroundFillInfo">
            <summary>
            Gets or sets the background fill information.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.LineSpacingStyle">
            <summary>
            Gets or sets the line spacing style.
            The default value is <see cref="F:WW.Cad.Model.Entities.LineSpacingStyle.AtLeast">LineSpacingStyle.AtLeast</see>.
            </summary>
            <remarks>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.Style">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.StyleInternal">
            <summary>
            Gets or sets the style, for CadLib internal use only.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.Text">
            <summary>
            Gets or sets the text value.
            </summary>
            <remarks>
            <para>
            This text may contain special processing sequences. Not all possible sequences are supported yet.
            </para>
            Supported processing sequences (note the the char after the backslash should be uppercase):
            <list type="table">
            <item>
              <term>\</term>
              <description>Use the backslash escape for the following characters: \{}~</description>
            </item>
            <item>
              <term>\An;</term>
              <description>
                Vertical alignment: 0 = bottom, 1 = middle, 2 = top.
              </description>
            </item>
            <item>
              <term>\Cnnn;</term>
              <description>
                Set indexed color; nnn is the color index.
              </description>
            </item>
            <item>
              <term>\cnnnn;</term>
              <description>
                Set true color; nnn is the color's BGR value (8 bits per color component).
              </description>
            </item>
            <item>
              <term>\P</term>
              <description>New line.</description>
            </item>
            <item>
              <term>\FFONTNAME;</term>
              <description>Replace FONTNAME with the font name (e.g. romant.shx, Arial or Times New Roman).
                In case of shx fonts it's the font file name, in case of true type fonts it's the font name.
              </description>
            </item>
            <item>
              <term>\U[+]nnnn;</term>
              <description>
                DxfInsert a unicode character; nnnn is the unicode character number.
                If the plus sign is specified then nnnn is hexadecimal, otherwise decimal.
              </description>
            </item>
            <item>
              <term>\Hffff;</term>
              <description>
                Set new text height to <c>ffff</c>. Append an x to get a factor from the previous text height.
                So <c>\H0.7x;</c> reduces the text height to 70%.
              </description>
            </item>
            <item>
              <term>{block}</term>
              <description>Curly braces indicate that the prefixed settings only apply to this block.</description>
            </item>
            <item>
              <term>\L</term>
              <description>Start underlining.</description>
            </item>
            <item>
              <term>\l</term>
              <description>End underlining.</description>
            </item>
            <item>
              <term>\O</term>
              <description>Start overlining.</description>
            </item>
            <item>
              <term>\o</term>
              <description>End overlining.</description>
            </item>
            <item>
              <term>\Qnnn;</term>
              <description>Oblique angle (degrees), e.g. <c>\Q20;</c>.</description>
            </item>
            <item>
              <term>\S</term>
              <description>Stacking: 
                e.g. 
                <c>\Sx/y:</c> (horizontal divisor line), 
                <c>\Sx^y:</c> (x stacked above y, no divisor line), 
                <c>\Sx#4:</c> (diagonal divisor line).
              </description>
            </item>
            </list>
            </remarks>
            <example>
            An example of how to create and write a dxf file containing multiline text.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class MTextExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            DxfMText mtext = new DxfMText(
                @"Multiline1, \P\C003;Multiline2 in Green", 
                new Point3D(-2d, -3d, 1d), 
                1d
            );
            model.Entities.Add(mtext);
            DxfWriter.Write("MText Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.SimplifiedText">
            <summary>
            Gets a simplified version of the text without escape sequences.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.Width">
            <summary>
            Gets or sets the reference rectangle width.
            The default value is zero.
            </summary>
            <remarks>
            Obsolete: use <see cref="P:WW.Cad.Model.Entities.DxfMText.ReferenceRectangleWidth"/> instead.
            A line break will result when a line exceeds this width, unless this value is zero.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.ReferenceRectangleWidth">
            <summary>
            Gets or sets the reference rectangle width.
            The default value is zero.
            </summary>
            <remarks>
            A line break will result when a line exceeds this width, unless this value is zero.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.ReferenceRectangleHeight">
            <summary>
            Gets or sets the reference rectangle height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.Thickness">
            <summary>
            Obsolete: Gets the thickness (always zero). Only for internal use.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.InsertionPoint">
            <summary>
            Gets or sets the insertion point, specified in the world coordinate system (WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.TextBounds">
            <summary>
            Gets the internal bounding box defined by the text of this MTEXT.
            </summary>
            <remarks>
            The internal bounding box is in the coordinate system of this MTEXT. 
            Use <see cref="P:WW.Cad.Model.Entities.DxfMText.Transform"/> to transform this to the place defined by this text.
            And note that this MTEXT may be part of a BLOCK, which could add further 
            transformations.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.XAxis">
            <summary>
            Gets or sets the x-axis direction vertex (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.ZAxis">
            <summary>
            Gets or sets the extrusion direction ((0, 0, 1) by default).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.Transform">
            <summary>
            Get the transformation from the internal coordinate system into the surrounding world.
            </summary>
            <remarks>
            Because this MTEXT may be part of a BLOCK, more transformations may be used on it before 
            it is eventually place in the model.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMText.IsAnnotative">
            <summary>
            Gets or sets a value indicating whether the entity is annotative.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DrawingDirection">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfMText">Multiline text</see> drawing direction.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DrawingDirection.LeftToRight">
            <summary>Left to right.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DrawingDirection.RightToLeft">
            <summary>Right to left. No longer mentioned in dxf revision 19.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DrawingDirection.TopToBottom">
            <summary>Top to bottom.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DrawingDirection.BottomToTop">
            <summary>Bottom to top. No longer mentioned in dxf revision 19.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DrawingDirection.ByStyle">
            <summary>By <see cref="P:WW.Cad.Model.Entities.DxfMText.Style"/>.</summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.LinePath">
            <summary>
            A drawable line.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.IDrawable">
            <summary>
            Interface for object that can draw itself.
            </summary>
            <seealso cref="T:WW.Cad.Drawing.GDI.IColoredDrawable"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.IDrawable.Draw(System.Drawing.Graphics,WW.Cad.Drawing.GDI.PenAndBrush,System.Boolean,WW.Math.Matrix4D,WW.Cad.Drawing.GDI.IColorContext)">
            <summary>
            Draw with given color onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.IDrawable.Draw(System.Drawing.Graphics,WW.Drawing.Rasterizer2D,WW.Cad.Drawing.GDI.PenAndBrush,System.Boolean,WW.Math.Matrix4D,WW.Cad.Drawing.GDI.IColorContext)">
            <summary>
            Draw with given color onto given graphics object/rasterizer.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.IDrawable.Draw(System.Drawing.Drawing2D.GraphicsPath,System.Boolean,WW.Math.Matrix4D)">
            <summary>
            Draw onto given graphics path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.IDrawable.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.LinePath.#ctor(WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.LinePath.Draw(System.Drawing.Graphics,WW.Cad.Drawing.GDI.PenAndBrush,System.Boolean,WW.Math.Matrix4D,WW.Cad.Drawing.GDI.IColorContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.LinePath.Draw(System.Drawing.Graphics,WW.Drawing.Rasterizer2D,WW.Cad.Drawing.GDI.PenAndBrush,System.Boolean,WW.Math.Matrix4D,WW.Cad.Drawing.GDI.IColorContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.LinePath.Draw(System.Drawing.Drawing2D.GraphicsPath,System.Boolean,WW.Math.Matrix4D)">
            <summary>
            Draw onto given graphics path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.LinePath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.TextStyleFlags">
            <summary>
            Text style flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextStyleFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextStyleFlags.IsShape">
            <summary>
            If set, this entry describes a shape.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextStyleFlags.VerticalText">
            <summary>
            Vertical text.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextStyleFlags.IsExternallyDependent">
            <summary>
            If set, table entry is externally dependent on an xref.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextStyleFlags.IsResolvedExternalRef">
            <summary>
            If this bit and bit 16 are both set, the externally dependent xref
            has been successfully resolved.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextStyleFlags.IsReferenced">
            <summary>
            If set, the table entry was referenced by at least one entity in the
            drawing the last time the drawing was edited. (This flag is for the
            benefit of AutoCAD commands. It can be ignored by most programs
            that read DXF files and need not be set by programs that write DXF
            files).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolyline3D">
            <summary>
            Represents a 3D poly line (POLYLINE) entity, built from <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> objects.
            </summary>
            <remarks>
            Use the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DBase.Closed"/> property to specify whether the polyline should be closed.
            </remarks>
            <example>
            An example of how to create and write a DXF file containing a DxfPolyline3D.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace Examples {
    public class Polyline3DExample {
        public void Demonstrate()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            // Simple 3D polygon.
            DxfPolyline3D polyline1 = new DxfPolyline3D();
            polyline1.Vertices.AddRange(
                new DxfVertex3D[] {
                    new DxfVertex3D(0, 0, 0),
                    new DxfVertex3D(0, 1, 0),
                    new DxfVertex3D(1, 1, 0),
                    new DxfVertex3D(1, 0, 0)
                }
            );
            polyline1.Closed = true;
            model.Entities.Add(polyline1);
    
            DxfWriter.Write("WriteDxfPolyline3DTest-R14.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline3DBase"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolyline3DBase">
            <summary>
            Abstract DxfPolyline3D base class.
            </summary>
            <remarks>
            Use the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DBase.Closed"/> property to specify whether the polyline should be closed.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DBase.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DBase.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline3DBase.Closed">
            <summary>
            Gets or sets whether the polyline is closed.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfPolylineBase.Flags"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline3DBase.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline3DBase.Transform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.#ctor(WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.#ctor(WW.Cad.Model.Entities.DxfVertex3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.DxfVertex3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.#ctor(WW.Math.Point3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.#ctor(System.Collections.Generic.IEnumerable{WW.Math.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.#ctor(WW.Cad.Model.Entities.EntityColor,System.Collections.Generic.IEnumerable{WW.Math.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified 3D polyline in the context of the specified target model.
            </summary>
            <param name="from">From.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3D.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline3D.Vertices">
            <summary>
            Gets the vertices (<see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>) of the poly line.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline3D.Plinegen">
            <summary>
            If <see langword="true"/> then the line type is applied on the polyline as a whole,
            other wise on each line segment separately.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfPolylineBase.Flags"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPoint">
            <summary>
            Represents a point.
            </summary>
            <remarks>
            <para>
            The point entity is mainly defined by its <see cref="P:WW.Cad.Model.Entities.DxfPoint.Position"/>.
            </para>
            <para>
            The display of a point is controlled by <see cref="P:WW.Cad.Model.DxfHeader.PointDisplayMode"/> and <see cref="P:WW.Cad.Model.DxfHeader.PointDisplaySize"/>.
            </para>
            </remarks>
            <example>
            Below is an example of how to create a point.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class PointExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            model.Entities.Add(new DxfPoint(0.8d, 2.2d, 3d));
            model.Entities.Add(new DxfPoint(1.2d, 2.2d, 3d));
            model.Entities.Add(new DxfPoint(1.2d, 1.8d, 3d));
            model.Entities.Add(new DxfPoint(0.8d, 1.8d, 3d));

            DxfWriter.Write("Point Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor(WW.Cad.Model.Entities.EntityColor,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor(WW.Cad.Model.Entities.EntityColor,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor(WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor(WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPoint"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified point in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates a create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPoint.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPoint.Position">
            <summary>
            Gets or sets the position (in WCS).
            </summary>	
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPoint.ZAxis">
            <summary>
            Gets or sets the extrusion direction.
            </summary>	
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPoint.Thickness">
            <summary>
            Gets or sets the extrusion thickness.
            </summary>	
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPoint.XAxisAngle">
            <summary>
            Gets or sets the x-axis angle (radians).
            </summary>
            <remarks>
            Supported from <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/> onwards.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPoint.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPoint.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPoint.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.IControlPoint">
            <summary>
            An interface for a control point of a graphical object.
            </summary>
            <seealso cref="T:WW.Cad.Actions.IControlPointCollection"/>
        </member>
        <member name="M:WW.Cad.Actions.IControlPoint.SetValue(System.Object,WW.Math.Point3D)">
            <summary>
            Sets the value.
            </summary>
            <param name="owner">The owner of the control point.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Actions.IControlPoint.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="owner">The owner of the control point.</param>
        </member>
        <member name="P:WW.Cad.Actions.IControlPoint.Description">
            <summary>
            Gets the description of the control point.
            Uses a <see cref="!:ResourceManager"/> to look up a culture specific value based on the current UI culture.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.IControlPoint.DisplayType">
            <summary>
            Gets the display type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfViewportEntityHeader">
            <summary>
            This class was related to a <see cref="T:WW.Cad.Model.Entities.DxfViewport"/>
            before R15 (only used in the DWG format, not DXF).
            From R15 onwards the layout object replaces this object.
            </summary>
            <remarks>
            This object doesn't really do anything, but just exists for administrative purposes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfViewportEntityHeader.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfViewportEntityHeader.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfViewportEntityHeader.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">source object</param>
            <param name="cloneContext">
            specifies what to do when a reference to e.g. a line type is missing.
            </param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfViewportEntityHeader.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfViewportEntityHeader.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this viewport is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfViewportEntityHeader.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this viewport is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfViewportEntityHeader.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this viewport is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfViewportEntityHeader.IsViewportOn">
            <summary>
            Gets or sets whether the viewport is on (not <see cref="P:WW.Cad.Model.Entities.DxfViewport.Disabled"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfViewportEntityHeader.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfViewportEntityHeader.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfXRecord">
            <summary>
            Represents an XRECORD representing arbitrary data.
            </summary>
            <remarks>
            This object was introduced in version <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">14</see>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecord.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecord.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecord.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfXRecord.DuplicateRecordCloningFlag">
            <summary>
            Gets or sets the duplicate record cloning flag.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfXRecord.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfXRecord.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfXRecord.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfTableStyleCollection">
            <summary>
            A <see cref="T:WW.Cad.Model.Objects.DxfTableStyle"/> keyed collection.
            The key is the table style's name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfTableStyleCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyleCollection.GetKeyForItem(WW.Cad.Model.Objects.DxfTableStyle)">
            <summary>
            Extracts the key from the specified table style (the table style's name).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfMLineStyleCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> keyed collection (MLine style name can be used as indexer parameter).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyleCollection.Find(System.String)">
            <summary>
            Searches for an element that matches the specified name (case insensitive), 
            and returns the first occurrence within the entire list.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyleCollection.FindAll(System.String)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified name (case insensitive).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDictionaryEntryCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.IDictionaryEntry"/> keyed collection (entry name can be used as indexer parameter).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntryCollection.hashmap">
            <summary>
            Internal hashmap for fast access to entries.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionaryEntryCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntryCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains an entry with the specified entry name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntryCollection.GetAll(System.String)">
            <summary>
            Gets all entries with specified entry name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntryCollection.GetFirst(System.String)">
            <summary>
            Gets the first entry with specified entry name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntryCollection.GetFirstValue(System.String)">
            <summary>
            Gets the first entry value with specified entry name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntryCollection.RemoveAll(System.String)">
            <summary>
            Removes all entries with specified name.
            </summary>
            <returns>
            Returns whether entries with specified name were found.
            </returns>
        </member>
        <member name="T:WW.Cad.Model.ReferenceType">
            <summary>
            Represents a reference type for <see cref="T:WW.Cad.Model.DxfTypedObjectReference"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ReferenceType.SoftPointerReference">
            <summary>
            Soft pointer reference.
            </summary>
            <remarks>
            The referencing object does not need the referenced object and vice versa.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.ReferenceType.HardPointerReference">
            <summary>
            Hard pointer reference.
            </summary>
            <remarks>
            The referencing object needs the referenced object, but both are owned by another object.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.ReferenceType.SoftOwnershipReference">
            <summary>
            Soft ownership reference handle type.
            </summary>
            <remarks>
            The owner does not need the owned object. The owned object cannot exist by itself.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.ReferenceType.HardOwnershipReference">
            <summary>
            Hard ownership reference.
            </summary>
            <remarks>
            The owner needs the owned object. The owned object cannot exist by itself.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Text.TextBlockGroup">
            <summary>
            A group of text blocks.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.ITextBlock">
            <summary>
            A block of text with the same settings that is part of a
            <see cref="T:WW.Cad.Model.Entities.DxfMText"/> or <see cref="T:WW.Cad.Model.Entities.DxfText"/> object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextBlock.GetBounds(WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounding box of this text block.
            </summary>
            <param name="whiteSpaceHandling">how to handle white space when calculating the bounds</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextBlock.Layout(WW.Math.Vector2D@,System.Double,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Lay out this block.
            </summary>
            <param name="baselinePos">current baseline position, advanced after layout</param>
            <param name="height">height of the surrounding text block</param>
            <param name="whiteSpaceHandlingFlags">The white space handling flags.</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextBlock.BreakLineBefore(System.Double,WW.Cad.Model.Text.ITextBreaker)">
            <summary>
            Break this text block before the given width.
            </summary>
            <param name="width">width before which to break the text</param>
            <param name="breaker">provider of text breaks</param>
            <returns>
            	<list type="table">
            		<item>
            			<term>an array with two elements</term>
            			<description>
                            if it was possible to break this text block into two parts
                            with the first one smaller than <c>width</c> (the first inherets the offset of this block,
                            while the seconds block's offset is unset)
                        </description>
            		</item>
            		<item>
            			<term>an array with one element</term>
            			<description>if this text block already is smaller than <c>width</c></description>
            		</item>
            		<item>
            			<term>an empty array</term>
            			<description>
                            if the text block is wider than width but it is not possible to find
                            a break position (see also <see cref="P:WW.Cad.Model.Text.ITextBlock.Breakable"/>) at all
                        </description>
            		</item>
            	</list>
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextBlock.GetPositionOf(System.Char,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the baseline start position of the first occurence of the given char.
            </summary>
            <param name="ch">char to look for in block</param>
            <param name="whiteSpaceHandlingFlags">The white space handling flags.</param>
            <returns>
            the position or <c>null</c> if no position was found
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextBlock.CollectTextChunks(System.Collections.Generic.ICollection{WW.Cad.Model.Text.TextChunk},WW.Math.Matrix4D,System.Int16)">
            <summary>
            Collect the text chunks.
            </summary>
            <param name="collector">collector where to add the chunks</param>
            <param name="insertionTrafo">insertion transformation</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextBlock.Offset">
            <summary>
            Gets or sets the relative position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextBlock.Settings">
            <summary>
            Gets or sets the text block settings.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ITextBlock.Breakable">
            <summary>
            Is it possible to break this text?
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.#ctor(WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">the settings of this block</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.#ctor(WW.Cad.Model.Text.TextBlockSettings,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">the settings of this block</param>
            <param name="vertical">is this a vertical group?</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.AddBlock(WW.Cad.Model.Text.ITextBlock)">
            <summary>
            Add a block.
            </summary>
            <param name="block">block to add</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.CreateBrokenBoxGroup(System.Boolean)">
            <summary>
            Create a clone of this group used as a part of a broken line.
            </summary>
            <param name="first">is this the first part of the break?</param>
            <returns>broken group</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.GetBounds(WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounding box of this text block.
            </summary>
            <param name="whiteSpaceHandling">how to handle white space when calculating the bounds</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.Layout(WW.Math.Vector2D@,System.Double,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Lay out this block.
            </summary>
            <param name="baselinePos">current baseline position, advanced after layout</param>
            <param name="height">height of the surrounding text block</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.BreakLineBefore(System.Double,WW.Cad.Model.Text.ITextBreaker)">
            <summary>
            Break this text block before the given width.
            </summary>
            <param name="width">width before which to break the text</param>
            <param name="breaker">provider of text breaks</param>
            <returns>
            	<list type="table">
            		<item>
            			<term>an array with two elements</term>
            			<description>
                            if it was possible to break this text block into two parts
                            with the first one smaller than <c>width</c> (the first inherets the offset of this block,
                            while the seconds block's offset is unset)
                        </description>
            		</item>
            		<item>
            			<term>an array with one element</term>
            			<description>if this text block already is smaller than <c>width</c></description>
            		</item>
            		<item>
            			<term>an empty array</term>
            			<description>
                            if the text block is wider than width but it is not possible to find
                            a break position (see also <see cref="P:WW.Cad.Model.Text.ITextBlock.Breakable"/>) at all
                        </description>
            		</item>
            	</list>
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.GetPositionOf(System.Char,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the baseline start position of the first occurence of the given char.
            </summary>
            <param name="ch">char to look for in block</param>
            <returns>the position or <c>null</c> if no position was found</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockGroup.CollectTextChunks(System.Collections.Generic.ICollection{WW.Cad.Model.Text.TextChunk},WW.Math.Matrix4D,System.Int16)">
            <summary>
            Collect the text chunks.
            </summary>
            <param name="collector">collector where to add the chunks</param>
            <param name="insertionTrafo">insertion transformation</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockGroup.Blocks">
            <summary>
            Get the text blocks making up this group.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockGroup.Offset">
            <summary>
            Gets or sets the relative position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockGroup.Settings">
            <summary>
            Gets or sets the text block settings.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockGroup.Breakable">
            <summary>
            Is it possible to break this text?
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TabulatorTextBlock.#ctor(WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat,WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="paragraphFormat">paragraph format with tabulator settings</param>
            <param name="settings">font settings etc</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TabulatorTextBlock.CreateBrokenBoxGroup(System.Boolean)">
            <summary>
            Create a clone of this group used as a part of a broken line.
            </summary>
            <param name="first">is this the first part of the break?</param>
            <returns>broken group</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TabulatorTextBlock.GetBounds(WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounding box of this text block.
            </summary>
            <param name="whiteSpaceHandling">how to handle white space when calculating the bounds</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TabulatorTextBlock.Layout(WW.Math.Vector2D@,System.Double,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Lay out this block.
            </summary>
            <param name="baselinePos">current baseline position, advanced after layout</param>
            <param name="height">height of the surrounding text block</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TabulatorTextBlock.CalculateTabWidth(WW.Math.Vector2D,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Set the tab width and get the appropriate tabulator.
            </summary>
            <param name="baselinePos">baseline position</param>
            <returns>tabulator</returns>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfViewportCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> collection.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableRow2005Collection">
            <summary>
            A <see cref="T:WW.Cad.Model.Entities.DxfTableRow2005"/> collection class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCustomDataCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Entities.DxfTableCustomData"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCustomDataCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCustomDataCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCustomDataCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCustomDataCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCustomDataCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfTableCustomData})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCustomDataCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="T:WW.Cad.Model.ArrowsTextFitType">
            <summary>
            Type defining dimension arrow and text placement if space is not
            sufficient to place both within the extension lines.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ArrowsTextFitType.MoveBoth">
            <summary>
            Places both text and arrows outside extension lines.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ArrowsTextFitType.MoveArrowsFirst">
            <summary>
            Moves arrows first, then text.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ArrowsTextFitType.MoveTextFirst">
            <summary>
            Moves text first, then arrows.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ArrowsTextFitType.MoveBestFit">
            <summary>
            Moves either text or arrows, whichever fits best.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.UnicodeInfoBasedTextBreaker">
            <summary>
            Text breaker based on Unicode 
            </summary>
            <remarks> 
            This class implements an extremely reduced linebreak algortihm, 
            which basically tries to immitate AutoCAD's behavior.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Text.ITextBreaker">
            <summary>
            Interface for classes which know how to break texts.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextBreaker.BreakBefore(System.String,System.Int32@)">
            <summary>
            Break a text before a given position.
            </summary>
            <param name="text">text to break</param>
            <param name="position">the position before which the text has to be broken,
            and the break position on return or <c>-1</c> if no break was possible</param>
            <returns>
            a pair of texts representing the broken parts of the original text or
            <c>null</c> if it was not possible to break the text before the given position
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.ITextBreaker.BreakAfter(System.String,System.Int32@)">
            <summary>
            Break a text after a given position.
            </summary>
            <param name="text">text to break</param>
            <param name="position">the position before which the text has to be broken,
            and the break position on return or <c>-1</c> if no break was possible</param>
            <returns>
            a pair of texts representing the broken parts of the original text or
            <c>null</c> if it was not possible to break the text before the given position
            </returns>
        </member>
        <member name="F:WW.Cad.Model.Text.UnicodeInfoBasedTextBreaker.LineBreakTable">
            <summary>
            Line break table.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.UnicodeInfoBasedTextBreaker.BreakBefore(System.String,System.Int32@)">
            <summary>
            Break a text before a given position.
            </summary>
            <param name="text">text to break</param>
            <param name="position">the position before which the text has to be broken,
            and the break position on return or <c>-1</c> if no break was possible</param>
            <returns>
            a pair of texts representing the broken parts of the original text or
            <c>null</c> if it was not possible to break the text before the given position
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.UnicodeInfoBasedTextBreaker.BreakAfter(System.String,System.Int32@)">
            <summary>
            Break a text after a given position.
            </summary>
            <param name="text">text to break</param>
            <param name="position">the position before which the text has to be broken,
            and the break position on return or <c>-1</c> if no break was possible</param>
            <returns>
            a pair of texts representing the broken parts of the original text or
            <c>null</c> if it was not possible to break the text before the given position
            </returns>
        </member>
        <member name="T:WW.Cad.Model.SnapType">
            <summary>
            Type of snap mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SnapType.Grid">
            <summary>
            Use a grid for snapping.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SnapType.Polar">
            <summary>
            Use polar snapping.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition">
            <summary>
            Represents the dynamic block properties table column information.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.Parameter">
            <summary>
            Gets or sets the parameter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownObject1">
            <summary>
            Gets or sets the unknownObject1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownInt1">
            <summary>
            Gets or sets the unknownInt1. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownInt2">
            <summary>
            Gets or sets the unknownInt2. Default value is -1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownString1">
            <summary>
            Gets or sets the UnknownString1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownString2">
            <summary>
            Gets or sets the UnknownString2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.ConnectionPoint">
            <summary>
            Gets or sets the connection point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.DefaultDoNotMatchValue">
            <summary>
            Gets or sets the DefaultDoNotMatchValue.
            </summary>
            <remarks>
            Displays the default values when other properties are changed without matching a row.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownValue1">
            <summary>
            Gets or sets the unknownValue1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownFlag1">
            <summary>
            Gets or sets the unknownFlag1. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownFlag2">
            <summary>
            Gets or sets the unknownFlag2. Default value is true.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownFlag3">
            <summary>
            Gets or sets the unknownFlag3. Default value is true.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownFlag4">
            <summary>
            Gets or sets the unknownFlag4. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableColumnDefinition.UnknownFlag5">
            <summary>
            Gets or sets the unknownFlag5. Default value is false.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentParameter">
            <summary>
            Represents the dynamic block alignment parameter.
            </summary>
            <remarks>
            Uses of rotation property of block reference to align the block to some datase entity.
            Can be aligned perpendicular or tangent.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentParameter.IsPerpendicular">
            <summary>
            Gets or sets the perpendicular flag. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.IObjectVisitor">
            <summary>
            Visitor interface for <see cref="T:WW.Cad.Model.Objects.DxfObject"/> instances.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfDataTable)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfDictionary)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockMoveAction)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipAction)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotateAction)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPurgePreventer)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockGripExpression)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfDynamicBlockProxyNode)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYGrip)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookUpParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfDictionaryWithDefault)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfField)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfFieldList)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfXRecord)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfDictionaryVariable)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfIdBuffer)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfPlaceHolder)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfCellStyleMap)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfTableStyle)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfMLineStyle)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfColor)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfImageDef)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfPlotSettings)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfLayout)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfGroup)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfFormattedTableData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfLinkedData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfLinkedTableData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfRasterVariables)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfTableContent)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfTableGeometry)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfSortEntsTable)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfSpatialFilter)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfMTextObjectContextData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfBlockReferenceObjectContextData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfToleranceObjectContextData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfHatchScaleContextData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfHatchViewContextData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfTextObjectContextData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Aligned)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Angular)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Diametric)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Ordinate)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Radial)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfAttributeObjectContextData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.Annotations.DxfLeaderObjectContextData)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IObjectVisitor.Visit(WW.Cad.Model.Objects.DxfWipeoutVariables)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectWriter.WriteModelerGeometryVersion1(System.String)">
            <summary>
            Saving to DWG of SAT stream
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectWriter.GetSupportedEntities(WW.Cad.Model.Tables.DxfBlock)">
            <summary>
            Returns the supported entitites for specified block.
            Caches the result in field blockToSupportedEntities.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectWriter.WriteObjectStreamToMainStream(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Copies the contents of the temporary object stream to the main stream.
            Also calculates object sizes and the object stream crc.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectWriter.WriteObjectSizes">
            <summary>
            Writes the object sizes in the object stream.
            </summary>
            <seealso cref="M:WW.Cad.IO.Dwg.DwgObjectWriter.WriteCommonHandledObjectData(System.Int16,WW.Cad.Model.DxfHandledObject)"/>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectWriter.WriteExtendedData(WW.Cad.Model.DxfExtendedData)">
            <summary>
            Writes the extended data to <see cref="F:WW.Cad.IO.Dwg.DwgObjectWriter.extendedDataStream"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadObjects(WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Reads entities, table entries, dictionary entries, and objects.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadUnknownObject(System.Int16)">
            <summary>
            Object is not supported, but read anyway because it might be referenced through its handle.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadCommonEntityData(WW.Cad.IO.Builders.DxfEntityBuilder)">
            <summary>
            Spec is unclear, common entity data is described twice, and not consistent.
            This method is according to the second section.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadCommonEntityData(WW.Cad.IO.Builders.DxfEntityBuilder,System.Boolean)">
            <summary>
            Spec is unclear, common entity data is described twice, and not consistent.
            This method is according to the second section.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadObjectSizeInBits">
            <summary>
            Should not be called after R21.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.CopyEntityCommonData(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Copies all properties that are set by <see cref="!:DwgReader.ReadCommonEntityData"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadBlockControl">
            <summary>
            Read block record table.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadShapeFileControl">
            <summary>
            Shape file is the same as text style.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadShapeFile">
            <summary>
            Shape file is the same as text style.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.DecodeLineTypeElementTextsR21(WW.Cad.Model.Tables.DxfLineType,System.Byte[],System.Int16[])">
            <summary>
            Decodes utf-16 text.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgObjectReader.ReadXRecordValueRaw(WW.Cad.IO.Builders.DxfXRecordBuilder,WW.Cad.Model.Objects.DxfXRecord)">
            <summary>
            Returns <c>false</c> if illegal data was encountered.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfScale">
            <summary>
            Represents an annotation scale.
            </summary>
            <remarks>
            Annotation scales were introduced in version <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.Annotations.DxfScale"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.#ctor(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.Annotations.DxfScale"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <param name="visitor"></param>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>
            The cloned object.
            </returns>
            <example>
            Below an example is shown of how to clone entities from one <see cref="T:WW.Cad.Model.DxfModel"/> to another.
              <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    // This class demonstrates how to clone entities from a source DxfModel to a target DxfModel.
    public class CloneContextExample {
        public static void DemonstrateEntityCloning() {
            DxfModel sourceModel = new DxfModel();
            DxfLineType lineType = new DxfLineType("DASH_DOT", 1d, -0.2d, 0d, -0.2d);
            sourceModel.LineTypes.Add(lineType);

            DxfCircle circle = new DxfCircle(Point2D.Zero, 5d);
            circle.LineType = lineType;
            sourceModel.Entities.Add(circle);

            DxfLine line = new DxfLine(Point2D.Zero, new Point2D(5d, 0d));
            line.LineType = lineType;
            sourceModel.Entities.Add(line);

            DxfModel targetModel = new DxfModel();

            // The ReferenceResolutionType.CloneMissing will result in the DASH_DOT line type created
            // above to also be cloned indirectly as a result of cloning the entities.
            CloneContext cloneContext = new CloneContext(sourceModel, targetModel, ReferenceResolutionType.CloneMissing);

            foreach(DxfEntity entity in sourceModel.Entities) {
                DxfEntity clonedEntity = (DxfEntity)entity.Clone(cloneContext);
                targetModel.Entities.Add(clonedEntity);
            }

            cloneContext.ResolveReferences();

            DxfWriter.Write("clone_source.dxf", sourceModel);
            DxfWriter.Write("clone_target.dxf", targetModel);
        }
    }
}
</code>
              </example>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone of the same source object a new CloneContext instance has to be used.
            For cloning multiple objects once only one CloneContext is needed (as demonstrated in the example below).
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.GetAnnotationDecompositionXData(WW.Cad.Model.Tables.DxfLayer)">
            <summary>
            Gets the annotation decomposition xdata for the specified layer.
            Entities with annotation scales are exported to several anonymous blocks/layers to 
            pre AutoCAD 2008 files so they can be displayed in older AutoCAD versions.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.GetAnnotationDecompositionXData(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Gets the annotation decomposition xdata for the specified object.
            Entities with annotation scales are exported to several anonymous blocks/layers to 
            pre AutoCAD 2008 files so they can be displayed in older AutoCAD versions.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScale.GetScale(WW.Cad.Model.Tables.DxfLayer,WW.Cad.Model.Tables.DxfLayer@)">
            <summary>
            Gets the scale object for specified layer.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScale.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScale.PaperUnits">
            <summary>
            Gets or sets the paper units.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScale.DrawingUnits">
            <summary>
            Gets or sets the drawing units.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScale.IsTemporaryScale">
            <summary>
            Gets or sets a value indicating whether this is temporary scale.
            Temporary scales are used by external references (see <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>)
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScale.IsUnitScale">
            <summary>
            Gets or sets a value indicating whether this represents a unit scale.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScale.ScaleFactor">
            <summary>
            Gets the scale factor of ths DxfScale object (PaperUnits / DrawingUnits).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScale.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScale.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfBlockReferenceObjectContextData">
            <summary>
            Block reference (<see cref="T:WW.Cad.Model.Entities.DxfInsert"/>) annotation (scale specific) data.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfAnnotationScaleObjectContextData">
            <summary>
            Base class for all the annotation data objects.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfObjectContextData">
            <summary>
            Represents a base class for context specific object data, like annotation data.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfObjectContextData.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfObjectContextData.Version">
            <summary>
            Class version.
            </summary>
            <remarks>
            (version = 3 corresponds to R21, 4 - R24)
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfObjectContextData.IsDefault">
            <summary>
            True if this context data corresponds to the default scale.
            </summary>
            <remarks>
            Default scale is set when the object is made annotative. There is one and only one default scale.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfObjectContextData.AcClass">
            <summary>
            Gets the Autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfAnnotationScaleObjectContextData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.Annotations.DxfAnnotationScaleObjectContextData"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfAnnotationScaleObjectContextData.#ctor(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.Annotations.DxfAnnotationScaleObjectContextData"/> class.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfAnnotationScaleObjectContextData.Scale">
            <summary>
            Represents an annotation scale.
            </summary>
            <remarks>
            Annotation scales were introduced in version <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfAnnotationScaleObjectContextData.AcClass">
            <summary>
            Gets the Autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfAnnotationScaleObjectContextData.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfBlockReferenceObjectContextData.Rotation">
            <summary>
            Gets or sets the insert rotation angle (in radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfBlockReferenceObjectContextData.InsertionPoint">
            <summary>
            Gets or sets the insertion point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfBlockReferenceObjectContextData.ScaleFactor">
            <summary>
            Gets or sets the insert scale factor.
            Default is (1,1,1)
            </summary>
        </member>
        <member name="T:WW.Cad.Model.CorrectIndexedBackgroundPlotStyleProvider">
            <summary>
            Implementation of a plot style resolver which is correcting indexed color plot styles
            so they are always different from the background.
            </summary>
            <remarks>
            This handles coloring similar to AutoCAD.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.CorrectIndexedBackgroundPlotStyleProvider.#ctor(WW.Drawing.ArgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.CorrectIndexedBackgroundPlotStyleProvider"/> class.
            </summary>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="M:WW.Cad.Model.CorrectIndexedBackgroundPlotStyleProvider.GetPlotStyle(WW.Cad.Model.Entities.IPlotPropertyOwner,WW.Cad.Drawing.DrawContext)">
            <summary>
            Gets the plot style.
            </summary>
            <remarks>This method can be used as a <see cref="P:WW.Cad.Drawing.GraphicsConfig.PlotStyleManager"/>.</remarks>
            <param name="plotPropertyOwner">The plot property owner (usually an entity).</param>
            <param name="drawContext">The draw context.</param>
            <returns>The plot style.</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive">
            <summary>
            SAT cone primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.MapToNormal(WW.Math.Point3D)">
            <summary>
            Map a world point to the axis of the cone.
            </summary>
            <param name="border1">world point</param>
            <returns>cone axis point</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.AddIsoLines(WW.Cad.Model.Acis.IndexedWireframeCollection,WW.Math.Geometry.Polygon2D[],WW.Cad.Model.Acis.IPointParamMapper)">
            <summary>
            Add iso lines.
            </summary>
            <remarks>
            This adds iso lines to a complex shape so the wireframe image is more detailed.
            </remarks>
            <param name="wires">wireframe collection where to add iso lines</param>
            <param name="paramShape">parameter space shape</param>
            <param name="mapper">mapper between world and param space</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.GetParameterPolyline(WW.Cad.Model.Acis.SatEntities.SatCoedge)">
            <summary>
            Get a parametric polylin shape for a mapped edge.
            </summary>
            <remarks>
            Take care of singularities!
            </remarks>
            <param name="edge">edge to map</param>
            <returns>polyline in parameter space or <code>null</code> if there is no useful mapping</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.ExtendedIntervalU">
            <summary>
            Get the extended interval for U direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.ExtendedIntervalV">
            <summary>
            Get the extended interval for V direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.PointParamMapper">
            <summary>
            Get a mapper from model space to the param space of this surface and back.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.Mapping">
            <summary>
            Helper class for mapping.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.IPointParamMapper">
            <summary>
            Mapper for 3D points to 2D parameter space points
            and vice versa. 
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.IPointParamMapper.MapPoint(WW.Math.Point3D)">
            <summary>
            Map a coordinate triple interpreted as a point to the parameter space.
            </summary>
            <param name="point">point to map</param>
            <returns>point in parameter space</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.IPointParamMapper.MapParametricPoint(System.Double,System.Double)">
            <summary>
            Map a parameter point to a 3D point.
            </summary>
            <param name="u">u parameter</param>
            <param name="v">v parameter</param>
            <returns>point in 3D space</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.IPointParamMapper.IsRightHandedParametric">
            <summary>
            Are the parametric coordinates right-handed?
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.Mapping.#ctor(System.Double,WW.Math.Matrix4D,WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.Mapping.MapPoint(WW.Math.Point3D)">
            <summary>
            Map a coordinate triple interpreted as a point to the parameter space.
            </summary>
            <param name="point">point to map</param>
            <returns>point in parameter space</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.Mapping.MapParametricPoint(System.Double,System.Double)">
            <summary>
            Map a parameter point to a 3D point.
            </summary>
            <param name="u">u parameter</param>
            <param name="v">v parameter</param>
            <returns>point in 3D space</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatConePrimitive.Mapping.IsRightHandedParametric">
            <summary>
            Are the parametric coordinates right-handed?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBlendSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBlendSplineSurfacePrimitive.RadiusCountEnumValues">
            <summary> Approximation level strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBlendSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBlendSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBlendSplineSurfacePrimitive.RadiusCount">
            <summary>
            Count of Radii.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialMapperAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialMapperAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialMapperAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialMapperAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.BasicInterval">
            <summary>
            Basic implementation of an interval.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.IInterval">
            <summary>
            An interval with a start and an end value, possibly unbound at either start or end.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IInterval.Start">
            <summary>
            Get the start value of the interval.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IInterval.End">
            <summary>
            Get the end value of the interval.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IInterval.IsUnbound">
            <summary>
            Are both ends unbound?
            </summary>
            <seealso cref="P:WW.Cad.Model.Acis.IInterval.HasUnboundStart"/>
            <seealso cref="P:WW.Cad.Model.Acis.IInterval.HasUnboundEnd"/>
        </member>
        <member name="P:WW.Cad.Model.Acis.IInterval.HasUnboundStart">
            <summary>
            Is the interval start unbound?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IInterval.HasUnboundEnd">
            <summary>
            Is the interval end unbound.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicInterval.start">
            <summary>Interval start.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicInterval.end">
            <summary>Interval end.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicInterval.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicInterval.#ctor(WW.Cad.Model.Acis.IInterval)">
            <summary>
            Copy constructor.
            </summary>
            <param name="interval">interval to copy</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicInterval.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicInterval.Start">
            <summary>
            Get the start value of the interval.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicInterval.End">
            <summary>
            Get the end value of the interval.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicInterval.IsUnbound">
            <summary>
            Are both ends unbound?
            </summary>
            <seealso cref="P:WW.Cad.Model.Acis.IInterval.HasUnboundStart"/>
            <seealso cref="P:WW.Cad.Model.Acis.IInterval.HasUnboundEnd"/>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicInterval.HasUnboundStart">
            <summary>
            Is the interval start unbound?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicInterval.HasUnboundEnd">
            <summary>
            Is the interval end unbound.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.IExtendedInterval">
            <summary>
            An interval which can be defined on a periodic geometry.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IExtendedInterval.IsPeriodic">
            <summary>
            Is this interval periodic?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IExtendedInterval.PeriodicLength">
            <summary>
            Get the periodic length. Only valid for periodic intervals.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicExtendedInterval.periodicy">
            <summary>The periodicy.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicExtendedInterval.GetCanonizedPeriodicy(System.Double)">
            <summary>
            Remap periodicy so that it is positive and not zero.
            </summary>
            <param name="periodicy">periodicy</param>
            <returns>cononized periodicy</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicExtendedInterval.GetCanonizedInterval(System.Double,System.Double,System.Double)">
            <summary>
            Get a canonized version of the interval where start and end are adapted if the interval is periodic.
            </summary>
            <param name="start">interval start</param>
            <param name="end">interval end</param>
            <param name="periodicy">periodicy</param>
            <returns>canonized interval</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicExtendedInterval.#ctor(System.Double,System.Double)">
            <summary>
            Constructor construction a non-periodic interval.
            </summary>
            <param name="start">start value</param>
            <param name="end">end value</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicExtendedInterval.#ctor(WW.Cad.Model.Acis.IInterval)">
            <summary>
            Constructor creating a non-periodic interval.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicExtendedInterval.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="start">start value</param>
            <param name="end">end value</param>
            <param name="periodicy">periodic length</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicExtendedInterval.#ctor(WW.Cad.Model.Acis.IInterval,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="interval">basic interval</param>
            <param name="periodicy">periodic length</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicExtendedInterval.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicExtendedInterval.IsPeriodic">
            <summary>
            Is this interval periodic?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicExtendedInterval.PeriodicLength">
            <summary>
            Get the periodic length. Only valid for periodic intervals.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamWriter.WritePreliminaryStreamDataSize">
            <summary>
            Writes the preliminary stream data size (excludes the handles stream).
            Returns the position at which the preliminary value was written.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamWriter.Flush">
            <summary>
            Flushes the data to the main stream and writes padding bits to finish on a byte boundary.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamWriter.WriteSoftOwnershipReference(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Writes a soft ownership reference (2).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamWriter.WriteHardOwnershipReference(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Writes a hard ownership reference (3).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamWriter.WriteSoftPointerReference(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Writes a soft pointer reference (4).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamWriter.WriteHardPointerReference(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Writes a hard pointer reference (5).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamWriter.WriteObjectType(System.Int16)">
            <summary>
            Writes the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.IBitStreamWriter.EffectiveEncoding">
            <summary>
            Gets the effective text encoding used for IO.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.HandleType">
            <summary>
            Represents a handle type.
            </summary>
            <remarks>
            Values of 6 and greater represent a soft pointer.
            </remarks>
        </member>
        <member name="F:WW.Cad.IO.Dwg.HandleType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Dwg.HandleType.SoftOwnershipReference">
            <summary>
            Soft ownership reference handle type (2).
            </summary>
            <remarks>
            The owner does not need the owned object. The owned object cannot exist by itself.
            </remarks>
        </member>
        <member name="F:WW.Cad.IO.Dwg.HandleType.HardOwnershipReference">
            <summary>
            Hard ownership reference (3).
            </summary>
            <remarks>
            The owner needs the owned object. The owned object cannot exist by itself.
            </remarks>
        </member>
        <member name="F:WW.Cad.IO.Dwg.HandleType.SoftPointerReference">
            <summary>
            Soft pointer reference (4).
            </summary>
            <remarks>
            The referencing object does not need the referenced object and vice versa.
            </remarks>
        </member>
        <member name="F:WW.Cad.IO.Dwg.HandleType.HardPointerReference">
            <summary>
            Hard pointer reference (5).
            </summary>
            <remarks>
            The referencing object needs the referenced object, but both are owned by another object.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.SectionPage.Id">
            <summary>
            Gets or sets the id.
            May be negative (page map page id may be negative if there is another page map page following).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.SectionPage.StreamOffset">
            <summary>
            Gets or sets the offset from the file header end in the raw stream.
            Add 0x480 to get the real stream position.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.SectionPage.Length">
            <summary>
            Gets or sets the page length in the stream.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.SectionPage.ContainsOnlyZeroes">
            <summary>
            Gets or sets a value indicating whether the page contains only zeroes.
            A page that contains only zeroes is not written to file.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.BitStreamReader">
            <summary>
            Base DWG bit stream reader containing common bit stream read methods.
            </summary>
            <remarks>
            Each DWG version has its own specific BitStreamReader sub class.
            Use factory method <see cref="M:WW.Cad.IO.Dwg.BitStreamReader.Create(WW.Cad.Model.DxfVersion,System.IO.Stream)"/> to create a specific implementation.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamReader.MoveToStringStreamBitPosition(System.Int64)">
            <summary>
            Move to the string stream bit position (R21 and later).
            Probably doesn't belong in this interface but in the R21 concrete class.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.IBitStreamReader.ReadBytes(System.Int32,WW.IO.PagedMemoryStream)">
            <summary>
            Reads the specified number of bytes into the target stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.MoveToStringStreamBitPosition(System.Int64)">
            <summary>
            The string stream is positioned before the handles stream (from R21 onwards).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.ReadBitLong">
            <summary>
            BITLONG type.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.ReadBitDouble">
            <summary>
            BITDOUBLE type.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.ReadIntFromModularChars">
            <summary>
            Modular char (char being a 1-byte char).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.ReadHandle(System.UInt64,System.Boolean,WW.Cad.Model.ReferenceType@)">
            <summary>
            Reads the handle.
            </summary>
            <param name="referenceHandle">The reference handle.</param>
            <param name="enqueueForRead">if set to <c>true</c> [enqueue for read].</param>
            <param name="referenceType">Type of the reference.</param>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.ReadEntityColor(WW.Cad.Model.Entities.EntityColor@,WW.Cad.Model.Transparency@,System.Boolean@)">
            <summary>
            Read entity color (not specced correctly by the DWG spec).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.ReadString">
            <summary>
            TV	:	Variable text, T for 2004 and earlier files, TU for 2007+ files.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.ReadCrc">
            <summary>
            Reads the standard cyclic redundancy check as an error detection mechanism.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReader.GetByteFromCurrentAndNext">
            <summary>
            Use this if bitIndex != 0
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.BitStreamReader.LoggingEnabled">
            <summary>
            Doesn't do anything.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReaderR13.ReadEntityColor(WW.Cad.Model.Entities.EntityColor@,WW.Cad.Model.Transparency@,System.Boolean@)">
            <summary>
            Read entity color (not specced correctly by the DWG spec).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReaderR13.ReadString">
            <summary>
            TV	:	Variable text, T for 2004 and earlier files, TU for 2007+ files.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReaderR15.ReadBitExtrusion">
            <summary>
            BE.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReaderR18.ReadEntityColor(WW.Cad.Model.Entities.EntityColor@,WW.Cad.Model.Transparency@,System.Boolean@)">
            <summary>
            Read entity color (not specced correctly by the DWG spec).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D">
            <summary>
            Represents a class to draw 3D wireframe graphics onto a 2D plane using WPF.
            </summary>
            <remarks>
            <para>
            This class uses <see cref="T:System.Windows.Media.StreamGeometry"/> and <see cref="T:System.Windows.Shapes.Path"/> objects.
            For better performance, use <see cref="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual"/>, which uses
            <see cref="T:System.Windows.Media.DrawingVisual"/> objects instead of <see cref="T:System.Windows.Shapes.Path"/> objects. 
            Visual objects are lighterweight objects than <see cref="T:System.Windows.FrameworkElement"/> objects, from which <see cref="T:System.Windows.Shapes.Path"/>
            inherits.
            For conversion to XAML, use the <see cref="T:WW.Cad.IO.XamlExporter"/>.
            </para>
            <para>
            For display of lines on screen, it is important to set a proper <see cref="P:WW.Cad.Drawing.GraphicsConfig.DotsPerInch"/> value so
            a fitting pen stroke thickness can be calculated.
            So if e.g. the <see cref="!:System.Windows.Controls.Canvas.RenderTransform">Canvas.RenderTransform</see> 
            is set such to scale the drawing by a factor of 10,
            also the stroke thickness is scaled by the same factor.
            </para>
            </remarks>
            <example>
            An example showing how to display a DXF model using WPF:
            <code lang="cs">
using System;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.Wpf;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace WpfApplication {
    /// &lt;summary&gt;
    /// The main window renders the model.
    /// &lt;/summary&gt;
    public partial class MainWindow : Window {
        private WpfWireframeGraphics3D wpfGraphics;
        private Bounds3D bounds;
        // The translation:
        // x = -1 is theleft side, x = 1 is the right side.
        // y = -1 is the bottom side, y = 1 is the top side.
        private Vector3D translation;
        private Vector3D translationAtMouseClick;
        private double scaling = 1d;
        private Point2D mouseDownLocation;
        private bool mouseDown;

        public MainWindow() {
            InitializeComponent();

            Init(App.FileName);
        }

        /// &lt;summary&gt;
        /// Reads a DXF model and creates 2D WPF graphics that are put onto the Canvas area.
        /// &lt;/summary&gt;
        public void Init(string filename) {
            if (!string.IsNullOrEmpty(filename)) {
                DxfModel model;
                string extension = System.IO.Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }

                #region calculate the model's bounds to determine a proper dots per inch

                // The dots per inch value is important because it determines the eventual pen thickness.
                GraphicsConfig graphicsConfig = (GraphicsConfig)GraphicsConfig.WhiteBackgroundCorrectForBackColor.Clone();
                BoundsCalculator boundsCalculator = new BoundsCalculator();
                boundsCalculator.GetBounds(model);
                bounds = boundsCalculator.Bounds;
                Vector3D delta = bounds.Delta;
                Size estimatedCanvasSize = new Size(500d, 500d);
                double estimatedScale = Math.Min(estimatedCanvasSize.Width / delta.X, estimatedCanvasSize.Height / delta.Y);
                graphicsConfig.DotsPerInch = 100d / estimatedScale;

                #endregion

                wpfGraphics = new WpfWireframeGraphics3D();
                wpfGraphics.Config = graphicsConfig;
                wpfGraphics.CreateDrawables(model, Matrix4D.Identity);
                wpfGraphics.Draw(canvas.Children);

                canvas.SizeChanged += new SizeChangedEventHandler(canvas_SizeChanged);
            }
        }

        /// &lt;summary&gt;
        /// Update the canvas RenderTransform.
        /// &lt;/summary&gt;
        private void canvas_SizeChanged(object sender, SizeChangedEventArgs e) {
            UpdateRenderTransform();
        }

        private void Canvas_LeftButtonDown(object sender, MouseButtonEventArgs e) {
            mouseDown = true;
            translationAtMouseClick = translation;
            Point p = e.GetPosition(mainWindow);
            mouseDownLocation = new Point2D(p.X, p.Y);
            canvas.CaptureMouse();
        }

        /// &lt;summary&gt;
        /// Pan if the left mouse button is down.
        /// &lt;/summary&gt;
        private void Canvas_MouseMove(object sender, MouseEventArgs e) {
            if (mouseDown) {
                Point p = e.GetPosition(mainWindow);
                Point2D mouseLocation = new Point2D(p.X, p.Y);
                Vector2D delta = mouseLocation - mouseDownLocation;
                translation =
                    translationAtMouseClick +
                        new Vector3D(
                            delta.X * 2d / canvas.ActualWidth,
                            -delta.Y * 2d / canvas.ActualHeight,
                            0d);
                UpdateRenderTransform();
            }
        }

        private void Canvas_LeftButtonUp(object sender, MouseButtonEventArgs e) {
            mouseDown = false;
            canvas.ReleaseMouseCapture();
        }

        /// &lt;summary&gt;
        /// Zoom in/out.
        /// &lt;/summary&gt;
        private void Canvas_MouseWheel(object sender, MouseWheelEventArgs e) {
            int sign = Math.Sign(e.Delta);

            double newScaling = scaling;

            // wheel movement is forward 
            if (sign &gt; 0) {
                newScaling *= 1.1d;
            }
            // wheel movement is backward 
            else if (sign &lt; 0) {
                newScaling /= 1.1d;
            }
            Point p = e.GetPosition(mainWindow);

            // This is the post-zoom position.
            Point3D postZoomPosition =
                new Point3D(p.X / canvas.ActualWidth * 2d - 1d, -p.Y / canvas.ActualHeight * 2d + 1, 0d);

            // This is the pre-zoom position.
            Matrix4D zoomTranslation =
                Transformation4D.Translation((Vector3D)translation) *
                Transformation4D.Scaling(scaling);
            Point3D preZoomPosition = zoomTranslation.GetInverse().Transform(postZoomPosition);

            Matrix4D newZoomTranslation =
                Transformation4D.Translation((Vector3D)translation) *
                Transformation4D.Scaling(newScaling);
            Point3D uncorrectedPostZoomPosition = newZoomTranslation.Transform(preZoomPosition);

            translation += postZoomPosition - uncorrectedPostZoomPosition;
            scaling = newScaling;

            UpdateRenderTransform();
        }

        private void Canvas_LostMouseCapture(object sender, MouseEventArgs e) {
            mouseDown = false;
        }

        private void UpdateRenderTransform() {
            double canvasWidth = canvas.ActualWidth;
            double canvasHeight = canvas.ActualHeight;
            MatrixTransform baseTransform = DxfUtil.GetScaleWMMatrixTransform(
                (Point2D)bounds.Corner1,
                (Point2D)bounds.Corner2,
                (Point2D)bounds.Center,
                new Point2D(1d, canvasHeight),
                new Point2D(canvasWidth, 1d),
                new Point2D(0.5d * (canvasWidth + 1d), 0.5d * (canvasHeight + 1d))
                );

            TransformGroup transformGroup = new TransformGroup();
            transformGroup.Children.Add(baseTransform);
            transformGroup.Children.Add(new TranslateTransform() {
                X = -canvasWidth / 2d,
                Y = -canvasHeight / 2d
            });
            transformGroup.Children.Add(new ScaleTransform() {
                ScaleX = scaling,
                ScaleY = scaling
            });
            transformGroup.Children.Add(new TranslateTransform() {
                X = canvasWidth / 2d,
                Y = canvasHeight / 2d
            });
            transformGroup.Children.Add(new TranslateTransform() {
                X = translation.X * canvasWidth / 2d,
                Y = -translation.Y * canvasHeight / 2d
            });

            canvas.RenderTransform = transformGroup;
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3DUsingDrawingVisual"/>
            <seealso cref="T:WW.Cad.IO.XamlExporter"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.NullFrameworkElementTagger(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext)">
            <summary>
            A framework element tagger which does no decoration.
            </summary>
            <param name="entity">The entity.</param>
            <param name="context">The context.</param>
            <returns><c>null</c></returns>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.FrameworkElementTagger"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EntityFrameworkElementTagger(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext)">
            <summary>
            A framework element tagger which sets the entity as the framework element's tag.
            </summary>
            <param name="entity">The entity.</param>
            <param name="context">The context.</param>
            <returns>The entity.</returns>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.FrameworkElementTagger"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.LayerFrameworkElementTagger(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext)">
            <summary>
            A framework element decorator which sets the effective layer of the entity as the framework's element tag.
            </summary>
            <param name="entity">The entity.</param>
            <param name="context">The context.</param>
            <returns>The effective layer of the entity.</returns>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.FrameworkElementTagger"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.Clear">
            <summary>
            Clears all framework elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate">
            <summary>
            Enables the updating of drawables.
            </summary>
            <seealso cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Updates the framework elements for specified entity.
            First call <see cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate"/> before drawable creation for this to work.
            </summary>
            <seealso cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate"/>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.UpdateDrawables(WW.Cad.Drawing.RenderedEntityInfo,System.Action,System.Action{WW.Cad.Drawing.IWireframeGraphicsFactory2})">
            <summary>
            Updates the drawables for specified entity.
            First call <see cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate"/> before drawable creation for this to work.
            </summary>
            <param name="renderedEntityInfo">The rendered entity info.</param>
            <param name="updateDrawables">The update drawables.</param>
            <param name="graphicsFactoryWrapper">
            The graphics factory wrapper method (optional). 
            This can be used to e.g. change the color of the entity when drawing for highlighting when the mouse hovers over the entity.
            Use class <see cref="T:WW.Cad.Drawing.WireframeGraphicsFactory2ColorChanger"/> to do this.
            </param>
            <seealso cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate"/>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity,System.Action{WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2},System.Func{WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Cad.Drawing.IWireframeGraphicsFactory2})">
            <summary>
            Updates the framework elements for specified entity.
            First call <see cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate"/> before drawable creation for this to work.
            </summary>
            <param name="entity">The entity to update.</param>
            <param name="updateDrawables">The update drawables method. See <see cref="!:WireframeGraphicsCache2.GetUpdateEntityDrawablesHelper"/>.</param>
            <param name="graphicsFactoryWrapper">
            The graphics factory wrapper method (optional). 
            This can be used to e.g. change the color of the entity when drawing for highlighting when the mouse hovers over the entity.
            Use class <see cref="T:WW.Cad.Drawing.WireframeGraphicsFactory2ColorChanger"/> to do this.
            </param>
            <seealso cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate"/>
            <seealso cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.RemoveDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Removes the drawables for specified entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel)">
            <summary>
            Creates the WPF framework elements for a specified model.
            The result is put in property <see cref="!:FrameworkElements"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <seealso cref="!:FrameworkElements"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Creates the WPF framework elements for specified model.
            The result is put in property <see cref="!:FrameworkElements"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="!:FrameworkElements"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the WPF framework elements for a specified list of entities.
            The result is put in property <see cref="!:FrameworkElements"/>.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="!:FrameworkElements"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout)">
            <summary>
            Creates framework elements for given DXF model using specified layout (see property <see cref="!:FrameworkElements"/>).
            </summary>
            <remarks>
            <para>
            The old framework elements are cleared before creating the new ones.
            </para>
            <para>
            The entities in model space are transformed to paper space according to 
            the <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see> in specified layout.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <seealso cref="!:FrameworkElements"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates framework elements for given DXF model using given view port (see property <see cref="!:FrameworkElements"/>).
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="!:FrameworkElements"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates framework elements for given dxf model using given view port (see property <see cref="!:FrameworkElements"/>).
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in model space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="!:FrameworkElements"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.CreateGraphicsFactory">
            <summary>
            Creates a graphics factory that can be used for creating the <see cref="!:FrameworkElements"/> in this 
            graphics object.
            </summary>
            <remarks>
            The returned graphics factory can be used for instance to create <see cref="!:FrameworkElements"/> 
            from cached drawables in <see cref="T:WW.Cad.Drawing.WireframeGraphics2Cache"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.Draw(System.Collections.Generic.ICollection{System.Windows.FrameworkElement})">
            <summary>
            Adds all framework elements onto the specified result.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.Draw(System.Windows.Controls.UIElementCollection)">
            <summary>
            Adds all framework elements onto the specified result.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.RemoveEntityDrawablesInfo(WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EntityDrawablesInfo)">
            <summary>
            Recursively removes the specified EntityDrawablesInfo instance and all its children from 
            entityToEntityDrawablesInfoList.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.Config">
            <summary>
            Gets or sets the graphics configuration determining
            various aspects of the rendering process.
            The default value is <see cref="F:WW.Cad.Drawing.GraphicsConfig.WhiteBackgroundCorrectForBackColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.To2DTransform">
            <summary>
            Gets or sets the projection transform that transforms all 3D points
            onto the 2D plane.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.NonTextPenWidth">
            <summary>
            Gets or sets the non-text pen width (default value is 1).
            </summary>
            <remarks>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight"/> is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.FrameworkElementTagger">
            <summary>
            Gets or sets the framework element tagger.
            </summary>
            <remarks>
            <para>
            Whenever a framework element is created, the currently set framework element tagger is called
            with the entity (including its context) from which the element is created, and returns the tag 
            to be set to the element's <see cref="P:System.Windows.FrameworkElement.Tag"/> property.
            </para>
            <para>
            The following taggers are already defined: 
            </para>
            <para>
            <see cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.NullFrameworkElementTagger(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext)"/> which does set the tag to <c>null</c>.
            </para>
            <para>
            <see cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EntityFrameworkElementTagger(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext)"/> which does set the tag to the entity. <b>This is the default.</b>
            </para>
            <para>
            <see cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.LayerFrameworkElementTagger(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext)"/> which does set the tag to the effective layer of the entity.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.PathStrokePreparer">
            <summary>
            Gets or sets the path stroke preparer.
            </summary>
            <remarks>
            A stroke preparer may be used to finetune the path strokes.
            </remarks>
            <value>
            The path stroke preparer.
            </value>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.TextPenWidth">
            <summary>
            Gets or sets the text pen width (default value is 1).
            </summary>
            <remarks>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight"/> is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.AreDrawablesUpdateable">
            <summary>
            Gets a value indicating whether the drawables are updateable.
            Call <see cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate"/> to enable updating of drawables.
            </summary>
            <seealso cref="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EnableDrawablesUpdate"/>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EntityDrawablesInfo.Matches(WW.Cad.Drawing.RenderedEntityInfo)">
            <summary>
            Returns whether this entity drawables info matches the specified rendered entity info by comparing the entity and parent entities.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.EntityDrawablesInfo.Children">
            <summary>
            Gets the children. Need to know children in case a INSERT's block is updated, e.g. entities are removed from it.
            When the INSERT's drawables are updated the EntityDrawablesInfo for removed entities need to be removed as well.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.GraphicsFactory.#ctor(WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.GraphicsFactory"/> class.
            </summary>
            <param name="graphics">The graphics for which this factory is defined.</param>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.GraphicsFactory.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Need to mark begin/end of insert in case part of the inserts child drawables are updated,
            e.g. attributes are updated using <see cref="!:GDIGraphics3D.UpdateDrawables"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.GraphicsFactory.EndInsert">
            <summary>
            Need to mark begin/end of insert in case part of the inserts child drawables are updated,
            e.g. attributes are updated using <see cref="!:GDIGraphics3D.UpdateDrawables"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.GraphicsFactory.BeginGeometry(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Begins a geometry.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.GraphicsFactory.EndGeometry">
            <summary>
            Ends the currently open geometry.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.GraphicsFactory.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.FrameworkElementTaggerDelegate">
            <summary>
            A framework element tagger allows to define the tag which is set to
            a framework element depending on the entity it was created from.
            </summary>
            <param name="entity">The entity which is creating the element.</param>
            <param name="context">The context of the entity creating the element.</param>
            <returns>The tag to be set for the framework element.</returns>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.PathStrokePreparerDelegate">
            <summary>
            Prepare the stroke of a stroked path.
            </summary>
            <remarks>
            This delegate is called at a time when the path is prepared but not yet defined.
            The path will already have its Brush and default width set, but the implementation
            can override this.
            </remarks>
            <param name="path">The path.</param>
            <param name="brush">The brush.</param>
            <param name="entity">The entity from which the path was created.</param>
            <param name="context">The context.</param>
            <param name="forText">if set to <c>true</c> the path is used for text, usually for drawing SHX shapes.</param>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer">
            <summary>
            A stroke preparer which sets the dash pattern of the stroke from the scaled dash pattern of the line.
            Use the <see cref="M:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer.PrepareStroke(System.Windows.Shapes.Path,WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext,System.Boolean)"/> method as <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.PathStrokePreparer"/>
            to create dashed strokes.
            </summary>
            <remarks>
            <para>
            This will map the DXF line type of the entity to dashes by scaling the linetype to the dash pattern length
            defined in the constructors, and then creating the desired dashes. DXF line types may contain dots which are
            considered of having zero length, which is not possible in WPF. So dots have to be susbtituted by short dashes.
            Their length may be defined in the constructor, too. For each dot the rest of the pattern will be shrinked a bit,
            so the desired overall length is kept. A special switch allows to round up all created dash and gap lengths to integer 
            values, possibly creating an improved appearance.
            </para>
            <para>
            This preparer will not dash the lines created from text objects (usually appearing when the text uses a SHX font). 
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer"/> class.
            </summary>
            <param name="dashPatternLength">Length of the created dash patterns, has to be greater than 1.</param>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer"/> class.
            </summary>
            <param name="dotLength">Length of the dot substitution dash.</param>
            <param name="dashPatternLength">Length of the created dash patterns, has to be greater than <paramref name="dotLength"/>.</param>
            <param name="roundUp">Round values up so dashes and gaps have integer lengths? This may enlarge the whole pattern.</param>
            <exception cref="T:System.ArgumentException">dotLength has to be less than dashPatternLength!</exception>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer.PrepareStroke(System.Windows.Shapes.Path,WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext,System.Boolean)">
            <summary>
            Prepares the stroke.
            </summary>
            <remarks>
            This can be used as <see cref="P:WW.Cad.Drawing.Wpf.WpfWireframeGraphics3D.PathStrokePreparer"/>. 
            </remarks>
            <param name="path">The path.</param>
            <param name="entity">The entity.</param>
            <param name="context">The context.</param>
            <param name="forText">if set to <c>true</c> [for text].</param>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer.GetDashArray(WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Gets the dash array.
            </summary>
            <param name="lineType">DXF line type.</param>
            <returns>Dash array for the line type.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.ScaledLineTypeDashStrokePreparer.CreateDashArray(WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Creates the dash array.
            </summary>
            <param name="lineType">DXF line type.</param>
            <returns>Dash array for the line type.</returns>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Segment">
            <summary>
            Represents a segment primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Segment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Segment"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Segment.#ctor(WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Segment"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Segment.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Segment.Start">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Segment.End">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Graphics">
            <summary>
            Represents surface graphics, holding all graphic elements.
            Line type and extrusion are not yet applied, this is applied in a subsequent step 
            (see <see cref="T:WW.Cad.Drawing.Surface.ProcessedGraphics"/>).
            Extrusion without line type may already be applied.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.IGraphicElementBlock">
            <summary>
            Represents a graphic element block interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IGraphicElementBlock.Add(WW.Cad.Drawing.Surface.IGraphicElement)">
            <summary>
            Adds the specified graphic element.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.IGraphicElementBlock.GraphicElements">
            <summary>
            Gets the graphic elements.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.IGraphicElementBlock.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Graphics"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.Add(WW.Cad.Drawing.Surface.IGraphicElement)">
            <summary>
            Adds the specified graphic element.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.AddExistingGraphicElement1(WW.Cad.Drawing.Surface.IGraphicElementBlock,WW.Cad.Model.Entities.DxfEntity,WW.Drawing.ArgbColor)">
            <summary>
            Adds an existing or new graphic element for specified entity and color to the
            specified graphic element block if a graphic element already existed for the specified entity.
            Returns <c>true</c> if there was no graphic element yet for the specified entity and the
            caller has to create one.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.AddExistingGraphicElement2(WW.Cad.Drawing.Surface.IGraphicElementBlock,WW.Cad.Model.Entities.DxfEntity,WW.Drawing.ArgbColor,WW.Cad.Model.Tables.DxfLineType,System.Double,System.Boolean)">
            <summary>
            Adds an existing or new graphic element for specified entity (and additional properties)
            to the specified graphic element block if a graphic element already existed for the specified entity.
            Returns <c>true</c> if there was no graphic element yet for the specified entity and the
            caller has to create one.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.AddNewGraphicElement(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.Surface.IGraphicElementBlock,WW.Cad.Drawing.Surface.GraphicElement1)">
            <summary>
            Adds the specified graphic element of specified entity  to the specified graphic element block.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.GetGraphicElementInsert(WW.Cad.Drawing.Surface.IGraphicElementBlock,WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Tables.DxfLayer,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Tables.DxfLineType,WW.Cad.Drawing.Surface.GraphicElementInsert@)">
            <summary>
            Gets an existing graphic element insert for the specified insert (with additional properties),
            or creates one and adds it to the specified graphic element block if it did not exist yet.
            Returns <c>true</c> if a new graphic element insert was created and the caller needs
            to initialize it.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.GetGraphicElementBlock2(WW.Cad.Model.Tables.DxfBlock,WW.Cad.Model.Tables.DxfLayer,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Tables.DxfLineType,WW.Cad.Drawing.Surface.GraphicElementBlock2@)">
            <summary>
            Gets an existing graphic element block for specified block (with additional properties),
            or creates a new graphic element block if it did not exist yet.
            Returns <c>true</c> if a new graphic element block was created and the caller needs
            to initialize it.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.RemoveGraphicElements(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Removes all graphic elements for specified entity.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Graphics.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Graphics.GraphicElements">
            <summary>
            Gets the graphic elements.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Graphics.EntityInfo">
            <summary>
            Contains geometry and graphic elements for an entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.EntityInfo.GetGraphicElement1(WW.Drawing.ArgbColor)">
            <summary>
            Tries to find an existing graphic element with specified color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.EntityInfo.GetGraphicElement2(WW.Drawing.ArgbColor,WW.Cad.Model.Tables.DxfLineType,System.Double,System.Boolean)">
            <summary>
            Tries to find an existing graphic element with specified color and line type.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.EntityInfo.GetGraphicElementInsert(WW.Cad.Model.Tables.DxfLayer,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Tries to find an existing graphic element with specified color and line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Graphics.EntityInfo.Geometry">
            <summary>
            Gets or sets the geometry (shared between graphic elements to save computation).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Graphics.EntityInfo.GraphicElements">
            <summary>
            Gets or sets the graphic elements for an entity.
            For every time an entity is inserted through a block/insert, there can
            be a new graphic element. In case they have the same geometry/color/line type,
            they may be shared.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Graphics.BlockInfo">
            <summary>
            Contains the graphic element blocks for a block.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.BlockInfo.GetGraphicElementBlock(WW.Cad.Model.Tables.DxfLayer,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Tries to find an existing graphic element block with specified parameters.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Graphics.BlockInfo.GraphicElementBlocks">
            <summary>
            Gets or sets the graphic element blocks for a block.
            For every time an block is inserted through an insert, there can
            be a new graphic element block. In case they have the same geometry/color/line type,
            they may be shared.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Graphics.InsertInfo">
            <summary>
            This is used to store graphic elements of the attributes of an insert.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Graphics.InsertInfo.GetGraphicElementBlock(WW.Cad.Model.Color,WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Tries to find an existing graphic element block with specified parameters.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Graphics.InsertInfo.GraphicElementBlocks">
            <summary>
            Gets or sets the graphic element blocks for an insert (used for attributes).
            For every insert, there can be a new graphic element block (for the attributes). In case they have the same geometry/color,
            they may be shared.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Geometry">
            <summary>
            Represents a optionally extruded geometry consisting of primitives.
            </summary>
            <remarks>
            In case the geometry is non-coplanar, then it cannot have an extrusion.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Geometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Geometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Geometry.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Geometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Geometry.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Drawing.Surface.IPrimitive})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Geometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Geometry.#ctor(WW.Cad.Drawing.Surface.IPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Geometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Geometry.#ctor(WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Geometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Geometry.#ctor(WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Geometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Geometry.#ctor(WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Geometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Geometry.#ctor(WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive,WW.Cad.Drawing.Surface.IPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Geometry"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Geometry.HasExtrusion">
            <summary>
            Gets or sets a value indicating whether this instance has extrusion.
            This has to be <c>false</c> for non-coplanar geometries.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Geometry.Extrusion">
            <summary>
            Gets or sets the extrusion.
            This has to be the zero-vector for non-coplanar geometries.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CharTriangulation">
            <summary>
            Character triangulation cache (triangulation is expensive).
            Relevant only for true type text.
            </summary>
            <remarks>
            Currently the cache memory is never freed.
            The character height is normalized to 1 and the position is (0, 0).
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.BaseWireframeGraphicsFactory">
            <summary>
            Base <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/> implementation.
            </summary>
            <remarks>
            <para>
            This class serves as a base <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/> implementation.
            In its current form it doesn't do anything, but it's meant to be derived
            and used as a converter from <see cref="T:WW.Cad.Model.Entities.DxfEntity">entities</see> to
            coordinates of line segment.
            </para>
            <para>
            To get line segment coordinates of a <see cref="T:WW.Cad.Model.DxfModel"/> 
            or e.g. a <see cref="T:WW.Cad.Model.Entities.DxfCircle"/> the following must be done:
            <list type="bullet">
            <item>
            <description>
            Create a <see cref="T:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace"/> object and pass a graphics factory as a parameter to 
            its constructor.
            </description>
            </item>
            <item>
            <description>
            Draw a <see cref="T:WW.Cad.Model.DxfModel"/> using method <see cref="!:DxfModel.Draw(DrawContext.Wireframe)"/> or
            an <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> using method <see cref="!:DxfEntity.Draw(DrawContext.Wireframe)"/>.
            Pass the <see cref="T:WW.Cad.Drawing.DrawContext"/> object as a parameter.
            The model/entity will draw itself on the graphics factory.
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/>
            <see cref="T:WW.Cad.Drawing.GDI.GDIGraphics3D"/>
            <see cref="T:WW.Cad.Drawing.GDI.ToGraphicsPathConverter"/>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Begin graphics creation for specified entity.
            End creation with <see cref="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.EndEntity"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.EndEntity">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Begin graphics creation for specified insert.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.EndInsert">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.BeginInsert(WW.Cad.Model.Entities.DxfInsert)"/>
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreateDot(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D)">
            <summary>
            Create a colored dot.
            </summary>
            <param name="entity">The entity creating the dot.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the dot is created for text.</param>
            <param name="position">the position</param>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreateLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Create a colored line segment.
            </summary>
            <param name="entity">The entity creating the line segment.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the line segment is created for text.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreateRay(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored ray (infinite line in one direction).
            </summary>
            <param name="entity">The entity creating the ray.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="segment">The line segment, first point must be the starting point,
              the second point goes towards infinity.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreateXLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored DxfXLine (infinite line in both direction).
            </summary>
            <param name="entity">The entity creating the xline.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="startPoint">Starting point (for bounding box calculation).</param>
            <param name="segment">The line segment, both points approach infinity.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of dots, lines and polylines.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreatePathAsOne(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of lines and polylines.
            Similar to <see cref="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)"/> but in GDI graphics
            this matches drawing using <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
            <remarks>
            This is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the shape is created for text.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreateText(WW.Cad.Model.Entities.DxfText,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.BaseWireframeGraphicsFactory.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreateMText(WW.Cad.Model.Entities.DxfMText,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.BaseWireframeGraphicsFactory.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BaseWireframeGraphicsFactory.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.BaseWireframeGraphicsFactory.SupportsText">
            <summary>
            Gets a value indicating whether the object supports text.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.PolygonClipper">
            <summary>
            Clipper implementation based on a polygonal prism.
            </summary>
            <remarks>
            Currently it is assumed that always the internal part of the prism is kept,
            which is not necessarily true in AutoCAD. Furthermore there is no front nor back 
            clipping support due to lack of test data.
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.ITransformableClipper">
            <summary>
            Clipper which is also transformable.
            </summary>
            <remarks>
            Needed to allow for optimizations in model space clipping.
            </remarks>
        </member>
        <member name="T:WW.Cad.Base.ITransformable">
            <summary>
            Interface for items which can be transformed.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.ITransformable.TransformBy(WW.Math.Matrix4D)">
            <summary>
            Transform this.
            </summary>
            <param name="transform">Transformation matrix.</param>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.#ctor(WW.Math.Matrix4D,WW.Math.Geometry.Polygon2D,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.PolygonClipper"/> class.
            </summary>
            <param name="clipBoundaryTransform">The clip boundary transform which inserts the clipping boundary into space.</param>
            <param name="clipPolygon">The clip polygon.</param>
            <param name="inverseClip">if <c>true</c> the inside of the polygon is clipped away, the outside is left</param>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.#ctor(WW.Cad.Drawing.PolygonClipper)">
            <summary>
            Copy constructor.
            </summary>
            <param name="clipper">Polygon clipper to copy.</param>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.IsInside(WW.Math.Vector4D)">
            <summary>
            Test whether a 4D point is inside or outside of the clipping region.
            </summary>
            <param name="point">The point to test.</param>
            <returns>
            <code>true</code> if the point is inside the clipping region,
            <code>false</code> if the point is outside of the clipping region
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.TryIsInside(WW.Math.Bounds3D)">
            <summary>
            Check a bounding box for clipping.
            </summary>
            <remarks>
            This may allow shortcuts, when bounds calculation is cheap or may be precalculated.
            In the case of returning <see cref="F:WW.Math.Geometry.InsideTestResult.Outside"/> no handling 
            of the objects making up the bounds is necesary, in the case of returning 
            <see cref="F:WW.Math.Geometry.InsideTestResult.Inside"/> the objects making up the bounds can be handled 
            without caring for clipping.
            </remarks>
            <param name="bounds">
            Bounding box. If box is invalid, <see cref="F:WW.Math.Geometry.InsideTestResult.None"/>
            is returned. In most cases this can be handled like <see cref="F:WW.Math.Geometry.InsideTestResult.Outside"/>
            </param>
            <returns>The result of checking the clipped bounds.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Clip(WW.Math.Geometry.Segment4D)">
            <summary>
            Clip a segment.
            </summary>
            <param name="segment">Segment to clip.</param>
            <returns>Clipped segment or <c>null</c> if the segment was clipped away.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Clip(WW.Math.Geometry.Polyline4D)">
            <summary>
            Clip a polyline.
            </summary>
            <param name="polyline">Polyline to clip.</param>
            <returns>Clipped polyline, maybe empty.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.TransformBy(WW.Math.Matrix4D)">
            <summary>
            Transform this.
            </summary>
            <param name="transform">Transformation matrix.</param>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Intersect(WW.Cad.Drawing.PolygonClipper.Edge,WW.Cad.Drawing.PolygonClipper.Edge,System.Collections.Generic.List{WW.Cad.Drawing.PolygonClipper.Intersection})">
            <summary>
            Intersects two edges.
            It is assumed that one edge is from the clip polygon and one from the clipped polygon.
            </summary>
            <param name="edge1">The edge1.</param>
            <param name="edge2">The edge2.</param>
            <param name="intersections">Collector for intersections.</param>
        </member>
        <member name="P:WW.Cad.Drawing.PolygonClipper.InverseClipBoundaryTransform">
            <summary>
            Get the inverse of the clip boundary transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.PolygonClipper.ClipBoundaryTransform">
            <summary>
            Get the clip boundary transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.PolygonClipper.Intersection">
            <summary>
            An intersection.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Intersection.ClipParam">
            <summary>
            The intersection parameter of the clip edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Intersection.PolygonParam">
            <summary>
            The intersection parameter of the polygon edge.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Intersection.#ctor(System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="clipOffset">Offset of clipping segment.</param>
            <param name="clipParam">Clipping parameter.</param>
            <param name="polygonOffset">Offset of polygon segment.</param>
            <param name="polygonParam">Polygon parameter.</param>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Intersection.IsPolyBoundFor(WW.Cad.Drawing.PolygonClipper.Interval)">
            <summary>
            Is the polygon parameter inside the given interval?
            </summary>
            <param name="interval">The Interval.</param>
            <returns>
            <c>true</c> if the polygon parameter is bound to the given interval;
            <c>false</c> if it is outside of the interval
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Intersection.CompareClip(WW.Cad.Drawing.PolygonClipper.Intersection,WW.Cad.Drawing.PolygonClipper.Intersection)">
            <summary>
            Compares the clip parameter of two intersections.
            </summary>
            <param name="i1">The 1st intersection.</param>
            <param name="i2">The 2nd intersection.</param>
            <returns>
            Less than zero if 1st intersction is considered lower, 
            zero if both intersection have the same parameter,
            and more than zeor if 2nd intersection is considered lower
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Intersection.ComparePoly(WW.Cad.Drawing.PolygonClipper.Intersection,WW.Cad.Drawing.PolygonClipper.Intersection)">
            <summary>
            Compares the polygon parameter of two intersections.
            </summary>
            <param name="i1">The 1st intersection.</param>
            <param name="i2">The 2nd intersection.</param>
            <returns>
            Less than zero if 1st intersction is considered lower, 
            zero if both intersection have the same parameter,
            and more than zeor if 2nd intersection is considered lower
            </returns>
        </member>
        <member name="T:WW.Cad.Drawing.PolygonClipper.Interval">
            <summary>
             A real interval.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.PolygonClipper.Edge">
            <summary>
            One polygon edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Edge.StartParameter">
            <summary>
            The start parameter of the edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Edge.Start">
            <summary>
            The start point of the edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Edge.End">
            <summary>
            The end point of the edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Edge.Delta">
            <summary>
            Delta vector along edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Edge.DeltaLen2D">
            <summary>
            Length of <see cref="F:WW.Cad.Drawing.PolygonClipper.Edge.Delta"/> when projected to 2D. 
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Edge.FromPoly">
            <summary>
            <c>true</c>: edge is from polygon;
            <c>false</c>: edge is from clip bounds
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Edge.#ctor(System.Int32,WW.Math.Point3D,WW.Math.Point3D,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.PolygonClipper.Edge"/> class.
            </summary>
            <param name="startParameter">The start parameter (point where edge begins).</param>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
            <param name="fromPoly">if set to <c>true</c> the edge belongs to the polygon, otherwise to the clip bounds.</param>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.Edge.GetParamOfPointOnEdge(System.Double,System.Double)">
            <summary>
            Gets the parameter of a point which is on the (projected infinite line defined by the) edge.
            </summary>
            <remarks>
            This only gives correct results if the point is indeed somewhere on the line.
            </remarks>
            <param name="px">The point's X.</param>
            <param name="py">The point's Y.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="T:WW.Cad.Drawing.PolygonClipper.EdgeRef">
            <summary>
            Edge reference.
            </summary>
            <remarks>
            Edges appear twice in the scanline algorithm for insertion and removal
            from the active set, depending on their start and end point.
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.EdgeRef.fromStart">
            <summary>
            Is the reference refrerring to the edge's start point?
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.EdgeRef.Edge">
            <summary>
            The referenced edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.EdgeRef.compare">
            <summary>
            Less than zero if referenced edge direction makes the insertion point less than the removal point,
            zero if insertion and removal point are equal, 
            and more than zero if the insertion point is more than the removal point
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.PolygonClipper.EdgeRef.CompareTo(WW.Cad.Drawing.PolygonClipper.EdgeRef)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:WW.Cad.Drawing.PolygonClipper.EdgeRef.Insert">
            <summary>
            Gets a value indicating whether this <see cref="T:WW.Cad.Drawing.PolygonClipper.EdgeRef"/> is inserted into the active set.
            </summary>
            <value>
              <c>true</c> if inserted; <c>false</c> if removed.
            </value>
        </member>
        <member name="T:WW.Cad.Drawing.PolygonClipper.PolyInfo">
            <summary>
            Polygon in clipping space info.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.PolyInfo.EdgeRefs">
            <summary>
            Polygon edges.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.PolyInfo.Min">
            <summary>
            The minimum point of the polygon bounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.PolyInfo.Max">
            <summary>
            The maximum point of the polygon bounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.PolyInfo.Area">
            <summary>
            The polygon area.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.PolygonClipper.Polygon2DInfo">
            <summary>
            This class contains a Polygon2D version prepared for the scanline algorithm.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.PolygonClipper.Polygon2DInfo.InverseClip">
            <summary>
            Is the clipping done inverse?
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.PolygonClipper.Polyline3DInfo">
            <summary>
            This class contains a Polygon3D version prepared for the scanline algorithm.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.IWireframeDrawable">
            <summary>
            An interface for a class that can draw itself onto a <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory2"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeDrawable.Draw(WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draws this object onto specified graphics factory.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ErasePath">
            <summary>
            Path that can consist of one sub drawable.
            Counterpart of <see cref="T:WW.Cad.Drawing.GDI.ColoredPath"/> to be able to draw using the background color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ErasePath.#ctor(WW.Drawing.ArgbColor,WW.Cad.Drawing.GDI.IDrawable,System.Boolean,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ErasePath.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ErasePath.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ErasePath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.DxfLwPolylineCreator">
            <summary>
            Class to create a <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> using the mouse.
            </summary>
            <remarks>
            Call <see cref="M:WW.Actions.Interactor.Activate"/> to activate this interactor.
            <see cref="M:WW.Actions.Interactor.Deactivate"/> is called automatically when the interaction is finished.
            </remarks>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.#ctor(WW.Cad.Model.DxfModel,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.DxfLwPolylineCreator"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="nodeSize">The node size.</param>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when event <see cref="E:System.Windows.Forms.Control.MouseDown"/> is raised.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when event <see cref="E:System.Windows.Forms.Control.MouseMove"/> is raised.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when event <see cref="E:System.Windows.Forms.Control.MouseUp"/> is raised.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:WW.Cad.Actions.DxfLwPolylineCreator.Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.OnActivated(System.EventArgs)">
            <summary>
            Is called when this interactor is activated.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="!:Deactivated"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.DxfLwPolylineCreator.Changed">
            <summary>
            Occurs when this interactor changed.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.DxfLwPolylineCreator.Entity">
            <summary>
            Gets the entity that this interactor operates on.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.DxfLwPolylineCreator.WinFormsDrawable">
            <summary>
            Represents a GDI drawable for the <see cref="T:WW.Cad.Actions.DxfLwPolylineCreator"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.WinFormsDrawable.#ctor(WW.Cad.Actions.DxfLwPolylineCreator,WW.Cad.Drawing.GDI.GDIGraphics3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.DxfLwPolylineCreator.WinFormsDrawable"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.WinFormsDrawable.Draw(System.Windows.Forms.PaintEventArgs,WW.Drawing.GraphicsHelper,WW.Actions.InteractionContext)">
            <summary>
            Draw this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLwPolylineCreator.WinFormsDrawable.OnRepaintRequested(System.EventArgs)">
            <summary>
            Raises the <see cref="E:WW.Cad.Actions.DxfLwPolylineCreator.WinFormsDrawable.RepaintRequested"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.DxfLwPolylineCreator.WinFormsDrawable.RepaintRequested">
            <summary>
            This event is raised when the interactor requests a repaint.
            </summary>
        </member>
        <member name="T:WW.WWF.WoutWareGlyph">
            <summary>
            A single glyph of the font.
            </summary>
        </member>
        <member name="M:WW.WWF.WoutWareGlyph.#ctor(System.Char,WW.Math.Geometry.IShape2D,WW.Math.Vector2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.WWF.WoutWareGlyph"/> class.
            </summary>
            <param name="letter">The letter.</param>
            <param name="outline">The path (may be <c>null</c>).</param>
            <param name="advance">The advance.</param>
        </member>
        <member name="P:WW.WWF.WoutWareGlyph.Letter">
            <summary>
            The letter this glyph represents.
            </summary>
        </member>
        <member name="P:WW.WWF.WoutWareGlyph.Path">
            <summary>
            The path of this glyph.
            </summary>
            <remarks>
            The returned value is never <c>null</c>, 
            but possibly <see cref="F:WW.Math.Geometry.ShapeTool.NullShape"/>.
            </remarks>
        </member>
        <member name="P:WW.WWF.WoutWareGlyph.Filled">
            <summary>
            Has this glyph to be drawn filled?
            </summary>
        </member>
        <member name="P:WW.WWF.WoutWareGlyph.Advance">
            <summary>
            The advance vector of this glyph.
            </summary>
        </member>
        <member name="T:WW.WWF.WoutWareFont">
            <summary>
            Basic implementation of an <see cref="T:WW.WWF.IWoutWareFont"/>.
            </summary>
            <remarks>
            It allows creation and r/w operations.
            </remarks>
        </member>
        <member name="F:WW.WWF.WoutWareFont.version">
            <summary>
            Font version.
            </summary>
            <remarks>
            <para>Version 1: unpacked content.</para>
            <para>Version 2: packed content.</para>
            </remarks>
        </member>
        <member name="M:WW.WWF.WoutWareFont.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.WWF.WoutWareFont"/> class.
            </summary>
        </member>
        <member name="M:WW.WWF.WoutWareFont.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.WWF.WoutWareFont"/> class
            from a stream.
            </summary>
            <param name="stream">The stream from which the font data is read.</param>
        </member>
        <member name="M:WW.WWF.WoutWareFont.GetGlyph(System.Char)">
            <summary>
            Get the glyph for a letter.
            </summary>
            <param name="letter">The letter.</param>
            <returns>The glyph representing the letter, or <c>null</c> if there is no glyph for the letter.</returns>
        </member>
        <member name="M:WW.WWF.WoutWareFont.GetGlyph(System.Char,WW.Text.ICanonicalGlyph)">
            <summary>
            Get the glyph for a letter.
            </summary>
            <param name="letter">The letter.</param>
            <param name="fallbackGlyph">Fallback glyph returned if the letter is not present.</param>
            <returns>
            The glyph representing the letter, or <paramref name="fallbackGlyph"/> if 
            there is no glyph for the letter.
            </returns>
        </member>
        <member name="M:WW.WWF.WoutWareFont.AddGlyph(WW.WWF.WoutWareGlyph)">
            <summary>
            Add a glyph to this font.
            </summary>
            <param name="glyph">The glyph.</param>
        </member>
        <member name="M:WW.WWF.WoutWareFont.AddGlyph(System.Char,WW.Math.Geometry.IShape2D,WW.Math.Vector2D)">
            <summary>
            Add a glyph to this font.
            </summary>
            <param name="letter">The letter the glyph represents.</param>
            <param name="outline">The letter's outline (may be <c>null</c>).</param>
            <param name="advance">The letter's advance vector.</param>
        </member>
        <member name="M:WW.WWF.WoutWareFont.WriteTo(System.IO.Stream)">
            <summary>
            Write this font to a stream.
            </summary>
            <param name="stream">Stream to write to.</param>
        </member>
        <member name="M:WW.WWF.WoutWareFont.ReadFrom(System.IO.Stream)">
            <summary>
            Read this font from a stream.
            </summary>
            <param name="stream">Stream to read from.</param>
        </member>
        <member name="M:WW.WWF.WoutWareFont.WriteContent(System.IO.Stream)">
            <summary>
            Write the WWF file's content.
            </summary>
            <param name="stream">Stream to write to.</param>
        </member>
        <member name="M:WW.WWF.WoutWareFont.ReadContent(System.IO.Stream,System.Byte[])">
            <summary>
            Read the WWF file's content.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="buffer">Helper buffer, at least 4 bytes long.</param>
        </member>
        <member name="P:WW.WWF.WoutWareFont.Version">
            <summary>
            Get the version of this font.
            </summary>
            <remarks>
            The just influences the reading and writing of the font.
            </remarks>
        </member>
        <member name="P:WW.WWF.WoutWareFont.Ascent">
            <summary>
            Get the font's canonical ascent.
            </summary>
        </member>
        <member name="P:WW.WWF.WoutWareFont.Descent">
            <summary>
            Get the font's canonical descent.
            </summary>
        </member>
        <member name="P:WW.WWF.WoutWareFont.Glyphs">
            <summary>
            Get a sorted list of glyphs.
            </summary>
            <remarks>
            The glyphs are sorted corresponding to their Unicode letter order.
            </remarks>
        </member>
        <member name="P:WW.WWF.WoutWareFont.GlyphCount">
            <summary>
            Get the number of glyphs in this font.
            </summary>
        </member>
        <member name="T:WW.WWF.WoutWareFont.Op">
            <summary>
            Short path operators.
            </summary>
        </member>
        <member name="T:WW.WWF.WoutWareFont.Ref">
            <summary>
            Short reference operators.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfVPort">
            <summary>
            Represents a viewport in model space.
            Similar to <see cref="T:WW.Cad.Model.Tables.DxfView"/> but several DxfVPort objects make up a screen configuration.
            </summary>
            <remarks>
            <para>
            The viewport <see cref="P:WW.Cad.Model.Tables.DxfVPort.Name"/> does not need to be unique. 
            Entries with the same name indicate a multiple-viewport configuration.
            The entries corresponding to the
            active viewport configuration all have the name <c>*ACTIVE</c>.
            The first such entry describes the current viewport, which determines the viewport when the drawing is opened.
            </para>
            <para>
            Properties <see cref="P:WW.Cad.Model.Tables.DxfVPort.Target"/>, <see cref="P:WW.Cad.Model.Tables.DxfVPort.Direction"/> and optionally
            the <see cref="P:WW.Cad.Model.Tables.DxfVPort.LensLength"/> (if <see cref="P:WW.Cad.Model.Tables.DxfVPort.PerspectiveMode"/> is <see langword="true"/>) 
            determine the transformation to the display coordinate system (DCS).
            </para>
            <para>
            The viewport's <see cref="P:WW.Cad.Model.Tables.DxfVPort.Height"/> must be greater than zero.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Tables.DxfView"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfViewport"/>
            <example>
            Below is an example of how to create a drawing with an active viewport.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class VPortExample {
        public void WriteFileWithVPort() {
            DxfModel model = new DxfModel();
            model.Entities.Add(new DxfCircle(EntityColors.Red, Point3D.Zero, 1d));
            model.Entities.Add(new DxfCircle(EntityColors.Blue, new Point3D(0d, 0d, -1d), 1d));

            DxfVPort vport = new DxfVPort(DxfVPort.ActiveVPortName);
            vport.Target = new Point3D(-1d, 0d, 0d);
            vport.Height = 2d;
            vport.AspectRatio = 1d;
            model.VPorts.Add(vport);
                
            DxfWriter.Write("VPortTest.dxf", model, false);
        }
    }
}
  </code>
            </example>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfVPort.ActiveVPortName">
            <summary>
            Name of an active <see cref="T:WW.Cad.Model.Tables.DxfVPort"/>. Note that there can be more than 1 active view ports.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.CreateActiveVPort">
            <summary>
            Creates an active view port.
            </summary>
            <remarks>
            The <see cref="P:WW.Cad.Model.Tables.DxfVPort.Height"/> still needs to be set.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the viewport.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.GetTransform(WW.Math.Size2D)">
            <summary>
            Calculates the transform for transforming the model to paper space.
            </summary>
            <remarks>
            This is no general purpose method for getting the transformation necessary to display
            this VPORT to the screen or elsewhere. See <see cref="T:WW.Cad.Model.ViewUtil"/> for more general 
            transformations.
            </remarks>
            <param name="targetSize">
            The size of the target window that the viewport is rendered into.
            The absolute size is not relevant, but the ratio between size and width determines
            the camera distance.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.GetMappingTransform(WW.Math.Geometry.Rectangle2D,System.Boolean)">
            <summary>
            Get the projection transformation which uses the projection defined by this view and maps the result
            into a given rectangle.
            </summary>
            <remarks>
            <para>
            This internally uses <see cref="M:WW.Cad.Model.ViewUtil.GetTransform(WW.Cad.Model.IViewDescription,WW.Math.Geometry.Rectangle2D,System.Boolean)"/> where more detailed information is provided.
            </para>
            <para>
            A <see cref="T:WW.Cad.Model.DxfModel"/> might define viewport configurations. Viewport configurations allow to combine
            <see cref="T:WW.Cad.Model.Tables.DxfVPort"/>s on a screen, and are identified because all related <see cref="T:WW.Cad.Model.Tables.DxfVPort"/>s share the same name.
            Using the same target rectangles for these <see cref="T:WW.Cad.Model.Tables.DxfVPort"/>s will return the correct transformations,
            but to handle everything correctly clipping is also necessary. To create a bitmap from a viewport configuration
            use <see cref="!:ImageExporter.CreateViewportConfigurationBitmap"/>. Effective clipping depends on the target system,
            so there is no general way to define it, but the code of the above bitmap creation method is given here to help with
            own implementations:
            </para>
            <code>
                   public static Bitmap CreateViewportConfigurationBitmap(
                       DxfModel model,
                       string vportName,
                       GraphicsConfig graphicsConfig,
                       SmoothingMode smoothingMode,
                       int width,
                       int height
                   ) {
                       Bitmap bitmap = new Bitmap(width, height);
                       Rectangle2D target2D = new Rectangle2D(0, 0, width, height);
                       Rectangle target = new Rectangle(0, 0, width, height);
                       using (Graphics graphics = Graphics.FromImage(bitmap)) {
                           graphics.SmoothingMode = smoothingMode;
                           graphics.Clear(graphicsConfig.BackColor);
                           GDIGraphics3D cadGraphics = new GDIGraphics3D(graphicsConfig);
                           cadGraphics.CreateDrawables(model);
                           foreach (DxfVPort vport in model.VPorts) {
                               if (!vportName.Equals(vport.Name, StringComparison.InvariantCultureIgnoreCase)) {
                                   continue;
                               }
                               Matrix4D transform = vport.GetMappingTransform(target2D, true);
                               float relativeDy = 1.0f - (float)(view.ViewportCenter.Y + view.ViewportHeight / 2); // y points down!
                               RectangleF clipRect =
                                   new RectangleF(width * (float)(view.ViewportCenter.X - view.ViewportWidth / 2),
                                                  height * relativeDy,
                                                  width * (float)view.ViewportWidth,
                                                  height * (float)view.ViewportHeight);
                               graphics.Clip = new Region(clipRect);
                               cadGraphics.Draw(graphics, target, transform);
                           }
                       }
                       return bitmap;
                   }
            </code>
            </remarks>
            <param name="targetRectangle">Target rectangle. If it does not have the aspect ratio of the view, the view is centered.</param>
            <param name="invertY">Invert the Y direction? This is necessary for target devices where Y points down like screens.</param>
            <returns>
            Transformation matrix which maps the view centered into the given rectangle. 
            The matrix will not be invertable for perspective views.
            </returns>
            <seealso cref="!:GetClipRectangle"/>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified viewport in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.AspectRatio">
            <summary>
            Gets or sets the view port aspect ratio (the default value is 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.BackClippingPlane">
            <summary>
            Gets or sets the back clip plane Z value.
            </summary>
            <remarks>
            <para>
            The back clip plane Z value is relative to the <see cref="P:WW.Cad.Model.Tables.DxfVPort.Target"/> point
            in the <see cref="P:WW.Cad.Model.Tables.DxfVPort.Direction">view direction</see>.
            </para>
            <para>
            Value is only effective when <see cref="P:WW.Cad.Model.Tables.DxfVPort.BackClippingActive"/> is <see langword="true"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.BackClippingActive"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.FrontClippingPlane"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.BackClippingActive">
            <summary>
            Gets or sets whether back clipping is active (the default value is <c>false</c>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.ViewMode"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.BackClippingPlane"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.FrontClippingPlane">
            <summary>
            Gets or sets the front clip plane Z value.
            </summary>
            <remarks>
            <para>
            The front clip plane Z value is relative to the <see cref="P:WW.Cad.Model.Tables.DxfVPort.Target"/> point
            in the <see cref="P:WW.Cad.Model.Tables.DxfVPort.Direction">view direction</see>.
            </para>
            <para>
            Value is only effective when <see cref="P:WW.Cad.Model.Tables.DxfVPort.FrontClippingActive"/> is <see langword="true"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.FrontClippingActive"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.BackClippingPlane"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.FrontClippingActive">
            <summary>
            Gets or sets whether front clipping is active (the default value is <c>false</c>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.FrontClippingPlane"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.ViewMode"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.BottomLeft">
            <summary>
            Gets or sets the bottom left point in fractions of screen width and height.
            The default value is (0, 0).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Center">
            <summary>
            Gets or sets the clip rectangle center point in display coordinate system (DCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.CircleZoomPercent">
            <summary>
            Gets or sets the circle zoom percentage (the default value is 1000).
            </summary>
            <remarks>
            The allowed range is 1-20000.
            The circle zoom percentage controls how precise curve renderings (circles, arcs etc) are.
            The higher the value, the more precise (and slower) the rendering.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Direction">
            <summary>
            Gets or sets the view direction pointing from the <see cref="P:WW.Cad.Model.Tables.DxfVPort.Target">target</see> point towards the camera (in WCS). 
            The default value is <see cref="F:WW.Math.Vector3D.ZAxis"/>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.Target"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.FastZoomPercent">
            <summary>
            Gets or sets the fast zoom percentage.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.GridSpacing">
            <summary>
            Gets or sets the grid spacing in display coordinate system (DCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Height">
            <summary>
            Gets or sets the view height.
            </summary>
            <remarks>
            The viewport's height must be greater than zero.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.LensLength">
            <summary>
            Gets or sets the perspective lens length in mm (the default value is 50).
            </summary>
            <remarks>
            <para>
            The lens length is used when <see cref="P:WW.Cad.Model.Tables.DxfVPort.PerspectiveMode"/> is set to <c>true</c>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.PerspectiveMode"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Name">
            <summary>
            Gets or sets the viewport name.
            </summary>
            <remarks>
            <para>
            The viewport name is not unique. 
            Entries with the same name indicate a multiple-viewport configuration.
            The entries corresponding to the
            active viewport configuration all have the name <c>*ACTIVE</c>.
            The first such entry describes the current viewport.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.Tables.DxfVPort.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.PerspectiveMode">
            <summary>
            Gets or sets whether perspective mode is active (the default value is <c>false</c>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.ViewMode"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.RenderMode">
            <summary>
            Gets or sets the render mode.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.ShowGrid">
            <summary>
            Gets or sets whether to show the grid.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Snap">
            <summary>
            Gets or sets whether to snap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.SnapBasePoint">
            <summary>
            Gets or sets the snap base point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.SnapIsoPair">
            <summary>
            Gets or sets the snap iso pair.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.SnapRotationAngle">
            <summary>
            Gets or sets the snap rotation angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.SnapSpacing">
            <summary>
            Gets or sets the snap spacing (the default value is 1, 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.SnapStyle">
            <summary>
            Gets or sets the snap style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Target">
            <summary>
            Gets or sets the view target point.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.Direction"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.TopRight">
            <summary>
            Gets or sets the top right corner coordinate in fractions of screen width and height.
            The default value is (1, 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.TwistAngle">
            <summary>
            Gets or sets the twist angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Ucs">
            <summary>
            Gets or sets the ucs.
            </summary>
            <remarks>
            UCS was added to <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> in autocad 2000 (release 15).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.UcsOrthographicType">
            <summary>
            Gets or sets the orthographic type of the associated <see cref="P:WW.Cad.Model.Tables.DxfVPort.Ucs"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.DisplayUcs">
            <summary>
            Gets or sets the display UCS icon at UCS origin flag (the default value is <c>true</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.UcsPerViewport">
            <summary>
            Gets or sets the ucs per viewport flag (the default value is <c>true</c>).
            </summary>
            <remarks>
            If <see langword="true"/> this viewport stores its own <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> which will become the current
            UCS whenever the viewport is activated.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this viewport is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this viewport is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this viewport is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.ViewMode">
            <summary>
            Gets or sets the view mode.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.FollowUCS">
            <summary>
            Gets or sets a value indicating whether to enable UCS follow.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.ClipFrontNotAtEye">
            <summary>
            Gets or sets a value indicating whether to enable front clip not at eye 
            (the default value is <c>false</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.UseDefaultLighting">
            <summary>
            Gets or sets a value indicating whether use default lighting.
            The default value is <c>true</c>.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.DefaultLightingType">
            <summary>
            Gets or sets the default type of the lighting.
            The default value is <see cref="F:WW.Cad.Model.DefaultLightingType.TwoDistantLights"/>.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Brightness">
            <summary>
            Gets or sets the brightness.
            The default value is zero.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.Contrast">
            <summary>
            Gets or sets the contrast.
            The default value is zero.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.AmbientColor">
            <summary>
            Gets or sets the ambient color.
            The default value is 0x333333 (RGB).
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.GridDisplayBeyondLimits">
            <summary>
            Gets or sets a value indicating whether the grid should be displayed beyond the limits.
            The default value is <c>false</c>.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.GridIsAdaptive">
            <summary>
            Gets or sets a value indicating whether the grid is adaptive.
            The default value is <c>true</c>.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.GridAllowSubdivision">
            <summary>
            Gets or sets a value indicating whether the grid allows subdivision.
            The default value is <c>false</c>.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.GridFollowsDynamicUcs">
            <summary>
            Gets or sets a value indicating whether the grid follows the dynamic UCS.
            The default value is <c>false</c>.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.MinorGridLinesPerMajorGridLine">
            <summary>
            Gets or sets the number of minor grid lines per major grid line.
            The default value is 5.
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPort.ViewDescription">
            <summary>
            Gets the unified view description of this vport.
            </summary>
            <remarks>
            The returned object is backed up by this vport, so any changes to this vport will be reflected.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfVPort.ViewDescriptionWrapper">
            <summary>
            Helper class wrapping a vport and providing the unified <see cref="T:WW.Cad.Model.IViewDescription"/> interface.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.IViewDescription">
            <summary>
            Various view related classes in the DXF model have slightly different interfaces,
            although they are basically defining the same properties. This interface allows to 
            have a unified view at all these classes, in order to generalize view related 
            algorithms.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewModeFlags">
            <summary>
            Get the view mode as a combination of various flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewportCenter">
            <summary>
            Get the center of the viewport in screen/paper coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewportWidth">
            <summary>
            Get the viewport width in screen/paper coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewportHeight">
            <summary>
            Get the viewport height in screen/paper coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewCenter">
            <summary>
            Get the center of the view in projected coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewDirection">
            <summary>
            Get the view direction in model coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewTarget">
            <summary>
            Get the view target point in model coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.FocalLength">
            <summary>
            Get the focal length for perspective views.
            The focal length is given in mm equivalence to 35mm cameras and defines the view angle
            relative to the <see cref="P:WW.Cad.Model.IViewDescription.ViewportWidth"/>.
            </summary>
            <remarks>
            Only used if the <see cref="!:ExtendedViewMode.PerspectiveMode"/> flag is set in
            <see cref="P:WW.Cad.Model.IViewDescription.ViewModeFlags"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.FrontClipDistance">
            <summary>
            Get the distance of the front clipping plane in model coordinates.
            </summary>
            <remarks>
            Only used if the <see cref="!:ExtendedViewMode.ClipFront"/> flag and the
            <see cref="!:ExtendedViewMode.ClipFrontNotAtEye"/> flag are both set in
            <see cref="P:WW.Cad.Model.IViewDescription.ViewModeFlags"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.BackClipDistance">
            <summary>
            Get the distance of the back clipping plane in model coordinates.
            </summary>
            <remarks>
            Only used if the <see cref="!:ExtendedViewMode.ClipBack"/> flag is set in
            <see cref="P:WW.Cad.Model.IViewDescription.ViewModeFlags"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewWidth">
            <summary>
            Get the view width in model coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewHeight">
            <summary>
            Get the view height in model coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ViewTwistAngle">
            <summary>
            Get the view twist angle in radians.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.ClippingBoundaryEntity">
            <summary>
            Get the internal object defining the clipping boundary of the viewport.
            </summary>
            <remarks>
            This may return <c>null</c> for various reasons.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.RenderMode">
            <summary>
            Get the render mode of the view.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.IsTargetPaper">
            <summary>
            Is the target of the view the paper space?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IViewDescription.FrozenLayers">
            <summary>
            Get the frozen layers of this view.
            This may return <c>null</c> for views which are unable to contain frozen layers.
            </summary>
            <remarks>
            Entities on frozen layers are not shown in this view. 
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPort.ViewDescriptionWrapper.#ctor(WW.Cad.Model.Tables.DxfVPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfVPort.ViewDescriptionWrapper"/> class.
            </summary>
            <param name="vport">The vport.</param>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPattern">
            <summary>
            Contains pattern data for <see cref="T:WW.Cad.Model.Entities.DxfHatch"/> object that consists of a number of <see cref="T:WW.Cad.Model.Entities.DxfPattern.Line">pattern lines</see>.
            </summary>
            <remarks>
            <para>
            Add one or more <see cref="T:WW.Cad.Model.Entities.DxfPattern.Line"/> to property <see cref="P:WW.Cad.Model.Entities.DxfPattern.Lines"/> to create a valid pattern.
            </para>
            <para>
            A pattern can be either created from code or by reading from a pattern file (see <see cref="T:WW.Cad.IO.PatternReader"/>).
            Use the <seealso cref="T:WW.Cad.IO.PatternWriter"/> to write a pattern file.
            </para>
            </remarks>
            <example>
            Below is an example of how to create and write a DXF file containing a hatch object.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class HatchExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfHatch hatch = new DxfHatch();
            hatch.Color = EntityColors .Green;
            hatch.ElevationPoint = new Point3D(0, 0, 2);
            hatch.ZAxis = new Vector3D(-0.707, 0, 0.707);
    
            // A boundary path bounded by lines.
            DxfHatch.BoundaryPath boundaryPath1 = new DxfHatch.BoundaryPath();
            boundaryPath1.Type = BoundaryPathType.None;
            hatch.BoundaryPaths.Add(boundaryPath1);
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 0), new Point2D(1, 0)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(1, 0), new Point2D(1, 1)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(1, 1), new Point2D(0, 1)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 1), new Point2D(0, 0)));
    
            // A boundary path bounded by an ellipse.
            DxfHatch.BoundaryPath boundaryPath2 = new DxfHatch.BoundaryPath();
            boundaryPath2.Type = BoundaryPathType.None;
            hatch.BoundaryPaths.Add(boundaryPath2);
            DxfHatch.BoundaryPath.EllipseEdge edge = new DxfHatch.BoundaryPath.EllipseEdge();
            edge.CounterClockWise = true;
            edge.Center = new Point2D(1, 1);
            edge.MajorAxisEndPoint = new Vector2D(0.4d, -0.2d);
            edge.MinorToMajorRatio = 0.7;
            edge.StartAngle = 0d;
            edge.EndAngle = System.Math.PI * 2d / 3d;
            boundaryPath2.Edges.Add(edge);
            
            // A boundary path bounded by lines and an arc.
            DxfHatch.BoundaryPath boundaryPath3 = new DxfHatch.BoundaryPath();
            boundaryPath3.Type = BoundaryPathType.Outermost;
            hatch.BoundaryPaths.Add(boundaryPath3);
            DxfHatch.BoundaryPath.ArcEdge arcEdge = new DxfHatch.BoundaryPath.ArcEdge();
            arcEdge.Center = new Point2D(0, 1);
            arcEdge.Radius = 0.5d;
            arcEdge.StartAngle = 0;
            arcEdge.EndAngle = System.Math.PI / 2d;
            arcEdge.CounterClockWise = true;
            boundaryPath3.Edges.Add(arcEdge);
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 1.5d), new Point2D(-0.5, 1d)));
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(-0.5, 1d), new Point2D(0d, 0.5d)));
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0d, 0.5d), new Point2D(0.5d, 1d)));
            
            // A boundary path bounded by a polyline.
            DxfHatch.BoundaryPath boundaryPath6 = new DxfHatch.BoundaryPath();
            boundaryPath6.Type = BoundaryPathType.Polyline;
            hatch.BoundaryPaths.Add(boundaryPath6);
            boundaryPath6.PolylineData =
                new DxfHatch.BoundaryPath.Polyline(
                    new DxfHatch.BoundaryPath.Polyline.Vertex[] {
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.5, -0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.5, 0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.5, 0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.5, 0-.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.75, -0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.75, 0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.25, 0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.25, -0.5)
                    }
                );
            boundaryPath6.PolylineData.Closed = true;
    
            // Define the hatch fill pattern.
            // Don't set a pattern for solid fill.
            hatch.Pattern = new DxfPattern();
            DxfPattern.Line patternLine = new DxfPattern.Line();
            hatch.Pattern.Lines.Add(patternLine);
            patternLine.Angle = System.Math.PI / 4d;
            patternLine.Offset = new Vector2D(0.02, -0.01d);
            patternLine.DashLengths.Add(0.02d);
            patternLine.DashLengths.Add(-0.01d);
            patternLine.DashLengths.Add(0d);
            patternLine.DashLengths.Add(-0.01d);
            
            model.Entities.Add(hatch);
    
            DxfWriter.Write("Hatch Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPattern.Line"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfHatch"/>
            <seealso cref="T:WW.Cad.IO.PatternReader"/>
            <seealso cref="T:WW.Cad.IO.PatternWriter"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.GetApproximateRepeatCount(System.Double)">
            <summary>
            Gets the approximate pattern repeat count for given area.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.TransformMe(System.Double,System.Double)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="rotationAngle">Rotation angle in radians.</param>
            <param name="scaling">Scaling.</param>
            <param name="offset">Offset of pattern.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.TransformMe(System.Double,System.Double,WW.Math.Vector2D)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="rotationAngle">Rotation angle in radians.</param>
            <param name="scaling">Scaling.</param>
            <param name="offset">Offset of pattern.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="config">Transformation settings.</param>
            <param name="transform">The transformation to be used.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="config">Transformation settings.</param>
            <param name="transform">The transformation to be used.</param>
            <param name="undoGroup">Undo group, not used if <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix3D)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="config">Transformation settings.</param>
            <param name="transform">The transformation to be used.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix3D,WW.Actions.CommandGroup)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="config">Transformation settings.</param>
            <param name="transform">The transformation to be used.</param>
            <param name="undoGroup">Undo group, not used if <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Clone">
            <summary>
            Clone the pattern (see <see cref="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.CopyFrom(WW.Cad.Model.Entities.DxfPattern)">
            <summary>
            Copy hatch pattern from given pattern.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.CreateTransformed(System.Double,System.Double)">
            <summary>
            Create a transformed version of this pattern.
            </summary>
            <param name="rotationAngle">Rotation angle in radians.</param>
            <param name="scaling">Scaling.</param>
            <returns>Transformed copy of this pattern.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.CreateTransformed(System.Double,System.Double,WW.Math.Vector2D)">
            <summary>
            Create a transformed version of this pattern.
            </summary>
            <param name="rotationAngle">Rotation angle in radians.</param>
            <param name="scaling">Scaling.</param>
            <param name="offset">Offset of pattern.</param>
            <returns>Transformed copy of this pattern.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.CreateTransformed(WW.Math.Matrix4D)">
            <summary>
            Create a transformed pattern.
            </summary>
            <param name="transform">The transformation.</param>
            <returns>New pattern which is this pattern transformed by transform.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.CreateTransformed(WW.Math.Matrix3D)">
            <summary>
            Create a transformed pattern.
            </summary>
            <param name="transform">The transformation.</param>
            <returns>New pattern which is this pattern transformed by transform.</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPattern.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <remarks>
            This string is not stored in the DXF file.
            It is read from pattern files with extension .pat.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPattern.Name">
            <summary>
            Gets or sets the pattern name.
            </summary>
            <remarks>
            This string is not stored in the DXF file.
            It is read from pattern files with extension .pat.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPattern.Lines">
            <summary>
            Gets the pattern lines.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPattern.Line"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPattern.Line">
            <summary>
            Line in a <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> that is used in <see cref="T:WW.Cad.Model.Entities.DxfHatch"/>.
            </summary>
            <remarks>
            A pattern line is defined by its <see cref="P:WW.Cad.Model.Entities.DxfPattern.Line.BasePoint"/>, <see cref="P:WW.Cad.Model.Entities.DxfPattern.Line.Angle"/>, <see cref="P:WW.Cad.Model.Entities.DxfPattern.Line.Offset"/> vertex and
            <see cref="P:WW.Cad.Model.Entities.DxfPattern.Line.DashLengths"/>.
            </remarks>
            <example>
            An example of how to create and write a dxf file containing a hatch object.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class HatchExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfHatch hatch = new DxfHatch();
            hatch.Color = EntityColors .Green;
            hatch.ElevationPoint = new Point3D(0, 0, 2);
            hatch.ZAxis = new Vector3D(-0.707, 0, 0.707);
    
            // A boundary path bounded by lines.
            DxfHatch.BoundaryPath boundaryPath1 = new DxfHatch.BoundaryPath();
            boundaryPath1.Type = BoundaryPathType.None;
            hatch.BoundaryPaths.Add(boundaryPath1);
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 0), new Point2D(1, 0)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(1, 0), new Point2D(1, 1)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(1, 1), new Point2D(0, 1)));
            boundaryPath1.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 1), new Point2D(0, 0)));
    
            // A boundary path bounded by an ellipse.
            DxfHatch.BoundaryPath boundaryPath2 = new DxfHatch.BoundaryPath();
            boundaryPath2.Type = BoundaryPathType.None;
            hatch.BoundaryPaths.Add(boundaryPath2);
            DxfHatch.BoundaryPath.EllipseEdge edge = new DxfHatch.BoundaryPath.EllipseEdge();
            edge.CounterClockWise = true;
            edge.Center = new Point2D(1, 1);
            edge.MajorAxisEndPoint = new Vector2D(0.4d, -0.2d);
            edge.MinorToMajorRatio = 0.7;
            edge.StartAngle = 0d;
            edge.EndAngle = System.Math.PI * 2d / 3d;
            boundaryPath2.Edges.Add(edge);
            
            // A boundary path bounded by lines and an arc.
            DxfHatch.BoundaryPath boundaryPath3 = new DxfHatch.BoundaryPath();
            boundaryPath3.Type = BoundaryPathType.Outermost;
            hatch.BoundaryPaths.Add(boundaryPath3);
            DxfHatch.BoundaryPath.ArcEdge arcEdge = new DxfHatch.BoundaryPath.ArcEdge();
            arcEdge.Center = new Point2D(0, 1);
            arcEdge.Radius = 0.5d;
            arcEdge.StartAngle = 0;
            arcEdge.EndAngle = System.Math.PI / 2d;
            arcEdge.CounterClockWise = true;
            boundaryPath3.Edges.Add(arcEdge);
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0, 1.5d), new Point2D(-0.5, 1d)));
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(-0.5, 1d), new Point2D(0d, 0.5d)));
            boundaryPath3.Edges.Add(new DxfHatch.BoundaryPath.LineEdge(new Point2D(0d, 0.5d), new Point2D(0.5d, 1d)));
            
            // A boundary path bounded by a polyline.
            DxfHatch.BoundaryPath boundaryPath6 = new DxfHatch.BoundaryPath();
            boundaryPath6.Type = BoundaryPathType.Polyline;
            hatch.BoundaryPaths.Add(boundaryPath6);
            boundaryPath6.PolylineData =
                new DxfHatch.BoundaryPath.Polyline(
                    new DxfHatch.BoundaryPath.Polyline.Vertex[] {
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.5, -0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.5, 0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.5, 0.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.5, 0-.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.75, -0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(0.75, 0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.25, 0.25),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(1.25, -0.5)
                    }
                );
            boundaryPath6.PolylineData.Closed = true;
    
            // Define the hatch fill pattern.
            // Don't set a pattern for solid fill.
            hatch.Pattern = new DxfPattern();
            DxfPattern.Line patternLine = new DxfPattern.Line();
            hatch.Pattern.Lines.Add(patternLine);
            patternLine.Angle = System.Math.PI / 4d;
            patternLine.Offset = new Vector2D(0.02, -0.01d);
            patternLine.DashLengths.Add(0.02d);
            patternLine.DashLengths.Add(-0.01d);
            patternLine.DashLengths.Add(0d);
            patternLine.DashLengths.Add(-0.01d);
            
            model.Entities.Add(hatch);
    
            DxfWriter.Write("Hatch Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPattern"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfHatch"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPattern.Line"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.#ctor(System.Double,WW.Math.Point2D,WW.Math.Vector2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPattern.Line"/> class 
            based on given angle, base point and offset.
            </summary>
            <param name="angle">The pattern line angle (radians).</param>
            <param name="basePoint">The pattern line base point.</param>
            <param name="offset">
            This is the offset vertex between consecutive pattern lines, and must be
            unequal to the zero vertex.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.#ctor(System.Double,WW.Math.Point2D,WW.Math.Vector2D,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPattern.Line"/> class
            based on given angle, base point, offset and dash lengths.
            </summary>
            <param name="angle">The pattern line angle (radians).</param>
            <param name="basePoint">The pattern line base point.</param>
            <param name="offset">
            This is the offset vertex between consecutive pattern lines, and must be
            unequal to the zero vertex.
            </param>
            <param name="dashLengths">
            The dashlengths.
            A dash length &gt; 0 signifies a line, &lt; 0 signifies a move, 0 signifies a dot.
            No dash lengths at all means a continuous line.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.Clone">
            <summary>
            Clone the pattern (see <see cref="M:WW.Cad.Model.DxfHandledObject.Clone(WW.Cad.Model.CloneContext)"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.CopyFrom(WW.Cad.Model.Entities.DxfPattern.Line)">
            <summary>
            Copy hatch pattern line from given line.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.GetTransformed(WW.Math.Matrix4D)">
            <summary>
            Get a transformed copy of this line.
            </summary>
            <param name="transform">The transformation.</param>
            <returns>Transformed copy.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.GetTransformed(WW.Math.Matrix3D)">
            <summary>
            Get a transformed copy of this line.
            </summary>
            <param name="transform">The transformation.</param>
            <returns>Transformed copy.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="transform">The transformation.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="transform">The transformation.</param>
            <param name="undoGroup">Undo Group, <c>null</c> if not used.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix3D)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="transform">The Transformation.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPattern.Line.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix3D,WW.Actions.CommandGroup)">
            <summary>
            Transform this pattern.
            </summary>
            <param name="transform">The transformation.</param>
            <param name="undoGroup">Undo Group, <c>null</c> if not used.</param>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPattern.Line.Angle">
            <summary>
            Gets or sets the pattern line angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPattern.Line.BasePoint">
            <summary>
            Gets or sets the pattern line base point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPattern.Line.DashLengths">
            <summary>
            Gets the dash lengths (<see cref="T:System.Double"/>s).
            </summary>
            <remarks>
            A dash length &gt; 0 signifies a line, &lt; 0 signifies a move, 0 signifies a dot.
            No dash lengths at all means a continuous line.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPattern.Line.Offset">
            <summary>
            Gets or sets the pattern line offset.
            </summary>
            <remarks>
            This is the offset vertex between the pattern lines, and must be
            unequal to the zero vertex.
            </remarks>
        </member>
        <member name="T:WW.Cad.Base.Log">
            <summary>
            Logging class.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Log.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Log.LogMessage(WW.Cad.Base.LogMessage)">
            <summary>
            Log a message.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Log.LogDebug(System.String)">
            <summary>
            Log a debug message.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Log.LogInfo(System.String)">
            <summary>
            Log a info message.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Log.LogWarning(System.String)">
            <summary>
            Log a warning message.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Log.LogError(System.String)">
            <summary>
            Log a error message.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Log.GetStatistics">
            <summary>
            Returns log statistics containing number of messages, warnings, errors and debug messages.
            </summary>
            <remarks>
            The returned object is the current state and is not updated afterwards.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.Log.OnMessageAdded(WW.Cad.Base.LogMessage)">
            <summary>
            Fire <see cref="E:WW.Cad.Base.Log.MessageAdded"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Base.Log.MessageAdded">
            <summary>
            Fired when a message is logged.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Log.Messages">
            <summary>
            Gets the logging.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.ProgressEventHandler">
            <summary>
            Progress event handler signature.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.ProgressEventArgs">
            <summary>
            Event arguments for progress events.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.ProgressEventArgs.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.ProgressEventArgs.Cancel">
            <summary>
            Cancel the running action.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.ProgressEventArgs.Progress">
            <summary>
            Gets the progress (normalized to 0 to 1 range).
            </summary>
        </member>
        <member name="P:WW.Cad.Base.ProgressEventArgs.Cancelled">
            <summary>
            Gets whether the action should be cancelled.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColoredLinePath">
            <summary>
            A colored line path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredLinePath.#ctor(WW.Math.Vector4D,WW.Math.Vector4D,WW.Drawing.ArgbColor,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredLinePath.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredLinePath.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredLinePath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.ShxShape">
            <summary>
            Shape.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.#ctor(WW.Cad.Model.Entities.ShxFile,System.UInt16,System.Char,System.String,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="shxFile">The SHX file containing this shape.</param>
            <param name="index">The shape index in the file</param>
            <param name="charIndex">The unicode character index.</param>
            <param name="description">The description.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.GetGraphicsPath(System.Boolean,System.Drawing.PointF@,System.Int32)">
            <summary>
            Get the path for this shape.
            </summary>
            <remarks>Obsolete. The number of lines for building an arc are no longer needed, arcs are created as b-splines.
            Use <see cref="M:WW.Cad.Model.Entities.ShxShape.GetGraphicsPath(System.Boolean,System.Drawing.PointF@)"/> instead.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.GetGraphicsPath(System.Boolean,System.Drawing.PointF@)">
            <summary>
            Get the path for this shape.
            </summary>
            <param name="vertical">draw for vertical output?</param>
            <param name="endPoint">return of the end point (i.e. the point where drawing the next character starts)</param>
            <returns>the graphical path representing this SHX shape, which has to be drawn unfilled</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.GetGlyphShape(System.Boolean,WW.Math.Point2D@)">
            <summary>
            Get the path for this shape.
            </summary>
            <param name="vertical">draw for vertical output?</param>
            <param name="endPoint">return of the end point (i.e. the point where drawing the next character starts)</param>
            <returns>the graphical path representing this SHX shape, which has to be drawn unfilled</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxShape.Index">
            <summary>
            Gets the shape index as defined in the SHX file.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxShape.CharIndex">
            <summary>
            Gets the shape index in unicode.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxShape.Description">
            <summary>
            Gets the shape description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxShape.HorizontalAdvance">
            <summary>
            Get the horizontal advance of this character shape.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxShape.VerticalAdvance">
            <summary>
            Get the vertical advance of this character shape.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxShape.HorizontalBounds">
            <summary>
            Get the bounding box when drawing horizontally.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ShxShape.VerticalBounds">
            <summary>
            Get the bounding box when drawing vertically.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.Plotter.#ctor(WW.Cad.Model.Entities.ShxFile,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.Plotter.ArcRelative(System.Double,System.Double,System.Double)">
            <summary>
            Adds an arc as a bezier curve.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.Plotter.BulgeArcRelative(System.Single,System.Single,System.Single)">
            <summary>
            Adds a bulge arc as a series of line segments.
            </summary>
            <remarks>
            See "DXF-Intern" p. 337
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.Plotter.AddPath(WW.Math.Geometry.IShape2D,System.Boolean)">
            <summary>
            Add a path to this plotter, thereby updating the position.
            </summary>
            <param name="gpath">path to add</param>
            <param name="connect">connect to previous path?</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ShxShape.Plotter.AddMoveToIfNeeded">
            <summary>
            Adds a move to only if needed.
            In System.Drawing.GraphicsPath 2 consecutive move to commands result in 
            an illegal GraphicsPath. This ensures there is only 1 consecutive move to command.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.IGroupReader">
            <summary>
            Interface for reading a group.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.IGroupReader.ReadGroup(WW.Cad.IO.DxfReader)">
            <summary>
            Read the next group.
            </summary>
            <returns>
            Returns <see cref="F:WW.Cad.IO.Group.Empty"/> when reached the end of input.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.IGroupReader.ReadGroup(WW.Cad.IO.DxfReader,System.Int32)">
            <summary>
            Read the next group.
            </summary>
            <returns>
            Returns <see cref="F:WW.Cad.IO.Group.Empty"/> when reached the end of input.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.IGroupReader.ReadGroupTryParse(WW.Cad.IO.DxfReader)">
            <summary>
            Read the next group. Tries to parse the group value, but does not throw an exception
            in case the group value type does not match the expected type (in some cases
            where a deviant type may occur).
            </summary>
            <returns>
            Returns <see cref="F:WW.Cad.IO.Group.Empty"/> when reached the end of input.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.IGroupReader.Close">
            <summary>
            Close the reader and underlying stream.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.IGroupReader.Position">
            <summary>
            Give the current position string for error messages.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.SplineType">
            <summary>
            Spline type used by <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/>.
            </summary>
            <remarks>
            Corresponds to group 75.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineType.QuadraticBSpline">
            <summary>
            Quadratic B spline.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineType.CubicBSpline">
            <summary>
            Cubic B Spline.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineType.Bezier">
            <summary>
            Bezier curve.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLineTypeCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> keyed collection (line type name can be used as indexer parameter).
            </summary>
            <remarks>
            The key is the case insensitive line type name.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineTypeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLineTypeCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineTypeCollection.GetKeyForItem(WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Gets the key for specified lineType.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfViewCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfView"/> keyed collection (view name can be used as indexer parameter).
            </summary>
            <remarks>
            The key is the case insensitive view name.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfViewCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfViewCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfViewCollection.GetKeyForItem(WW.Cad.Model.Tables.DxfView)">
            <summary>
            Gets the key for specified view.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfXRecordValue">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Objects.DxfXRecord"/> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecordValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfXRecordValue"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecordValue.#ctor(System.Int16,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfXRecordValue"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecordValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecordValue.AsGroups">
            <summary>
            Get the groups of this XRECORD value.
            </summary>
            <returns>XRECORD value groups</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecordValue.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfXRecordValue.Code">
            <summary>
            Gets or sets the code.
            Must have a value between 1 and 369 (values 5 and 105 are not allowed).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfXRecordValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <remarks>
            The object's type must correspond to the group code.
            See the DXF reference for more information.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Text.TextBlock">
            <summary>
            Basic implementation of a text block holding just some text with the same settings.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlock.UnderlineY">
            <summary>
            Offset of underline from baseline relative to height.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlock.OverlineY">
            <summary>
            Offset of overline from baseline relative to height.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlock.NoTextBlocks">
            <summary>
            Constant to be returned from <see cref="M:WW.Cad.Model.Text.TextBlock.BreakLineBefore(System.Double,WW.Cad.Model.Text.ITextBreaker)"/> if no break was possible.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlock.LineSeparators">
            <summary>
            Separators between lines.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlock.#ctor(System.String,WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlock.GetBounds(WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounding box of this text block.
            </summary>
            <param name="whiteSpaceHandling">how to handle white space when calculating the bounds</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlock.Layout(WW.Math.Vector2D@,System.Double,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Lay out this block.
            </summary>
            <param name="baselinePos">current baseline position, advanced after layout</param>
            <param name="height">height of the surrounding text block</param>
            <param name="whiteSpaceHandlingFlags">The white space handling flags.</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlock.BreakLineBefore(System.Double,WW.Cad.Model.Text.ITextBreaker)">
            <summary>
            Break this text block before the given width.
            </summary>
            <param name="width">width before which to break the text</param>
            <param name="breaker">provider of text breaks</param>
            <returns>
            	<list type="table">
            		<item>
            			<term>an array with two elements</term>
            			<description>
                            if it was possible to break this text block into two parts
                            with the first one smaller than <c>width</c> (the first inherets the offset of this block,
                            while the seconds block's offset is unset)
                        </description>
            		</item>
            		<item>
            			<term>an array with one element</term>
            			<description>if this text block already is smaller than <c>width</c></description>
            		</item>
            		<item>
            			<term>an empty array</term>
            			<description>
                            if the text block is wider than width but it is not possible to find
                            a break position (see also <see cref="P:WW.Cad.Model.Text.TextBlock.Breakable"/>) at all
                        </description>
            		</item>
            	</list>
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlock.GetPositionOf(System.Char,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the baseline start position of the first occurence of the given char.
            </summary>
            <param name="ch">char to look for in block</param>
            <param name="whiteSpaceHandlingFlags">The white space handling flags.</param>
            <returns>
            the position or <c>null</c> if no position was found
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlock.CollectTextChunks(System.Collections.Generic.ICollection{WW.Cad.Model.Text.TextChunk},WW.Math.Matrix4D,System.Int16)">
            <summary>
            Collect the text chunks.
            </summary>
            <param name="collector">collector where to add the chunks</param>
            <param name="insertionTrafo">insertion transformation</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlock.Offset">
            <summary>
            Gets or sets the relative position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlock.Settings">
            <summary>
            Gets or sets the text block settings.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlock.Breakable">
            <summary>
            Is it possible to break this text?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlock.Advance">
            <summary>
            Get the advance of this text block.
            </summary>
            <returns>advance vector</returns>
        </member>
        <member name="T:WW.Cad.Model.Text.TabulatorStop">
            <summary>
            Definition of a tabulator stop.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TabulatorStop.#ctor(WW.Cad.Model.Text.TabulatorStop.TabulatorType)">
            <summary>
            Constructor.
            </summary>
            <param name="type">tabulator type</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TabulatorStop.#ctor(System.Double)">
            <summary>
            Constructor for left tabulator with a given position.
            </summary>
            <param name="position">tabulator position</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TabulatorStop.CompareTo(WW.Cad.Model.Text.TabulatorStop)">
            <summary>
            Compares this tabulator with another one.
            The comparision is done by position.
            </summary>
            <returns>
            less than <c>0</c>: this tabulator's position is smaller than <paramref name="other"/><para/>
            <c>0</c>: this tabulator's position is the same as <paramref name="other"/>'s <para/>
            greater than <c>0</c>: this tabulator's position is greater than <paramref name="other"/><para/>
            </returns>
            <param name="other">tabulator to be compared with this</param>
        </member>
        <member name="P:WW.Cad.Model.Text.TabulatorStop.Type">
            <summary>
            Get the tabulator type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TabulatorStop.Position">
            <summary>
            Get/set the tabulator's position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TabulatorStop.DecimalPointChar">
            <summary>
            Get/set the decimal point char.
            </summary>
            <remarks>
            The decimal point char is only used for tabulators of type <see cref="F:WW.Cad.Model.Text.TabulatorStop.TabulatorType.TabDecimal"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Text.TabulatorStop.TabulatorType">
            <summary>
            The tabulator type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TabulatorStop.TabulatorType.TabLeft">
            <summary>
            Left tabulator.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TabulatorStop.TabulatorType.TabCentered">
            <summary>
            Centered tabulator (only in extended format).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TabulatorStop.TabulatorType.TabRight">
            <summary>
            Right tabulator (only in extended format).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TabulatorStop.TabulatorType.TabDecimal">
            <summary>
            Decimal tabulator (only in extended format).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.GlyphBasedLayoutedText">
            <summary>
            A DXF text based on a concatenation of glyphs.
            This is most useful for SHX fonts.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.ILayoutedText">
            <summary>
            The definition of a drawable text after it is layouted.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.ILayoutedText.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)">
            <summary>
            Draw the text to the drawer.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="transformation">transformation used for drawing</param>
            <param name="extrusion">extrusion in z direction, usually <c>0.0</c></param>
            <returns>advance including <para>transformation</para></returns>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.Text">
            <summary>
            Get the text represented by this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.Font">
            <summary>
            Get the font used to draw this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.Color">
            <summary>
            Get the color of the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.LineWeight">
            <summary>
            Gets the line weight.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.CanonicalPath">
            <summary>
            Get the canonical path used to draw this text.
            </summary>
            <remarks>
            See <see cref="P:WW.Cad.Model.Text.ILayoutedText.Filled"/> to decide whether the path is drawn filled.
            The canonical path is undistorted with size 1. Use the <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>
            to transform the path into the correct size and proportions.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.TransformedPath">
            <summary>
            Get the path representing the text if draw unrotated at point <c>(0,0)</c>.
            </summary>
            <remarks>
            Note that this includes a transformation of the canonical path, so usually it is better
            to use <see cref="P:WW.Cad.Model.Text.ILayoutedText.CanonicalPath"/> and include the <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/> in
            the transformations needed to place the text at the correct position. 
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation">
            <summary>
            Get the transformation used to transform the canonical path into the correct size and proportions.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.Filled">
            <summary>
            Get whether the path of this text has to be drawn filled.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.CanonicalAdvance">
            <summary>
            Get the canonical advance of this path.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ILayoutedText.Advance">
            <summary>
            Get the advance used after this text is drawn.
            This includes the basic transformation (<see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.GlyphBasedLayoutedText.#ctor(System.String,WW.Cad.Model.Text.IDxfFont,WW.Drawing.ArgbColor,System.Int16,WW.Cad.Model.Text.IDrawableCanonicalGlyph[],WW.Math.Matrix2D,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="text">the text</param>
            <param name="font">the font of the text</param>
            <param name="color">the color of the text</param>
            <param name="lineWeight">The line weight.</param>
            <param name="glyphs">canonical glyphs representing the text</param>
            <param name="basicTrafo">basic transformation (size/slant)</param>
            <param name="charSpacingFactor">char spacing factor</param>
        </member>
        <member name="M:WW.Cad.Model.Text.GlyphBasedLayoutedText.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)">
            <summary>
            Draw the text to the drawer.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="transformation">transformation used for drawing</param>
            <param name="extrusion">extrusion in z direction, usually <c>0.0</c></param>
            <returns>
            advance including <para>transformation</para>
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.Text">
            <summary>
            Get the text represented by this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.Font">
            <summary>
            Get the font used to draw this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.Color">
            <summary>
            Get the color of the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.LineWeight">
            <summary>
            Gets the line weight.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.CanonicalPath">
            <summary>
            Get the canonical path used to draw this text.
            </summary>
            <remarks>
            See <see cref="P:WW.Cad.Model.Text.ILayoutedText.Filled"/> to decide whether the path is drawn filled.
            The canonical path is undistorted with size 1. Use the <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>
            to transform the path into the correct size and proportions. 
            Because even this path may have to be constructed, it's faster to use the <see cref="M:WW.Cad.Model.Text.GlyphBasedLayoutedText.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/> method
            if all what is wanted is to draw the path.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.TransformedPath">
            <summary>
            Get the path representing the text if draw unrotated at point <c>(0,0)</c>.
            </summary>
            <remarks>
            Note that this includes a transformation of the canonical path, so usually it is better
            to use <see cref="P:WW.Cad.Model.Text.ILayoutedText.CanonicalPath"/> and include the <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/> in
            the transformations needed to place the text at the correct position. 
            Even better is to use the <see cref="M:WW.Cad.Model.Text.GlyphBasedLayoutedText.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/> method.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.BasicTransformation">
            <summary>
            Get the transformation used to transform the canonical path into the correct size and proportions.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.Filled">
            <summary>
            Get whether the path of this text has to be drawn filled.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.CanonicalAdvance">
            <summary>
            Get the canonical advance of this path.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.GlyphBasedLayoutedText.Advance">
            <summary>
            Get the advance used after this text is drawn.
            This includes the basic transformation (<see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.SurfacePathDrawer">
            <summary>
            Path drawer for wireframe context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.SurfacePathDrawer.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">entity which is drawn</param>
            <param name="context">draw context</param>
            <param name="graphicsFactory">The graphics factory.</param>
        </member>
        <member name="T:WW.Cad.Model.Objects.Internal.DxfRowGeometry">
            <summary>
            Represents a table row's geometric data.
            </summary>
            <remarks>
            <para>
            This class is used internally only, this class is not intended to be created/modified by the user.
            </para>
            <para>
            This class was introduced in AutoCAD 2008.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.Internal.DxfRowGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.Internal.DxfRowGeometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Internal.DxfRowGeometry.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.Internal.DxfRowGeometry"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.Objects.Internal.DxfRowGeometry.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Objects.Internal.DxfCellGeometry})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.Internal.DxfRowGeometry"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfTableGeometry">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Entities.DxfTable"/> geometry.
            </summary>
            <remarks>
            <para>
            This class is used internally only, this class is not intended to be created/modified by the user.
            </para>
            <para>
            This class was introduced in AutoCAD 2008.
            </para>
            <para>
            CadLib supports reading/writing table geometry as is, but does not create it for new tables.
            The table geometry is optional and does not need to be present in a DXF/DWG file.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableGeometry.ColumnCount">
            <summary>
            Gets or sets the column count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableGeometry.RowGeometries">
            <summary>
            Gets the row geometries.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.FileDependencyCollection">
            <summary>
            Represents a file dependency collection (for e.g image, font and external reference files).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.FileDependencyCollection.Add(System.String,System.String,System.Boolean,WW.Cad.Model.DxfHandledObject)">
            <summary>
            Adds the specified feature name/file name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.FileDependencyCollection.Remove(System.String,System.String,WW.Cad.Model.DxfHandledObject)">
            <summary>
            Removes the specified feature name/file name.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.LineSpacingStyle">
            <summary>
            Line spacing style for e.g. <see cref="T:WW.Cad.Model.Entities.DxfMText">Multiline text</see> and <see cref="T:WW.Cad.Model.Entities.DxfDimension"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LineSpacingStyle.None">
            <summary>None.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LineSpacingStyle.AtLeast">
            <summary>Taller characters will override.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LineSpacingStyle.Exact">
            <summary>Taller characters will not override.</summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.ImageDisplayFlags">
            <summary>
            Image display flags as used by <see cref="T:WW.Cad.Model.Entities.DxfRasterImage"/>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfRasterImage"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.ImageDisplayFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ImageDisplayFlags.ShowImage">
            <summary>
            Show image.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ImageDisplayFlags.ShowUnalignedImage">
            <summary>
            Show image when not aligned with screen.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ImageDisplayFlags.UseClippingBoundary">
            <summary>
            Use clipping boundary.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ImageDisplayFlags.TransparencyIsOn">
            <summary>
            Transparency is on.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.ClipMode">
            <summary>
            Represents the clip mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ClipMode.Outside">
            <summary>
            Clip the outside.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ClipMode.Inside">
            <summary>
            Clip the inside.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData">
            <summary>
            Extended data (xdata) is arbitrary data that can be associated with an <see cref="T:WW.Cad.Model.Entities.DxfEntity">entity</see>.
            The extended data has an <see cref="P:WW.Cad.Model.DxfExtendedData.AppId"/> to identify which application wrote the data.
            </summary>
            <remarks>
            Note that the application name used in the extended data must be present in
            <see cref="P:WW.Cad.Model.DxfModel.AppIds">DxfModel.AppIds</see> or the written DXF file won't be valid!
            </remarks>
            <example>
            An example of how to write/read a DXF file containing an extended data.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test {
    public class DxfExtendedDataTest {
        public void TestWriteRead() {
            // Create and write a model with extended data.
            {
                DxfModel model = new DxfModel(DxfVersion.Dxf15);

                // App id must be known before it can be used in extended data.
                DxfAppId appIdPeUrl = new DxfAppId("PE_URL");
                model.AppIds.Add(appIdPeUrl);

                DxfLine line = new DxfLine(new Point2D(1d, 0d), new Point2D(3d, 2d));
                DxfExtendedData extendedData = new DxfExtendedData(appIdPeUrl);
                extendedData.Values.Add(new DxfExtendedData.String("line1.html"));
                extendedData.Values.Add(new DxfExtendedData.String(string.Empty));
                StringBuilder longString = new StringBuilder(2000);
                for (int i = 0; i &lt; 200; i++) {
                    longString.Append("0123456789");
                }
                extendedData.Values.Add(new DxfExtendedData.String(longString.ToString()));
                extendedData.Values.Add(new DxfExtendedData.String("Another string."));
                line.ExtendedDataCollection.Add(extendedData);
                model.Entities.Add(line);
                DxfWriter.Write("ExtendedData Example.dxf", model, false);
                DwgWriter.Write("ExtendedDataTest.dwg", model);
            }

            Console.WriteLine("Read from DXF");

            // Read a model with extended data.
            {
                DxfModel model = DxfReader.Read("ExtendedData Example.dxf");
                DxfAppId appIdPeUrl = model.AppIds["PE_URL"];
                foreach (DxfEntity entity in model.Entities) {
                    DxfExtendedData extendedData = entity.ExtendedDataCollection[appIdPeUrl];
                    if (extendedData != null) {
                        foreach (IExtendedDataValue value in extendedData.Values) {
                            Console.WriteLine(value.ToString());
                        }
                    }
                }
            }

            Console.WriteLine("Read from DWG");

            // Read a model with extended data.
            {
                DxfModel model = DwgReader.Read("ExtendedDataTest.dwg");
                DxfAppId appIdPeUrl = model.AppIds["PE_URL"];
                foreach (DxfEntity entity in model.Entities) {
                    DxfExtendedData extendedData = entity.ExtendedDataCollection[appIdPeUrl];
                    if (extendedData != null) {
                        foreach (IExtendedDataValue value in extendedData.Values) {
                            Console.WriteLine(value.ToString());
                        }
                    }
                }
            }
        }
    }
}
</code>
            </example>
            <seealso cref="P:WW.Cad.Model.DxfHandledObject.ExtendedDataCollection">DxfHandledObject.ExtendedDataCollection</seealso>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.#ctor(WW.Cad.Model.Tables.DxfAppId)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData"/> class.
            </summary>
            <remarks>
            The application id used in the extended data must be present in
            <see cref="P:WW.Cad.Model.DxfModel.AppIds">DxfModel.AppIds</see> or the written DXF file is not valid.
            </remarks>
            <param name="appId">The application ID.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.#ctor(WW.Cad.Model.Tables.DxfAppId,WW.Cad.Model.DxfExtendedData.ValueCollection)">
            <summary>
            Internal constructor.
            </summary>
            <param name="appId">application id</param>
            <param name="values">value collection</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns>
            deep copy or <code>null</code> depending on <paramref name="cloneContext"/>
            </returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.AppId">
            <summary>
            Gets or sets the application id.
            </summary>
            <remarks>
            The application id used in the extended data must be present in
            <see cref="P:WW.Cad.Model.DxfModel.AppIds">DxfModel.AppIds</see> or the written DXF file is not valid.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.Values">
            <summary>
            Gets the values.
            Note that an <see cref="T:DxfExtendedData"/> instance can contain nested child 
            <see cref="T:DxfExtendedData"/> instances.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.String">
            <summary>
            A string value for <see cref="T:DxfExtendedData"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.IExtendedDataValue">
            <summary>
            Empty interface definition to identify extended data values.
            See also <see cref="T:DxfExtendedData"/>.
            </summary>
            <seealso cref="T:DxfExtendedData"/>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValue.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.IExtendedDataValue.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.String"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.String"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.String.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.String.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.String.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.String.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.Bracket">
            <summary>
            A opening/closing bracket value for <see cref="T:DxfExtendedData"/>.
            </summary>
            <remarks>
            Normally CadLib interprets brackets and creates nested <see cref="T:WW.Cad.Model.DxfExtendedData.ValueCollection"/> instances
            for the data enclosed in the brackets.
            However for files for which the brackets don't match correctly, this cannot be done, and CadLib
            reverts to representing the brackets as is.
            When creating extended data programmatically, use of <see cref="T:WW.Cad.Model.DxfExtendedData.ValueCollection"/> is preferred as it
            ensures correctly matched brackets.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Bracket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Bracket"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Bracket.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Bracket"/> class.
            </summary>
            <param name="isClosingBracket">
            Whether this instance represents a closing bracket (otherwise it represents an opening bracket).
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Bracket.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Bracket.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Bracket.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.Bracket.IsClosingBracket">
            <summary>
            Gets or sets Whether this instance represents a closing bracket (otherwise it represents an opening bracket).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.LayerReference">
            <summary>
            A layer name value for <see cref="T:DxfExtendedData"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.LayerReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.LayerReference"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.LayerReference.#ctor(WW.Cad.Model.Tables.DxfLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.LayerReference"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.LayerReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.LayerReference.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.LayerReference.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.LayerReference.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.BinaryData">
            <summary>
            A binary data value for <see cref="T:DxfExtendedData"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.BinaryData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.BinaryData"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.BinaryData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.BinaryData"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.BinaryData.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.BinaryData.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.BinaryData.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.BinaryData.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.DatabaseHandle">
            <summary>
            A database handle value for <see cref="T:DxfExtendedData"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.DatabaseHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.DatabaseHandle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.DatabaseHandle.#ctor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.DatabaseHandle"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.DatabaseHandle.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.DatabaseHandle.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.DatabaseHandle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.DatabaseHandle.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.PointOrVector">
            <summary>
            Three <see cref="T:double"/> values that can be used as a point or vector.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.PointOrVector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.PointOrVector"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.PointOrVector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.PointOrVector"/> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.PointOrVector.GetPoint3D">
            <summary>
            Creates a <see cref="T:Point3D"/> instance from this object's coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.PointOrVector.GetVector3D">
            <summary>
            Creates a <see cref="T:Vector3D"/> instance from this object's coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.PointOrVector.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.PointOrVector.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.PointOrVector.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.PointOrVector.X">
            <summary>
            Gets or sets the X-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.PointOrVector.Y">
            <summary>
            Gets or sets the Y-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.PointOrVector.Z">
            <summary>
            Gets or sets the Z-coordinate.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.WorldSpacePosition">
            <summary>
            A world space position object.
            Its coordinates are scaled, rotated, and mirrored with the entity of which
            the extended data is part.
            Also the point is stretched when the STRETCH command is applied to the entity
            and the point lies within the select window.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.WorldSpacePosition"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.WorldSpacePosition"/> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.GetPoint3D">
            <summary>
            Creates a <see cref="T:Point3D"/> instance from this object's coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.GetVector3D">
            <summary>
            Creates a <see cref="T:Vector3D"/> instance from this object's coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.X">
            <summary>
            Gets or sets the X-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.Y">
            <summary>
            Gets or sets the Y-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldSpacePosition.Z">
            <summary>
            Gets or sets the Z-coordinate.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement">
            <summary>
            A world space position object.
            Its coordinates are scaled, rotated, and mirrored with the entity of which
            the extended data is part.
            The point is NOT moved or stretched when the STRETCH command is applied to the entity
            and the point lies within the select window.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement"/> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.GetPoint3D">
            <summary>
            Creates a <see cref="T:Point3D"/> instance from this object's coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.GetVector3D">
            <summary>
            Creates a <see cref="T:Vector3D"/> instance from this object's coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.X">
            <summary>
            Gets or sets the X-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.Y">
            <summary>
            Gets or sets the Y-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldSpaceDisplacement.Z">
            <summary>
            Gets or sets the Z-coordinate.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.WorldDirection">
            <summary>
            A 3D point that is rotated and mirrored with the entity of which the extended data is part
            (but is not moved, scaled, or stretched).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldDirection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.WorldDirection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldDirection.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.WorldDirection"/> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldDirection.GetPoint3D">
            <summary>
            Creates a <see cref="T:Point3D"/> instance from this object's coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldDirection.GetVector3D">
            <summary>
            Creates a <see cref="T:Vector3D"/> instance from this object's coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldDirection.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldDirection.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.WorldDirection.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldDirection.X">
            <summary>
            Gets or sets the X-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldDirection.Y">
            <summary>
            Gets or sets the Y-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.WorldDirection.Z">
            <summary>
            Gets or sets the Z-coordinate.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.Double">
            <summary>
            A <see cref="T:double"/> value for <see cref="T:DxfExtendedData"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Double.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Double"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Double.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Double"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Double.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Double.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Double.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.Double.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.Distance">
            <summary>
            A distance value for <see cref="T:DxfExtendedData"/>.
            The value is scaled with the parent entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Distance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Distance"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Distance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Distance"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Distance.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Distance.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.ScaleFactor">
            <summary>
            A scale factor value for <see cref="T:DxfExtendedData"/>.
            The scale factor is scaled along with the parent entity.
            The difference between a distance and a scale factor is application-defined.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ScaleFactor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.ScaleFactor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ScaleFactor.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.ScaleFactor"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ScaleFactor.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ScaleFactor.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.Int16">
            <summary>
            A <see cref="T:short"/> value for <see cref="T:DxfExtendedData"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int16.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Int16"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int16.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Int16"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int16.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int16.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int16.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.Int16.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.Int32">
            <summary>
            A <see cref="T:int"/> value for <see cref="T:DxfExtendedData"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Int32"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.Int32"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int32.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int32.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.Int32.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.Int32.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.ValueCollection">
            <summary>
            A value collection that contains <see cref="T:IExtendedDataValue"/> instances.
            The collection itself is also a <see cref="T:IExtendedDataValue"/> instance, so
            the collection may be nested.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.ValueCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ValueCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.IExtendedDataValue})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.ValueCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ValueCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.ValueCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ValueCollection.Accept(WW.Cad.Model.IExtendedDataValueVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.ValueCollection.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of the value.
            </summary>
            <param name="cloneContext">cloneContext for resolve of already available objects</param>
            <returns>clone</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to an DxfAppId is missing
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedData.RecursiveEnumerator">
            <summary>
            Represents an enumerator that enumerates over extended data values,
            and recurses into child value collections (see <see cref="T:WW.Cad.Model.DxfExtendedData.ValueCollection"/>) when encountered.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.RecursiveEnumerator.#ctor(System.Collections.Generic.IEnumerator{WW.Cad.Model.IExtendedDataValue})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfExtendedData.RecursiveEnumerator"/> class.
            </summary>
            <param name="rootEnumerator">The root enumerator.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.RecursiveEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.RecursiveEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedData.RecursiveEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.RecursiveEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:WW.Cad.Model.DxfExtendedData.RecursiveEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCellContent">
            <summary>
            Represents content for a <see cref="T:WW.Cad.Model.Entities.DxfTableCell"/>.
            </summary>
            <remarks>
            This class was introduced in AutoCAD 2008.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor(WW.Cad.Model.Tables.DxfBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor(WW.Cad.Model.DxfValueFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor(WW.Cad.Model.DxfValueFormat,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor(WW.Cad.Model.DxfValueFormat,WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor(WW.Cad.Model.DxfValueFormat,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor(WW.Cad.Model.DxfValueFormat,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor(WW.Cad.Model.DxfValueFormat,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.#ctor(WW.Cad.Model.DxfValueFormat,WW.Cad.Model.DxfHandledObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.ScaleMe(WW.Cad.Model.Objects.DxfTableCellStyle,System.Double,WW.Actions.CommandGroup)">
            <summary>
            Scales me.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContent.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellContent.ContentType">
            <summary>
            Gets or sets the type of the content.
            The default value is <see cref="F:WW.Cad.Model.Entities.TableCellContentType.Value"/>
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellContent.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellContent.ValueObject">
            <summary>
            Gets or sets the value object. 
            This is either an <see cref="T:WW.Cad.Model.Tables.DxfBlock">block</see> or <see cref="T:WW.Cad.Model.Objects.DxfField">field</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellContent.Format">
            <summary>
            Gets the content format.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellContent.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTable">
            <summary>
            The table entity with which tabular data can be represented.
            </summary>
            <remarks>
            <para>
            By default when adding rows, the first row's <see cref="P:WW.Cad.Model.Entities.DxfTableRow.CellStyle"/> gets assigned the 
            <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.TitleCellStyle"/>,
            the second row gets assigned <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.HeaderCellStyle"/> and
            subsequence rows get assigned the <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.DataCellStyle"/>.
            The row/cell/cell content cell style instance may be changed, but must be present in <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.CellStyles"/>.
            </para>
            <para>
            The easiest way to setup a table is to create a <c>DxfTable</c> instance,
            and set the <see cref="P:WW.Cad.Model.Entities.DxfTable.RowCount"/> and <see cref="P:WW.Cad.Model.Entities.DxfTable.ColumnCount"/>. 
            This will populate the <see cref="P:WW.Cad.Model.Entities.DxfTable.Rows"/> and <see cref="P:WW.Cad.Model.Entities.DxfTable.Columns"/> and create <see cref="T:WW.Cad.Model.Entities.DxfTableCell"/> instances.
            Each cell can be accessed through the <see cref="P:WW.Cad.Model.Entities.DxfTableRow.Cells"/> property.
            Too add content to a cell, create a <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> instance and add it to <see cref="P:WW.Cad.Model.Entities.DxfTableCell.Contents"/>.
            The contents collection also has Add overloads to facilitate adding contents.
            </para>
            <para>
            The table entity has a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> containing the visual representation of the table data.
            Whenever a change is made to the table, method <see cref="M:WW.Cad.Model.Entities.DxfTable.GenerateBlock"/> should be called to regenerate this block.
            When the block is not yet generated, it is generated automatically when the <see cref="T:WW.Cad.Model.DxfModel"/> is written to file.
            </para>
            <para>
            The table entity was introduced in AutoCAD 2005.
            </para>
            </remarks>
            <example>
            This example shows how create a table, merge cells and create a custom table style.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class TableExample {
        public void CreateTableExample() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTableStyle tableStyle = new DxfTableStyle("Double bordered");
            tableStyle.DataCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.DataCellStyle.SetAllBordersColor(Colors.Green);
            tableStyle.TitleCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.ContentColor = Colors.Blue;
            model.TableStyles.Add(tableStyle);

            DxfTable table = new DxfTable(tableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 3;

            foreach (DxfTableColumn column in table.Columns) {
                column.Width = 8d;
            }

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");
            table.Rows[1].Cells[0].Contents.Add(new DxfValueFormat.String(), "Column 1 Header");
            table.Rows[1].Cells[1].Contents.Add(new DxfValueFormat.String(), "Column 2 Header");
            table.Rows[1].Cells[2].Contents.Add(new DxfValueFormat.String(), "Column 3 Header");
            table.Rows[2].Cells[0].Contents.Add(new DxfValueFormat.String(), "Text");
            table.Rows[2].Cells[0].CellStyleOverrides.ContentColor = Colors.Red;
            table.Rows[4].Cells[0].Contents.Add(DxfValueFormat.Date.CreateRegionalLongDateTime(), DateTime.Now);
            table.Rows[5].Cells[0].Contents.Add(new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal), 123.45d);

            // Merge the title row cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(0, 0, 0, 2));
            // This demonstrates a merged cell block of 3 by 2 cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(2, 0, 3, 2));

            model.Entities.Add(table);

            DxfWriter.Write("Table Example.dxf", model);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableCell"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableRow"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableColumn"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableStyle"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableCellStyle"/>
            <seealso cref="T:WW.Cad.Model.DxfValueFormat"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfInsertBase">
            <summary>
            Represents an abstract block reference base class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.#ctor(WW.Cad.Model.Tables.DxfBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.#ctor(WW.Cad.Model.Tables.DxfBlock,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.PrepareForWrite(WW.Cad.IO.WriteContext)">
            <summary>
            Prepares for write (called after all objects received a handle).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified insert in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.CopyFrom(WW.Cad.Model.Entities.DxfInsertBase,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified insert in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsertBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsertBase.Block">
            <summary>
            Gets or sets the block.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsertBase.Attributes">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.DxfAttribute">attributes</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsertBase.InsertionPoint">
            <summary>
            Insertion point (in OCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsertBase.Rotation">
            <summary>
            Gets or sets the rotation angle (in radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsertBase.ScaleFactor">
            <summary>
            Gets or sets the scale factor.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsertBase.ZAxis">
            <summary>
            Gets or sets the z-axis of the OCS (object coordinate system).
            The default value is (0, 0, 1).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.#ctor(WW.Cad.Model.Objects.DxfTableStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTable"/> class.
            </summary>
            <param name="tableStyle">
            The table style.
            The table style must be part of <see cref="P:WW.Cad.Model.DxfModel.TableStyles"/>.
            The default table style is <see cref="P:WW.Cad.Model.DxfModel.DefaultTableStyle"/>.
            </param>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTable.TableStyle"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTable"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GenerateBlock">
            <summary>
            Generates the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that contains the visual representation
            of the 
            </summary>
            <remarks>
            <para>
            If a block is not present yet, an <see cref="F:WW.Cad.Model.BlockFlags.Anonymous">anonymous</see> 
            <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> is created and added to the model to which the table belongs.
            If a block was already present it is cleared and refilled with new entities.
            </para>
            <para>
            When writing a DXF file the block is automatically generated if it was
            not present yet.
            </para>
            <para>
            Call this method only if the table is part of a <see cref="T:WW.Cad.Model.DxfModel"/>.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GetCellStyle(System.Int32,System.Int32)">
            <summary>
            Gets the cell style (not the cell style overrides) for specified row and column index.
            Use value -1 to not specify a specific row/column.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GetCellContent(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the cell content for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GetTextHeight(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the text height for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GetTextStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the text style for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GetContentColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the content color for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GetAutoScale(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the auto scale setting for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GetCellAlignment(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the cell alignment for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.GetValueFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the value format for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <remarks>
            If overridden, subclass must call base method.
            </remarks>
            <param name="from">source object</param>
            <param name="cloneContext">the clone context</param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.CreateRoundTripPre2007Data(WW.Cad.IO.WriteContext)">
            <summary>
            Only useful for AutoCAD 2005/2006.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawLines(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}},System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}})">
            <summary>
            Draws the horizontal lines, given the specified borders for all the columns of a row.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawDoubleHorizontalLinesTop(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}},System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}})">
            <summary>
            The top horizontal line of a double line is interrupted by connecting vertical double lines of the
            cells above (if they are there).
            The left and right coordinates are affected by whether
            the connecting vertical borders are double lines or not.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawDoubleHorizontalLinesBottom(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}},System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}})">
            <summary>
            The bottom horizontal line of a double line is interrupted by connecting vertical double lines of the
            cells below (if they are there).
            The left and right coordinates are affected by whether
            the connecting vertical borders are double lines or not.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawSingleHorizontalLines(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}},System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}})">
            <summary>
            Draws single horizontal cell borders.
            The left and right coordinates are affected by whether
            the connecting vertical borders are double lines or not.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawDoubleVerticalLinesLeft(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}},System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}})">
            <summary>
            The left vertical line of a double line is interrupted by connecting horizontal double lines of the
            cells to the left (if they are there).
            The top and bottom coordinates are affected by whether
            the connecting horizontal borders are double lines or not.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawDoubleVerticalLinesRight(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}},System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}})">
            <summary>
            The bottom horizontal line of a double line is interrupted by connecting vertical double lines of the
            cells below (if they are there).
            The left and right coordinates are affected by whether
            the connecting vertical borders are double lines or not.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawSingleVerticalLines(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}},System.Collections.Generic.List{System.Collections.Generic.List{WW.Cad.Model.Objects.DxfTableBorder}})">
            <summary>
            Draws single vertical cell borders.
            The top and bottom coordinates are affected by whether
            the connecting horizontal borders are double lines or not.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable.DrawInternal(WW.Cad.Model.Entities.DxfInsert.IDrawHandler)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.HorizontalDirection">
            <summary>
            Gets or sets the horizontal direction.
            The default value is the (1, 0, 0) vector.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.Rows">
            <summary>
            Gets the rows.
            </summary>
            <remarks>
            By default when adding rows, the first row's <see cref="P:WW.Cad.Model.Entities.DxfTableRow.CellStyle"/> gets assigned the 
            <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.TitleCellStyle"/>,
            the second row gets assigned <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.HeaderCellStyle"/> and
            subsequence rows get assigned the <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.DataCellStyle"/>.
            The row/cell/cell content cell style instance may be changed, but must be present in <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.CellStyles"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.RowCount">
            <summary>
            Gets or sets the row count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.ColumnCount">
            <summary>
            Gets or sets the column count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.TableStyle">
            <summary>
            Gets or sets the table style.
            </summary>
            <remarks>
            The table style contains a number of cell styles, of which 
            the title, header row and data cell styles always exist.
            These cell styles may be referenced by table <see cref="P:WW.Cad.Model.Entities.DxfTableRow.CellStyle"/>, 
            <see cref="P:WW.Cad.Model.Entities.DxfTableColumn.CellStyle"/> and <see cref="P:WW.Cad.Model.Entities.DxfTableCell.CellStyle"/>.
            When setting the table style, also the row/column/cell cell styles must be replaced.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.BreakData">
            <summary>
            Gets the break data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.CellStyleOverrides">
            <summary>
            Gets the cell style overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.MergedCellRanges">
            <summary>
            Gets the merged cell ranges.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.FlowDirection">
            <summary>
            Gets or sets the flow direction override from the value defined by the <see cref="P:WW.Cad.Model.Entities.DxfTable.TableStyle"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.Content">
            <summary>
            Gets or sets the content (contains the AutoCAD 2008 and later data).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable.Table2005">
            <summary>
            Gets or sets the AutoCAD 2005 table data (until AutoCAD 2008, when it was replaced by <see cref="T:WW.Cad.Model.Objects.DxfTableContent"/>).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.BorderType">
            <summary>
            The border type for use in tables.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTable2005"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableStyle"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableBorder"/>
        </member>
        <member name="F:WW.Cad.Model.BorderType.Single">
            <summary>
            Represents a single border line.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.BorderType.Double">
            <summary>
            Represents a double border line.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationGrip">
            <summary>
            Represents the dynamic block rotation grip.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip">
            <summary>
            Base class for all types of dynamic block grip points.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.Position">
            <summary>
            Gets or sets the insert position of the grip point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.GripExpression1">
            <summary>
            Gets or sets the 1st grip expression id.
            </summary>
            <remarks>
            Grip point via Expression connected with Parameter.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.GripExpression2">
            <summary>
            Gets or sets the 2nd grip expression id.
            </summary>
            <remarks>
            Grip point via Expression connected with Parameter.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.CyclingFlag">
            <summary>
            Gets or sets the cycling flag. Default value is false.
            </summary>
            <remarks>
            This flag controls visibility of grip point. Grip point will not be
            visible if flag is false.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.CyclingWeight">
            <summary>
            Gets or sets the cycling weight. Default value is 0.
            </summary>
            <remarks>
            Control the order of Cycling during selection.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationGrip.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarGrip">
            <summary>
            Represents the dynamic block polar grip.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarGrip.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction">
            <summary>
            Represents the dynamic block base point action.
            </summary>
            <remarks>
            Base class for DxfBlockRotateAction and DxfBlockScaleAction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.BasePoint">
            <summary>
            Gets or sets the base point.
            </summary>
            <remarks>
            Used only with Independent = true.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.Offset">
            <summary>
            Gets or sets the offset from Parameter base point.
            </summary>
            <remarks>
            Used only with Independent = false.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.IndependentFlag">
            <summary>
            Gets or sets the independent flag. Default value is false.
            </summary>
            <remarks>
            Specify if the base point of Action is the base point of the linked Parameter (= false).
             Or base point is independent point.
            
            Linked DXf entities will be rotated by some Angle around the base point of 
            linked Parameter with some offset or around independent based point.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.Connections">
            <summary>
            Gets or sets the array of connections.
            Links to UpdateX, UpdateY of some Parameter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfEntitySortWrapper">
            <summary>
            Represents an entity with a sort handle, used by the <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/>.
            </summary>
            <remarks>
            When drawing according to a <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/>, entities are sorted by their handle.
            In case a sort handle is defined for an entity, then that sort handle is used for sorting,
            otherwise the entity's own handle is used for sorting.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfEntitySortWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfEntitySortWrapper"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfEntitySortWrapper.#ctor(WW.Cad.Model.Entities.DxfEntity,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfEntitySortWrapper"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfEntitySortWrapper.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Objects.DxfEntitySortWrapper)">
            <summary>
            Copies the contents from specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfEntitySortWrapper.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfEntitySortWrapper.CompareTo(WW.Cad.Model.Objects.DxfEntitySortWrapper)">
            <summary>
            Compares to specified other object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfEntitySortWrapper.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfEntitySortWrapper.SortHandle">
            <summary>
            Gets or sets the sort handle which is used for sorting the entities instead of the
            entity's handle. This sort handle may or may not point to an entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataTable">
            <summary>
            Represents a general purpose table with columns containing text, numbers or object references.
            Each column has a <see cref="P:WW.Cad.Model.Objects.DxfDataColumn.CellType">cell type</see>, 
            and <see cref="P:WW.Cad.Model.Objects.DxfDataColumn.Cells">cells</see> of that cell type.
            </summary>
            <remarks>
            Set the <see cref="P:WW.Cad.Model.Objects.DxfDataTable.ColumnCount"/> and <see cref="P:WW.Cad.Model.Objects.DxfDataTable.RowCount"/> to set the dimensions of the table.
            </remarks>
            <example>
            The example below shows how to create a data table and set cell values.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class DataTableExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            DxfCircle circle = new DxfCircle(EntityColors.Red, Point2D.Zero, 2d);
            model.Entities.Add(circle);

            DxfXRecord xRecord = new DxfXRecord();
            xRecord.Values.Add(1, "A string");

            // Create a data table.
            DxfDataTable dataTable = new DxfDataTable();
            dataTable.Name = "My table";
            dataTable.ColumnCount = 2;
            dataTable.RowCount = 1;

            dataTable.Columns[0].CellType = DataCellType.String;
            dataTable.Columns[0].Name = "Name";
            dataTable.Columns[0].Cells[0].Value = new DxfDataCellValue.String("XRecord reference");

            dataTable.Columns[1].Name = "Object";
            dataTable.Columns[1].CellType = DataCellType.HardOwnerId;
            dataTable.Columns[1].Cells[0].Value = new DxfDataCellValue.HardOwnerId(xRecord);
            xRecord.SetOwnerObjectSoftReference(dataTable);

            // Store the data table in the circle's extension dictionary.
            circle.ExtensionDictionary = new DxfDictionary();
            circle.ExtensionDictionary.Entries.Add(
                new DxfDictionaryEntry("My table", dataTable)
            );

            DwgWriter.Write("DataTable example.dwg", model);
            DxfWriter.Write("DataTable example.dxf", model);
        }
    }
}
  </code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataTable"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataTable.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataTable.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataTable.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataTable.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataTable.GetClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the class (creates one if not present).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataTable.Columns">
            <summary>
            Gets the columns.
            Columns can be added to this collection directly, 
            or they can be added implicitly by setting the <see cref="P:WW.Cad.Model.Objects.DxfDataTable.ColumnCount"/>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfDataTable.ColumnCount"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataTable.ColumnCount">
            <summary>
            Gets or sets the column count.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfDataTable.Columns"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataTable.RowCount">
            <summary>
            Gets or sets the row count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataTable.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataTable.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataTable.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataTable.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.EntityColor">
            <summary>
            Represents an <see cref="T:WW.Cad.Model.Entities.DxfEntity">entity</see> color.
            An entity color has a <see cref="P:WW.Cad.Model.Entities.EntityColor.ColorType">color type</see> and optional color value (index, RGB).
            See also <see cref="T:WW.Cad.Model.Entities.EntityColors"/> for a number of standard colors.
            </summary>
            <remarks>
            Use one of the following to get an entity color:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:WW.Cad.Model.Entities.EntityColor.ByLayer"/>, <see cref="F:WW.Cad.Model.Entities.EntityColor.ByBlock"/> or <see cref="F:WW.Cad.Model.Entities.EntityColor.None"/>.
            </description>
            </item>
            <item>
            <description>
            Create an ACI color from a color index value. ACI stands for AutoCAD Color Index.
            See method <see cref="M:WW.Cad.Model.Entities.EntityColor.CreateFromColorIndex(WW.Cad.Model.ColorType,System.Int16)"/>.
            A number of often used ACI colors can be found in class <see cref="T:WW.Cad.Model.Entities.EntityColors"/>.
            </description>
            </item>
            <item>
            <description>
            Create an RGB color using method <see cref="M:WW.Cad.Model.Entities.EntityColor.CreateFromRgb(System.Int32)"/> or one of its overloads.
            </description>
            </item>
            </list>
            </remarks>
            <example>
            Below is an example of how to create entities, assign a color to them, 
            and extract the ARGB color values.
            <code lang="cs">
using System;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class EntityColorExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            // The "by layer" color depends on the layer color the entity is on (default is the ZERO layer).
            model.Entities.Add(new DxfLine(EntityColors.ByLayer, new Point2D(0, 0), new Point2D(2, 0)));
            // This is one of the ACI colors. ACI stands for AutoCAD Color Index
            model.Entities.Add(new DxfLine(EntityColors.Green, new Point2D(0, 1), new Point2D(2, 1)));
            // This is an RGB color.
            model.Entities.Add(new DxfLine(EntityColor.CreateFromRgb(0xff, 0xa0, 0xa0), new Point2D(0, 2), new Point2D(2, 2)));

            foreach (DxfEntity entity in model.Entities) {
                // To get the ARGB value of a color, a specific color set must be provided which
                // is used to lookup ACI colors (ACI stands for AutoCAD Color Index).
                // There are several types of colors, of which ACI colors is one.
                //
                // For more details see types:
                // WW.Cad.Model.Color,
                // WW.Cad.Model.Entities.EntityColor,
                // WW.Cad.Model.ColorType
                int argb = entity.Color.ToArgb(DxfIndexedColorSet.AcadClassicIndexedColors);
                Console.WriteLine("Argb: {0}", argb);
            }
        }
    }
}
    </code>
            </example>
            <seealso cref="P:WW.Cad.Model.Entities.EntityColor.ColorType"/>
            <seealso cref="T:WW.Cad.Model.Entities.EntityColors"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColor.ByLayer">
            <summary>
            Represents the by layer color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColor.ByBlock">
            <summary>
            Represents the by block color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColor.None">
            <summary>
            Represents no color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.CreateFromColorIndex(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.CreateFromColorIndex(WW.Cad.Model.ColorType,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.CreateFromRgb(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.CreateFromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.CreateFromRgb(WW.Cad.Model.ColorType,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.CreateFromRgb(WW.Cad.Model.ColorType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.CreateFrom(WW.Drawing.ArgbColor)">
            <summary>
            Creates a color from a <see cref="T:WW.Drawing.ArgbColor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.CreateFrom(WW.Cad.Model.Color)">
            <summary>
            Creates a new entity color from specified color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToSystemDrawingColor">
            <summary>
            Converts this color to a <see cref="T:System.Drawing.Color"/>.
            For colors BYLAYER and BYBLOCK the color <see cref="P:System.Drawing.Color.Black"/> is returned.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToArgbColor(WW.Cad.Model.DxfIndexedColorSet)">
            <summary>
            Converts this color to a <see cref="T:WW.Drawing.ArgbColor"/>.
            </summary>
            <param name="indexedColors">Indexed color mapping.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToArgbColor">
            <summary>
            Converts this color to a <see cref="T:WW.Drawing.ArgbColor"/>.
            </summary>
            <remarks>
            Obsolete: there is no fix indexed color mapping, use
            <see cref="M:WW.Cad.Model.Entities.EntityColor.ToArgbColor(WW.Cad.Model.DxfIndexedColorSet)"/>
            instead.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToSystemDrawingColor(WW.Cad.Model.DxfIndexedColorSet,System.Byte)">
            <summary>
            Converts this color with specified alpha value to a <see cref="T:System.Drawing.Color"/>.
            For colors BYLAYER and BYBLOCK the color <see cref="P:System.Drawing.Color.Black"/> is returned, 
            with specified alpha value applied to it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToSystemDrawingColor(System.Byte)">
            <summary>
            Converts this color with specified alpha value to a <see cref="T:System.Drawing.Color"/>.
            For colors BYLAYER and BYBLOCK the color <see cref="P:System.Drawing.Color.Black"/> is returned, 
            with specified alpha value applied to it.
            </summary>
            <remarks>
            Obsolete: there is no fix indexed color mapping, use
            <see cref="M:WW.Cad.Model.Entities.EntityColor.ToSystemDrawingColor(WW.Cad.Model.DxfIndexedColorSet,System.Byte)"/>
            instead.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToArgb(WW.Cad.Model.DxfIndexedColorSet)">
            <summary>
            Converts this color to an Argb value (A = 255).
            For colors BYLAYER and BYBLOCK the value 0xff000000 is returned (represents black).
            </summary>
            <param name="indexedColors">Indexed color mapping.</param>
            <example>
            Below is an example of how to create entities, assign a color to them, and extract the RGB color value.
            <code lang="cs">
using System;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class EntityColorExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            // The "by layer" color depends on the layer color the entity is on (default is the ZERO layer).
            model.Entities.Add(new DxfLine(EntityColors.ByLayer, new Point2D(0, 0), new Point2D(2, 0)));
            // This is one of the ACI colors. ACI stands for AutoCAD Color Index
            model.Entities.Add(new DxfLine(EntityColors.Green, new Point2D(0, 1), new Point2D(2, 1)));
            // This is an RGB color.
            model.Entities.Add(new DxfLine(EntityColor.CreateFromRgb(0xff, 0xa0, 0xa0), new Point2D(0, 2), new Point2D(2, 2)));

            foreach (DxfEntity entity in model.Entities) {
                // To get the ARGB value of a color, a specific color set must be provided which
                // is used to lookup ACI colors (ACI stands for AutoCAD Color Index).
                // There are several types of colors, of which ACI colors is one.
                //
                // For more details see types:
                // WW.Cad.Model.Color,
                // WW.Cad.Model.Entities.EntityColor,
                // WW.Cad.Model.ColorType
                int argb = entity.Color.ToArgb(DxfIndexedColorSet.AcadClassicIndexedColors);
                Console.WriteLine("Argb: {0}", argb);
            }
        }
    }
}
    </code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToArgb">
            <summary>
            Converts this color to an Argb value (A = 255).
            For colors BYLAYER and BYBLOCK the value 0xff000000 is returned (represents black).
            </summary>
            <remarks>
            Obsolete: use <see cref="M:WW.Cad.Model.Entities.EntityColor.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/> instead.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToArgb(WW.Cad.Model.DxfIndexedColorSet,System.Byte)">
            <summary>
            Converts this color with specified alpha value to an Argb value.
            For colors BYLAYER and BYBLOCK the value corresponding to the color black is returned, 
            with specified alpha value applied to it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToArgb(System.Byte)">
            <summary>
            Converts this color with specified alpha value to an Argb value.
            For colors BYLAYER and BYBLOCK the value corresponding to the color black is returned, 
            with specified alpha value applied to it.
            </summary>
            <remarks>
            Obsolete: there is no dix indexed color set, use 
            <see cref="M:WW.Cad.Model.Entities.EntityColor.ToArgb(WW.Cad.Model.DxfIndexedColorSet,System.Byte)"/> instead.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.TryParse(System.String,WW.Cad.Model.Entities.EntityColor@)">
            <summary>
            Tries to parse the specified string.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.op_Equality(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Determines whether to specified <see cref="T:WW.Cad.Model.Entities.EntityColor"/> objects have the same value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.op_Inequality(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Determines whether to specified <see cref="T:WW.Cad.Model.Entities.EntityColor"/> objects have different values.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.Equals(WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.EntityColor.ColorType">
            <summary>
            Gets the type of the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.EntityColor.R">
            <summary>
            Gets the red component in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            To get the effective ARGB value of this color that also works for indexed colors, call method <see cref="M:WW.Cad.Model.Entities.EntityColor.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.EntityColor.G">
            <summary>
            Gets the green component in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            To get the effective ARGB value of this color that also works for indexed colors, call method <see cref="M:WW.Cad.Model.Entities.EntityColor.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.EntityColor.B">
            <summary>
            Gets the blue component in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            To get the effective ARGB value of this color that also works for indexed colors, call method <see cref="M:WW.Cad.Model.Entities.EntityColor.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.EntityColor.ColorIndex">
            <summary>
            Gets the ACI color index in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColorIndex"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.EntityColor.Rgb">
            <summary>
            Gets the RGB value of this color in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            To get the effective ARGB value of this color that also works for indexed colors, call method <see cref="M:WW.Cad.Model.Entities.EntityColor.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/>.
            </summary>
            <example>
            Below is an example of how to create entities, assign a color to them, 
            and extract the ARGB color values.
            <code lang="cs">
using System;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class EntityColorExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            // The "by layer" color depends on the layer color the entity is on (default is the ZERO layer).
            model.Entities.Add(new DxfLine(EntityColors.ByLayer, new Point2D(0, 0), new Point2D(2, 0)));
            // This is one of the ACI colors. ACI stands for AutoCAD Color Index
            model.Entities.Add(new DxfLine(EntityColors.Green, new Point2D(0, 1), new Point2D(2, 1)));
            // This is an RGB color.
            model.Entities.Add(new DxfLine(EntityColor.CreateFromRgb(0xff, 0xa0, 0xa0), new Point2D(0, 2), new Point2D(2, 2)));

            foreach (DxfEntity entity in model.Entities) {
                // To get the ARGB value of a color, a specific color set must be provided which
                // is used to lookup ACI colors (ACI stands for AutoCAD Color Index).
                // There are several types of colors, of which ACI colors is one.
                //
                // For more details see types:
                // WW.Cad.Model.Color,
                // WW.Cad.Model.Entities.EntityColor,
                // WW.Cad.Model.ColorType
                int argb = entity.Color.ToArgb(DxfIndexedColorSet.AcadClassicIndexedColors);
                Console.WriteLine("Argb: {0}", argb);
            }
        }
    }
}
    </code>
            </example>
        </member>
        <member name="T:WW.Cad.Model.Entities.EntityColor.UITypeEditor">
            <summary>
            A UI type editor for the <see cref="T:WW.Cad.Model.Color"/> struct.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.EntityColor.TypeConverter">
            <summary>
            Type converter from <see cref="T:WW.Cad.Model.Entities.EntityColor"/> to <see cref="T:System.String"/> and vice versa.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityColor.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null. </param>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColor.TypeConverter.StandardColors">
            <summary>
            The standard colors.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.DataItem">
            <summary>
            Represents a data item.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.Item">
            <summary>
            Represents a data storage item.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.Item.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.Item.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.Item.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner">
            <summary>
            Wrapper for plot style owner, which replaces the color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner.#ctor(WW.Cad.Model.Entities.IPlotPropertyOwner,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner"/> class.
            </summary>
            <param name="baseOwner">The base owner used for everything but color.</param>
            <param name="replaceColor">Color used as replacement.</param>
            <param name="replaceAlpha">Alpha value used as replacement.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner.GetColor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <returns>The color (with <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> applied).</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner.GetEntityColor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <returns>The entity color.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner.GetAlpha(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner.GetLineType(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> of this entity depending 
            on the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> and <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> context.
            </summary>
            <remarks>
            <seealso cref="T:WW.Cad.Model.Tables.DxfLineType"/>
            </remarks>
            <returns>The line type.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner.GetLineWeight(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the effective line weight of this entity depending 
            on the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> and <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> context.
            </summary>
            <remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/>
            </remarks>
            <returns>The effective line weight in 100th of mm.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideLineWeightPlotPropertyOwner.GetLayer(WW.Cad.Drawing.DrawContext)">
            <summary>
            Get the layer this entity is in, using the given drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatTorus">
            <summary>
            SAT torus entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTorus.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTorus.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTorus.CreateSurfacePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of surface primitive.
            </summary>
            <returns>newly created surface primitive</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatShell">
            <summary>
            SAT shell entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatShell.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatShell.nextShell">
            <summary>Pointer to next shell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatShell.firstSubshell">
            <summary>Pointer to first subshell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatShell.firstFace">
            <summary>Pointer to first face.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatShell.firstWire">
            <summary>Pointer to first wire.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatShell.lump">
            <summary>Pointer to lump containing this shell.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatShell.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatShell.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatShell.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatShell.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.Next">
            <summary>
            Get the next entity of the same type if this entity is a member in a list.
            </summary>
            <remarks>
            Returns <c>null</c> if this entity is not in a list or if it is the last member of the list
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.NextShell">
            <summary>
            Get the next shell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.FirstSubshell">
            <summary>
            Get the first subshell belonging to this shell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.FirstFace">
            <summary>
            Get the first face belonging to this shell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.FirstWire">
            <summary>
            Get the first wire belonging to this shell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.Lump">
            <summary>
            Get the lump to which this shell belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.TopLevelSubshells">
            <summary>
            Get the top level subshells belonging to this shell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.Faces">
            <summary>
            Get the faces belonging to this shell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatShell.Wires">
            <summary>
            Get the wires belonging to this shell.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatParIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatParIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatParIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatParIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatParIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatExactIntCurPrimitive">
            <summary>
            SAT exact_int_cur primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatExactIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatExactIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatExactIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatExactIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatBlendIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatBlendIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatBlendIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatBlendIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatBlendIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatStraightPrimitive">
            <summary>
            Straight line curve primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatStraightPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatStraightPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatStraightPrimitive.ReadBasicDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the basic curve data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatStraightPrimitive.WriteBasicDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the basic curve data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatStraightPrimitive.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatStraightPrimitive.Position">
            <summary>
            Get the start position of the straight line.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatStraightPrimitive.Direction">
            <summary>
            Get the vector from start to end.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTNamedAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTNamedAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTNamedAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTNamedAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealStitchBaseEntityAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealStitchBaseEntityAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealIndividualStitchAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealIndividualStitchAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateStitchBaseAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateStitchBaseAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateStitchAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateStitchAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateStitchAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateStitchAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateAnalyticSolverAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateAnalyticSolverAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateAnalyticSolverAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateAnalyticSolverAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.BindEntity">
            <summary>
            Binder for binding an entity to another one.
            </summary>
            <remarks>
            It is usually called when the entity is completely read from the file.
            </remarks>
            <param name="entity"></param>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.#ctor(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DwgWriter"/> class.
            </summary>
            <param name="stream">
            The stream to which the DWG file is written.
            The stream must support writing and seeking.
            </param>
            <param name="model">The model to write.</param>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.Write">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.WriteDataSections(WW.Cad.IO.KnownClasses)">
            <summary>
            Write all data sections.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.InitSections">
            <summary>
            Puts all sections in the right order and number the sections.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.WriteFileHeaderData(System.IO.MemoryStream)">
            <summary>
            Writes 0x6c bytes of file header data, present at the beginning of the file as part
            of the file header, and at the end of the file.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.WriteSectionsMap">
            <summary>
            Writes the section map (for all data sections).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.WriteDataSectionToMainStream(WW.Cad.IO.Dwg.Dwg2004.LogicalSection,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Cuts the data section into pages, compresses each page and writes each page to the main stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.WriteDataSectionPageToMainStream(WW.Cad.IO.Dwg.Dwg2004.LogicalSection,System.Int32,System.Int32,System.Byte[],System.UInt64,System.Int32,System.Boolean)">
            <summary>
            Writes a data section page with specified page index to main stream.
            </summary>
            <remarks>
            A page must start on a position dividable by 0x20. Padding bytes are filled with random bytes.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.WriteDataPageHeader(System.IO.Stream,WW.Cad.IO.Dwg.Dwg2004.LogicalSection,WW.Cad.IO.Dwg.Dwg2004.DataSectionPage,System.Int32)">
            <summary>
            Writes a data page header (unencoded).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR18.AlignPageStart">
            <summary>
            Each page must be aligned on a <see cref="F:WW.Cad.IO.Dwg.Dwg2004.DwgUtilR18.PageAlignSize"/> boundary.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.DwgAppInfo">
            <summary>
            Represents the application information representing the application that writes a DWG file.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.LogicalSection.Encrypted">
            <summary>
            Gets or sets whether the section is encrypted.
            0 = not encrypted, 1 = encrypted, 2 = unknown.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.LogicalSection.Encoding">
            <summary>
            Gets or sets the encoding (1 = not encoded, 4 = interleaved).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.SurfaceGraphicsCache">
            <summary>
            A cache for surface graphics as created using interface <see cref="T:WW.Cad.Drawing.ISurfaceGraphicsFactory"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.SurfaceGraphicsCache"/> class.
            </summary>
            <param name="areDrawablesUpdateable">if set to <c>true</c> the drawables are updateable.</param>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel)">
            <summary>
            Creates the drawables for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <seealso cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Creates the drawables for specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the drawables for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables"/>.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.AddDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the drawables for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables"/>.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Updates the drawables for specified entity.
            </summary>
            <seealso cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.SurfaceGraphicsCache.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.RemoveDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Removes the drawables for specified entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.GetDrawables(WW.Cad.Drawing.RenderedEntityInfo)">
            <summary>
            Gets the drawables for specified rendered entity info.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.SurfaceGraphicsCache.RemoveEntityDrawablesInfo(WW.Cad.Drawing.SurfaceGraphicsCache.EntityDrawablesInfo)">
            <summary>
            Recursively removes the specified EntityDrawablesInfo instance and all its children from 
            entityToEntityDrawablesInfoList.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.SurfaceGraphicsCache.Config">
            <summary>
            Gets or sets the graphics configuration determining
            various aspects of the rendering process.
            The default value is <see cref="F:WW.Cad.Drawing.GraphicsConfig.WhiteBackgroundCorrectForBackColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.SurfaceGraphicsCache.Drawables">
            <summary>
            Gets the drawables.
            </summary>
            <remarks>
            This contains an hierarchy of drawable objects.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.SurfaceGraphicsCache.AreDrawablesUpdateable">
            <summary>
            Gets a value indicating whether the drawables are updateable.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.SurfaceGraphicsCache.CharTriangulationCache">
            <summary>
            Gets or sets the character triangulation cache.
            </summary>
            <remarks>
            <para>
            Triangulation is a computationally expensive operation, so caching avoids triangulating
            the same character many times.
            </para>
            <para>
            When creating new instances of <see cref="T:WW.Cad.Drawing.SurfaceGraphicsCache"/>, try to reuse an existing character triangulation cache.
            </para>
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.ISurfaceGraphicsFactory">
            <summary>
            Factory interface for creating surface graphics objects.
            </summary>
            <seealso cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.BeginNode(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface)">
            <summary>
            Begins a node.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.EndNode">
            <summary>
            Ends a node.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.SetColor(WW.Drawing.ArgbColor)">
            <summary>
            Set color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreatePoint(WW.Math.Vector4D)">
            <summary>
            Creates a point.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreateSegment(WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates a line segment.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreatePolyline(System.Collections.Generic.IList{WW.Math.Vector4D},System.Boolean)">
            <summary>
            Creates an optionally closed polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreateTriangle(WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D,System.Collections.Generic.IList{System.Boolean})">
            <summary>
            Creates a triangle.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreateQuad(System.Collections.Generic.IList{WW.Math.Vector4D},System.Collections.Generic.IList{System.Boolean})">
            <summary>
            Creates a quad.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreateQuadStrip(System.Collections.Generic.IList{WW.Math.Vector4D},System.Collections.Generic.IList{WW.Math.Vector4D},WW.Math.Vector3D,System.Boolean)">
            <summary>
            Creates a quad strip.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreateQuadStrip(System.Collections.Generic.IList{WW.Math.Vector4D},System.Collections.Generic.IList{WW.Math.Vector4D},System.Collections.Generic.IList{WW.Math.Vector3D},System.Int32,System.Int32)">
            <summary>
            Creates a quad strip.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreatePolygonMesh(WW.Math.Vector4D[0:,0:],System.Boolean,System.Boolean)">
            <summary>
            Creates a polygon mesh.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceGraphicsFactory.CreateTexturedTriangles(System.Byte[],System.Int32,System.Int32,WW.Math.Vector3D,System.Collections.Generic.IList{WW.Math.Geometry.Triangulator2D.Triangle},System.Collections.Generic.IList{WW.Math.Point2D},System.Collections.Generic.IList{WW.Math.Vector4D})">
            <summary>
            Creates textured triangles.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.SurfaceGraphicsCache.EntityDrawablesInfo.HasDrawables">
            <summary>
            Gets a value indicating whether this instance has drawables.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.SurfaceGraphicsCache.EntityDrawablesInfo.Children">
            <summary>
            Gets the children. Need to know children in case a INSERT's block is updated, e.g. entities are removed from it.
            When the INSERT's drawables are updated the EntityDrawablesInfo for removed entities need to be removed as well.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.ISurfaceDrawable">
            <summary>
            An interface for a class that can draw itself onto a <see cref="T:WW.Cad.Drawing.ISurfaceGraphicsFactory"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ISurfaceDrawable.Draw(WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draws this object onto specified graphics factory.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CharPolylines">
            <summary>
            Character polylines cache (drawing the shx characters every time is expensive). 
            Relevant only for SHX text.
            </summary>
            <remarks>
            Currently the cache memory is never freed.
            The character ascent is the ascent defined by the SHX font and the position is (0, 0).
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.CharPolylines.GetPolylines(WW.Cad.Model.Entities.ShxFile,System.Char,WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the triangulation for a specified font family/style and character.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.CharPolylines.Advance">
            <summary>
            The advance to the next character.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.ClippingTransformerChain">
            <summary>
            A chain of clipping transformers which are applied one after the other.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.Push(WW.Cad.Drawing.IClippingTransformer)">
            <summary>
            Add a transformer to the chain.
            </summary>
            <param name="transformer">Transformer to add.</param>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.Pop">
            <summary>
            Remove the transformer added with the last <see cref="M:WW.Cad.Drawing.ClippingTransformerChain.Push(WW.Cad.Drawing.IClippingTransformer)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Cloned instance.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.Transform(WW.Math.Point3D)">
            <summary>
            Transforms and clips given vertex.
            </summary>
            <returns><b>null</b> if point was clipped away.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.Transform(WW.Math.Geometry.Segment3D)">
            <summary>
            Transforms and clips given line segment.
            </summary>
            <returns>Segments after clipping.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.Transform(WW.Math.Geometry.Polyline3D)">
            <summary>
            Transforms and clips points in given polyline.
            </summary>
            <returns>Resulting polyline parts which have more or less points than the input polyline.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.Transform(WW.Math.Geometry.IShape4D)">
            <summary>
            Transforms and clips a generic shape.
            </summary>
            <param name="shape">
            Generic shape to transform. It is expected that this shape is a temporary object, 
            which may be changed by this method.
            </param>
            <returns>Transformed and possibly clipped result shape.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.SetPreTransform(WW.Math.Matrix4D)">
            <summary>
            Applies given transform (pre) before all other transforms.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.TryIsInside(WW.Math.Bounds3D)">
            <summary>
            Check a given volume for its clipping.
            </summary>
            <remarks>
            This method may not be exact, but provides a good means for optimization.
            </remarks>
            <param name="bounds">Volume bounds.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ClippingTransformerChain.IsInside(WW.Math.Geometry.IShape4D)">
            <summary>
            Check a shape how it is clipped.
            </summary>
            <remarks>
            This is performing the whole clipping process without performing the actual clipping,
            so in most cases this is useless and it is much better to use the <see cref="!:IClippingTransformer.Transform(WW.Cad.Drawing.IShape4D)"/>
            method directly. But in some circumstances like outputting text as text this method is useful
            to check whether a given text is clipped.
            </remarks>
            <param name="shape">Shape to check for clipping, possibly changed during the check.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="P:WW.Cad.Drawing.ClippingTransformerChain.Matrix">
            <summary>
            Gets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ClippingTransformerChain.Matrix3D">
            <summary>
            Gets the 3x3 matrix for transforming a line segment before line type is applied to it.
            Line type is applied in the world coordinate system (for model space), or in paper space,
            but the perspective transformation component is omitted from this matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ClippingTransformerChain.LineTypeScaler">
            <summary>
            Gets the line type scaler.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ZeroSuppressionFlags">
            <summary>
            Represents what type of zeros to suppress when displaying decimal numbers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroSuppressionFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroSuppressionFlags.SuppressZeroFeet">
            <summary>
            Suppress zero feet.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroSuppressionFlags.SuppressZeroInches">
            <summary>
            Suppress zero inches.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroSuppressionFlags.SuppressLeadingZeros">
            <summary>
            Suppress leading zeros.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroSuppressionFlags.SuppressTrailingZeros">
            <summary>
            Suppress trailing zeros.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.HandleConstants">
            <summary>
            Handle constants.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfAttribute">
            <summary>
            Represents the attribute enity, a <see cref="T:WW.Cad.Model.Entities.DxfText"/> object that exists in the context of an <see cref="T:WW.Cad.Model.Entities.DxfInsert"/>.
            </summary>
            <remarks>
            <para>
            An attribute can be created based on a template <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> (and given a new value).
            This is not a requirement though.
            </para>
            <para>
            Attribute visibility is determined by <see cref="P:WW.Cad.Model.Entities.DxfAttribute.Flags"/> and 
            <see cref="P:WW.Cad.Model.DxfHeader.AttributeVisibility"/>.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfText"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfText">
            <summary>
            Represents a text entity.
            </summary>
            <remarks>
            <para>
            The text value is represented by property <see cref="P:WW.Cad.Model.Entities.DxfText.Text"/>.
            </para>
            <para>
            Its height is defined by property <see cref="P:WW.Cad.Model.Entities.DxfText.Height"/>.
            </para>
            <para>
            Its position is defined by properties <see cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint1"/>,
            <see cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint2"/>, <see cref="T:WW.Cad.Model.Entities.TextHorizontalAlignment"/> and <see cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/>.
            The second alignment point should only be omitted if the alignment is left, baseline.
            </para>
            <para>
            See also <see cref="T:WW.Cad.Model.Entities.DxfMText"/> for multiline text.
            </para>
            </remarks>
            <example>
            An example of how to create text.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfMText"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfText"/> class.
            </summary>
            <remarks>
            The text height by default has the value 1.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.#ctor(System.String,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfText"/> class.
            </summary>
            <remarks>
            The text height by default has the value 1.
            </remarks>
            <param name="text">The text.</param>
            <param name="alignmentPoint1">The alignment point 1.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.#ctor(System.String,WW.Math.Point3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfText"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="alignmentPoint1">The alignment point 1.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.#ctor(WW.Cad.Model.Entities.DxfText)">
            <summary>
            Creates text based on given template text.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates the create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.GetEditInteractorDescriptors">
            <summary>
            Gets the edit interactor descriptors.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.CreateEditInteractor(System.Int32,WW.Actions.CommandInvoker)">
            <summary>
            Creates the edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified text object in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.FixAlignmentPoints">
            <summary>
            Fix the alignment points if necessary.
            </summary>
            <remarks>
            For special horizontal alignments (<see cref="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Fit"/> and <see cref="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Aligned"/>
            this might also correct <see cref="P:WW.Cad.Model.Entities.DxfText.Height"/> and <see cref="P:WW.Cad.Model.Entities.DxfText.WidthFactor"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.UpdateCharacterAdvances(System.Collections.Generic.List{WW.Math.Vector2D})">
            <summary>
            Calculates the character advances for this text.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <remarks>Same as property <see cref="!:Value"/>.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.SimplifiedText">
            <summary>
            Gets a simplified version of the text without escape sequences.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.Style">
            <summary>
            Gets or sets the the text style. By default it is set to the "STANDARD" text style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.Height">
            <summary>
            Gets or sets the text height. The height corresponds with the font ascent.
            The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.WidthFactor">
            <summary>
            Gets or sets the width factor (the default value is 1).
            </summary>
            <remarks>
            <para>
            The <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.WidthFactor"/> doesn't have any effect on the
            text's rendering but is used only serves as a default value for this property
            when text is created. CadLib doesn't do this automatically, the programmer
            has to get the text style's width factor and set this property explicitly if desired.
            </para>
            <para>
            This value is also adjusted when fit-type text is used.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfTextStyle.WidthFactor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.Rotation">
            <summary>
            Gets or sets the text rotation in radians.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.ObliqueAngle">
            <summary>
            Gets or sets the oblique angle in radians.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint1">
            <summary>
            Gets or sets the first alignment point (in OCS).
            </summary>
            <remarks>
            The first alignment point corresponds to the left baseline corner of the text rectangle.
            This coordinate is redundant for any alignment other than left, baseline. 
            In these cases it can be derived from <see cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint2"/>, <see cref="T:WW.Cad.Model.Entities.TextHorizontalAlignment"/>,
            <see cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/> and font characteristics.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint2"/>
            <seealso cref="T:WW.Cad.Model.Entities.TextHorizontalAlignment"/>
            <seealso cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint2">
            <summary>
            Gets or sets the second alignment point, optional.
            In OCS, but after rotation.
            </summary>
            <remarks>
            <para>
            The second alignment point location in the text rectangle depends on
            the <see cref="T:WW.Cad.Model.Entities.TextHorizontalAlignment"/> and <see cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/>.
            E.g. if the horizontal alignment is center, then the second alignment point
            points to the horizontal center of the text rectangle.
            </para>
            <para>
            The second alignment point should only be omitted if the alignment is left, baseline.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint1"/>
            <seealso cref="T:WW.Cad.Model.Entities.TextHorizontalAlignment"/>
            <seealso cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.ZAxis">
            <summary>
            Gets or sets the extrusion direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.Thickness">
            <summary>
            Gets or sets the extrusion thickness.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.GenerationFlags">
            <summary>
            Gets or sets the text generation flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment (the default value is <see cref="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Left"/>).
            </summary>
            <remarks>
            The horizontal alignment defines the horizontal placement of the text relative to <see cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint2"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint2"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment (the default value is <see cref="F:WW.Cad.Model.Entities.TextVerticalAlignment.Baseline"/>).
            </summary>
            <remarks>
            The vertical alignment defines the vertical placement of the text relative to <see cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint2"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfText.AlignmentPoint2"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.Transform">
            <summary>
            Get the transformation from the internal coordinate system into the surrounding world.
            </summary>
            <remarks>
            Because this TEXT entity may be part of a BLOCK, more transformations may be used on it before 
            it is eventually place in the model.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.InUcsTransform">
            <summary>
            Get the part of the transformation which happens in UCS, 
            before the alignment point translation is added.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.TextBounds">
            <summary>
            Gets the internal bounding box defined by the text of this TEXT entity.
            </summary>
            <remarks>
            The internal bounding box is in the coordinate system of this TEXT. 
            Use <see cref="P:WW.Cad.Model.Entities.DxfText.Transform"/> to transform this to the place defined by this text.
            And note that this TEXT may be part of a BLOCK, which could add further 
            transformations, and may have a Thickness, which will influence it's bounding box, too.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.BoxWidth">
            <summary>
            Gets the width of the text box.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.BoxHeight">
            <summary>
            Gets height of the text box.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.DisplayString">
            <summary>
            Gets the display string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.AlignedBoundingBox">
            <summary>
            Gets the aligned bounding box in the surrounding CS.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfText.IsAnnotative">
            <summary>
            Gets or sets a value indicating whether the entity is annotative.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfText.CreateInteractor">
            <summary>
            Interactor for creating a text entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfText.InteractorBase">
            <summary>
            Represents a base interactor for editing a text entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.InteractorBase.#ctor(WW.Cad.Model.Entities.DxfText,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfText.InteractorBase"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.InteractorBase.#ctor(WW.Cad.Model.Entities.DxfText,WW.Actions.CommandInvoker)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfText.InteractorBase"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.InteractorBase.Commit">
            <summary>
            Commits the edit.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.InteractorBase.Cancel">
            <summary>
            Cancels the interactions.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.CreateInteractor.#ctor(WW.Cad.Model.Entities.DxfText,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfText.CreateInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.CreateInteractor.WinFormsDrawable.GetCursor">
            <summary>
            Gets the cursor. Returns <c>null</c> if the cursor should remain unchanged.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfText.EditInteractor">
            <summary>
            Represents an interactor for editing a text entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.EditInteractor.#ctor(WW.Cad.Model.Entities.DxfText,WW.Actions.CommandInvoker)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfText.EditInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfText.EditInteractor.Commit">
            <summary>
            Commits the edit.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfAttribute"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.#ctor(System.String,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfAttribute"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="alignmentPoint1">The alignment point 1.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.#ctor(System.String,WW.Math.Point3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfAttribute"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="alignmentPoint1">The alignment point 1.</param>
            <param name="height">The text height.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.#ctor(WW.Cad.Model.Entities.DxfAttributeDefinition)">
            <summary>
            Creates attribute based on given template <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.#ctor(WW.Cad.Model.Entities.DxfAttributeDefinition,System.String)">
            <summary>
            Creates attribute based on given template <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/>
            and new text value.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfText.Text"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from given entity. See <see cref="M:WW.Cad.Model.DxfHandledObject.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.GetMTextSubstitute">
            <summary>
            Get the substitute MTEXT if there is one.
            </summary>
            <returns>Substitute MTEXT or <c>null</c></returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttribute.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.Invisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> is invisible.
            </summary>
            <seealso cref="P:WW.Cad.Model.DxfHeader.AttributeVisibility"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.Constant">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> is constant.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.InputVerificationRequired">
            <summary>
            Gets or sets a value indicating whether input verification is required.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.Preset">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> is Preset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.TagString">
            <summary>
            Gets or sets the tag string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.LockPosition">
            <summary>
            Gets or sets a value indicating whether the position is locked within the block reference.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.Unknown0">
            <summary>
            Gets or sets an unknown value.
            Introduced in R24.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttribute.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
            <seealso cref="P:WW.Cad.Model.DxfHeader.AttributeVisibility"/>
        </member>
        <member name="T:WW.Cad.Model.OrthographicType">
            <summary>
            Orthographic type used for e.g. specifying the 
            orthographic type of a <see cref="T:WW.Cad.Model.Entities.DxfViewport"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.OrthographicType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.OrthographicType.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.OrthographicType.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.OrthographicType.Front">
            <summary>
            Front.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.OrthographicType.Back">
            <summary>
            Back.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.OrthographicType.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.OrthographicType.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.PolylinePath">
            <summary>
            An optionally closed polyline path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.#ctor(WW.Math.Vector4D[])">
            <summary>
            Constructor. Creates an open polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.#ctor(System.Collections.Generic.IList{WW.Math.Vector4D})">
            <summary>
            Constructor. Creates an open polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.#ctor(System.Boolean,WW.Math.Vector4D[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.#ctor(System.Boolean,System.Collections.Generic.IList{WW.Math.Vector4D})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.#ctor(WW.Math.Geometry.Polyline4D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.Draw(System.Drawing.Graphics,WW.Cad.Drawing.GDI.PenAndBrush,System.Boolean,WW.Math.Matrix4D,WW.Cad.Drawing.GDI.IColorContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.Draw(System.Drawing.Graphics,WW.Drawing.Rasterizer2D,WW.Cad.Drawing.GDI.PenAndBrush,System.Boolean,WW.Math.Matrix4D,WW.Cad.Drawing.GDI.IColorContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.Draw(System.Drawing.Drawing2D.GraphicsPath,System.Boolean,WW.Math.Matrix4D)">
            <summary>
            Draw onto given graphics path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PolylinePath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GraphicsConfig">
            <summary>
            This class contains the configuration for graphics rendering.
            </summary>
            <remarks>
            The graphics rendering behaviour is determined by this object,
            for better performance, the number of approximation line segments
            can be decreased. 
            For better precision but slower speed, increase these numbers
            (e.g. <see cref="P:WW.Cad.Drawing.GraphicsConfig.NoOfArcLineSegments"/>, <see cref="P:WW.Cad.Drawing.GraphicsConfig.ShapeFlattenEpsilon"/>).
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.TransformConfig">
            <summary>
            Transformation configuration.
            </summary>
            <remarks>
            This class provides settings used during transformation of entities.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.TransformConfig.TreatAttributesAsPartOfInsert">
            <summary>
            Gets or sets a value indicating whether to treat attributes as part of insert when transforming the insert.
            The default value is <c>true</c>.
            </summary>
            <remarks>
            When e.g. drawing a selection rectangle around an insert, this determines whether
            the insert's attributes are included in this rectangle or excluded.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.TransformConfig.HatchPatternHandling">
            <summary>
            Gets or sets how to handle the pattern inside a hatch area.
            The default is <see cref="!:HatchPatternFlags.CompleteTransform"/>, i.e. the pattern is transformed with the hatch.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.TransformConfig.HatchPatternTransform">
            <summary>
            Flags for hatch pattern handling.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.TransformConfig.HatchPatternTransform.DontTransform">
            <summary>
            Don't transform the hatch pattern.
            This will only transform the hatch boundary.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.TransformConfig.HatchPatternTransform.OnlyTranslate">
            <summary>
            Apply translation to pattern.
            </summary>
            <remarks>
            Using only this flag might be useful for badly constructed patterns, 
            where high repetitions are no longer matching.
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.TransformConfig.HatchPatternTransform.CompleteTransform">
            <summary>
            Apply complete transformation to pattern.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.GraphicsConfig.AcadLikeWithBlackBackground">
            <summary>
            Use this as a default configuration for black backgrounds.
            </summary>
            <remarks>
            <para>
            It will use the same colors as AutoCAD is using for black backgrounds, which is also known as the "classic" color set.
            This will also take care that no indexed color will be the same as the background color.
            </para>
            <para>
            This object is readonly, use <see cref="M:WW.Cad.Drawing.GraphicsConfig.Clone"/> for a modifiable version.
            </para>
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.GraphicsConfig.AcadLikeWithWhiteBackground">
            <summary>
            Use this as a default configuration for white backgrounds.
            </summary>
            <remarks>
            <para>
            It will use the same colors as AutoCAD is using for black backgrounds, which is also known as the "classic" color set.
            This will also take care that no indexed color will be the same as the background color.
            </para>
            <para>
            This object is readonly, use <see cref="M:WW.Cad.Drawing.GraphicsConfig.Clone"/> for a modifiable version.
            </para>
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.GraphicsConfig.BlackBackground">
            <summary>
            Outdated configuration with a black background color (this object is read only).
            </summary>
            <remarks>
            Obsolete: Use <see cref="F:WW.Cad.Drawing.GraphicsConfig.AcadLikeWithBlackBackground"/> instead.
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.GraphicsConfig.BlackBackgroundCorrectForBackColor">
            <summary>
            The default configuration with a black background color (this object is read only).
            The foreground color is inverted when equal to the background color.
            </summary>
            <remarks>
            <para>
            This object is readonly, use <see cref="M:WW.Cad.Drawing.GraphicsConfig.Clone"/> for a modifiable version.
            </para>
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.GraphicsConfig.WhiteBackground">
            <summary>
            The default configuration with a white background color (this object is read only).
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.GraphicsConfig.WhiteBackgroundCorrectForBackColor">
            <summary>
            The default configuration with a white background color (this object is read only).
            The foreground color is inverted when equal to the background color.
            </summary>
            <remarks>
            <para>
            This object is readonly, use <see cref="M:WW.Cad.Drawing.GraphicsConfig.Clone"/> for a modifiable version.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GraphicsConfig"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.#ctor(WW.Drawing.ArgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GraphicsConfig"/> class.
            </summary>
            <remarks>
            This will use <see cref="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeAutocad">AutoCAD like</see> indexed color handling.
            </remarks>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.#ctor(WW.Drawing.ArgbColor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GraphicsConfig"/> class.
            </summary>
            <remarks>
            <para>
            This will use either <see cref="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeClassicCadlibWithoutBackgroundCorrection"/>
            or <see cref="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeClassicCadlibWithBackgroundCorrection"/> indexed color handling,
            depending on the <paramref name="correctColorForBackgroundColor"/> parameter.
            </para>
            <para>
            Obsolete: you should prefer the constructor with the <see cref="T:WW.Cad.Drawing.IndexedColorHandling"/> parameter.
            </para>
            </remarks>
            <param name="backgroundColor">Color of the background.</param>
            <param name="correctColorForBackgroundColor">
            if set to <c>true</c> correct the foreground color for background color (inverts the foreground color).
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.#ctor(WW.Drawing.ArgbColor,WW.Cad.Drawing.IndexedColorHandling)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GraphicsConfig"/> class.
            </summary>
            <param name="backgroundColor">Color of the background.</param>
            <param name="indexedColorHandling">
            How to set the colors for the indexed color map.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GraphicsConfig"/> class.
            </summary>
            <remarks>
            This will use <see cref="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeAutocad">AutoCAD like</see> indexed color handling.
            </remarks>
            <param name="readOnly">if set to <c>true</c> this is a read only object.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.#ctor(System.Boolean,WW.Drawing.ArgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GraphicsConfig"/> class.
            </summary>
            <remarks>
            This will use <see cref="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeAutocad">AutoCAD like</see> indexed color handling.
            </remarks>
            <param name="readOnly">if set to <c>true</c> this is a read only object.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.#ctor(System.Boolean,WW.Drawing.ArgbColor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GraphicsConfig"/> class.
            </summary>
            <remarks>
            <para>
            This will use either <see cref="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeClassicCadlibWithoutBackgroundCorrection"/>
            or <see cref="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeClassicCadlibWithBackgroundCorrection"/> indexed color handling,
            depending on the <paramref name="correctColorForBackgroundColor"/> parameter.
            </para>
            <para>
            Obsolete: you should prefer the constructor with the <see cref="T:WW.Cad.Drawing.IndexedColorHandling"/> parameter.
            </para>
            </remarks>
            <param name="readOnly">if set to <c>true</c> this is a read only object.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="correctColorForBackgroundColor">
            if set to <c>true</c> correct the foreground color for background color (inverts the foreground color).
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.#ctor(System.Boolean,WW.Drawing.ArgbColor,WW.Cad.Drawing.IndexedColorHandling)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GraphicsConfig"/> class.
            </summary>
            <param name="readOnly">if set to <c>true</c> this is a read only object.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="indexedColorHandling">
            How to set the colors for the indexed color map.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsConfig.Clone">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.BackColor">
            <summary>
            Gets or sets the back ground color (The default is black).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.NoOfArcLineSegments">
            <summary>
            Gets or sets the number of line segments in which arcs, circles and ellipses are split.
            The default value is 30.
            </summary>	
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.NoOfSplineLineSegments">
            <summary>
            Gets or sets the number of line segments in which spline and bezier parts are split.
            The default value is 32.
            </summary>	
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShapeFlattenEpsilon">
            <summary>
            Get/set the epsilon accuracy used for flattening shapes into polylines.
            The default value is <see cref="F:WW.Math.Geometry.ShapeTool.DefaultEpsilon"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShowSplineApproximationPoints">
            <summary>
            Gets or sets whether to show spline approximation points.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShowSplineControlPoints">
            <summary>
            Gets or sets whether to show spline control points.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShowSplineInterpolatedPoints">
            <summary>
            Gets or sets whether to show spline interpolated points.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ApplyLineType">
            <summary>
            Gets or sets whether to apply line type.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShowTextAlignmentPoints">
            <summary>
            Gets or sets whether to show the text alignment points (mainly for debugging).
            The default value is <c>false</c>.
            </summary>	
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShowHatchBoundaries">
            <summary>
            Gets or sets whether to show the hatch boundary lines.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShowDisabledLayers">
            <summary>
            Gets or sets a value indicating whether to show disabled layers (see <see cref="P:WW.Cad.Model.Tables.DxfLayer.Enabled"/>).
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShowFrozenLayers">
            <summary>
            Gets or sets whether to show frozen layers.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ShowDimensionDefinitionPoints">
            <summary>
            Gets or sets whether to show the dimension definition points (mainly for debugging).
            The default value is <c>false</c>.
            </summary>	
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight">
            <summary>
            Gets or sets whether to display the line weight.
            The default value is <c>true</c>.
            </summary>
            <remarks>
            <para>
            The drawings's settings can be used by setting this property to the value of <see cref="P:WW.Cad.Model.DxfHeader.DisplayLineWeight"/>.
            Get the header from <see cref="P:WW.Cad.Model.DxfModel.Header"/>.
            </para>
            <para>
            When set to <c>false</c> <see cref="T:WW.Cad.Drawing.GDI.GDIGraphics3D">GDIGraphics3D</see> uses
            properties <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.TextPenWidth">TextPenWidth</see> and
            <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.TextPenWidth">NontTextPenWidth</see> to draw lines.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLayer.LineWeight"/>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.DefaultLineWeight">
            <summary>
            Gets or sets the default line weight in 100th of mm. 
            The default value is 0.25 mm.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineTypeElementShapes">
            <summary>
            Gets or sets a value indicating whether to display line type element shapes (see <see cref="P:WW.Cad.Model.Tables.DxfLineType.Element.IsShape"/>).
            The default value is <c>false</c>.
            At the moment CadLib's rendering isn't optimized to display large number of shapes, therefore this feature is disabled by default.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.DotsPerInch">
            <summary>
            Gets or sets the dots per inch.
            This value is used for determining the pen width depending on e.g. <see cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/>.
            The default value is 100.
            </summary>
            <seealso cref="P:WW.Cad.Model.DxfHeader.DisplayLineWeight"/>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.CorrectColorForBackgroundColor">
            <summary>
            Gets or sets a value indicating whether to correct color for the background color.
            Default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.IndexedColors">
            <summary>
            Get the color mapping for indexed colors.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.FixedForegroundColor">
            <summary>
            Gets or sets the fixed foreground color.
            The value is <b>null</b> if the foreground color is not fixed.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.NodeSize">
            <summary>
            Gets or sets the node size in pixels when showing nodes.
            The default value is 6 pixels.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.NodeColor">
            <summary>
            Gets or sets the node color.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.TryDrawingTextAsText">
            <summary>
            Gets or sets a value indicating whether to try drawing text as text (default is false).
            </summary>
            <remarks>
            When e.g. rendering to PDF, text may be rendered as line segments (the default) or
            as PDF text.
            The graphics object must support text for this option to have effect, 
            see <see cref="P:WW.Cad.Drawing.IWireframeGraphicsFactory.SupportsText"/>.
            </remarks>
            <seealso cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.DrawImages">
            <summary>
            Gets or sets a value indicating whether to draw images (default value is <c>true</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.MaxLineTypeRepeatCount">
            <summary>
            Gets or sets the max repeat count of a line type when
            applied to an entity.
            In case the maximum is exceeded, the line type is not applied.
            The default value is 1000.
            </summary>
            <remarks>
            Sometimes an entity is very large compared to the total length of a line type pattern,
            potentially resulting in a single line being split into thousands of line segments.
            Use this setting to limit the amount of line segments produced for better performance.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.MaxHatchPatternRepeatCount">
            <summary>
            Gets or sets the max hatch pattern repeat count.
            The default value is 100,000.
            </summary>
            <remarks>
            Sometimes a hatch is very large compared to the hatch pattern. This property controls
            the maximum limit for the pattern repeat count.
            When this limit is exceeded, the hatch is drawing using a solid color.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.HatchOverflowHandling">
            <summary>
            Gets or sets the hatch overflow handling.
            The default is <see cref="!:HatchOverflowHandling.SolidFill"/>.
            </summary>
            <remarks>
            This property describes what happens if the <see cref="!:HatchPatternRepeatCount"/> limit is met. 
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.UseSpatialFilters">
            <summary>
            Gets or sets how to handle spatial filters.
            </summary>
            <remarks>
            Spatial filters are used in AutoCAD to clip away entities from insertions.
            At the moment spatial filters are only supported in <see cref="T:WW.Cad.Drawing.DrawContext.Wireframe"/>
            and <see cref="T:WW.Cad.Drawing.DrawContext.Wireframe"/> rendering.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.UseSortEntsTables">
            <summary>
            Gets or sets whether to reorder entities during drawing.
            </summary>
            <remarks>
            <para>
            AutoCAD uses <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/> objects associated 
            with <see cref="T:WW.Cad.Model.Tables.DxfBlock">blocks</see> to draw entities in a different order,
            which changes the visual stacking order according to the socalled 
            Painter's Algorithm.
            </para>
            <para>
            If this property is set to <c>true</c>, entities of a block are reordered
            during drawing if there is an <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/> associated with
            a block, otherwise the entities are drawn in file order.
            </para>
            <para>
            In AutoCAD the decision whether sorting is used or not
            is determined by the settings of the header's 
            <see cref="P:WW.Cad.Model.DxfHeader.EntitySortingFlags"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.ReadOnly">
            <summary>
            Gets a value indicating whether this object is read only.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.PlotStyleManager">
            <summary>
            Get or sets the plot style manager.
            The default is <c>null</c>, i.e. no manager.
            </summary>
            <remarks>
            <para>
            If a plot style manager is defined, it is used for defining color 
            and other properties for plotting an entity.
            </para>
            <para>
            If it is defined, the following settings are no longer used
            (but it is possible to imitate their behavior by defining an appropriate
            PlotStyleManager):
            <see cref="P:WW.Cad.Drawing.GraphicsConfig.FixedForegroundColor"/>, <see cref="P:WW.Cad.Drawing.GraphicsConfig.CorrectColorForBackgroundColor"/>
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.OleImageSize">
            <summary>
            Gets or sets the image size for OLE objects.
            The default value is 200.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GraphicsConfig.TreatAttributesAsPartOfInsert">
            <summary>
            Gets or sets a value indicating whether to treat attributes as part of insert when transforming the insert.
            The default value is <c>true</c>.
            </summary>
            <remarks>
            When e.g. drawing a selection rectangle around an insert, this determines whether
            the insert's attributes are included in this rectangle or excluded.
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.IndexedColorHandling">
            <summary>
             How to handle indexed colors, especially with respect to background colors.
            </summary>
             <remarks>
             Most colors in AutoCAD are based on an indexed color model using a set of 255 colors.
             </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeAutocad">
            <summary>
            Try to mimick handling indexed colors the way AutoCAD is doing.
            </summary>
            <remarks>
            AutoCAD is doing a quite complex color selection for indexed colors, depending on the background color.
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeClassicCadlibWithoutBackgroundCorrection">
            <summary>
            Behave like CadLib until version *.*.34.80, without correction for background colors. 
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.IndexedColorHandling.BehaveLikeClassicCadlibWithBackgroundCorrection">
            <summary>
            Behave like CadLib until version *.*.34.80, with correction for background colors. 
            </summary>
        </member>
        <member name="T:WW.Cad.IO.ShxUnicode1_0Reader">
            <summary>
            reader for shx unicode 1.1 files.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ShxUnicode1_0Reader.#ctor(System.IO.BinaryReader,System.Text.Encoding,WW.Cad.Model.Entities.ShxFile)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ShxUnicode1_0Reader.Read">
            <summary>
            Read shapes into shape file.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ValidateUtil">
            <summary>
            Utility class for validating <see cref="T:WW.Cad.Model.DxfModel"/>.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.ValidateUtil.ValidateName(System.Object,System.String,WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validate a name (like e.g. <see cref="P:WW.Cad.Model.Tables.DxfBlock.Name"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ValidateUtil.IsValidNameCharPreDxf15(System.Char)">
            <summary>
            Returns whether given name character is valid in dxf version before <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.InvisibleEdgeFlags">
            <summary>
            Invisible edge flags for the edges of a <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.InvisibleEdgeFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.InvisibleEdgeFlags.First">
            <summary>
            First edge is invisible.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.InvisibleEdgeFlags.Second">
            <summary>
            Second edge is invisible.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.InvisibleEdgeFlags.Third">
            <summary>
            Third edge is invisible.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.InvisibleEdgeFlags.Fourth">
            <summary>
            Fourth edge is invisible.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfArc">
            <summary>
            Represents an arc entity.
            </summary>
            <remarks>
            An arc is defined by its <see cref="P:WW.Cad.Model.Entities.DxfCircle.Center">Center</see>, <see cref="P:WW.Cad.Model.Entities.DxfCircle.Radius">Radius</see>, 
            <see cref="P:WW.Cad.Model.Entities.DxfArc.StartAngle"/>, <see cref="P:WW.Cad.Model.Entities.DxfArc.EndAngle"/> and <see cref="P:WW.Cad.Model.Entities.DxfCircle.ZAxis">ZAxis</see>.
            An arc is always counter clockwise going from the <see cref="P:WW.Cad.Model.Entities.DxfArc.StartAngle"/> to the <see cref="P:WW.Cad.Model.Entities.DxfArc.EndAngle"/>.
            </remarks>
            <example>
            Below is an example of how to create and write a DXF file containing an arc.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class ArcExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfArc arc = new DxfArc(
                new Point3D(-2d, 2d, 3d), // Center
                2d, // Radius
                0d, // Start angle (radians)
                System.Math.PI * 0.6, // End angle (radians)
                Vector3D.XAxis // Z-Axis
            );
            model.Entities.Add(arc);
            
            DxfWriter.Write("Arc Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfCircle">
            <summary>
            Represents a circle entity.
            </summary>
            <remarks>
            A circle is defined by its <see cref="P:WW.Cad.Model.Entities.DxfCircle.Center"/>, <see cref="P:WW.Cad.Model.Entities.DxfCircle.Radius"/> and <see cref="P:WW.Cad.Model.Entities.DxfCircle.ZAxis"/>.
            </remarks>
            <example>
            Below is an example of how to create a circle.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create a line, circle, text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Line.
            DxfLine line1 = new DxfLine(new Point3D(-20d, -4d, 3d), new Point3D(-11d, -3.9d, 3d));
            model.Entities.Add(line1);

            // Circle.
            DxfCircle circle = new DxfCircle(new Point3D(-20d, -4d, 3d), 9d);
            circle.Color = EntityColors.Green;
            model.Entities.Add(circle);
            
            // Invisible blue circle.
            DxfCircle circle2 = new DxfCircle(new Point3D(3d, -4d, 3d), 4d);
            circle2.Color = EntityColors.Blue;
            circle2.Visible = false;
            model.Entities.Add(circle2);
            
            // Extruded circle with line type.
            DxfLineType lineType = 
                new DxfLineType(
                    "SpecialLineType", 
                    "description", 
                    new double[] {0.5d, -0.3d, 0, -0.3d}
                );
            model.LineTypes.Add(lineType);
            DxfCircle circle3 = new DxfCircle(new Point3D(0d, -4d, 3d), 9d);
            circle3.Color = EntityColors.Red;
            circle3.LineType = lineType;
            circle3.Thickness = 0.4;
            model.Entities.Add(circle3);

            // Arc.
            DxfArc arc = new DxfArc(new Point3D(20d, -4d, 3d), 9d, Math.PI * 0.2d, Math.PI * 1.7d);
            arc.Color = EntityColors.Blue;
            model.Entities.Add(arc);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfCircle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.#ctor(WW.Math.Point3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfCircle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfCircle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.#ctor(WW.Math.Point2D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfCircle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point2D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfCircle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate circle as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate circle as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory,System.Double,System.Double)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate circle as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,System.Double,System.Double)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate circle as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Double,System.Double)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate circle as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock,System.Double,System.Double)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate circle as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified circle in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates a create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.Center">
            <summary>
            Gets or sets the circle center.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.Radius">
            <summary>
            Gets or sets the circle radius.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.ZAxis">
            <summary>
            Gets or sets the extrusion direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.Thickness">
            <summary>
            Gets or sets the extrusion thickness.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.Transform">
            <summary>
            Gets the OCS to WCS transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.DenormalizationTransform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.CreateInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfCircle.CreateInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfCircle.CreateInteractor.ControlPointCommitIndex">
            <summary>
            Gets the control point index at which the entity creation is committed.
            By default this is the control point count - 1.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfCircle.CreateInteractor.ControlPointCollection.InitializeCircle">
            <summary>
            Tries to initialize the circle from these control points.
            Returns <c>true</c> if succeeded.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfArc"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.#ctor(WW.Math.Point3D,System.Double,System.Double,System.Double,WW.Math.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfArc"/> class.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="startAngle">The start angle in radians.</param>
            <param name="endAngle">The end angle in radians.</param>
            <param name="zaxis">The z-axis.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.#ctor(WW.Math.Point3D,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfArc"/> class.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="startAngle">The start angle in radians.</param>
            <param name="endAngle">The end angle in radians.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.InitializeFromThreePoints(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,System.Boolean)">
            <summary>
            Initiaze the arc from the specified three consecutive points.
            Returns <c>false</c> if the points were collinear.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.InitializeFromThreePointsAndRadius(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,System.Double,System.Boolean)">
            <summary>
            Initiaze the arc from the specified three consecutive points.
            Returns <c>false</c> if the points were collinear or the radius is smaller than half the distance between start and end point.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate arc as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate arc as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified arc in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates a create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfArc.StartAngle">
            <summary>
            Gets or sets the start angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfArc.EndAngle">
            <summary>
            Gets or sets the end angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfArc.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfArc.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.CreateInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfArc.CreateInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.ControlPointCollection.#ctor(WW.Cad.Model.Entities.DxfArc)">
            <summary>
            Initializes a new instance of the <see cref="!:WithOwner"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="controlPoints">The control points.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.ControlPointCollection.Set(System.Int32,WW.Math.Point3D)">
            <summary>
            Sets the control point at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.ControlPointCollection.Get(System.Int32)">
            <summary>
            Gets the control point at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.ControlPointCollection.GetDescription(System.Int32)">
            <summary>
            Gets the description of the control point at the specified index.
            Uses a <see cref="!:ResourceManager"/> to look up a culture specific value based on the current UI culture.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.ControlPointCollection.GetDisplayType(System.Int32)">
            <summary>
            Gets the display type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.ControlPointCollection.Insert(System.Int32)">
            <summary>
            Creates and inserts a new control point at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.ControlPointCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the control point at the specified index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfArc.ControlPointCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfArc.ThreePointOnArcCreateInteractor">
            <summary>
            An interactor for creating an arc using 3 points on the arc.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.ThreePointOnArcCreateInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfArc.ThreePointOnArcCreateInteractor"/> class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfArc.TwoPointWithRadiusCreateInteractor">
            <summary>
            An interactor for creating an arc using 3 points on the arc.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.TwoPointWithRadiusCreateInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfArc.ThreePointOnArcCreateInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.TwoPointWithRadiusCreateInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfArc.TwoPointWithRadiusCreateInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfArc.TwoPointWithRadiusCreateInteractor.ControlPointCollection.InitializeArc">
            <summary>
            Tries to initialize the arc from these control points.
            Returns <c>true</c> if succeeded.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfImageDefCollection">
            <summary>
            Active <see cref="T:WW.Cad.Model.Objects.DxfImageDef"/> collection.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfTableCellStyle">
            <summary>
            A table cell style, as used in <see cref="T:WW.Cad.Model.Entities.DxfTable"/>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableStyle"/>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfContentFormat">
            <summary>
            Represents a table cell content format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfContentFormat.GetTextHeightIfOverridden">
            <summary>
            Gets the text height if this content format overrides text height, or text style
            and the text style has a fixed height.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfContentFormat.ScaleMe(WW.Cad.Model.Objects.DxfTableCellStyle,System.Double,WW.Actions.CommandGroup)">
            <summary>
            Scales me.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfContentFormat.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfContentFormat.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfContentFormat.CopyFrom(WW.Cad.Model.Objects.DxfContentFormat,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">source object</param>
            <param name="cloneContext">specifies what to do when a reference to e.g. a line type is missing.</param>
            <remarks>
            If overridden, subclass must call base method.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.TextStyle">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.OverrideTextStyle">
            <summary>
            Gets or sets a value indicating whether to override text style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.TextHeight">
            <summary>
            Gets or sets the text height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.OverrideTextHeight">
            <summary>
            Gets or sets a value indicating whether to override text height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.CellAlignment">
            <summary>
            Gets or sets the cell alignment.
            The default value is <see cref="F:WW.Cad.Model.CellAlignment.TopLeft"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.OverrideCellAlignment">
            <summary>
            Gets or sets a value indicating whether to override cell alignment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.ContentColor">
            <summary>
            Gets or sets the content color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.OverrideContentColor">
            <summary>
            Gets or sets a value indicating whether to override content color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.ValueFormat">
            <summary>
            Gets the cell format.
            The default value is an instance of <see cref="T:WW.Cad.Model.DxfValueFormat.General"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.Rotation">
            <summary>
            Gets or sets the rotation angle (in radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.OverrideRotation">
            <summary>
            Gets or sets a value indicating whether to override rotation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.BlockScale">
            <summary>
            Gets or sets the block scale. The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.OverrideBlockScale">
            <summary>
            Gets or sets a value indicating whether to override block scale.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.ContentFormatPropertyOverrideFlags">
            <summary>
            Gets or sets the property override flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.AutoScale">
            <summary>
            Gets or sets a value indicating whether auto scale is on. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.OverrideAutoScale">
            <summary>
            Gets or sets a value indicating whether to override auto scale.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.HasData">
            <summary>
            Gets or sets a value indicating whether this instance cell style has data.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            This cell style's data will only be written to file when this flag is <c>true</c>.
            It is automatically set to <c>true</c> when a property is changed.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.DataFlags">
            <summary>
            Gets or sets the data flags (0 = no data, 1 = has data).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfContentFormat.PropertyFlags">
            <summary>
            Gets or sets the property flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfTableCellStyle.NameTitle">
            <summary>
            Cell style name for the title cell style.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfTableCellStyle.NameHeader">
            <summary>
            Cell style name for the header cell style.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfTableCellStyle.NameData">
            <summary>
            Cell style name for the data cell style.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.SetAllBordersLineWeight(System.Int16)">
            <summary>
            Sets the line weight for all borders (see also <see cref="T:WW.Cad.Model.LineWeight"/>).
            </summary>
            <seealso cref="T:WW.Cad.Model.LineWeight"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.SetAllBordersLineType(WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Sets the line type for all borders.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.SetAllBordersBorderType(WW.Cad.Model.BorderType)">
            <summary>
            Sets the border type for all borders.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.SetAllBordersVisible(System.Boolean)">
            <summary>
            Sets the visible property for all borders.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.SetAllBordersColor(WW.Cad.Model.Color)">
            <summary>
            Sets the color for all borders.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.SetAllBordersSpacing(System.Double)">
            <summary>
            Sets the spacing for all borders.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.GetTextHeight">
            <summary>
            Gets the text height.
            If the text style has a fixed height, then that height is used, otherwise
            the <see cref="P:WW.Cad.Model.Objects.DxfTableCellStyle.TextHeight"/> is returned.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.CopyFrom(WW.Cad.Model.Objects.DxfTableCellStyle,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <remarks>
            If overridden, subclass must call base method.
            </remarks>
            <param name="from">source object</param>
            <param name="cloneContext">specifies what to do when a reference to e.g. a line type is missing.</param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.BackColor">
            <summary>
            Gets or sets the fill color.
            </summary>
            <remarks>
            Also sets property <see cref="P:WW.Cad.Model.Objects.DxfTableCellStyle.IsBackColorEnabled"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.OverrideBackColor">
            <summary>
            Gets or sets a value indicating whether to override the fill color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.Id">
            <summary>
            Gets or sets the ID. 
            This property is used internally, there is no need to set this property.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.CellType">
            <summary>
            Gets or sets the type of the cell.
            The default value is Label.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.MergeCellsOnCreation">
            <summary>
            Gets or sets a value indicating whether to merge cells on creation.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.FlowDirection">
            <summary>
            Gets or sets the flow direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.OverrideFlowDirection">
            <summary>
            Gets or sets a value indicating whether to override the flow direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.IsBackColorEnabled">
            <summary>
            Gets or sets a value indicating whether background color enabled.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfTableCellStyle.BackColor"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.HorizontalMargin">
            <summary>
            Gets or sets the horizontal margin.
            The default value is 0.06.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfTableCellStyle.HasMarginOverrides"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.OverrideHorizontalMargin">
            <summary>
            Gets or sets a value indicating whether to override the horizontal margin.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.VerticalMargin">
            <summary>
            Gets or sets the vertical margin.
            The default value is 0.06.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfTableCellStyle.HasMarginOverrides"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.OverrideVerticalMargin">
            <summary>
            Gets or sets a value indicating whether to override the vertical margin.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.PropertyOverrideFlags">
            <summary>
            Gets or sets the property override flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.ContentLayoutFlags">
            <summary>
            Gets or sets the content layout flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.OverrideContentLayoutFlags">
            <summary>
            Gets or sets a value indicating whether to override the content layout flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.HasMarginOverrides">
            <summary>
            Gets or sets a value indicating whether this instance cell style has margin overrides.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            When set to <c>true</c> the margins (<see cref="P:WW.Cad.Model.Objects.DxfTableCellStyle.HorizontalMargin"/>, <see cref="P:WW.Cad.Model.Objects.DxfTableCellStyle.VerticalMargin"/>) 
            will be written to file, otherwise they will not be written.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.BorderInsideHorizontal">
            <summary>
            Gets or sets the inside horizontal border.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.BorderInsideVertical">
            <summary>
            Gets or sets the inside vertical border.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.BorderTop">
            <summary>
            Gets or sets the top border.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.BorderRight">
            <summary>
            Gets or sets the right border.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.BorderBottom">
            <summary>
            Gets or sets the bottom border.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.BorderLeft">
            <summary>
            Gets or sets the left border.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.Rotation">
            <summary>
            Gets or sets the rotation angle (in radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.BlockScale">
            <summary>
            Gets or sets the block scale. The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.AutoScale">
            <summary>
            Gets or sets a value indicating whether auto scale is on. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.CellAlignment">
            <summary>
            Gets or sets the cell alignment.
            The default value is <see cref="F:WW.Cad.Model.CellAlignment.TopLeft"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.ContentColor">
            <summary>
            Gets or sets the content color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.TextStyle">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.TextHeight">
            <summary>
            Gets or sets the text height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableCellStyle.MarginOverrideFlags">
            <summary>
            Gets or sets the margin override flags (0 = no overrides, 1 = has overrides).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry">
            <summary>
            Represents table cell geometric data (for internal use only).
            </summary>
            <remarks>
            <para>
            This class is used internally only, this class is not intended to be created/modified by the user.
            </para>
            <para>
            This class was introduced in AutoCAD 2008.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry.Clone">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry.CopyFrom(WW.Cad.Model.Objects.Internal.DxfCellContentGeometry)">
            <summary>
            Copies the contents from specified object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry.DistanceToTopLeft">
            <summary>
            Gets or sets the distance to the top left content corner.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry.DistanceToCenter">
            <summary>
            Gets or sets the distance to the content center.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry.ContentWidth">
            <summary>
            Gets or sets the width of the content before rotation.
            This includes the gap distance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry.ContentHeight">
            <summary>
            Gets or sets the height of the content before rotation.
            This includes the gap distance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry.Width">
            <summary>
            Gets or sets the width of the content after rotation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellContentGeometry.Height">
            <summary>
            Gets or sets the height of the content after rotation.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.TableCellEdgeFlags">
            <summary>
            Represents the table cell edge flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellEdgeFlags.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellEdgeFlags.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellEdgeFlags.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellEdgeFlags.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolyfaceMesh">
            <summary>
            Represents a polyface mesh consisting of <see cref="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Faces"/>.
            </summary>
            <remarks>
            A polyface mesh consists of <see cref="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Faces"/> that reference
            <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> objects in <see cref="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Vertices"/>.
            The vertices can be shared between faces.
            Each face can reference between 1 and 4 vertices.
            </remarks>
            <example>
            An example of how to create and write a dxf file containing a DxfPolyfaceMesh object.
            <code lang="cs">
using System;
using System.Collections.Generic;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace Examples {
    public class PolyfaceMeshExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            // Create a cube by a polyface mesh.
            DxfPolyfaceMesh polyline4 = new DxfPolyfaceMesh();
            // Cube corner vertices.
            polyline4.Vertices.AddRange(
                new DxfVertex3D[] {
                    new DxfVertex3D(2, 0, 0),
                    new DxfVertex3D(2, 1, 0),
                    new DxfVertex3D(3, 1, 0),
                    new DxfVertex3D(3, 0, 0),
                    new DxfVertex3D(2, 0, 1),
                    new DxfVertex3D(2, 1, 1),
                    new DxfVertex3D(3, 1, 1),
                    new DxfVertex3D(3, 0, 1)
                }
            );
            List&lt;DxfVertex3D&gt; v = polyline4.Vertices;
            polyline4.Faces.AddRange(
                new DxfMeshFace[] {
                     new DxfMeshFace(v[0], v[1], v[2], v[3]),
                     new DxfMeshFace(v[4], v[5], v[6], v[7]),
                     new DxfMeshFace(v[0], v[1], v[5], v[4]),
                     new DxfMeshFace(v[1], v[2], v[6], v[5]),
                     new DxfMeshFace(v[2], v[3], v[7], v[6]),
                     new DxfMeshFace(v[3], v[0], v[4], v[7])
                }
            );
            polyline4.Faces[0].Color = EntityColors.Blue;
            polyline4.Faces[1].Color = EntityColors.Blue;
            polyline4.Faces[2].Color = EntityColors.Red;
            polyline4.Faces[3].Color = EntityColors.Red;
            polyline4.Faces[4].Color = EntityColors.Green;
            polyline4.Faces[5].Color = EntityColors.Green;
            model.Entities.Add(polyline4);
    
            DxfWriter.Write("WriteDxfPolyline3DTest-R14.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfMeshFace"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.#ctor(WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified polyface mesh in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyfaceMesh.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Faces">
            <summary>
            Gets the faces.
            </summary>
            <remarks>
            All the <see cref="T:WW.Cad.Model.Entities.DxfVertex3D">vertices</see> referenced by the faces must
            be present in <see cref="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Vertices"/>.
            A single <b>DxfVertex3D</b> can be shared by more than one <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Vertices"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Vertices">
            <summary>
            Gets the face vertices.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Faces"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyfaceMesh.Transform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableBorderOverrides">
            <summary>
            Represents overrides for <see cref="T:WW.Cad.Model.Objects.DxfTableBorder"/>.
            When a value is <c>null</c> it's not overridden.
            </summary>
            <remarks>
            The border between two cells is a shared border.
            Both cells have border overrides, but only one of them is stored in the DXF/DWG file.
            Therefore it is illegal to set border overrides for both cells for shared borders.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableBorderOverrides.HasOverrides(WW.Cad.Model.DxfVersion)">
            <summary>
            Determines whether this border has overrides in the specified version.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBorderOverrides.LineWeight">
            <summary>
            Gets or sets the line weight.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBorderOverrides.LineType">
            <summary>
            Gets or sets the line type.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <remarks>
            This property was introduced in AutoCAD 2008.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBorderOverrides.BorderType">
            <summary>
            Gets or sets the type of the border.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <remarks>
            This property was introduced in AutoCAD 2008.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBorderOverrides.Visible">
            <summary>
            Gets or sets a value indicating whether the border is visible.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBorderOverrides.Color">
            <summary>
            Gets or sets the color.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBorderOverrides.DoubleLineSpacing">
            <summary>
            Gets or sets the border line separation distance, applicable if this is a double border line 
            (see <see cref="P:WW.Cad.Model.Entities.DxfTableBorderOverrides.BorderType"/>).
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <remarks>
            This property was introduced in AutoCAD 2008.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTable2005">
            <summary>
            Represents the obsolete AutoCAD 2005 table data structure.
            The table entity with which tabular data can be represented.
            </summary>
            <remarks>
            <para>
            A table has an optional title row and an optional header row (for the column headers).
            Either one can be suppressed using the <see cref="P:WW.Cad.Model.Entities.DxfTable2005.SuppressTitle"/> and <see cref="P:WW.Cad.Model.Entities.DxfTable2005.SuppressHeaderRow"/> flags.
            All subsequent rows are data rows.
            The title row, header row and data row cells have a <see cref="T:WW.Cad.Model.Objects.DxfTableCellStyle"/> 
            instances from the <see cref="T:WW.Cad.Model.Objects.DxfTableStyle"/> associated with them,
            see <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.TitleCellStyle"/>, <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.HeaderCellStyle"/> and 
            <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.DataCellStyle"/>.
            </para>
            <para>
            The easiest way to setup a table is to create a <c>DxfTable</c> instance,
            and set the <see cref="P:WW.Cad.Model.Entities.DxfTable2005.RowCount"/> and <see cref="P:WW.Cad.Model.Entities.DxfTable2005.ColumnCount"/>. 
            This will populate the <see cref="P:WW.Cad.Model.Entities.DxfTable2005.Rows"/> and <see cref="P:WW.Cad.Model.Entities.DxfTable2005.Columns"/> and create <see cref="T:WW.Cad.Model.Entities.DxfTableCell2005"/> instances.
            Each cell can be accessed through the <see cref="P:WW.Cad.Model.Entities.DxfTableRow2005.Cells"/> property.
            To change a cell's contents, set it's <see cref="!:DxfTableCell2005.Value.Format">ValueFormat</see> and 
            <see cref="P:WW.Cad.Model.Entities.DxfTableCell2005.Value">Value</see>.
            </para>
            <para>
            The table entity was introduced in AutoCAD 2005.
            </para>
            <para>
            Currently only by row/column cell styles are supported.
            </para>
            </remarks>
            <example>
            This example shows how create a table, merge cells and create a custom table style.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class TableExample {
        public void CreateTableExample() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTableStyle tableStyle = new DxfTableStyle("Double bordered");
            tableStyle.DataCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.DataCellStyle.SetAllBordersColor(Colors.Green);
            tableStyle.TitleCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.ContentColor = Colors.Blue;
            model.TableStyles.Add(tableStyle);

            DxfTable table = new DxfTable(tableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 3;

            foreach (DxfTableColumn column in table.Columns) {
                column.Width = 8d;
            }

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");
            table.Rows[1].Cells[0].Contents.Add(new DxfValueFormat.String(), "Column 1 Header");
            table.Rows[1].Cells[1].Contents.Add(new DxfValueFormat.String(), "Column 2 Header");
            table.Rows[1].Cells[2].Contents.Add(new DxfValueFormat.String(), "Column 3 Header");
            table.Rows[2].Cells[0].Contents.Add(new DxfValueFormat.String(), "Text");
            table.Rows[2].Cells[0].CellStyleOverrides.ContentColor = Colors.Red;
            table.Rows[4].Cells[0].Contents.Add(DxfValueFormat.Date.CreateRegionalLongDateTime(), DateTime.Now);
            table.Rows[5].Cells[0].Contents.Add(new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal), 123.45d);

            // Merge the title row cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(0, 0, 0, 2));
            // This demonstrates a merged cell block of 3 by 2 cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(2, 0, 3, 2));

            model.Entities.Add(table);

            DxfWriter.Write("Table Example.dxf", model);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableCell2005"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableRow2005"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableColumn2005"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableStyle"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableCellStyle"/>
            <seealso cref="T:WW.Cad.Model.DxfValueFormat"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.#ctor(WW.Cad.Model.Objects.DxfTableStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/> class.
            </summary>
            <param name="tableStyle">
            The table style.
            The table style must be part of <see cref="P:WW.Cad.Model.DxfModel.TableStyles"/>.
            The default table style is <see cref="P:WW.Cad.Model.DxfModel.DefaultTableStyle"/>.
            </param>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.AreCellsInSameMergedCellBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the cells with specified row and column indices are in the same merged cell block.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.IsCellMerged(System.Int32,System.Int32)">
            <summary>
            Determines whether the cell at specified row and column index is merged.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.IsCellMerged(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Determines whether the cell at specified row and column index is merged.
            </summary>
            <remarks>
            Returns the row and column of the top left cell of the merged cell block if the cell is merged.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.GetCellStyle(System.Int32,System.Int32)">
            <summary>
            Gets the cell style for the cell with specified row and column index.
            </summary>
            <remarks>
            Currently only by row/column cell styles are supported.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.GetEffectiveSuppressTitle">
            <summary>
            Gets the effective value for the suppress title property.
            </summary>
            <remarks>
            If the table overrides the table style value, that value is returned,
            otherwise the table style value is returned.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTable2005.SuppressTitle"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.GetEffectiveSuppressHeaderRow">
            <summary>
            Gets the effective value for the suppress header property.
            </summary>
            <remarks>
            If the table overrides the table style value, that value is returned,
            otherwise the table style value is returned.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTable2005.SuppressHeaderRow"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.GetEffectiveFlowDirection">
            <summary>
            Gets the effective flow direction.
            </summary>
            <remarks>
            If the table overrides the table style value, that value is returned,
            otherwise the table style value is returned.
            </remarks>
            <seealso cref="T:WW.Cad.Model.TableFlowDirection"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.CopyFrom(WW.Cad.Model.Entities.DxfTable2005,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <remarks>
            If overridden, subclass must call base method.
            </remarks>
            <param name="from">source object</param>
            <param name="cloneContext">the clone context</param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTable2005.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.HorizontalDirection">
            <summary>
            Gets or sets the horizontal direction.
            The default value is the (1, 0, 0) vector.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.Rows">
            <summary>
            Gets the rows.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.RowCount">
            <summary>
            Gets or sets the row count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.ColumnCount">
            <summary>
            Gets or sets the column count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle">
            <summary>
            Gets or sets the table style.
            </summary>
            <remarks>
            If not set the <see cref="P:WW.Cad.Model.DxfModel.DefaultTableStyle"/> is used.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.FlowDirection">
            <summary>
            Gets or sets the flow direction.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.HorizontalCellMargin">
            <summary>
            Gets or sets the horizontal cell margin.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.VerticalCellMargin">
            <summary>
            Gets or sets the vertical cell margin.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.SuppressTitle">
            <summary>
            Gets or sets a value indicating whether to suppress the title.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.SuppressHeaderRow">
            <summary>
            Gets or sets a value indicating whether to suppress the header row.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.TitleRowCellStyle">
            <summary>
            Gets the title row cell style overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.HeaderRowCellStyle">
            <summary>
            Gets the header row cell style overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.DataRowCellStyle">
            <summary>
            Gets the data row cell style overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.BorderInsideHorizontal">
            <summary>
            Gets or sets the horizontal, inside border overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.BorderInsideVertical">
            <summary>
            Gets or sets the vertical, inside border overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.BorderTop">
            <summary>
            Gets or sets the top border overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.BorderRight">
            <summary>
            Gets or sets the right border overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.BorderBottom">
            <summary>
            Gets or sets the bottom border overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTable2005.BorderLeft">
            <summary>
            Gets or sets the left border overrides.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfAttributeDefinition">
            <summary>
            Represents an attribute definition that serves as a template for the <see cref="T:WW.Cad.Model.Entities.DxfAttribute"/> entity.
            </summary>
            <remarks>
            <para>
            Attribute definition visibility is determined by property <see cref="P:WW.Cad.Model.Entities.DxfAttributeDefinition.Invisible"/> and 
            <see cref="P:WW.Cad.Model.DxfHeader.AttributeVisibility">DxfHeader.AttributeVisibility</see>.
            When an attribute definition is part of a <see cref="T:WW.Cad.Model.Tables.DxfBlock">block</see>, then the attribute definition is not displayed.
            </para>
            <para>
            When adding an attribute definition to a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/>,
            CadLib (upon writing the DXF file) automatically sets the <see cref="P:WW.Cad.Model.Tables.DxfBlock.Flags">DxfBlock.Flags</see> to include
            <see cref="F:WW.Cad.Model.BlockFlags.HasNonConstantAttributeDefinitions">BlockFlags.HasNonConstantAttributeDefinitions</see> so AutoCAD prompts
            to enter an attribute value when the block is inserted.
            This happens only in case the block has an attribute definition that is not <see cref="P:WW.Cad.Model.Entities.DxfAttributeDefinition.Constant"/>.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfAttribute"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfText"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.#ctor(System.String,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="alignmentPoint1">The alignment point 1.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.#ctor(System.String,WW.Math.Point3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="alignmentPoint1">The alignment point 1.</param>
            <param name="height">The text height.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
            <remarks>
            DxfAttribute definition is only drawn when not part of a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
            <remarks>
            DxfAttribute definition is only drawn when not part of a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw.
            </summary>
            <remarks>
            DxfAttribute definition is only drawn when not part of a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified attribute definition in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.SetTagString(System.String)">
            <summary>
            Set the tag string without any checks.
            </summary>
            <param name="tagStr">Tag string.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfAttributeDefinition.GetMTextSubstitute">
            <summary>
            Get the substitute MTEXT if there is one.
            </summary>
            <returns>Substitute MTEXT or <c>null</c></returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.Invisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> is invisible.
            </summary>
            <remarks>
            When an attribute definition is part of a <see cref="T:WW.Cad.Model.Tables.DxfBlock">block</see>, then the attribute definition is not displayed.
            </remarks>
            <seealso cref="P:WW.Cad.Model.DxfHeader.AttributeVisibility"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.Constant">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> is constant.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.InputVerificationRequired">
            <summary>
            Gets or sets a value indicating whether input verification is required.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.Preset">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> is Preset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.PromptString">
            <summary>
            Gets or sets the prompt string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.TagString">
            <summary>
            Gets or sets the tag string.
            The tag string is what is displayed when the attribute definition is visible.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.LockPosition">
            <summary>
            Gets or sets a value indicating whether the position is locked within the block reference.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.DisplayString">
            <summary>
            Gets the display string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
            <seealso cref="P:WW.Cad.Model.DxfHeader.AttributeVisibility"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.Unknown0">
            <summary>
            R24 unknown value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfAttributeDefinition.Unknown1">
            <summary>
            R24 unknown value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DwgVersion">
            <summary>
            Represents the DWG version.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Unknown">
            <summary>
            Undefined version.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg0">
            <summary>
            Zero version.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1_2">
            <summary>
            R1.2.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1_40">
            <summary>
            R1.40.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1_50">
            <summary>
            R1.50.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg2_20">
            <summary>
            R2.20
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg2_10">
            <summary>
            R2.10.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg2_21">
            <summary>
            R2.21.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg2_22">
            <summary>
            R2.22.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1001">
            <summary>
            R2.4.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1002">
            <summary>
            R2.5.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1003">
            <summary>
            R2.6.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1004">
            <summary>
            R9.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1005">
            <summary>
            Internal AutoCAD test version between R9 and R10.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1006">
            <summary>
            R10.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1007">
            <summary>
            First internal AutoCAD test version between R10 and R11.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1008">
            <summary>
            Second internal AutoCAD test version between R10 and R11.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1009">
            <summary>
            R11 and R12.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1010">
            <summary>
            First internal AutoCAD test version between R12 and R13.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1011">
            <summary>
            Second internal AutoCAD test version between R12 and R13.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1012">
            <summary>
            R13.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1013">
            <summary>
            R14 beta.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1014">
            <summary>
            R14.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1015Beta">
            <summary>
            R15 beta.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1015">
            <summary>
            R15.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1018Beta">
            <summary>
            R18 beta.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1018">
            <summary>
            R18.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1021Beta">
            <summary>
            R21 betal.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1021">
            <summary>
            R21.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1024Beta">
            <summary>
            R24 beta.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1024">
            <summary>
            R24.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1027Beta">
            <summary>
            R27 beta.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DwgVersion.Dwg1027">
            <summary>
            R27.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ColorType">
            <summary>
            Represents a color type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ColorType.ByLayer">
            <summary>
            By layer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ColorType.ByBlock">
            <summary>
            By block.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ColorType.ByColor">
            <summary>
            By color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ColorType.ByColorIndex">
            <summary>
            By color index into a color table (ACI, AutoCAD color index).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ColorType.ByPenIndex">
            <summary>
            By pen index into a pen color table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ColorType.Foreground">
            <summary>
            Editor foreground color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ColorType.None">
            <summary>
            No color.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.BlockFlags">
            <summary>
            Flags that apply to a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.BlockFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.BlockFlags.Anonymous">
            <summary>
            This is an anonymous block generated by hatching, associative
            dimensioning, other internal operations, or an application.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.BlockFlags.HasNonConstantAttributeDefinitions">
            <summary>
            This block has non-constant attribute definitions (this bit is not set if
            the block has any attribute definitions that are constant, or has no
            attribute definitions at all).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.BlockFlags.IsExternalReference">
            <summary>
            This block is an external reference (xref).
            </summary>
            <remarks>
            This flag may be set when <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/> has a value, but this is not
            mandatory.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.BlockFlags.IsXRefOverlay">
            <summary>
            This block is an xref overlay.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.BlockFlags.IsExternallyDependent">
            <summary>
            This block is externally dependent.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.BlockFlags.IsResolvedExternalRef">
            <summary>
            This is a resolved external reference, or dependent of an external
            reference (ignored on input).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.BlockFlags.IsReferencedExternalRef">
            <summary>
            This definition is a referenced external reference (ignored
            on input).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfRegion">
            <summary>
            Represents an ACIS based entity used to represent 2D data.
            See the <see cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/> class for 3D ACIS data.
            </summary>
            <remarks>
            Rendering of regions is partially supported.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfModelerGeometry">
            <summary>
            Represents a base class for all entities making use of the ACIS extension for AutoCAD.
            </summary>
            <remarks>
            The ACIS library was added to AutoCAD R13 for better support of 3D 
            features like boolean geometry. The entities in the DXF/DWG file which 
            represent ACIS data are just a thin wrapper around the internal textual 
            format of ACIS, which is termed SAT. Each ACIS based entity is containing 
            the content of a complete SAT file as encrypted text.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfModelerGeometry.LineFeed">
            <summary>Linefeed sequence added at line ends</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfModelerGeometry.satText">
            <summary>SAT file text (decrypted).</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfModelerGeometry.acisFormatIntegrationVersion">
            <summary>The version describing how the ACIS format is embedded (always 1).</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfModelerGeometry.sabStream">
            <summary>SAB binary stream.</summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfModelerGeometry.BinaryFilePrefix">
            <summary>SAB stream marker</summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfModelerGeometry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.#ctor(WW.Cad.Model.Entities.DxfModelerGeometry)">
            <summary>
            Copy constructor.
            </summary>
            <param name="entity">entity to copy from</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified entity in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.Transformation(WW.Math.Matrix4D@)">
            <summary>
            Gets the applied transformation.
            </summary>
            <param name="transform">transform applied to entity, if has</param>
            <returns><c>true</c> if the entity has transformation,
                    <c>false</c> if the entity is not transformed</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.ApplyTransformation(WW.Math.Matrix4D)">
            <summary>
            Apply transformation.
            </summary>
            <param name="transform">transform to be applied</param>
            <remarks>It mults with already available at entity transformation</remarks>>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
            <remarks>
            Depending on the entity not all transformations can be possibly. E.g. a non-uniform 
            scaling of a circle would create an ellipse, thereby changing the entity type.
            </remarks>
            <param name="config">Transformation  configuration.</param>
            <param name="matrix">Transformation matrix.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
            <remarks>
            <para>
            Depending on the entity not all transformations can be possibly. E.g. a non-uniform 
            scaling of a circle would create an ellipse, thereby changing the entity type.
            </para>
            <para>
            Overriding methods must add the action to the undoStack only if it succeeded.
            If it succeeded partially (in case of child actions), the undoStack should contain the successful child actions
            that succeeded, so they can be rolled back.
            </para>
            </remarks>
            <param name="config">Transformation  configuration.</param>
            <param name="matrix">Transformation matrix.</param>
            <param name="undoGroup">Stack for adding an undo operation for the changes done by the transforamtion.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.ApplyParser">
            <summary>
            Force start internal parser.
            </summary>
            <remarks>For internal purposes only</remarks>>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.Decrypt(System.String)">
            <summary>
            Decrypt a string of encrytped SAT code.
            </summary>
            <param name="encrypted">encrypted text</param>
            <returns>decrytped text</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.Encrypt(System.String)">
            <summary>
            Encrypt SAT text.
            </summary>
            <param name="text">SAT text</param>
            <returns>encrypted SAT text</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.AcisCode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encode/decode acis bytes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.SatTopology(WW.Cad.Model.Acis.SatFile.ParsingMode)">
            <summary>
            Return parsed SAT\SAB stream.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.SatTopology(WW.Cad.Model.Acis.SatFile.ParsingMode,System.Boolean)">
            <summary>
            Return parsed SAT\SAB stream.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfModelerGeometry.SplitLines(System.String)">
            <summary>
            Split a text into lines.
            </summary>
            <param name="text">text to split</param>
            <returns>lines of text</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.Color">
            <summary>
            Gets or sets the color of this entity.
            See also <see cref="T:WW.Cad.Model.Entities.EntityColors"/> for some very common entity colors.
            </summary>
            <remarks>
            <para>
            The default color is by layer (<see cref="F:WW.Cad.Model.Entities.EntityColors.ByLayer"/>).
            </para>
            <para>
            This property is not used when property <see cref="P:WW.Cad.Model.Entities.DxfEntity.DxfColor"/> is set.
            </para>
            </remarks>
            <example>
            Below is an example of how to create entities, assign a color to them, and extract the RGB color value.
            <code lang="cs">
using System;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class EntityColorExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            // The "by layer" color depends on the layer color the entity is on (default is the ZERO layer).
            model.Entities.Add(new DxfLine(EntityColors.ByLayer, new Point2D(0, 0), new Point2D(2, 0)));
            // This is one of the ACI colors. ACI stands for AutoCAD Color Index
            model.Entities.Add(new DxfLine(EntityColors.Green, new Point2D(0, 1), new Point2D(2, 1)));
            // This is an RGB color.
            model.Entities.Add(new DxfLine(EntityColor.CreateFromRgb(0xff, 0xa0, 0xa0), new Point2D(0, 2), new Point2D(2, 2)));

            foreach (DxfEntity entity in model.Entities) {
                // To get the ARGB value of a color, a specific color set must be provided which
                // is used to lookup ACI colors (ACI stands for AutoCAD Color Index).
                // There are several types of colors, of which ACI colors is one.
                //
                // For more details see types:
                // WW.Cad.Model.Color,
                // WW.Cad.Model.Entities.EntityColor,
                // WW.Cad.Model.ColorType
                int argb = entity.Color.ToArgb(DxfIndexedColorSet.AcadClassicIndexedColors);
                Console.WriteLine("Argb: {0}", argb);
            }
        }
    }
}
    </code>
            </example>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.DxfColor"/>
            <seealso cref="T:WW.Cad.Model.Entities.EntityColors"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.Guid">
            <summary>
            Gets or sets the guid.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.SATVersion">
            <summary>
            Gets the version number of internal SAT\SAB stream.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.AcisFormatIntegrationVersion">
            <summary>
            Gets or sets the version number how the ACIS format is embedded.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.SatText">
            <summary>
            Gets or sets the SAT text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.SabStream">
            <summary>
            Gets or sets the SAB stream.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.IsSab">
            <summary>
            Return true if original data was stored in SAB format.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.IsEmpty">
            <summary>
            Return true if modeler is empty.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.SabStreamFromSAT">
            <summary>
            Gets the SAB stream created from original SAT.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.EncriptedSatStreamFromSabTextLines">
            <summary>
            Gets or sets the encrypted lines of text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.EncriptedSatStreamFromSab">
            <summary>
            Gets the encripted SAT string created from original SAB.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.SatStreamFromSab">
            <summary>
            Gets the SAT string created from original SAB.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.EncryptedSatText">
            <summary>
            Gets or sets the SAT text in encrypted form.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.SatTextLines">
            <summary>
            Gets or sets the unencrypted lines of text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.EncryptedSatTextLines">
            <summary>
            Gets or sets the encrypted lines of text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <remarks>
            Property of internal cache. .dwg files only. Optional.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.Wires">
            <summary>
            Gets the wires.
            </summary>
            <remarks>
            Property of internal cache. .dwg files only. Optional.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.Silhouettes">
            <summary>
            Gets the silhouettes.
            </summary>
            <remarks>
            Property of internal cache. .dwg files only. Optional.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.Materials">
            <summary>
            Gets the materials.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfModelerGeometry.DxfModelerGuid">
            <summary>
            Represents a guid handling class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfModelerGeometry.DxfModelerGuid.Empty">
            <summary>
            Represents an empty guid class.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfModelerGeometry.DxfModelerGuid.Guid">
            <summary>
            Gets or sets the version number how the ACIS format is embedded.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRegion.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRegion.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRegion.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRegion.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRegion.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRegion.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.TrueTypeFontDescriptor">
            <summary>
            Describes a true type font.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontDescriptor.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontDescriptor.CopyFrom(WW.Cad.Model.Text.TrueTypeFontDescriptor)">
            <summary>
            Copies all fields from the specified instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontDescriptor.FontFilename">
            <summary>
            Gets or sets the font filename.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontDescriptor.TypeFace">
            <summary>
            Gets or sets the type face.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontDescriptor.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontDescriptor.IsBold">
            <summary>
            Gets or sets a value indicating whether the font is bold.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontDescriptor.IsItalic">
            <summary>
            Gets or sets a value indicating whether the font is italic.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontDescriptor.CharSet">
            <summary>
            Gets or sets the character set.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontDescriptor.PitchAndFamily">
            <summary>
            Gets or sets the pitch and family.
            The lowest 2 bits represent the pitch.
            The highest 4 bits represent the family.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.TrueTypeFontFlags">
            <summary>
            Represents true type font flags for <see cref="T:WW.Cad.Model.Text.TrueTypeFontDescriptor"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TrueTypeFontFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TrueTypeFontFlags.Bold">
            <summary>
            This bit is set when the font is bold.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TrueTypeFontFlags.Italic">
            <summary>
            This bit is set when the font is italic.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TrueTypeFontFlags.PitchBitMask">
            <summary>
            These 2 bits are used for the pitch.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TrueTypeFontFlags.FamilyBitMask">
            <summary>
            These 4 bits are used for the font family.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TrueTypeFontFlags.PitchAndFamilyBitMask">
            <summary>
            Bit mask for pitch and family.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TrueTypeFontFlags.CharacterSetBitMask">
            <summary>
            These 8 bits are used for the character set.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.IDataCellValueVisitor">
            <summary>
            Visitor interface for <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue"/> instances.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.Unknown)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.Int32)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.Double)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.String)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.Point3D)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.ObjectId)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.Bool)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDataCellValueVisitor.Visit(WW.Cad.Model.Objects.DxfDataCellValue.Vector3D)">
            <summary>
            Visits the specified object.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter">
            <summary>
            Represents the dynamic block base point parameter.
            </summary>
            <remarks>
            Base point parameter cannot be associated with actions.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.UnknownInt16">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.Variable">
            <summary>
            Gets or sets the variable value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.UnknownString">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.ValueType">
            <summary>
            Gets or sets the value type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockUserParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipAction">
            <summary>
            Represents the dynamic block flip action.
            </summary>
            <remarks>
            Linked DXf entities will be flipped about an axis.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipAction.ActionConnections">
            <summary>
            Gets or sets the connections for flip action.
            </summary>
            <remarks>
            Action can be connected only with DxfFlipParameter. It defines flip axis.
            Four elements connection array - Flip, UpdatedFlip, UpdatedBase, UpdatedEnd.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction">
            <summary>
            Represents the dynamic block array action.
            </summary>
            <remarks>
            Linked to action Dxf entites might be arrayed.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction.ActionConnections">
            <summary>
            Gets or sets the connections for array action.
            </summary>
            <remarks>
            Connections to parameter's Base, End, UpdatedBase, UpdatedEnd.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction.ColumnOffset">
            <summary>
            Gets or sets the column offset. Default value is 0.
            </summary>
            <remarks>
            The number of colums is distance betweeen parameter points in X direction
            divided by colum offset.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction.RowOffset">
            <summary>
            Gets or sets the row offset. Default value is 0.
            </summary>
            <remarks>
            Used only if action linked with XY paramenter. 
            The number of rows is distance betweeen parameter points in Y direction 
            divided by row offset.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockArrayAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue">
            <summary>
            This is an abstract class representing a value for a <see cref="T:WW.Cad.Model.Objects.DxfDataCell"/>.
            Use one of the inner classes which are implementations of this class for each different <see cref="T:WW.Cad.Model.Objects.DataCellType"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.Unknown">
            <summary>
            Represents an unknown value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Unknown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Unknown"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Unknown.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Unknown.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Unknown.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.Int32">
            <summary>
            Represents an <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Int32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Int32"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Int32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Int32"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Int32.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Int32.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Int32.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Int32.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Int32.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.Double">
            <summary>
            Represents a <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Double.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Double"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Double.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Double"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Double.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Double.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Double.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Double.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.String">
            <summary>
            Represents a <see cref="T:System.String"/> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.String"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.String"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.String.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.String.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.String.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.String.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.String.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.Point3D">
            <summary>
            Represents a <see cref="T:WW.Math.Point3D">3D point</see> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Point3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Point3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Point3D.#ctor(WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Point3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Point3D.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Point3D.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Point3D.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Point3D.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Point3D.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.ObjectIdBase">
            <summary>
            Represents an object ID base class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.ObjectIdBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.ObjectIdBase"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.ObjectIdBase.#ctor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.ObjectIdBase"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.ObjectIdBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.ObjectIdBase.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.ObjectId">
            <summary>
            Represents a reference to a <see cref="T:WW.Cad.Model.DxfHandledObject"/> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.ObjectId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.ObjectId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.ObjectId.#ctor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.ObjectId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.ObjectId.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.ObjectId.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.ObjectId.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.OwnerIdBase">
            <summary>
            Represents an owner ID base class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.OwnerIdBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.OwnerIdBase"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.OwnerIdBase.#ctor(WW.Cad.Model.Objects.DxfObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.OwnerIdBase"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.OwnerIdBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.OwnerIdBase.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId">
            <summary>
            Represents a hard owner reference to a <see cref="T:WW.Cad.Model.DxfHandledObject"/> value.
            The value must be derived from <see cref="T:WW.Cad.Model.Objects.DxfObject"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId.#ctor(WW.Cad.Model.Objects.DxfObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.HardOwnerId.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId">
            <summary>
            Represents a soft owner reference to a <see cref="T:WW.Cad.Model.DxfHandledObject"/> value.
            The value must be derived from <see cref="T:WW.Cad.Model.Objects.DxfObject"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId.#ctor(WW.Cad.Model.Objects.DxfObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.SoftOwnerId.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId">
            <summary>
            Represents a hard pointer reference to a <see cref="T:WW.Cad.Model.DxfHandledObject"/> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId.#ctor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.HardPointerId.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DxfHandledObject"/> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId.#ctor(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.SoftPointerId.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.Bool">
            <summary>
            Represents a <see cref="T:System.Boolean"/> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Bool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Bool"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Bool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Bool"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Bool.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Bool.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Bool.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Bool.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Bool.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D">
            <summary>
            Represents a <see cref="T:WW.Math.Vector3D">3D vector</see> value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D.#ctor(WW.Math.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D.Accept(WW.Cad.Model.Objects.IDataCellValueVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCellValue.Vector3D.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.GridFlags">
            <summary>
            Represents grid flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.GridFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.GridFlags.DisplayBeyondLimits">
            <summary>
            The grid displays beyond the limits.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.GridFlags.IsAdaptive">
            <summary>
            Whether the grid is adaptive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.GridFlags.AllowSubdivision">
            <summary>
            Whether the grid allows subdivision.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.GridFlags.FollowsDynamicUcs">
            <summary>
            Whether the grid follows the dynamic UCS.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.SchemaUnknownProperty">
            <summary>
            Represents a schema unknown property.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaUnknownProperty.DataSize">
            <summary>
            Gets or sets the data size.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaUnknownProperty.UnknownFlags">
            <summary>
            Gets or sets the unknown flags.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ClippingPathDrawerWrapper">
            <summary>
            Wrapper for <see cref="T:WW.Cad.Model.IPathDrawer"/> which takes care of clipping.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ClippingPathDrawerWrapper.#ctor(WW.Cad.Drawing.IClippingTransformer,WW.Cad.Model.IPathDrawer)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.ClippingPathDrawerWrapper"/> class.
            </summary>
            <param name="transformer">The clipping transformer.</param>
            <param name="wrapped">The wrapped path drawer.</param>
        </member>
        <member name="M:WW.Cad.Model.ClippingPathDrawerWrapper.DrawPath(WW.Math.Geometry.IShape4D,WW.Drawing.ArgbColor,System.Int16)">
            <summary>
            Draw a path.
            </summary>
            <remarks>
            The path is not considered to be from at text.
            </remarks>
            <param name="path">path to draw</param>
            <param name="color">color used for path</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="M:WW.Cad.Model.ClippingPathDrawerWrapper.DrawPath(WW.Math.Geometry.IShape2D,WW.Math.Matrix4D,WW.Drawing.ArgbColor,System.Int16,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Draw a path.
            </summary>
            <param name="path">path to draw</param>
            <param name="transform">transformation used on path</param>
            <param name="color">color used for path</param>
            <param name="lineWeight">The line weight.</param>
            <param name="filled">fill the path?</param>
            <param name="forText">is this a path created from a text?</param>
            <param name="extrusion">either <c>0</c> or the extrusion in z direction before transformation</param>
        </member>
        <member name="M:WW.Cad.Model.ClippingPathDrawerWrapper.DrawCharPath(WW.Math.Geometry.IShape2D,WW.Math.Matrix4D,WW.Drawing.ArgbColor,System.Int16,System.Boolean,System.Double)">
            <summary>
            Draw a path for a character.
            </summary>
            <param name="path">
            path to draw. Is assumed to be the same shape instance for the same character of a font so
            based on this it can be used as a key for e.g. a cache lookup.
            </param>
            <param name="transform">transformation used on path</param>
            <param name="color">color used for path</param>
            <param name="lineWeight">The line weight.</param>
            <param name="filled">fill the path?</param>
            <param name="extrusion">either <c>0</c> or the extrusion in z direction before transformation</param>
        </member>
        <member name="M:WW.Cad.Model.ClippingPathDrawerWrapper.IsSeparateCharDrawingPreferred">
            <summary>
            Is this drawer gaining from drawing separate chars rather than drawing complete strings?
            </summary>
            <remarks>
            Usually a complete string is draw as one path. 
            Splitting this into single paths for each letter is an order N algorithm (N being the number of letters),
            so if the drawer works with less effiency depending on the number of paths/points involved (N log N or worse)
            it should return <c>true</c> here. But be sure to test both cases with a TTF text intensive file because
            sometimes the memory overhead of creating all new paths eat up the gain.
            </remarks>
            <returns><c>true</c> if this drawer gains from small filled paths, <c>false</c> otherwise</returns>
        </member>
        <member name="T:WW.Cad.Model.DxfTypedObjectReference">
            <summary>
            Represents a typed object reference (where typed refers to the reference type).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTypedObjectReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTypedObjectReference"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTypedObjectReference.#ctor(WW.Cad.Model.ReferenceType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTypedObjectReference"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTypedObjectReference.#ctor(WW.Cad.Model.ReferenceType,WW.Cad.Model.DxfObjectReference)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTypedObjectReference"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTypedObjectReference.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTypedObjectReference.ReferenceType">
            <summary>
            Gets the reference type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTypedObjectReference.ObjectReference">
            <summary>
            Gets the object reference.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatDistantShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatDistantShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatDistantShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatDistantShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.UnknownDataElementBase">
            <summary>
            Base helper class to store unknown information.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.UnknownDataElement`1">
            <summary>
            Template helper class to store typed unknown information.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity">
            <summary>
            Place holder for entities which are not (yet) known.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.unknownData">
            <summary>SAB or SAT content which couldn't be interpreted.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.entityType">
            <summary>Entity type.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.basicEntity">
            <summary>Base entity.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.#ctor(System.String,WW.Cad.Model.Acis.SatEntities.SatEntity)">
            <summary>
            Constructor.
            </summary>
            <param name="entityType">entity type</param>
            <param name="basicEntity">entity on which this entity is based</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.Index">
            <summary>
            Get/set the index of this entity.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.Attribute">
            <summary>
            Get/set the attribute.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.SomeValue">
            <summary>
            Unknown value with unknown purpose.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.EntityType">
            <summary>
            Get the type of this entity.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.UnknownSatEntity.BasicEntity">
            <summary>
            Get the entity on which this one is based.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatLoop">
            <summary>
            SAT loop entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatLoop.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatLoop.nextLoop">
            <summary>Pointer to next loop.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatLoop.firstCoedge">
            <summary>Pointer to first coedge.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatLoop.face">
            <summary>Pointer to face bounded by this loop.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLoop.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLoop.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLoop.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLoop.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLoop.Next">
            <summary>
            Get the next entity of the same type if this entity is a member in a list.
            </summary>
            <remarks>
            Returns <c>null</c> if this entity is not in a list or if it is the last member of the list
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLoop.NextLoop">
            <summary>
            Get the next loop.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLoop.FirstCoedge">
            <summary>
            Get the first coedge.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLoop.Face">
            <summary>
            Get the face to which this loop belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLoop.Coedges">
            <summary>
            Get the coedges belonging to this loop.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFixedWidth">
            <summary>
            SAT class for fixed width var radius object.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFixedWidth.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFixedWidth.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFixedWidth.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFixedWidth.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweptTaperSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatEdgeTaperSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBaseTaperSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBaseTaperSplineSurfacePrimitive.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBaseTaperSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatBaseTaperSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatEdgeTaperSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatEdgeTaperSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweptTaperSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweptTaperSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweptTaperSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweptTaperSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatCylindricalSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSummarySplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSummarySplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSummarySplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSummarySplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSummarySplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatCylindricalSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatCylindricalSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatCylindricalSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatCylindricalSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatLawSubPCurvePrimitive">
            <summary>
            SAT class for law parameter space curve primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatExplicitSubPCurvePrimitive">
            <summary>
            SAT class for explicit parameter space curve primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatSubPCurvePrimitive">
            <summary>
            SAT base class for parameter space subcurve primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatSubPCurvePrimitive.NameToEntityCreator">
            <summary>
            Dictionary for SAT sub curves creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatSubPCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatSubPCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatSubPCurvePrimitive.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatExplicitSubPCurvePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatExplicitSubPCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatExplicitSubPCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatLawSubPCurvePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatLawSubPCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatLawSubPCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealLumpGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealLumpGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealLumpGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealLumpGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateIsoSplineAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateIsoSplineAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateIsoSplineAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateIsoSplineAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNamePointerAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNamePointerAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNamePointerAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNamePointerAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameIntegerAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameIntegerAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameIntegerAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameIntegerAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskTrueColorAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskTrueColorAttribute.colorIndex">
            <summary>The color index.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskTrueColorAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskTrueColorAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskTrueColorAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialAttribute.material">
            <summary>The material ID.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskMaterialAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskColorAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskColorAttribute.colorIndex">
            <summary>The color index.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskColorAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskColorAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Adesk.SatAdeskColorAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2004.FileHeader">
            <summary>
            Represents a R18 file header.
            </summary>
            <remarks>
            The data is present in the file header at the beginning, and is
            repeated at the end of the file.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.FileHeader.GapsRootId">
            <summary>
            Gets or sets the gaps tree root node id.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.FileHeader.GapsLeftId">
            <summary>
            Gets or sets the gaps tree lowest left node id.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.FileHeader.GapsRightId">
            <summary>
            Gets or sets the gaps tree lowest right node id.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.FileHeader.Header2Offset">
            <summary>
            Gets or sets the header 2 offset.
            The header 2 is a repetition of the file header data at the end of the file.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2004.Compressor">
            <summary>
            DWG 2004 uses a variation on the LZ77 compression algorithm.
            </summary>
            <remarks>
            Hashing is used to speed up for data lookups, so no sliding window is used.
            Note that because of this optimization not necessarily
            the longest match is found (favors speed over compression).
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.QuadStrip2">
            <summary>
            Represents a quad strip with a normal vector at each vertex.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadStrip2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.QuadStrip2"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadStrip2.#ctor(System.Collections.Generic.IList{WW.Math.Point3D},System.Collections.Generic.IList{WW.Math.Point3D},System.Collections.Generic.IList{WW.Math.Vector3D},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.QuadStrip2"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadStrip2.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip2.Polyline1">
            <summary>
            Gets or sets polyline 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip2.Polyline2">
            <summary>
            Gets or sets polyline 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip2.Normals">
            <summary>
            Gets or sets the normal vectors.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip2.StartVertexIndex">
            <summary>
            Gets or sets the start vertex index.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip2.EndVertexIndex">
            <summary>
            Gets or sets the end vertex index.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.OpenGL.GLGraphics3D">
            <summary>
            OpenGL control that performs a surface rendering of a <see cref="T:WW.Cad.Model.DxfModel"/>.
            </summary>
            <remarks>
            <para>
            By default a <see cref="P:WW.Cad.Drawing.GraphicsConfig.ShapeFlattenEpsilon"/> of -0.1 is used.
            </para>
            <para>
            When creating new instances of <see cref="T:WW.Cad.Drawing.OpenGL.GLGraphics3D"/>, try to reuse an existing character triangulation cache because
            triangulation is an expensive operation.
            </para>
            </remarks>
            <example>
            This example shows how to render a DXF file using OpenGL (the designer generated code is not shown).
            <code lang="cs">
using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.OpenGL;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;
using WW.OpenGL;
using WW.OpenGL.Win;

namespace WW.Examples {
    /// &lt;summary&gt;
    /// A basic DXF OpenGL viewer example.
    /// The model is spinning around its y-axis.
    /// &lt;/summary&gt;
    public partial class OpenGLViewExample : Form {
        private DxfModel model;
        private GLGraphics3D glGraphics;
        private Bounds3D bounds;
        private Timer rotationTimer = new Timer();
        private double angle;
        
        public OpenGLViewExample(string filename)
        {
            InitializeComponent();
            
            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                MessageBox.Show("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
            
            glGraphics = new GLGraphics3D();

            BoundsCalculator boundsCalculator = new BoundsCalculator();
            boundsCalculator.GetBounds(model, Matrix4D.Identity);
            bounds = boundsCalculator.Bounds;

            rotationTimer.Interval = 100;
            rotationTimer.Tick += new EventHandler(rotationTimer_Tick);
            rotationTimer.Start();
        }

        protected override void OnHandleCreated(EventArgs e) {
            base.OnHandleCreated(e);
            PixelFormatDescriptor pfd = PixelFormatDescriptor.RGBA;
            pfd.Flags |= PFD.Flags.DrawToWindow | PFD.Flags.DoubleBuffer;
            pfd.AccumBits = 64; // Set this if antialiasing is required.
            glGraphics.Initialize(RenderingContext.FromWindowHandle(Handle, pfd));

            if (model != null) {
                //Set up OpenGL related characteristics
                GL.ClearColor(0f, 0f, 0f, 0f);
                GL.ClearAccum(0f, 0f, 0f, 0f);
                GL.Enable(Capability.DepthTest);
                GL.DepthFunc(ComparisonFunction.LessEqual);
                GL.Disable(Capability.CullFace);
                GL.Enable(Capability.ColorMaterial);
                GL.ColorMaterial(ColorMaterialFace.FrontAndBack, ColorMaterialParameter.AmbientAndDiffuse);
                GL.LightModeli(LightModelParameter.Ambient, true);
                GL.Hint(HintTarget.PerspectiveCorrection, HintMode.Nicest);

                GL.ShadeModel(ShadingModel.Smooth);

                SetModelViewTransform();

                // Add some global illumination.
                GL.LightModelfv(LightModelParameter.Ambient, new float[] { 0.5f, 0.5f, 0.5f, 1f });
                GL.LightModeli(LightModelParameter.TwoSide, true);

                GL.Lightfv(LightName.Light0, LightParameter.Diffuse, new float[] { 1f, 1f, 1f, 1f });

                GL.Lightfv(LightName.Light0, LightParameter.Specular, 0f, 0f, 0f, 0f);
                Point3D lightPosition = new Point3D(0d, 0d, bounds.Delta.GetLength());
                GL.Lightfv(
                    LightName.Light0,
                    LightParameter.Position,
                    new float[] { 
                            (float)lightPosition.X, 
                            (float)lightPosition.Y,
                            (float)lightPosition.Z,
                            1f
                        }
                );
                GL.Enable(LightName.Light0);

                GL.Hint(HintTarget.PerspectiveCorrection, HintMode.Nicest);

                // Create the drawables.
                glGraphics.CreateDrawables(model, Matrix4D.Identity);
                glGraphics.EndDrawableCreation();
                UpdateProjectionTransform();
                glGraphics.Resize(ClientSize.Width, ClientSize.Height);
                Invalidate();
            }
        }

        protected override void OnHandleDestroyed(EventArgs e) {
            if (glGraphics != null) {
                glGraphics.Dispose();
                glGraphics = null;
            }
            base.OnHandleDestroyed(e);
        }

        private void rotationTimer_Tick(object sender, EventArgs e)
        {
            angle += System.Math.PI / 20d;
            if (angle &gt; (System.Math.PI * 2d))
            {
                angle = 0d;
            }
            glGraphics.RenderingContext.MakeCurrent();
            SetModelViewTransform();
            Invalidate();
        }

        private void SetModelViewTransform()
        {
            Vector3D boundsDelta = bounds.Delta;
            double boundsDeltaLength = boundsDelta.GetLength();
            double cameraDistance = 2d * boundsDeltaLength;
            GL.MatrixMode(MatrixMode.ModelView);
            Matrix4D m;
            if (System.Math.Abs(bounds.Delta.Z) &lt; 1e-3) {
                m =
                    Transformation4D.Translation(0d, 0d, -cameraDistance) *
                    Transformation4D.RotateX(System.Math.PI * 30d / 180d) * // Tilt the model a bit to get a nice 3D view.
                    Transformation4D.RotateY(angle) * // Rotate around its Y-axis.
                    Transformation4D.Translation(-(Vector3D)bounds.Center); // Move the model center to the origin.
            } else {
                m =
                    Transformation4D.Translation(0d, 0d, -cameraDistance) *
                    Transformation4D.RotateX(-System.Math.PI * 60d / 180d) * // Tilt the model a bit to get a nice 3D view.
                    Transformation4D.RotateZ(angle) * // Rotate around its Z-axis.
                    Transformation4D.Translation(-(Vector3D)bounds.Center); // Move the model center to the origin.
            }
            GL.LoadMatrixd(ref m);
        }

        private void UpdateProjectionTransform()
        {
            Vector3D boundsDelta = bounds.Delta;
            double boundsDeltaLength = boundsDelta.GetLength();
            double cameraDistance = 2d * boundsDeltaLength;

            // Choose the frontClip / backClip ration as large as possible for highest possible depth buffer precision.
            double frontClip = 0.4d * cameraDistance;
            double backClip = 1.6d * cameraDistance;

            // Scale such that front plane rectangle always fits the screen without distorting the image.
            double frontPlaneDx = boundsDeltaLength;
            double frontPlaneDy = boundsDeltaLength;
            double width = (double)ClientSize.Width;
            double height = (double)ClientSize.Height;
            // See if the screen width or height is the limiting factor.
            if (width / height &gt; frontPlaneDx / frontPlaneDy) {
                frontPlaneDx *= (width / height) / (frontPlaneDx / frontPlaneDy);
            } else {
                frontPlaneDy *= (frontPlaneDx / frontPlaneDy) / (width / height);
            }

            // mu is the angle between a line pointing out of the camera in z direction and 
            // the plane through the camera and the right-hand edge of the display.
            double cotanMu = 1.5d * boundsDeltaLength / (0.5d * frontPlaneDx);
            // nu is the angle between the same line and the plane through the camera and 
            // the top edge of the display.
            double cotanNu = 1.5d * boundsDeltaLength / (0.5d * frontPlaneDy);
            Matrix4D projectionTransform =
                Transformation4D.GetPerspectiveProjectionTransform(
                    cotanMu,
                    cotanNu,
                    frontClip,
                    backClip
                );
            // Use transformation below for orthographic projection (parallel projection).
            //Matrix4D projectionTransform =
            //    Transformation4D.GetOrthographicProjectionTransform(
            //        -0.5d * frontPlaneDx,
            //        0.5d * frontPlaneDx,
            //        -0.5d * frontPlaneDy,
            //        0.5d * frontPlaneDy,
            //        frontClip,
            //        backClip
            //    );
            if (glGraphics.RenderingContext != null) {
                glGraphics.RenderingContext.MakeCurrent();
                GL.MatrixMode(MatrixMode.Projection);
                GL.LoadMatrixd(ref projectionTransform);
            }
        }

        protected override void OnResize(EventArgs e) {
            base.OnResize(e);
            if (glGraphics != null) {
                UpdateProjectionTransform();
                glGraphics.Resize(ClientSize.Width, ClientSize.Height);
                Invalidate();
            }
        }

        // Don't paint the background.
        protected override void OnPaintBackground(PaintEventArgs e) {
        }

        protected override void OnPaint(PaintEventArgs e) {
            glGraphics.Paint(ClientSize.Width, ClientSize.Height);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.OpenGL.GLGraphics3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.#ctor(WW.OpenGL.RenderingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.OpenGL.GLGraphics3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.BeginDrawableCreation(System.Boolean)">
            <summary>
            Begin drawable creation.
            This sets up the display list if not set up yet, and OpenGL lighting.
            </summary>
            <remarks>
            This method is called internally by all the <see cref="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)"/> overloads.
            </remarks>
            <param name="clearOldDrawables">specifies whether to clear the old drawables.</param>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.EndDrawableCreation">
            <summary>
            End drawable creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Create drawable objects for given dxf model from entities in model space.
            </summary>
            <remarks>
            <para>
            Old drawables are cleared before creating the new ones.
            </para>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and are later drawn using OpenGL
            in the <see cref="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.OnDrawScene(System.EventArgs)"/> method.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.ClearDrawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D,System.Boolean)">
            <summary>
            Create drawable objects for given dxf model from entities in model space.
            </summary>
            <remarks>
            <para>
            Old drawables are cleared before creating the new ones.
            </para>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and are later drawn using OpenGL
            in the <see cref="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.OnDrawScene(System.EventArgs)"/> method.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <param name="clearOldDrawables">
            Whether to clear the old drawable objects before creating the new ones.
            </param>
            <seealso cref="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.ClearDrawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Create drawable objects for specified entities in model space.
            </summary>
            <remarks>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and can later be drawn
            using the <see cref="M:WW.OpenGL.GLGraphics.Paint(System.Int32,System.Int32)"/> method.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.ClearDrawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateDrawables(WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Creates the drawables for the specified graphic elements (typically use <see cref="T:WW.Cad.Drawing.Surface.Graphics"/>).
            </summary>
            <param name="graphicElementBlock">The graphic element block, typically use <see cref="T:WW.Cad.Drawing.Surface.Graphics"/>.</param>
            <seealso cref="T:WW.Cad.Drawing.Surface.Graphics"/>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateDrawables(WW.Cad.Drawing.Surface.ProcessedGraphicElementBlock)">
            <summary>
            Creates the drawables for the specified graphic elements (typically use <see cref="T:WW.Cad.Drawing.Surface.ProcessedGraphics"/>).
            </summary>
            <param name="graphicElementBlock">The graphic element block, typically use <see cref="T:WW.Cad.Drawing.Surface.ProcessedGraphics"/>.</param>
            <seealso cref="T:WW.Cad.Drawing.Surface.ProcessedGraphics"/>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.ClearDrawables">
            <summary>
            Clears the drawables.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.OnDrawScene(System.EventArgs)">
            <summary>
            Draws the scene.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.Dispose">
            <summary>
            Disposes the unmanaged/OpenGL resources referenced by this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.BeginNode(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface)">
            <summary>
            Begins a node.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.EndNode">
            <summary>
            Ends a node.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.SetColor(WW.Drawing.ArgbColor)">
            <summary>
            Set color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreatePoint(WW.Math.Vector4D)">
            <summary>
            Creates a point.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateSegment(WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates a line segment.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreatePolyline(System.Collections.Generic.IList{WW.Math.Vector4D},System.Boolean)">
            <summary>
            Creates an optionally closed polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateTriangle(WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D,System.Collections.Generic.IList{System.Boolean})">
            <summary>
            Creates a triangle.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateQuad(System.Collections.Generic.IList{WW.Math.Vector4D},System.Collections.Generic.IList{System.Boolean})">
            <summary>
            Creates a quad.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateQuadStrip(System.Collections.Generic.IList{WW.Math.Vector4D},System.Collections.Generic.IList{WW.Math.Vector4D},WW.Math.Vector3D,System.Boolean)">
            <summary>
            Creates the quad strip.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateQuadStrip(System.Collections.Generic.IList{WW.Math.Vector4D},System.Collections.Generic.IList{WW.Math.Vector4D},System.Collections.Generic.IList{WW.Math.Vector3D},System.Int32,System.Int32)">
            <summary>
            Creates a quad strip.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreatePolygonMesh(WW.Math.Vector4D[0:,0:],System.Boolean,System.Boolean)">
            <summary>
            Creates a polygon mesh.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.CreateTexturedTriangles(System.Byte[],System.Int32,System.Int32,WW.Math.Vector3D,System.Collections.Generic.IList{WW.Math.Geometry.Triangulator2D.Triangle},System.Collections.Generic.IList{WW.Math.Point2D},System.Collections.Generic.IList{WW.Math.Vector4D})">
            <summary>
            Creates textured triangles.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.AddTexture(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds a texture.
            </summary>
            <returns>Returns the OpenGL texture id.</returns>
        </member>
        <member name="P:WW.Cad.Drawing.OpenGL.GLGraphics3D.GraphicsConfig">
            <summary>
            Gets or sets the graphics configuration determining
            various aspects of the rendering process.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.OpenGL.GLGraphics3D.LightEnabled">
            <summary>
            Gets or sets whether lighting should be enabled (default true).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.OpenGL.GLGraphics3D.LightEnabledForLines">
            <summary>
            Gets or sets whether lighting should be enabled for lines (default false).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.OpenGL.GLGraphics3D.CharTriangulationCache">
            <summary>
            Gets or sets the character triangulation cache.
            </summary>
            <remarks>
            <para>
            Triangulation is a computationally expensive operation, so caching avoids triangulating
            the same character many times.
            </para>
            <para>
            When creating new instances of <see cref="T:WW.Cad.Drawing.OpenGL.GLGraphics3D"/>, try to reuse an existing character triangulation cache.
            </para>
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.OpenGL.GLGraphics3D.GraphicElementsConverter">
            <summary>
            Converts surface graphic elements to OpenGL calls.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.GLGraphicElement.BeforeDraw(WW.Cad.Drawing.OpenGL.GLGraphics3D.GraphicElementsConverter)">
            <summary>
            Execute some code before drawing,
            mainly intended for setting up a display list.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.GLGraphicElement.Draw(WW.Cad.Drawing.OpenGL.GLGraphics3D.GraphicElementsConverter)">
            <summary>
            Draw this graphic element.
            Display lists are assumed to be set up by now.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.OpenGL.GLGraphics3D.GLGraphicElement1">
            <summary>
            Wrapper for <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.OpenGL.GLGraphics3D.GLGraphicElement2">
            <summary>
            Wrapper for <see cref="T:WW.Cad.Drawing.Surface.GraphicElement2"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.OpenGL.GLGraphics3D.GLGraphicElementInsert">
            <summary>
            Wrapper for <see cref="T:WW.Cad.Drawing.Surface.GraphicElementInsert"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.OpenGL.GLGraphics3D.GLProcessedGraphicElementInsert">
            <summary>
            Wrapper for <see cref="T:WW.Cad.Drawing.Surface.GraphicElementInsert"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.GLProcessedGraphicElementBlock.BeforeDraw(WW.Cad.Drawing.OpenGL.GLGraphics3D.GraphicElementsConverter)">
            <summary>
            Draws everything in display lists except child inserts.
            Could also draw the OCS part of child inserts, but that would make the design a little more complex.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.IGraphicElementVisitor">
            <summary>
            Represents an <see cref="T:WW.Cad.Drawing.Surface.IGraphicElement"/> visitor interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IGraphicElementVisitor.Visit(WW.Cad.Drawing.Surface.NullGraphicElement)">
            <summary>
            Visits the specified graphic element.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IGraphicElementVisitor.Visit(WW.Cad.Drawing.Surface.GraphicElement1)">
            <summary>
            Visits the specified graphic element.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IGraphicElementVisitor.Visit(WW.Cad.Drawing.Surface.GraphicElement1Node)">
            <summary>
            Visits the specified graphic element.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IGraphicElementVisitor.Visit(WW.Cad.Drawing.Surface.GraphicElement2)">
            <summary>
            Visits the specified graphic element.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IGraphicElementVisitor.Visit(WW.Cad.Drawing.Surface.GraphicElementInsert)">
            <summary>
            Visits the specified graphic element.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.IPrimitiveVisitor">
            <summary>
            Represents an <see cref="T:WW.Cad.Drawing.Surface.IPrimitive"/> visitor interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.Point)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.PolygonMesh)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.Polyline2DE)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.Polyline2D2N)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.Polyline2D2WN)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.Polyline3D)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.Quad)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.QuadStrip1)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.QuadStrip2)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.QuadWithEdges)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.Segment)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.TexturedTriangleList)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.Triangle)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IPrimitiveVisitor.Visit(WW.Cad.Drawing.Surface.TriangleWithEdges)">
            <summary>
            Visits the specified drawing primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.PrimitiveDrawVisitor.SetNormal(WW.Math.Vector2D,WW.Math.Vector2D)">
            <summary>
            Need to set the normal, because it has to match the clockwise/counter clockwise order
            of the vertices. If they don't match, then the light position is inverted around the origin.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.GLGraphics3D.PrimitiveDrawVisitor.DrawSurface(System.Collections.Generic.IList{WW.Math.Point2D})">
            <summary>
            Draws a surface with given polygon as boundary.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.EntityFilterDelegate">
            <summary>
            Delegate for entity filtering as used by the <see cref="T:WW.Cad.Drawing.EntitySelector"/> class.
            </summary>
            <param name="drawContext">
            The draw context parameter may be <c>null</c>. 
            If not null it can be used to e.g. find the entity's effective layer if it is the by block layer
            and it is part of an inserted block.
            </param>
            <param name="entity">the entity</param>
        </member>
        <member name="T:WW.Cad.Drawing.EntitySelector">
            <summary>
            Utility class for selecting <see cref="T:WW.Cad.Model.Entities.DxfEntity">entities</see>.
            </summary>
            <remarks>
            <para>
            Entities can be selected with methods 
            <see cref="M:WW.Cad.Drawing.EntitySelector.GetClosestEntities(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double@)"/> and
            <see cref="M:WW.Cad.Drawing.EntitySelector.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D)"/>.
            </para>
            <para>
            A custom filter can be implemented by implementing <see cref="T:WW.Cad.Drawing.EntitySelector.IFilter"/> and letting the filter decide
            what to return. This can be used to e.g. select entities outside a rectangle.
            </para>
            </remarks>
            <example>
            Below is an example of a control viewing a dxf file. 
            Clicking on the control results in the closest entity being selected and shown in the property grid.
            Note that the designer generated file and main form containing the property grid are omitted here.
            The complete example is in the examples directory (DxfExtendedViewExampleCs).
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;

using WW.Math;

using Color = System.Drawing.Color;

namespace DxfViewExample {
    /// &lt;summary&gt;
    /// This is a control that shows a DxfModel.
    /// Dragging with the mouse pans the drawing.
    /// Clicking on the drawing selects the closest entity and
    /// shows it in the property grid.
    /// Using the scroll wheel zooms in on the mouse position.
    /// &lt;/summary&gt;
    public partial class ViewControl : UserControl {
        private DxfModel model;
        private GDIGraphics3D gdiGraphics3D;
        private Bounds3D bounds;
        private Matrix4D modelTransform = Matrix4D.Identity;
        private Matrix4D from2DTransform;
        private Vector3D translation = Vector3D.Zero;
        private Point lastMouseLocation;
        private Point mouseClickLocation;
        private double scaleFactor = 1d;
        private bool mouseDown;
        private bool shiftPressed;

        public event EventHandler&lt;EntityEventArgs&gt; EntitySelected;

        public ViewControl() {
            InitializeComponent();
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            SetStyle(ControlStyles.DoubleBuffer, true);
            SetStyle(ControlStyles.UserPaint, true);
            GraphicsConfig graphicsConfig = new GraphicsConfig();
            graphicsConfig.BackColor = BackColor;
            graphicsConfig.CorrectColorForBackgroundColor = true;
            gdiGraphics3D = new GDIGraphics3D(graphicsConfig);
            bounds = new Bounds3D();
        }

        public DxfModel Model {
            get { 
                return model; 
            }
            set { 
                model = value;
                if (model != null) {
                    gdiGraphics3D.CreateDrawables(model);
                    // Uncomment for rotation example.
                    //            modelTransform = Transformation4D.RotateX(-30d * Math.PI / 180d) *
                    //                Transformation4D.RotateZ(150d * Math.PI / 180d);
                    gdiGraphics3D.BoundingBox(bounds, modelTransform);
                    CalculateTo2DTransform();
                    Invalidate();
                }
            }
        }

        public Point2D GetModelSpaceCoordinates(Point2D screenSpaceCoordinates) {
            return from2DTransform.TransformTo2D(screenSpaceCoordinates);
        }

        protected override void OnPaint(PaintEventArgs e) {
            Graphics gr = e.Graphics;
            gdiGraphics3D.Draw(e.Graphics, ClientRectangle);
        }

        private Matrix4D CalculateTo2DTransform() {
            Matrix4D to2DTransform = Matrix4D.Identity;
            if (model != null &amp;&amp; bounds != null) {
                double halfHeight = ClientSize.Height / 2;
                double halfWidth = ClientSize.Width / 2;
                double margin = 5d; // 5 pixels margin on each size.
                to2DTransform =
                    Transformation4D.Translation(translation) *
                    Transformation4D.Translation(halfWidth, halfHeight, 0) *
                    Transformation4D.Scaling(scaleFactor) *
                    DxfUtil.GetScaleTransform(
                        bounds.Corner1,
                        bounds.Corner2,
                        bounds.Center,
                        new Point3D(margin, ClientSize.Height - margin, 0d),
                        new Point3D(ClientSize.Width - margin, margin, 0d),
                        Point3D.Zero
                    );
            }
            gdiGraphics3D.To2DTransform = to2DTransform * modelTransform;
            from2DTransform = gdiGraphics3D.To2DTransform.GetInverse();
            return to2DTransform;
        }

        protected override void OnResize(EventArgs e) {
            base.OnResize(e);
            CalculateTo2DTransform();
            Invalidate();
        }

        protected override void OnMouseDown(MouseEventArgs e) {
            base.OnMouseDown(e);
            lastMouseLocation = e.Location;
            mouseClickLocation = e.Location;
            mouseDown = true;
            shiftPressed = ModifierKeys == Keys.Shift;
        }

        protected override void OnMouseMove(MouseEventArgs e) {
            base.OnMouseMove(e);
            if (mouseDown == true) {
                if (shiftPressed) {
                    DrawReversibleRectangle(mouseClickLocation, lastMouseLocation);
                    DrawReversibleRectangle(mouseClickLocation, e.Location);
                } else {
                    //drag event handle
                    int dx = (e.X - lastMouseLocation.X);
                    int dy = (e.Y - lastMouseLocation.Y);
                    translation += new Vector3D(dx, dy, 0);
                    CalculateTo2DTransform();
                    Invalidate();
                }
            }
            lastMouseLocation = e.Location;
        }

        protected override void OnMouseUp(MouseEventArgs e) {
            base.OnMouseUp(e);
            mouseDown = false;

            // Use shift key for rectangle zoom.
            if (shiftPressed) {
                DrawReversibleRectangle(mouseClickLocation, lastMouseLocation);
                Point2D corner1 = new Point2D(
                    Math.Min(mouseClickLocation.X, e.Location.X), 
                    Math.Min(mouseClickLocation.Y, e.Location.Y)
                );
                Point2D corner2 = 
                    new Point2D(
                        Math.Max(mouseClickLocation.X, e.Location.X),
                        Math.Max(mouseClickLocation.Y, e.Location.Y)
                    );
                Vector2D delta = corner2 - corner1;
                if (!(MathUtil.AreApproxEqual(delta.X, 0d) || MathUtil.AreApproxEqual(delta.Y, 0d))) {
                    Matrix4D oldTo2DTransform = CalculateTo2DTransform();

                    // Update scaleFactor
                    double scale = Math.Min(ClientSize.Width / delta.X, ClientSize.Height / delta.Y);
                    scaleFactor *= scale;

                    // Update translation
                    Point3D screenSpaceCenter = (Point3D)(corner1 + 0.5d * delta);
                    Point3D newModelSpaceCenter = oldTo2DTransform.GetInverse().Transform(screenSpaceCenter);
                    Matrix4D intermediateTo2DTransform = CalculateTo2DTransform();
                    intermediateTo2DTransform.TransformTo2D(newModelSpaceCenter);
                    Point3D intermediateScreenSpaceCenter = intermediateTo2DTransform.Transform(newModelSpaceCenter);
                    translation += (
                        new Point3D(0.5d * ClientSize.Width, 0.5d * ClientSize.Height, 0d) - 
                        intermediateScreenSpaceCenter
                    );

                    CalculateTo2DTransform();
                    Invalidate();
                }
            } else {
                // Select entity at mouse location if mouse didn't move
                // and show entity in property grid.
                if (mouseClickLocation == e.Location) {
                    Point2D referencePoint = new Point2D(e.X, e.Y);
                    double distance;
                    IList&lt;RenderedEntityInfo&gt; closestEntities =
                        EntitySelector.GetClosestEntities(
                            model,
                            GraphicsConfig.BlackBackgroundCorrectForBackColor,
                            gdiGraphics3D.To2DTransform,
                            referencePoint,
                            out distance
                        );
                    if (closestEntities.Count &gt; 0) {
                        DxfEntity entity = closestEntities[0].Entity;
                        OnEntitySelected(new EntityEventArgs(entity));
                    }
                }
            }
        }

        protected override void OnMouseWheel(MouseEventArgs e) {
            base.OnMouseWheel(e);

            Matrix4D oldTo2DTransform = CalculateTo2DTransform();
            int compare = Math.Sign(e.Delta);
            // wheel movement is forward 
            if (compare &gt; 0) {
                scaleFactor *= 1.1d;
            }
            // wheel movement is backward 
            else if (compare &lt; 0) {
                scaleFactor /= 1.1d;
            }

            // --- Begin of correction on the translation to zoom into mouse position.
            // Comment out this section to zoom into center of model.
            Point3D currentScreenPoint = new Point3D(e.X, e.Y, 0d);
            Point3D modelPoint = oldTo2DTransform.GetInverse().Transform(currentScreenPoint);
            Matrix4D intermediateTo2DTransform = CalculateTo2DTransform();
            Point3D screenPoint = intermediateTo2DTransform.Transform(modelPoint);
            translation += (currentScreenPoint - screenPoint);
            // --- End of translation correction.

            CalculateTo2DTransform();

            Invalidate();
        }

        protected virtual void OnEntitySelected(EntityEventArgs e) {
            if (EntitySelected != null) {
                EntitySelected(this, e);
            }
        }

        protected void DrawReversibleRectangle(Point p1, Point p2) {
            p1 = PointToScreen(p1);
            p2 = PointToScreen(p2);
            ControlPaint.DrawReversibleLine(new Point(p1.X, p1.Y), new Point(p1.X, p2.Y), Color.White);
            ControlPaint.DrawReversibleLine(new Point(p1.X, p2.Y), new Point(p2.X, p2.Y), Color.White);
            ControlPaint.DrawReversibleLine(new Point(p2.X, p2.Y), new Point(p2.X, p1.Y), Color.White);
            ControlPaint.DrawReversibleLine(new Point(p2.X, p1.Y), new Point(p1.X, p1.Y), Color.White);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetClosestEntities(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,WW.Cad.Drawing.EntityFilterDelegate,System.Double@)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <param name="distance">The resulting distance.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetClosestEntities(WW.Cad.Model.DxfModel,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,WW.Cad.Drawing.EntityFilterDelegate,System.Double@)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="entities">The entities.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="filterDelegate">The filter delegate to filter out entities to take into consideration
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.</param>
            <param name="distance">The resulting distance.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity.
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetClosestEntities(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,WW.Cad.Drawing.EntityFilterDelegate,System.Double@)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <param name="distance">The resulting distance.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetClosestEntities(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double@)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="distance">The resulting distance.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetClosestEntities(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,WW.Cad.Drawing.EntityFilterDelegate,System.Double@)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <param name="distance">The resulting distance.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetClosestEntities(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double@)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="distance">The resulting distance.</param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetClosestEntities(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double@)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="distance">The resulting distance.</param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesCloseToPoint(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="testSquareWidth">
            The test square width. All entities that have a closest point within the square with this width
            and centered around the reference point are returned.
            </param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesCloseToPoint(WW.Cad.Model.DxfModel,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="entities">The entities.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="testSquareWidth">The test square width. All entities that have a closest point within the square with this width
            and centered around the reference point are returned.</param>
            <param name="filterDelegate">The filter delegate to filter out entities to take into consideration
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity.
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesCloseToPoint(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="testSquareWidth">
            The test square width. All entities that have a closest point within the square with this width
            and centered around the reference point are returned.
            </param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesCloseToPoint(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="testSquareWidth">
            The test square width. All entities that have a closest point within the square with this width
            and centered around the reference point are returned.
            </param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesCloseToPoint(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="testSquareWidth">
            The test square width. All entities that have a closest point within the square with this width
            and centered around the reference point are returned.
            </param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesCloseToPoint(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="testSquareWidth">
            The test square width. All entities that have a closest point within the square with this width
            and centered around the reference point are returned.
            </param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesCloseToPoint(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Point2D,System.Double)">
            <summary>
            Gets the closest entities to specified 2D reference point.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="referencePoint">The reference point to compare with.</param>
            <param name="testSquareWidth">
            The test square width. All entities that have a closest point within the square with this width
            and centered around the reference point are returned.
            </param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            </param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="entities">The entities.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <param name="filterDelegate">The filter delegate to filter out entities to take into consideration
            (return <c>true</c> to include the entity).</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity.
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            </param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D)">
            <summary>
            Gets the entities enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            </param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D)">
            <summary>
            Gets the entities enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D)">
            <summary>
            Gets the entities enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesPartiallyInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities (partially) enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            </param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesPartiallyInRectangle(WW.Cad.Model.DxfModel,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities (partially) enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="entities">The entities.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <param name="filterDelegate">The filter delegate to filter out entities to take into consideration
            (return <c>true</c> to include the entity).</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity.
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesPartiallyInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities (partially) enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            </param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesPartiallyInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D)">
            <summary>
            Gets the entities (partially) enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesPartiallyInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the entities (partially) enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            </param>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesPartiallyInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D)">
            <summary>
            Gets the entities (partially) enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetEntitiesPartiallyInRectangle(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Math.Geometry.Rectangle2D)">
            <summary>
            Gets the entities (partially) enclosed in specified 2D rectangle.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="rectangle">The rectangle to compare with.</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetFilteredEntities(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the filtered entities according to the specified filter delegate.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the filtered entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetFilteredEntities(WW.Cad.Model.DxfModel,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the filtered entities according to the specified filter delegate.
            </summary>
            <param name="model">The model.</param>
            <param name="entities">The entities.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="filterDelegate">The filter delegate to filter out entities to take into consideration
            (return <c>true</c> to include the entity).</param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity.
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then tested for containment in given 2D rectangle.
            Only entities are selected that fit completely in the rectangle.
            This method can e.g. be used to get the entities in a rectangle region defined by mouse interaction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetFilteredEntities(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the filtered entities according to the specified filter delegate.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the filtered entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetFilteredEntities(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Gets the filtered entities according to the specified filter delegate.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="filterDelegate">
            The filter delegate to filter out entities to take into consideration 
            (return <c>true</c> to include the entity).
            When <c>null</c> the default <see cref="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)"/> method is used.
            </param>
            <returns>
            A list of rendered entities that meet the proximity criteria.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the filtered entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetFilteredEntities(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.EntitySelector.IFilter)">
            <summary>
            Gets the filtered entities using the specified filter.
            </summary>
            <param name="model">The model.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="filter">
            The filter to filter the entities. The filter itself must store the filtered entities
            and the entity selector must be able to access these through its property <see cref="P:WW.Cad.Drawing.EntitySelector.IFilter.Entities"/>
            </param>
            <returns>
            A list of rendered entities that is filtered by the filter.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetFilteredEntities(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.EntitySelector.IFilter)">
            <summary>
            Gets the filtered entities using the specified filter.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="filter">
            The filter to filter the entities. The filter itself must store the filtered entities
            and the entity selector must be able to access these through its property <see cref="P:WW.Cad.Drawing.EntitySelector.IFilter.Entities"/>
            </param>
            <returns>
            A list of rendered entities that is filtered by the filter.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetFilteredEntities(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Drawing.EntitySelector.IFilter)">
            <summary>
            Gets the filtered entities using the specified filter.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout.</param>
            <param name="viewports">The viewports.</param>
            <param name="config">The graphics configuration object determining aspects like precision.</param>
            <param name="transformation">The transformation matrix to apply.</param>
            <param name="filter">
            The filter to filter the entities. The filter itself must store the filtered entities
            and the entity selector must be able to access these through its property <see cref="P:WW.Cad.Drawing.EntitySelector.IFilter.Entities"/>
            </param>
            <returns>
            A list of rendered entities that is filtered by the filter.
            Each rendered entity contains information about the entity, the transformation
            matrix that was used to render it and optionally has a parent.
            The parent is typically an insert, dimension or leader entity. 
            Inserts may be nested multiple levels deep, thus leading to a parent chain.
            </returns>
            <remarks>
            Entities are first transformed by given transformation and transformed points
            are then compared to given 2D reference point.
            This method can e.g. be used to get the closest entity to the mouse position.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.AlwaysTrueEntityFilter(WW.Cad.Drawing.DrawContext,WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            This is the default entity filter implementation of <see cref="T:WW.Cad.Drawing.EntityFilterDelegate"/> always returning <c>true</c>.
            </summary>
            <seealso cref="T:WW.Cad.Drawing.EntityFilterDelegate"/>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.GetRenderedEntityInfo(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Creates a <see cref="T:WW.Cad.Drawing.RenderedEntityInfo"/> object from specified entity and draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.CreateClosestEntityFilter(WW.Math.Point2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Creates a closest entity filter.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.CreateEntityInRectangleFilter(WW.Math.Geometry.Rectangle2D,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Creates a entity in rectangle filter.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.CreateEntityPartiallyInSquareFilter(WW.Math.Point2D,System.Double,WW.Cad.Drawing.EntityFilterDelegate)">
            <summary>
            Creates a entity partially in square filter.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.EntitySelector.IFilter">
            <summary>
            Represents an entity filter interface used by the entity selector.
            Custom implementations may do arbitrary filtering like e.g. selecting entities that are outside a certain rectangle (a form of clipping).
            </summary>
            <remarks>
            Entity selection is done by drawing and letting the filter decide what entity is filtered based on the geometrical
            information of what is drawn for the entity.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.EntitySelector.IFilter.Entities">
            <summary>
            Gets the filtered entities.
            Implementations can use utility method <see cref="M:WW.Cad.Drawing.EntitySelector.GetRenderedEntityInfo(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/> to create
            a <see cref="T:WW.Cad.Drawing.RenderedEntityInfo"/> instance from an entity and a draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.FilterBase.CreateText(WW.Cad.Model.Entities.DxfText,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.EntitySelector.FilterBase.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.FilterBase.CreateMText(WW.Cad.Model.Entities.DxfMText,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.EntitySelector.FilterBase.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.ClosestEntityFilter.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the shape is created for text.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.ClosestEntityFilter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.EntityInRectangleFilter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.EntityPartiallyInSquareFilter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.EntityPartiallyInRectangleFilter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.EntitySelector.BasicEntityFilter">
            <summary>
            Represents a basic entity filter that only uses a specified <see cref="T:WW.Cad.Drawing.EntityFilterDelegate"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.BasicEntityFilter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.EntitySelector.BasicRootEntityFilter">
            <summary>
            Represents a basic root entity filter that only uses a specified <see cref="T:WW.Cad.Drawing.EntityFilterDelegate"/>.
            Same as <see cref="T:WW.Cad.Drawing.EntitySelector.BasicEntityFilter"/>, but if an entity is in a block, it will select the root insert/dimension etc instead
            of the entity itself.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.EntitySelector.BasicRootEntityFilter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.ModelSpaceClippingTransformer">
            <summary>
            Transformer which allows clipping in world coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.#ctor(WW.Math.Matrix4D,WW.Math.Matrix3D,WW.Cad.Drawing.ITransformableClipper)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.ModelSpaceClippingTransformer"/> class.
            </summary>
            <param name="transform">The transformation.</param>
            <param name="matrix3D">The 3D matrix, see <see cref="P:WW.Cad.Drawing.ModelSpaceClippingTransformer.Matrix3D"/>.</param>
            <param name="clipper">The clipper.</param>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.#ctor(WW.Math.Matrix4D,WW.Cad.Drawing.ITransformableClipper)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.ModelSpaceClippingTransformer"/> class.
            </summary>
            <param name="transform">The transformation.</param>
            <param name="clipper">The clipper.</param>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Cloned instance.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.Transform(WW.Math.Point3D)">
            <summary>
            Transforms and clips given vertex.
            </summary>
            <returns><b>null</b> if point was clipped away.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.Transform(WW.Math.Geometry.Segment3D)">
            <summary>
            Transforms and clips given line segment.
            </summary>
            <returns>Segments after clipping.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.Transform(WW.Math.Geometry.Polyline3D)">
            <summary>
            Transforms and clips points in given polyline.
            </summary>
            <returns>Resulting polyline parts which have more or less points than the input polyline.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.Transform(WW.Math.Geometry.IShape4D)">
            <summary>
            Transforms and clips a generic shape.
            </summary>
            <param name="shape">
            Generic shape to transform. It is expected that this shape is a temporary object, 
            which may be changed by this method.
            </param>
            <returns>Transformed and possibly clipped result shape.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.SetPreTransform(WW.Math.Matrix4D)">
            <summary>
            Applies given transform (pre) before all other transforms.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.TryIsInside(WW.Math.Bounds3D)">
            <summary>
            Check a given volume for its clipping.
            </summary>
            <remarks>
            This method may not be exact, but provides a good means for optimization.
            </remarks>
            <param name="bounds">Volume bounds.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ModelSpaceClippingTransformer.IsInside(WW.Math.Geometry.IShape4D)">
            <summary>
            Check a shape how it is clipped.
            </summary>
            <remarks>
            This is performing the whole clipping process without performing the actual clipping,
            so in most cases this is useless and it is much better to use the <see cref="M:WW.Cad.Drawing.IClippingTransformer.Transform(WW.Math.Geometry.IShape4D)"/>
            method directly. But in some circumstances like outputting text as text this method is useful
            to check whether a given text is clipped.
            </remarks>
            <param name="shape">Shape to check for clipping.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="P:WW.Cad.Drawing.ModelSpaceClippingTransformer.Matrix">
            <summary>
            Gets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ModelSpaceClippingTransformer.Matrix3D">
            <summary>
            Gets the 3x3 matrix for transforming a line segment before line type is applied to it.
            Line type is applied in the world coordinate system (for model space), or in paper space,
            but the perspective transformation component is omitted from this matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ModelSpaceClippingTransformer.LineTypeScaler">
            <summary>
            Gets the line type scaler.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.EraseComplexPathAsOne">
            <summary>
            Path that can consist of several sub drawables and is drawn using a single 
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            Counterpart of <see cref="T:WW.Cad.Drawing.GDI.ColoredComplexPathAsOne"/> to be able to draw using the background color.
            </summary>
            <remarks>
            This class is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.EraseComplexPathAsOne.#ctor(WW.Drawing.ArgbColor,WW.Cad.Drawing.GDI.IDrawable[],System.Boolean,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.EraseComplexPathAsOne.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.EraseComplexPathAsOne.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.EraseComplexPathAsOne.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfDimensionStyleOverrides">
            <summary>
            Represents <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/> overrides.
            </summary>
            <remarks>
            <para>
            Note that overridden colors are limited to indexed colors (see <see cref="T:WW.Cad.Model.DxfIndexedColorSet"/>).
            </para>
            <para>
            Dimension styles are an ever evolving feature which get additional properties with nearly each release of the formats.
            This means that not all features are supported in all versions. Refer to the documentation of each property to see if 
            it is supported for your required save version or not.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle,WW.Cad.Model.DxfModel)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.CopyFrom(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)">
            <summary>
            Copies from specified dimension style overrides in the context of the model to which the dimension style belongs.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.UpdateOverrideFlags">
            <summary>
            Updates the override flags based on if the property values are different from the base values.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.BaseDimensionStyle"/>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.CopyFrom(WW.Cad.Model.Tables.DxfDimensionStyleOverrides,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified dimension style overrides in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.UpdateExtendedData(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            This updates the extended data (of a dimension typically that contains the overrides).
            This is the opposite of <see cref="M:WW.Cad.IO.Builders.DxfDimensionStyleBuilder.InitFromExtendedData(WW.Cad.Model.Tables.DxfDimensionStyleOverrides,WW.Cad.Model.DxfExtendedData,WW.Cad.IO.ModelBuilder)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.BaseDimensionStyle">
            <summary>
            Gets or sets the base <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.HasOverrides">
            <summary>
            Gets whether one or more properties are overridden.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateDimensioningSuffix">
            <summary>
            Gets or sets the alternate dimensioning suffix (corresponds to the DIMAPOST system variable).
            To define a pre-fix, use the "[]" string as a place holder for the measurement.
            For example value "mm" would be shown as a postfix, "A[]B" would show A as prefix and B as postfix.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitDecimalPlaces">
            <summary>
            Gets or sets the alternate unit decimal places (corresponds to the DIMALTD system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitDimensioning">
            <summary>
            Gets or sets the use of an alternate unit dimensioning
            (corresponds to the DIMALT system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitFormat">
            <summary>
            Gets or sets the units format for alternate units of all dimension style families except angular
            (corresponds to the DIMALTU system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitScaleFactor">
            <summary>
            Gets or sets the alternate unit scale factor
            (corresponds to the DIMALTF system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitToleranceDecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for tolerance values of an alternative units dimension
            (corresponds to the DIMALTTD system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitToleranceZeroHandling">
            <summary>
            Gets or sets the supression of zeros for alternate tolerance values
            (corresponds to the DIMALTTZ system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitZeroHandling">
            <summary>
            Gets or sets the supression of zeros for alternate unit dimension values
            (corresponds to the DIMALTZ system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitRounding">
            <summary>
            Gets or sets the rounding of alternate units (corresponds to the DIMALTRND system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AngularDimensionDecimalPlaces">
            <summary>
            Gets or sets the number of precision digits in angular dimensions
            (corresponds to the DIMADEC system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AngularUnit">
            <summary>
            Gets or sets the angular unit (corresponds to the DIMAUNIT system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AngularZeroHandling">
            <summary>
            Gets or sets the controls supression of zeros for angular dimensions
            (corresponds to the DIMAZIN system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArrowBlock">
            <summary>
            Gets or sets the arrow block (the block name corresponds to the DIMBLK system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArrowSize">
            <summary>
            Gets or sets the arrow size (corresponds to the DIMASZ system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArrowsTextFit">
            <summary>
            Gets or sets the fit type for dimension arrows and text if they don't fit between the extension lines
            (corresponds to DIMATFIT system variable).
            The default value is 
            <see cref="F:WW.Cad.Model.ArrowsTextFitType.MoveBoth">MoveBoth</see>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FixedExtensionLineLength">
            <summary>
            Gets or sets the fixed length of the extension line
            (corresponds to DIMFXL system variable).
            The default value is 1.
            The value is in effect only if <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.IsExtensionLineLengthFixed"/> is <c>true</c>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.IsExtensionLineLengthFixed"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.IsExtensionLineLengthFixed">
            <summary>
            Gets or sets whether the extension line length is fixed (corresponds to the DIMFXLON system variable).
            See also <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FixedExtensionLineLength"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FixedExtensionLineLength"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.JoggedRadiusDimensionTransverseSegmentAngle">
            <summary>
            Gets or sets the jogged radius dimension transverse segment angle (radians).
            This property corresponse to the DIMJOGANG system variable.
            The angle should be in between the radian equivalents of 5 and 90 degrees.
            The default value is 0.7853981633974483 (45 degrees).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextBackgroundFillMode">
            <summary>
            Gets or sets the dimension text background fill mode.
            This property corresponse to the DIMTFILL system variable.
            The default value is <see cref="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.NoBackground"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextBackgroundColor"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextBackgroundColor">
            <summary>
            Gets or sets the color of the dimension text background.
            This property corresponse to the DIMTFILLCLR system variable.
            This setting is in effect when <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextBackgroundFillMode"/> is set to
            <see cref="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.DimensionTextBackgroundColor"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextBackgroundFillMode"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArcLengthSymbolPosition">
            <summary>
            Gets or sets the arc length symbol position.
            This property corresponse to the DIMARCSYM system variable.
            The default value is <see cref="F:WW.Cad.Model.Tables.ArcLengthSymbolPosition.BeforeDimensionText"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextDirection">
            <summary>
            Gets or sets the text direction (corresponds to the DIMTXTDIRECTION system variable). 
            The default value is left-to-right.
            </summary>
            <remarks>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.Mzf">
            <summary>
            Gets or sets the DIMMZF setting. The default value is 100.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.Mzs">
            <summary>
            Gets or sets the DIMMZS setting. The default value is an empty string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AltMzf">
            <summary>
            Gets or sets the DIMALTMZF setting. The default value is 100.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AltMzs">
            <summary>
            Gets or sets the DIMALTMZS setting. The default value is an empty string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.CenterMarkSize">
            <summary>
            Gets or sets the center mark size (corresponds to the DIMCEN system variable).
            The default value is 0.09.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.CursorUpdate">
            <summary>
            Gets or sets the cursor functionality for user positioned text (corresponds to the DIMUPT system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for the tolerance values of primary units dimensions
            (corresponds to the DIMDEC system variable).
            </summary>
            <remarks>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DecimalSeparator">
            <summary>
            Gets or sets the single character decimal separator used when creating dimensions whose unit format is decimal
            (corresponds to the DIMDSEP system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ExtensionLineColor">
            <summary>
            Gets or sets the extension line color (corresponds to the DIMCLRE system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ExtensionLineExtension">
            <summary>
            Gets or sets the extension line extension (corresponds to the DIMEXE system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ExtensionLineOffset">
            <summary>
            Gets or sets the extension line offset (corresponds to the DIMEXO system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ExtensionLineWeight">
            <summary>
            Gets or sets the extension line weight in 100ths of millimeters
            (corresponds to the DIMLWE system variable).
            </summary>
            <remarks>
            <para>
            See also <see cref="T:WW.Cad.Model.LineWeight"/> for values smaller than zero.
            For non-negative values this is the line weight in 100ths of millimeters.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FirstArrowBlock">
            <summary>
            Gets or sets the first arrow block (the block name corresponds to the DIMBLK1 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.GenerateTolerances">
            <summary>
            Gets or sets whether to generate dimension tolerances (corresponds to the DIMTOL system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LeaderArrowBlock">
            <summary>
            Gets or sets the leader arrow block (the block name corresponds to the DIMLDRBLK system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LimitsGeneration">
            <summary>
            Gets or sets the dimension limits generation flag (corresponds to the DIMLIM system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LinearScaleFactor">
            <summary>
            Gets or sets the linear measurements scale factor (corresponds to the DIMLFAC system variable).
            </summary>
            <remarks>
            <para>
            If the scale factor is negative, then the (positive) scale factor is only applied
            to paper space dimensions.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LinearUnitFormat">
            <summary>
            Gets or sets the units for all dimension types except angular (corresponds to the DIMLUNIT system variable).
            Default value is <see cref="F:WW.Cad.Model.LinearUnitFormat.Decimal">LinearUnitFormat.Decimal</see>.
            </summary>
            <remarks>
            <para>
            To use feet (and/or inches) as linear units, set property <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LinearUnitFormat"/> to
            either <see cref="F:WW.Cad.Model.LinearUnitFormat.Architectural">Architectural</see> (feet and inches) or
            <see cref="F:WW.Cad.Model.LinearUnitFormat.Engineering">Engineering</see> (feet and fractional feet).
            </para>
            <para>
            For architectural and fractional formats the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FractionFormat"/> property determines 
            between horizontal, diagonal or no stacking of the numerator and denominator.
            For alternate dimension units this property does not exist and is covered by property <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitFormat"/>.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FractionFormat"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FractionFormat">
            <summary>
            Gets or sets the units for all dimension types except angular  (corresponds to the DIMLUNIT system variable).
            Default value is <see cref="F:WW.Cad.Model.LinearUnitFormat.Decimal">LinearUnitFormat.Decimal</see>.
            </summary>
            <value></value>
            <remarks>
            <para>
            To use feet (and/or inches) as linear units, set property <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LinearUnitFormat"/> to
            either <see cref="F:WW.Cad.Model.LinearUnitFormat.Architectural">Architectural</see> (feet and inches) or
            <see cref="F:WW.Cad.Model.LinearUnitFormat.Engineering">Engineering</see> (feet and fractional feet).
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FractionFormat"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineColor">
            <summary>
            Gets or sets the dimension line color (corresponds to the DIMCLRD system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineExtension">
            <summary>
            Gets or sets the dimension line extension (corresponds to the DIMDLE system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineGap">
            <summary>
            Gets or sets the dimension line gap (corresponds to the DIMGAP system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineIncrement">
            <summary>
            Gets or sets the dimension line increment (corresponds to the DIMDLI system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineWeight">
            <summary>
            Gets or sets the dimension line weight in 100ths of millimeters
            (corresponds to the DIMLWD system variable).
            </summary>
            <remarks>
            <para>
            See also <see cref="T:WW.Cad.Model.LineWeight"/> for values smaller than zero.
            For non-negative values this is the line weight in 100ths of millimeters.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.MinusTolerance">
            <summary>
            Gets or sets the minus tolerance (corresponds to the DIMTM system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.PlusTolerance">
            <summary>
            Gets or sets the plus tolerance (corresponds to the DIMTP system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.PostFix">
            <summary>
            Gets or sets the general dimension postfix (corresponds to the DIMPOST system variable).
            To define a pre-fix, use the "&lt;&gt;" string as a place holder for the measurement.
            For example value "mm" would be shown as a postfix, "A&lt;&gt;B" would show A as prefix and B as postfix.
            When the postfix ends with the string "\X", the alternate dimension units are shown on the next line
            rather than on the same line as the primary dimension units.
            </summary>
            <remarks>
            <para>
            Property <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateDimensioningSuffix"/> is the counterpart for alternate dimension units.
            </para>
            <para>
            Available in all supported versions.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateDimensioningSuffix"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.Rounding">
            <summary>
            Gets or sets the rounding value for dimension distances (corresponds to the DIMRND system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ScaleFactor">
            <summary>
            Gets or sets the overall dimension scale factor (corresponds to the DIMSCALE system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SecondArrowBlock">
            <summary>
            Gets or sets the second arrow block name (the block name corresponds to the DIMBLK2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SeparateArrowBlocks">
            <summary>
            Gets or sets whether to use seperate arrow blocks (corresponds to the DIMSAH system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressFirstDimensionLine">
            <summary>
            Gets or sets the suppression of first dimension line (corresponds to the DIMSD1 system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressFirstExtensionLine">
            <summary>
            Gets or sets the suppression of first extension line (corresponds to the DIMSD2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressOutsideExtensions">
            <summary>
            Gets or sets the supression outside extensions dimension lines flag
            (corresponds to the DIMSOXD system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressSecondDimensionLine">
            <summary>
            Gets or sets the suppression of second dimension line (corresponds to the DIMSD2 system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressSecondExtensionLine">
            <summary>
            Gets or sets the suppression of second extension line (corresponds to the DIMSE2 system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextAboveDimensionLine">
            <summary>
            Gets or sets the text above dimension line flag (corresponds to the DIMTAD system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextAlignment">
            <summary>
            Gets or sets the horizontal dimension text position (corresponds to the DIMJUST system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextColor">
            <summary>
            Gets or sets the text color (corresponds to the DIMCLRT system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextHeight">
            <summary>
            Gets or sets the text height (corresponds to the DIMTXT system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextInsideExtensions">
            <summary>
            Gets or sets the text inside extensions flag (corresponds to the DIMTIX system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextInsideHorizontal">
            <summary>
            Gets or sets the force text inside extension flag (corresponds to the DIMTIH system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextMovement">
            <summary>
            Gets or sets the dimension text movement rules (corresponds to the DIMTMOVE system variable).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextOutsideExtensions">
            <summary>
            Gets or sets whether to force the dimension line to be drawn between the extension lines even when the
            text and arrow heads are outside the extension lines (corresponds to the DIMTOFL system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextOutsideHorizontal">
            <summary>
            Gets or sets the text outside horizontal flag (corresponds to the DIMTOH system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextStyle">
            <summary>
            The text style. By default it is set to the "STANDARD" text style
            (corresponds to the DIMTXSTY system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextVerticalPosition">
            <summary>
            Gets or sets the text vertical position (corresponds to the DIMTVP system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TickSize">
            <summary>
            Gets or sets the tick size (corresponds to the DIMTSZ system variable).
            </summary>
            <remarks>
            <para>
            The tick size defines the distance the tick extends beyond the extension lines, 
            parallel to the dimension line.
            </para>
            <para>
            If non zero, then diagonal tick marks are drawn at the ends of the dimension line.
            Otherwise arrows of size <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArrowSize"/> are drawn.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArrowSize"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineExtension"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ToleranceAlignment">
            <summary>
            Gets or sets the vertical justification for tolerance values (corresponds to the DIMTDEC system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ToleranceDecimalPlaces">
            <summary>
            Gets or sets the tolerance decimal places (corresponds to the DIMTDEC system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ToleranceScaleFactor">
            <summary>
            Gets or sets the scale factor used to calculate the height for dimension fractions and tolerances
            (corresponds to the DIMTFAC system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ToleranceZeroHandling">
            <summary>
            Gets or sets the supression of zeros for tolerance values (corresponds to the DIMTZIN system variable).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ZeroHandling">
            <summary>
            Gets or sets the supression of zeros for primary unit values (corresponds to the DIMZIN system variable).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateDimensioningSuffix">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateDimensioningSuffix"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateUnitDecimalPlaces">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitDecimalPlaces"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateUnitDimension">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitDimensioning"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateUnitFormat">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitFormat"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateUnitRounding">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitRounding"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateUnitScaleFactor">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitScaleFactor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateUnitToleranceDecimalPlaces">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitToleranceDecimalPlaces"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateUnitToleranceZeroHandling">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitToleranceZeroHandling"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAlternateUnitZeroHandling">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AlternateUnitZeroHandling"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAngularDimensionDecimalPlaces">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AngularDimensionDecimalPlaces"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAngularUnit">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AngularUnit"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAngularZeroHandling">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AngularZeroHandling"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideArrowBlock">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArrowBlock"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideArrowSize">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArrowSize"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideArrowsTextFit">
            <summary>
            Gets and sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArrowsTextFit"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideFixedExtensionLineLength">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FixedExtensionLineLength"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideIsExtensionLineLengthFixed">
            <summary>
            Gets or sets whether to override <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.IsExtensionLineLengthFixed"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideJoggedRadiusDimensionTransverseSegmentAngle">
            <summary>
            Gets or sets whether to override <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.JoggedRadiusDimensionTransverseSegmentAngle"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextBackgroundFillMode">
            <summary>
            Gets or sets whether to override <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextBackgroundFillMode"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextBackgroundColor">
            <summary>
            Gets or sets whether to override <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextBackgroundColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideArcLengthSymbolPosition">
            <summary>
            Gets or sets whether to override <seealso cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ArcLengthSymbolPosition"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextDirection">
            <summary>
            Gets and sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextDirection"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideMzf">
            <summary>
            Gets or sets a value indicating whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.Mzf"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideMzs">
            <summary>
            Gets or sets a value indicating whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.Mzs"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAltMzf">
            <summary>
            Gets or sets a value indicating whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AltMzf"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideAltMzs">
            <summary>
            Gets or sets a value indicating whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.AltMzs"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideCenterMarkSize">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.CenterMarkSize"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideCursorUpdate">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.CursorUpdate"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideDecimalPlaces">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DecimalPlaces"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideDecimalSeparator">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DecimalSeparator"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideExtensionLineColor">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ExtensionLineColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideExtensionLineExtension">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ExtensionLineExtension"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideExtensionLineOffset">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ExtensionLineOffset"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideExtensionLineWeight">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ExtensionLineWeight"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideFirstArrowBlock">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FirstArrowBlock"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideGenerateTolerances">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.GenerateTolerances"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideLeaderArrowBlock">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LeaderArrowBlock"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideLimitsGeneration">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LimitsGeneration"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideLinearScaleFactor">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LinearScaleFactor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideLinearUnitFormat">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.LinearUnitFormat"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideFractionFormat">
            <summary>
            Gets or sets a value indicating whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.FractionFormat"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideDimensionLineColor">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideDimensionLineExtension">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineExtension"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideDimensionLineGap">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineGap"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideDimensionLineIncrement">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineIncrement"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideDimensionLineWeight">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.DimensionLineWeight"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideMinusTolerance">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.MinusTolerance"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverridePlusTolerance">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.PlusTolerance"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverridePostFix">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.PostFix"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideRounding">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.Rounding"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideScaleFactor">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ScaleFactor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideSecondArrowBlock">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SecondArrowBlock"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideSeparateArrowBlocks">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SeparateArrowBlocks"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideSuppressFirstDimensionLine">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressFirstDimensionLine"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideSuppressFirstExtensionLine">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressFirstExtensionLine"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideSuppressOutsideExtensions">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressOutsideExtensions"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideSuppressSecondDimensionLine">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressSecondDimensionLine"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideSuppressSecondExtensionLine">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.SuppressSecondExtensionLine"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextAboveDimensionLine">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextAboveDimensionLine"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextAlignment">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextAlignment"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextColor">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextHeight">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextHeight"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextInsideExtensions">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextInsideExtensions"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextInsideHorizontal">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextInsideHorizontal"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextMovement">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextMovement"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextOutsideExtensions">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextOutsideExtensions"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextOutsideHorizontal">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextOutsideHorizontal"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextStyle">
            <summary>
            Gets or sets whether to override <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTextVerticalPosition">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TextVerticalPosition"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideTickSize">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.TickSize"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideToleranceAlignment">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ToleranceAlignment"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideToleranceDecimalPlaces">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ToleranceDecimalPlaces"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideToleranceScaleFactor">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ToleranceScaleFactor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideToleranceZeroHandling">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ToleranceZeroHandling"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.OverrideZeroHandling">
            <summary>
            Gets or sets whether to override <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyleOverrides.ZeroHandling"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.LogEventHandler">
            <summary>
            Event handler for log event.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.LogEventArgs">
            <summary>
            Event arguments for log event.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.LogEventArgs.#ctor(WW.Cad.Base.LogMessage)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.LogEventArgs.Message">
            <summary>
            Gets the log message.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Shx1_1Reader">
            <summary>
            reader for shx 1.1 files.
            </summary>
            <remarks>
            The 1.1 format differs in the meaning of the first
            bytes after the magic constant (header), but they are skipped by my code, anyway
            (I have a guess for the 1.1 meaning). So the reading is done from the basic implementation.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Shx1_1Reader.#ctor(System.IO.BinaryReader,System.Text.Encoding,WW.Cad.Model.Entities.ShxFile)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLine">
            <summary>
            Represents the line entity.
            </summary>
            <remarks>
            A line is defined by its <see cref="P:WW.Cad.Model.Entities.DxfLine.Start"/> and <see cref="P:WW.Cad.Model.Entities.DxfLine.End"/> point.
            </remarks>
            <example>
            An example of how to create a line and apply a line type to it.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class LineExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfLineType lineType = new DxfLineType("DashDot", "Dashed &amp; dotted", new double[] { 0.5, -0.2, 0, -0.2 });
            model.LineTypes.Add(lineType);

            DxfLine line1 = new DxfLine(new Point3D(1d, 2d, 3d), new Point3D(4d, 2.1d, 3d));
            line1.Color = EntityColors.Green;
            line1.LineType = lineType;
            model.Entities.Add(line1);

            DxfWriter.Write("Line Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.#ctor(WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.#ctor(WW.Math.Point2D,WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point2D,WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified line in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates a create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.GetPolylines(WW.Cad.Drawing.DrawContext,WW.Cad.Drawing.ILineTypeScaler,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D}@,System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D}@)">
            <summary>
            Returns line with line type applied.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLine.Start">
            <summary>
            Start point in WCS.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLine.End">
            <summary>
            End point in WCS.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLine.ZAxis">
            <summary>
            Extrusion direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLine.Thickness">
            <summary>
            Extrusion thickness.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLine.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLine.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLine.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLine.CreateInteractor">
            <summary>
            The default create interactor for the line entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLine.CreateWithLengthInteractor">
            <summary>
            An interactor to create a line entity with a length that can be entered in a text box.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLine.ILineInteractor">
            <summary>
            An interface for a line create/edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.ILineInteractor.ApplyLength">
            <summary>
            Applies the length.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfLine.ILineInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLine.ILineInteractor.EnteredLength">
            <summary>
            Gets or sets the length of the entered.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.CreateWithLengthInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.CreateWithLengthInteractor.CreateWinFormsDrawable(WW.Actions.InteractionContext,System.Windows.Forms.Control)">
            <summary>
            Creates a win forms drawables for this interactor.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfLine.CreateWithLengthInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLine.CreateWithLengthInteractor.WinFormsDrawable">
            <summary>
            The view for <see cref="T:WW.Cad.Model.Entities.DxfLine.CreateWithLengthInteractor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLine.EditInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfLine.EditInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.PointDisplayMode">
            <summary>
            Indicates by what symbol a point is represented.
            Note that there are more display modes than this type contains,
            only the most common point types are included.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PointDisplayMode.Point">
            <summary>
            A point is represented by a point.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PointDisplayMode.None">
            <summary>
            A point is represented by nothing.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PointDisplayMode.PlusSign">
            <summary>
            A point is represented by a plus sign.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PointDisplayMode.XSign">
            <summary>
            A point is represented by an X sign.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfTableBorder">
            <summary>
            Represents a table border (see <see cref="T:WW.Cad.Model.Entities.DxfTable"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableBorder.GetEffectiveBorder(WW.Cad.Model.Entities.DxfTableBorderOverrides)">
            <summary>
            Gets the effective border by applying the specified overrides.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableBorder.ApplyOverrides(WW.Cad.Model.Objects.DxfTableBorder)">
            <summary>
            Applies the specified overrides to this border.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableBorder.CopyFrom(WW.Cad.Model.Objects.DxfTableBorder,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">source object</param>
            <param name="cloneContext">
            specifies what to do when a reference to e.g. a line type is missing.
            </param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableBorder.AreVisuallyEqual(WW.Cad.Model.Objects.DxfTableBorder,WW.Cad.Model.Objects.DxfTableBorder)">
            <summary>
            Ares the specified borders equal.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.LineWeight">
            <docsnippet name="LineWeight">
    <summary>
      Gets or sets the line weight (default value is <see cref="F:WW.Cad.Model.LineWeight.ByLayer"/>.
    </summary>
    <remarks>
      <para>
        This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>
      </para>
      <para>
        <list type="table">
          <listheader>
            <term>value</term>
            <description>meaning</description>
          </listheader>
          <item>
            <term>
              <see cref="F:WW.Cad.Model.LineWeight.Standard"/>
            </term>
            <description>Standard</description>
          </item>
          <item>
            <term>
              <see cref="F:WW.Cad.Model.LineWeight.ByLayer"/>
            </term>
            <description>By layer</description>
          </item>
          <item>
            <term>
			  <see cref="F:WW.Cad.Model.LineWeight.ByBlock"/>
		    </term>
            <description>By block</description>
          </item>
          <item>
            <term>0-211</term>
            <description>an integer representing 100th of mm</description>
          </item>
        </list>
      </para>
    </remarks>
  </docsnippet>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.OverrideLineWeight">
            <summary>
            Gets or sets a value indicating whether to override line weight.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.LineType">
            <summary>
            Gets or sets the line type.
            </summary>
            <remarks>
            This property was introduced in AutoCAD 2008.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.OverrideLineType">
            <summary>
            Gets or sets a value indicating whether to override line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.BorderType">
            <summary>
            Gets or sets the type of the border (single or double, default is single).
            </summary>
            <remarks>
            This property was introduced in AutoCAD 2008.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.OverrideBorderType">
            <summary>
            Gets or sets a value indicating whether to override border type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Objects.DxfTableBorder"/> is visible.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.OverrideVisibility">
            <summary>
            Gets or sets a value indicating whether to override visibility.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.Color">
            <summary>
            Gets or sets the color.
            The default value is <see cref="F:WW.Cad.Model.Color.ByBlock"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.OverrideColor">
            <summary>
            Gets or sets a value indicating whether to override color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.DoubleLineSpacing">
            <summary>
            Gets or sets the border double line separation distance, applicable if this is a double border line 
            (see <see cref="P:WW.Cad.Model.Objects.DxfTableBorder.BorderType"/>).
            The default value is 0.045.
            </summary>
            <remarks>
            This property was introduced in AutoCAD 2008.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.OverrideDoubleLineSpacing">
            <summary>
            Gets or sets a value indicating whether to override the double line spacing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.PropertyOverrideFlags">
            <summary>
            Gets or sets the property override flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableBorder.HasData">
            <summary>
            Gets or sets a value indicating whether this instance has data.
            </summary>
            <remarks>
            This border's data will only be written to file when this flag is <c>true</c>.
            It is automatically set to <c>true</c> when a property is changed.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfLayoutCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.DxfLayout"/> keyed collection (layout name can be used as indexer parameter).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayoutCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfLayoutCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayoutCollection.GetKeyForItem(WW.Cad.Model.Objects.DxfLayout)">
            <summary>
            Gets the key for specified layout.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.LightingType">
            <summary>
            Represents lighting type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LightingType.OneDistantLight">
            <summary>
            One distant light.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LightingType.TwoDistantLights">
            <summary>
            Two distant lights.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.TrueTypeDxfFont">
            <summary>
            True Type font.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeDxfFont.#ctor(WW.Cad.Model.Text.TrueTypeFontTextMetrics)">
            <summary>
            Constructor.
            </summary>
            <param name="textMetrics">text metrics of this font</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeDxfFont.GetText(System.String,WW.Drawing.ArgbColor,System.Int16,System.Boolean)">
            <summary>
            Get the shape for a given text.
            </summary>
            <param name="text">character</param>
            <param name="color">color of the text</param>
            <param name="lineWeight">The line weight.</param>
            <param name="vertical">Is the text vertical</param>
            <returns>the graphics path for a given character</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeDxfFont.IsDefinedCharacter(System.Char)">
            <summary>
            Is this character defined in the font?
            </summary>
            <param name="ch">character</param>
            <returns><c>true</c> if this font contains the character</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeDxfFont.GetCanonicalGlyph(System.Char,System.Boolean)">
            <summary>
            Gets the glyph for specified character.
            </summary>
            <param name="c">The character.</param>
            <param name="vertical">Is the glyph drawn vertically?</param>
            <returns></returns>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeDxfFont.Filled">
            <summary>
            Are the shapes of this font drawn filled?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeDxfFont.Metrics">
            <summary>
            Get the text metrics defined by this font.
            </summary>
            <value></value>
            <remarks>The metrics returned includes the transformation defined by <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeDxfFont.SystemFont">
            <summary>
            Get the system font which is the base of this font.
            In case of an SHX font which has no underlying system font, this may return <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeDxfFont.IsFallback">
            <summary>
            Is this font a fallback font?
            </summary>
            <remarks>
            A font is a fallback font if the original font was not found.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Text.TextUtil">
            <summary>
            Text utility class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextUtil.DiagonalFractionBarGradient">
            <summary>
            Gradient used for diagonal fraction bars.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextUtil.NonBreakingSpace">
            <summary>
            The non-breaking space character. 
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextUtil.FontStylesCheckSequence">
            <summary>
            Sequence in which to check for font styles.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.GetFontFamilyFromFileName(System.String,System.Boolean,System.Drawing.FontFamily@,System.Drawing.FontStyle@)">
            <summary>
            Gets the font family from the font file name (e.g. times.ttf).
            </summary>
            <param name="fontFilename">font file name</param>
            <param name="fontFamily">font family</param>
            <param name="fontStyle">font style</param>
            <returns><c>true</c> if the font was found, <c>false</c> if a default TrueType font was substituted</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.GetFontFamilyFromName(System.String,System.Boolean,System.Drawing.FontFamily@,System.Drawing.FontStyle@)">
            <summary>
            Gets the font family from the font name (e.g. Times New Roman).
            </summary>
            <param name="fontName">Font name.</param>
            <param name="fontFamily">Font family.</param>
            <param name="fontStyle">Font style.</param>
            <returns><c>true</c> if the font was found, <c>false</c> if a default TrueType font was substituted</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.GetSimplifiedText(WW.Cad.Model.Entities.DxfMText)">
            <summary>
            Get a simplified version of the text contained in a MTEXT entity.
            </summary>
            <remarks>
            This will remove all special escape codes from the text.
            </remarks>
            <param name="mtext">MTEXT entity</param>
            <returns>simplified text content</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.GetSimplifiedText(WW.Cad.Model.Entities.DxfText)">
            <summary>
            Get a simplified version of the text contained in a TEXT entity.
            </summary>
            <remarks>
            This will remove all special escape codes from the text.
            </remarks>
            <param name="text">TEXT entity</param>
            <returns>simplified text content</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.GetSimpleTextBlocks(System.String,System.Double,System.Double,System.Double,WW.Cad.Model.Tables.DxfTextStyle,WW.Drawing.ArgbColor)">
            <summary>
            Split a simple text as appears in TEXT entity into blocks.
            The only possible splitting is changes of under- and overlining.
            </summary>
            <param name="s">simple text to split</param>
            <param name="fontHeight">Height of the font.</param>
            <param name="obliqueAngle">The oblique angle.</param>
            <param name="letterWidth">Width of the letter.</param>
            <param name="textStyle">The text style.</param>
            <param name="color">The color.</param>
            <returns>text blocks in form of a group</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.GetSimpleTextBlocks(System.String,System.Double,System.Double,System.Double,WW.Cad.Model.Tables.DxfTextStyle,WW.Drawing.ArgbColor,System.String@)">
            <summary>
            Split a simple text as appears in TEXT entity into blocks.
            The only possible splitting is changes of under- and overlining.
            </summary>
            <param name="s">simple text to split</param>
            <param name="fontHeight">Height of the font.</param>
            <param name="obliqueAngle">The oblique angle.</param>
            <param name="letterWidth">Width of the letter.</param>
            <param name="textStyle">The text style.</param>
            <param name="color">The color.</param>
            <param name="simplifiedText">simpified version of the text contained in <para>s</para></param>
            <returns>text blocks in form of a group</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.GetParagraphTextBlocks(System.String,System.Double,System.Double,WW.Cad.Model.Entities.AttachmentPoint,System.Double,WW.Cad.Model.Entities.LineSpacingStyle,WW.Cad.Model.Tables.DxfTextStyle,System.Double,WW.Drawing.ArgbColor,WW.Cad.Model.Entities.DrawingDirection)">
            <summary>
            Splits an mtext/tolerance string into paragraphs containing lines containing text blocks.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.ConvertUnicodeEscapes(System.String)">
            <summary>
            Subsitutes the unicode escapes in the text.
            </summary>
            <param name="text">text with possible unicode escapes in the form \U+00AB</param>
            <returns>string with substituted unicode escapes</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.GetParagraphTextBlocks(System.String,System.Double,System.Double,WW.Cad.Model.Entities.AttachmentPoint,System.Double,WW.Cad.Model.Entities.LineSpacingStyle,WW.Cad.Model.Tables.DxfTextStyle,System.Double,WW.Drawing.ArgbColor,WW.Cad.Model.Entities.DrawingDirection,System.String@)">
            <summary>
            Splits an mtext/tolerance string into paragraphs containing lines containing text blocks.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.IsWhiteSpace(System.Char)">
            <summary>
            Is a character a whitespace in our sense.
            The difference to the <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> method is that we do not
            consider the non-breaking space a white space.
            </summary>
            <param name="ch">the character to check</param>
            <returns><c>true</c> if the ch is a whitespace in our sense</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.StripLastWord(System.String@)">
            <summary>
            Strips last word from given line
            </summary>
            <returns>stripped word (<c>null</c> if no word could be stripped).</returns>
        </member>
        <member name="T:WW.Cad.Model.Text.TextUtil.StackingType">
            <summary>
            The possible stacking types for \S escape.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.TextUtil.StackTextBlock">
            <summary>
            The parts of a stacking.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.StackTextBlock.#ctor(System.String,WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="description">description of the stacking, i.e. the part between \S and ending ;</param>
            <param name="settings">current text block settings</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.StackTextBlock.GetBounds(WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounding box of this text block.
            </summary>
            <param name="whiteSpaceHandling">how to handle white space when calculating the bounds</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.StackTextBlock.Layout(WW.Math.Vector2D@,System.Double,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Lay out this block.
            </summary>
            <param name="baselinePos">current baseline position, advanced after layout</param>
            <param name="height">height of the surrounding text block</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.StackTextBlock.BreakLineBefore(System.Double,WW.Cad.Model.Text.ITextBreaker)">
            <summary>
            Break this text block before the given width.
            </summary>
            <param name="width">width before which to break the text</param>
            <param name="breaker">provider of text breaks</param>
            <returns>
            an array with two elements if it was possible to break this text block into two parts
            with the first one smaller than <c>width</c> (the first inherets the offset of this block,
            while the seconds block's offset is unset),
            <para/> 
            or an array with one element if this text block already is smaller than <c>width</c>, 
            <para/>
            or an empty array if the text block is wider than width but it is not possible to find
            a break position (see also <see cref="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Breakable"/>) at all
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.StackTextBlock.GetPositionOf(System.Char,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the baseline start position relative to the blocks insert position of the first occurence of the given char.
            </summary>
            <param name="ch">char to look for in block</param>
            <param name="whiteSpaceHandlingFlags">The white space handling flags.</param>
            <returns>
            the position or <c>null</c> if no position was found
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextUtil.StackTextBlock.CollectTextChunks(System.Collections.Generic.ICollection{WW.Cad.Model.Text.TextChunk},WW.Math.Matrix4D,System.Int16)">
            <summary>
            Collect the text chunks.
            </summary>
            <param name="collector">collector where to add the chunks</param>
            <param name="insertionTrafo">insertion transformation</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Valid">
            <summary>
            Is this stack box valid?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Type">
            <summary>
            Get the stacking type.
            If this stack box is invalid, <see cref="F:WW.Cad.Model.Text.TextUtil.StackingType.Unknown"/> is returned
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Denominator">
            <summary>
            Get the denominator of the stacking.
            The denominator is the lower part of the stacking.
            If this stack box is invalid, a null string is returned.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Numerator">
            <summary>
            Get the numerator of the stacking.
            The numerator is the upper part of the stacking.
            If this stack box is invalid, a null string is returned.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.AlignmentChar">
            <summary>
            Get the alignment character of the stacking.
            The alignment character defines the character at which both <see cref="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Numerator"/>
            and <see cref="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Denominator"/> are aligned.
            <para/>
            Only stack boxes with stacking type <see cref="F:WW.Cad.Model.Text.TextUtil.StackingType.DecimalFraction"/> and
            <see cref="F:WW.Cad.Model.Text.TextUtil.StackingType.Tolerance"/> have alignment characters.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.NumeratorBlock">
            <summary>
            Get the text block constructed from the numerator.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.DenominatorBlock">
            <summary>
            Get the text block constructed from the denominator.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Offset">
            <summary>
            Gets or sets the relative position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Settings">
            <summary>
            Gets or sets the text block settings.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Breakable">
            <summary>
            Is it possible to break this text?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextUtil.StackTextBlock.Lines">
            <summary>
            Split this block into lines and return the resulting parts.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.TextBlockSettings">
            <summary>
            <see cref="T:WW.Cad.Model.Text.TextBlock"/> settings.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlockSettings.FallbackShxFont">
            <summary>
            Fallback font is a font which was requested by the file is not available.
            </summary>
            <remarks>
            Because SHX fonts are not provided by us the fallback font may not be available,
            too. In that case another fallback to Arial TTF is made.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlockSettings.MaxLetterWidth">
            <summary>
            Restriction on the maximal letter width because some files are plainly wrong.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlockSettings.MinLetterWidth">
            <summary>
            Restriction on the minmal letter width because some files are plainly wrong.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockSettings.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Constructor.
            </summary>
            <param name="model">Model for SHX files lookup.</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockSettings.#ctor(WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextBlockSettings.NeedBigFontSwitchForCharacter(System.Char)">
            <summary>
            Is it necessary to switch the <see cref="P:WW.Cad.Model.Text.TextBlockSettings.UseBigFont"/> setting in order to support the following character.
            </summary>
            <param name="ch">character to check</param>
            <returns><c>true</c> if a switch in the big font settings is necessary</returns>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.FontFileName">
            <summary>
            Gets or sets the font file name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.BigFontFilename">
            <summary>
            Gets or sets the bigfont file name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.NormalFont">
            <summary>
            Get the normal font.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.BigFont">
            <summary>
            Get the big font.
            The bigfont may be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.Font">
            <summary>
            Get the font or the bigfont of the text, depending on the <see cref="P:WW.Cad.Model.Text.TextBlockSettings.UseBigFont"/> setting.
            </summary>
            <remarks>This is the font really used for drawing.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.UseBigFont">
            <summary>
            Get whether to use the bigfont.
            Bigfont will only be used if it is available.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.Bold">
            <summary>
            Gets or sets whether the font is bold.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.ObliqueAngle">
            <summary>
            Gets or sets the oblique angle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.Overline">
            <summary>
            Gets or sets whether or not to overline.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.Underline">
            <summary>
            Gets or sets whether or not to underline.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.IsVertical">
            <summary>
            Gets or sets whether the text is output vertically.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.LetterDistance">
            <summary>
            Gets or sets the letter distance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextBlockSettings.LetterWidth">
            <summary>
            Gets or sets the letter width.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfGroup">
            <summary>
            Represents a group of handled objects.
            </summary>
            <remarks>
            The group object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>.
            In most cases the group members are <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> objects.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfGroup.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfGroup.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfGroup.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfGroup.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfGroup.Name">
            <summary>
            Gets or sets the name.
            An anonymous group's name starts with the '*' character.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfGroup.IsAnonymous">
            <summary>
            Gets a value indicating whether this instance is anonymous.
            </summary>
            <remarks>
            An anonymous group's name starts with the '*' character.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Objects.DxfGroup.Name"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfGroup.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfGroup.Selectable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Objects.DxfGroup"/> is selectable.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfGroup.Members">
            <summary>
            Gets the members of this group.
            </summary>
            <remarks>
            In most cases, but not always the members are entities.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfGroup.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfGroup.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.FileDependency">
            <summary>
            Represents a file dependency (for e.g image, font and external reference files).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FileDependency.XRefFeatureName">
            <summary>
            The external reference feature name (for block table record).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FileDependency.ImageFeatureName">
            <summary>
            The image feature name (for image definition).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FileDependency.PlotConfigFeatureName">
            <summary>
            The plot config feature name (for plotsetting).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FileDependency.TextFeatureName">
            <summary>
            The text feature name (for text style).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.FileDependency.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.FileDependency.#ctor(WW.Cad.Model.FileDependency,WW.Cad.Model.CloneContext)">
            <summary>
            Deep copy constructor.
            </summary>
            <param name="from">file dependency to copy from</param>
            <param name="cloneContext">clone context for cloning handled objects</param>
        </member>
        <member name="M:WW.Cad.Model.FileDependency.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.FileDependency.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.FeatureName">
            <summary>
            Gets or sets the name of the feature.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.FullFilename">
            <summary>
            Gets or sets the full filename.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.FoundPath">
            <summary>
            Gets or sets the found path.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.FingerPrintGuid">
            <summary>
            Gets or sets the finger print GUID (applies to xref’s only).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.VersionGuid">
            <summary>
            Gets or sets the version GUID (applies to xref’s only).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.FileSize">
            <summary>
            Gets or sets the file size.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.AffectsGraphics">
            <summary>
            Gets or sets a value indicating whether graphics are affected.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.References">
            <summary>
            Gets the references.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.FileDependency.Key">
            <summary>
            Represents a file dependency key.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.FileDependency.Key.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.FileDependency.Key"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.FileDependency.Key.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.FileDependency.Key.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.Key.FeatureName">
            <summary>
            Gets or sets the name of the feature.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.FileDependency.Key.FullFilename">
            <summary>
            Gets or sets the full filename.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfIdBuffer">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.DxfHandledObject">handled objects</see>.
            </summary>
            <remarks>
            The ID buffer was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfIdBuffer.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfIdBuffer.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfIdBuffer.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfIdBuffer.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents from specified ID buffer.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfIdBuffer.HandledObjects">
            <summary>
            Gets the handled objects.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfIdBuffer.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfIdBuffer.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValue">
            <summary>
            Represents a value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.GetValueString(WW.Cad.Model.DxfValueFormat)">
            <summary>
            Gets the value string.
            </summary>
            <param name="defaultValueFormat">
            The default value format, 
            which is used in case this value's format is not defined (<c>null</c> or 
            <see cref="T:WW.Cad.Model.DxfValueFormat.None"/>).
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.SetValue(System.Int32)">
            <summary>
            Sets the <see cref="P:WW.Cad.Model.DxfValue.Value"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.SetValue(System.Double)">
            <summary>
            Sets the <see cref="P:WW.Cad.Model.DxfValue.Value"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.SetValue(WW.Math.Point2D)">
            <summary>
            Sets the <see cref="P:WW.Cad.Model.DxfValue.Value"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.SetValue(WW.Math.Point3D)">
            <summary>
            Sets the <see cref="P:WW.Cad.Model.DxfValue.Value"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.SetValue(System.String)">
            <summary>
            Sets the <see cref="P:WW.Cad.Model.DxfValue.Value"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.SetValue(System.DateTime)">
            <summary>
            Sets the <see cref="P:WW.Cad.Model.DxfValue.Value"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.SetValue(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Sets the <see cref="P:WW.Cad.Model.DxfValue.Value"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValue.CopyFromShallow(WW.Cad.Model.DxfValue)">
            <summary>
            Performs a shallow copy from specified instance.
            May only be used within the same model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValue.Format">
            <summary>
            Gets or sets the format.
            The value may not be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValue.Value">
            <summary>
            Gets the value.
            </summary>
            <remarks>
            <para>
            Use one of the <see cref="M:WW.Cad.Model.DxfValue.SetValue(System.Int32)"/> overloads to set the value.
            </para>
            <para>
            The value type depends on the <see cref="P:WW.Cad.Model.DxfValue.Format"/>.
            Valid types are: <see cref="T:System.String"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Double"/>, 
            <see cref="T:WW.Math.Point2D"/>, <see cref="T:WW.Math.Point3D"/>, <see cref="T:System.DateTime"/>,
            <see cref="T:WW.Cad.Model.DxfHandledObject"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfValue.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValue.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.TableBreakFlowDirection">
            <summary>
            Represents the direction for <see cref="T:WW.Cad.Model.Entities.DxfTableBreakData">table breaks</see>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakFlowDirection.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakFlowDirection.Vertical">
            <summary>
            Vertical.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakFlowDirection.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.PsExporter">
            <summary>
            Class for exporting a Cad drawing to the PostScript format.
            </summary>
            <remarks>
            Note that the PostScript x-axis points right and the y-axis points up,
            and the origin is at the bottom left. 
            </remarks>
            <example>
            An example of how to read a dxf file and export to PostScript.
            <code lang="cs">
using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace Example {
    class ExportToPostScriptExample {
        public void ExportToPs(DxfModel model) {
            BoundsCalculator boundsCalculator = new BoundsCalculator();
            boundsCalculator.GetBounds(model);
            Bounds3D bounds = boundsCalculator.Bounds;
            PaperSize paperSize = PaperSizes.GetPaperSize(PaperKind.A4);
            // Lengths in points.
            float pageWidth = paperSize.Width * PsExporter.InchToPoint / 100f;
            float pageHeight = paperSize.Height * PsExporter.InchToPoint / 100f;
            float margin = 50f;
            // Scale and transform such that its fits max width/height
            // and the top left middle of the cad drawing will match the 
            // top middle of the ps page.
            Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                bounds.Corner1,
                bounds.Corner2,
                new Point3D(bounds.Center.X, bounds.Corner2.Y, 0d),
                new Point3D(margin, margin, 0d),
                new Point3D(pageWidth - margin, pageHeight - margin, 0d),
                new Point3D(pageWidth / 2d, pageHeight - margin, 0d)
            );
            using (Stream stream = File.Create("test.ps")) {
                PsExporter exporter = new PsExporter(stream, paperSize);
                exporter.Draw(model, GraphicsConfig.BlackBackground, to2DTransform);
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="F:WW.Cad.IO.PsExporter.CmToInch">
            <summary>
            Conversion factor from cm to inch.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.PsExporter.InchToPoint">
            <summary>
            Conversion factor from inch to points.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.PsExporter.CmToPoint">
            <summary>
            Conversion factor from cm to points.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.#ctor(System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            By default the page is of letter format.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.#ctor(System.IO.Stream,System.Drawing.Printing.PaperKind)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.#ctor(System.IO.Stream,System.Drawing.Printing.PaperSize)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            <para>
            See <see cref="T:System.Drawing.Printing.PaperKind"/> for standard paper sizes.
            </para>
            <para>
            See also <see cref="T:WW.Cad.Drawing.PaperSizes"/> for a utility class that converts from 
            <see cref="T:System.Drawing.Printing.PaperKind"/> to <see cref="P:WW.Cad.IO.PsExporter.PaperSize"/>.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Draw given dxf model on the PostScript stream.
            </summary>
            <remarks>
            Draws only the model space entities.
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="modelToPsTransform">Transform from model space to PostScript paper space.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given dxf model on the PostScript stream.
            </summary>
            <remarks>
            Draws only the model space entities.
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="modelToPsTransform">Transform from model space to PostScript paper space.</param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Draw given dxf model on the PostScript stream using given view port.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="layout">The layout to draw (optional).</param>
            <param name="viewports">The view ports to use for rendering (optional).</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="paperToPsTransform">Transform from paper space to PostScript paper space.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given dxf model on the PostScript stream using given view port.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="layout">The layout to draw (optional).</param>
            <param name="viewports">The view ports to use for rendering (optional).</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="paperToPsTransform">Transform from paper space to PostScript paper space.</param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Begin graphics creation for specified entity.
            End creation with <see cref="M:WW.Cad.IO.PsExporter.EndEntity"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.EndEntity">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.IO.PsExporter.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Begin graphics creation for specified insert.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.EndInsert">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.IO.PsExporter.BeginInsert(WW.Cad.Model.Entities.DxfInsert)"/>
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreateDot(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D)">
            <summary>
            Create a colored dot.
            </summary>
            <param name="entity">The entity creating the dot.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the dot is created for text.</param>
            <param name="position">the position</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreateLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Create a colored line segment.
            </summary>
            <param name="entity">The entity creating the line segment.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the line segment is created for text.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreateRay(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored ray (infinite line in one direction).
            </summary>
            <param name="entity">The entity creating the ray.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="segment">The line segment, first point must be the starting point,
              the second point goes towards infinity.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreateXLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored DxfXLine (infinite line in both direction).
            </summary>
            <param name="entity">The entity creating the xline.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="startPoint">Starting point (for bounding box calculation).</param>
            <param name="segment">The line segment, both points approach infinity.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of dots, lines and polylines.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreatePathAsOne(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of lines and polylines.
            Similar to <see cref="M:WW.Cad.IO.PsExporter.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)"/> but in GDI graphics
            this matches drawing using <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
            <remarks>
            This is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the shape is created for text.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreateText(WW.Cad.Model.Entities.DxfText,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.IO.PsExporter.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreateMText(WW.Cad.Model.Entities.DxfMText,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.IO.PsExporter.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PsExporter.Write(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Call this to actually write the PostScript file.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PsExporter.LineWidth">
            <summary>
            Gets or sets the line width.
            </summary>
            <remarks>
            <para>
            Default value is 0.1.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.PsExporter.PaperSize">
            <summary>
            Gets or sets the paper size (Default is letter).
            </summary>
            <remarks>
            See <see cref="T:System.Drawing.Printing.PaperKind"/> for standard paper sizes.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.PsExporter.Title">
            <summary>
            Gets or sets the title that is stored in the PostScript drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PsExporter.SupportsText">
            <summary>
            Gets a value indicating whether the object supports text.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.VerticalGlyphWrapper">
            <summary>
            Wrapper class allowing to use a TTF or WWF glyph in vertical mode.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.IDrawableCanonicalGlyph">
            <summary>
            A canonical glyph, i.e. a character of a font defined by its rendering path and its advance vector.
            </summary>
            <remarks>
            Canonical means that the character is defined for font size <c>1</c>, 
            with an aspect ratio of <c>1</c> and no slant.
            Please note that some fonts allow letter spacing to depend on adjoining letters. 
            This interface is not taking care of this.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Text.IDrawableCanonicalGlyph.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,WW.Drawing.ArgbColor,System.Int16,System.Double)">
            <summary>
            Draw this glyph.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="trafo">transformation used for drawing this glyph</param>
            <param name="color">color used to draw this glyph</param>
            <param name="lineWeight">The line weight.</param>
            <param name="extent">extent in z, usually <c>0</c></param>
        </member>
        <member name="M:WW.Cad.Model.Text.IDrawableCanonicalGlyph.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.IDrawableCanonicalGlyph.IsValid">
            <summary>
            Does this glyph contain valid information?
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.VerticalGlyphWrapper.#ctor(WW.Cad.Model.Text.IDrawableCanonicalGlyph)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Text.VerticalGlyphWrapper"/> class.
            </summary>
            <param name="wrappedGlyph">The wrapped glyph.</param>
        </member>
        <member name="M:WW.Cad.Model.Text.VerticalGlyphWrapper.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,WW.Drawing.ArgbColor,System.Int16,System.Double)">
            <summary>
            Draw this glyph.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="trafo">transformation used for drawing this glyph</param>
            <param name="color">color used to draw this glyph</param>
            <param name="lineWeight">The line weight.</param>
            <param name="extent">extent in z, usually <c>0</c></param>
        </member>
        <member name="M:WW.Cad.Model.Text.VerticalGlyphWrapper.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.VerticalGlyphWrapper.Letter">
            <summary>
            The letter this glyph represents.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.VerticalGlyphWrapper.Path">
            <summary>
            The canonical path of the letter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.VerticalGlyphWrapper.Filled">
            <summary>
            Has this glyph to be drawn filled?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.VerticalGlyphWrapper.Advance">
            <summary>
            The canonical advance of the letter.
            </summary>
            <remarks>
            The advance is the distance on the baseline the insertion point is moved after this letter is drawn,
            defining the insertion point of the next letter.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.VerticalGlyphWrapper.IsValid">
            <summary>
            Does this glyph contain valid information?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter">
            <summary>
            Represents the dynamic block point parameter.
            </summary>
            <remarks>
            Point is defined in the base class.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter.LabelPosition">
            <summary>
            Gets or sets the position of label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPointParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfRasterVariables">
            <summary>
            Contains settings for displaying raster images (<see cref="T:WW.Cad.Model.Entities.DxfRasterImage"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfRasterVariables.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfRasterVariables.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfRasterVariables.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfRasterVariables.ClassVersion">
            <summary>
            Gets or sets the class version. The default value is 0.
            Value 0 represents version <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfRasterVariables.ImageDisplayFrameFlag">
            <summary>
            Gets or sets the display image frame flag.
            The default value is <see cref="!:ImageDisplayFrameFlag.FrameAboveImage"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfRasterVariables.ImageDisplayQuality">
            <summary>
            Gets or sets the image display quality.
            The default value is <see cref="!:ImageDisplayQuality.High"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfRasterVariables.ImageInsertionUnits">
            <summary>
            Gets or sets the image insertion units.
            The default value is <see cref="!:ImageInsertionUnits.None"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfRasterVariables.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfRasterVariables.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.ImageDisplayFrameFlag">
            <summary>
            A display image frame flag.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ImageDisplayFrameFlag.NoFrame">
            <summary>
            Don't display the frame.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ImageDisplayFrameFlag.FrameAboveImage">
            <summary>
            Display the frame above the image.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ImageDisplayFrameFlag.FrameBelowImage">
            <summary>
            Display the frame below the image.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ImageDisplayFrameFlag.FrameOnNoPlot">
            <summary>
            New in <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.ImageDisplayQuality">
            <summary>
            Image display quality.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.ImageInsertionUnits">
            <summary>
            Represents image insertion units.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfToleranceObjectContextData">
            <summary>
            Fcf (<see cref="T:WW.Cad.Model.Entities.DxfTolerance"/>) annotation (scale specific) data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfToleranceObjectContextData.InsertionPoint">
            <summary>
            Gets or sets the insertion point (in world coordinate system).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfToleranceObjectContextData.XAxis">
            <summary>
            Gets or sets the text x-axis direction.
            </summary>
            <remarks>
            Default value is (1, 0, 0).
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.EntityCounter">
            <summary>
            Count entities types and create a statistics from the results.
            </summary>
            <example>
            <para>
            The following will print out a statistics of all entities in the model space and paper space:
            </para>
            <code>
            DxfModel model = DxfReader.Read("foobar.dxf);
            EntityCounter counter = new EntityCounter();
            BasicEntityVisitor.Visit(model, counter);
            foreach (var pair in counter.GetStatisticsWithTotal("&lt;TOTAL COUNT&gt;")) {
                Console.Out.WriteLine("{0,20}: {1,8}", pair.First, pair.Second);
            }
            </code>
            </example>
            <para>
            Please note that the above is basically doing a tree walk over the whole model, 
            which means that entities in blocks may be counted more than once when their 
            block is inserted more than once.
            </para>
            <para>
            If you are only interested in the number of entities in the file, you can use the 
            <see cref="!:GetFlatEntityCounts"/> method.
            </para>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            This will create a deep counter which also counts entities in inserted blocks and vertices.
            It will count both model and paper space entities.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.#ctor(WW.Cad.Model.EntityCounter.HandlingFlags,WW.Cad.Model.EntityCounter.SpaceFlags)">
            <summary>
            Constructor.
            </summary>
            <param name="handlingFlags">
            Flags describing how to handle linked or associated entities.
            </param>
            <param name="spaceFilter">Filter for paper and model space entities.</param>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.GetFileEntityCounts(WW.Cad.Model.DxfModel,System.String)">
            <summary>
            Get the flat counts of all entities in the model.
            </summary>
            <remarks>
            This will count all entities in the ENTITIES section and all entities in the BLOCKS section.
            Each entity will only be called once. 
            The resulting values give the number of single entities as will appear in a DWG or DXF file created from the model.
            </remarks>
            <param name="model">The model for which the entity counts are calculated.</param>
            <param name="totalEntryLabel">If not <c>null</c> an entry with this label and the sum of all entities will be appended to the resulting list.</param>
            <returns>Order list of entity types together with their counts.</returns>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.Reset">
            <summary>
            Clear the statistics.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.Register(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Register a simple entity.
            </summary>
            <param name="entity">Entity to register.</param>
            <returns><c>true</c> if the entity was registered.</returns>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.GetStatistics">
            <summary>
            Get the statistics.
            </summary>
            <returns>
            The resulting statistics as an ordered (by entity type) list of pairs of types and the encountered counts of this type.
            If a type is not encountered it will not be included in the list.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.GetStatisticsWithTotal(System.String)">
            <summary>
            Get the statistics including a total count.
            </summary>
            <param name="totalEntryLabel">Label of total count.</param>
            <returns>
            The resulting statistics as an ordered (by entity type) list of pairs of types and the encountered counts of this type.
            If a type is not encountered it will not be included in the list.
            The last entry of the list contains the given <paramref name="totalEntryLabel"/> and the total count of entities.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.Register(WW.Cad.Model.Entities.DxfDimension)">
            <summary>
            Register a dimension entity.
            </summary>
            <remarks>
            This will also take care of the associated block.
            </remarks>
            <param name="dimension">Dimension to handle.</param>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.RegisterVertex(System.Int32)">
            <summary>
            Register a bunch of vertex entities.
            </summary>
            <param name="count">Number of vertex entities to register.</param>
        </member>
        <member name="T:WW.Cad.Model.EntityCounter.Statistics">
            <summary>
            The entity statistics.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.Statistics.Register(System.String,System.UInt32)">
            <summary>
            Register a type multiple times.
            </summary>
            <param name="type">Type to register.</param>
            <param name="multiplicator">Number of times the type wil be registered.</param>
        </member>
        <member name="M:WW.Cad.Model.EntityCounter.Statistics.Register(WW.Cad.Model.EntityCounter.Statistics,System.Int32)">
            <summary>
            Embed a complete statistics into this one.
            </summary>
            <param name="statistics">The statistics to embed.</param>
            <param name="multiplicator">Multiplicator to use for the statistics.</param>
        </member>
        <member name="P:WW.Cad.Model.EntityCounter.Statistics.Counts">
            <summary>
            Get the statistics.
            </summary>
            <remarks>
            This will resturn the resulting statistics as an ordered (by type) list of pairs of types and the encountered counts of this type.
            If a type is not encountered it will not be included in the list.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.EntityCounter.Statistics.Counter">
            <summary>
            Helper class used to avoid accessing the counts dict twice on each count.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.EntityCounter.SpaceFlags">
            <summary>
            Flags for filtering out spaces.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EntityCounter.SpaceFlags.ModelSpace">
            <summary>
            Include model space entities.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EntityCounter.SpaceFlags.PaperSpace">
            <summary>
            Include paper space entities.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EntityCounter.SpaceFlags.AllSpaces">
            <summary>
            Include all entities.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EntityCounter.HandlingFlags.FollowInserts">
            <summary>
            Include the entities of blocks inserted by <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> entities?
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EntityCounter.HandlingFlags.IncludeDimensionBlocks">
            <summary>
            Include the entities of blocks defined by <see cref="T:WW.Cad.Model.Entities.DxfDimension"/> entities?
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EntityCounter.HandlingFlags.IncludeTableBlocks">
            <summary>
            Include the entities of blocks defined by <see cref="T:WW.Cad.Model.Entities.DxfTable"/> entities?
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EntityCounter.HandlingFlags.IncludeVertices">
            <summary>
            Include the <see cref="T:WW.Cad.Model.Entities.DxfVertex"/> entities associated with <see cref="!:DxfPolyline"/> entities?
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EntityCounter.HandlingFlags.FollowAll">
            <summary>
            All of the above flags combined.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatMarbleShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatMarbleShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatMarbleShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatMarbleShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatRefinement">
            <summary>
            SAT refinement entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatRefinement.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatRefinement.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatRefinement.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatRefinement.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatRotationalRadiusEllipse">
            <summary>
            Defines a rotational radius ellipse for a variable radius function.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatRotationalRadiusEllipse.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatRotationalRadiusEllipse.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatRotationalRadiusEllipse.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatRotationalRadiusEllipse.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSurfaceSurfaceVarBlendSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarBlendSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives. Implementation of the base class for 
            variable radius and other non pipe blends.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarBlendSplineSurfacePrimitive.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarBlendSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarBlendSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarBlendSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSurfaceSurfaceVarBlendSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSurfaceSurfaceVarBlendSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatExactSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatExactSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatExactSplineSurfacePrimitive.ExtendedFlagEnumValues">
            <summary> Extended flag strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatExactSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatExactSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatExactSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatExactSplineSurfacePrimitive.ExtendedFlag">
            <summary>
            Extended flag.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatSurfaceCurve">
            <summary>
            SAT base class for blend support surface curve primitives.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatBlendSupport">
            <summary>
            SAT base class for blend support primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatBlendSupport.NameToEntityCreator">
            <summary>
            Dictionary for SAT sub curves creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatBlendSupport.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatBlendSupport.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatBlendSupport.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatBlendSupport.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatSurfaceCurve.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatSurfaceCurve.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSpringIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSpringIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSpringIntCurPrimitive.EdgeTypeEnumValues">
            <summary> Extended flag strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSpringIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSpringIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSpringIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSpringIntCurPrimitive.EdgeType">
            <summary>
            Edge type enum.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatPCurvePrimitive">
            <summary>
            SAT class for parameter space curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatPCurvePrimitive.reversed">
            <summary>Is this curve reversed?</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatPCurvePrimitive.NameToEntityCreator">
            <summary>
            Dictionary for SAT sub curves creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatPCurvePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatPCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatPCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatPCurvePrimitive.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive">
            <summary>
            SAT int_cur primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive.reversed">
            <summary>Is this curve reversed?</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive.subEntity">
            <summary>
            Sub curve entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatIntCurPrimitive.IsReversed">
            <summary>
            Is this curve reversed?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysTagAttribute">
            <summary>Defines a base class that contains a pointer to the original input entity as
            well as a flag indicating if the entity still exists.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysTagAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysTagAttribute.isOriginLost">
            <summary>State of the origin.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysTagAttribute.originalEntity">
            <summary>The original entity.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysTagAttribute.someType">
            <summary>The unknown value.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysTagAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysTagAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysTagAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTOleAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTOleAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealIndividualSimGeomAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealIndividualSimGeomAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealIndividualSimGeomAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealIndividualSimGeomAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealEdgeGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealEdgeGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealEdgeGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealEdgeGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.IndexedWireframeCollection">
            <summary>
            A collection of wires.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.IndexedWireframeCollection.points">
            <summary>List of points.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.IndexedWireframeCollection.pointToIndex">
            <summary>Mapping of points to list index.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.IndexedWireframeCollection.lines">
            <summary>List of wires.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.IndexedWireframeCollection.loops">
            <summary>List of loops.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.IndexedWireframeCollection.accuracy">
            <summary>The accuracy.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.IndexedWireframeCollection.transform">
            <summary>The current transform.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.#ctor(WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Constructor.
            </summary>
            <param name="accuracy">requested accuracy</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddPointInternally(WW.Math.Point3D)">
            <summary>
            Add a point (internally).
            </summary>
            <param name="p">point to add</param>
            <returns>point's index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddPoint(WW.Math.Point3D)">
            <summary>
            Add a point.
            </summary>
            <param name="point">point to add</param>
            <returns>point's index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddPoint(WW.Cad.Model.Acis.SatEntities.SatPoint)">
            <summary>
            Add a SAT point.
            </summary>
            <param name="point">point to add</param>
            <returns>point's index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.SetTransform(WW.Math.Matrix4D)">
            <summary>
            Set the transformation.
            </summary>
            <param name="trafo">transformation</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.UnsetTransform">
            <summary>
            Unset the transformation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddWire(System.Int32,System.Int32)">
            <summary>
            Add a line wire.
            </summary>
            <param name="startIndex">start point index</param>
            <param name="endIndex">end point index</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddWire(WW.Cad.Model.Acis.SatEntities.SatPoint,WW.Cad.Model.Acis.SatEntities.SatPoint)">
            <summary>
            Add a line wire.
            </summary>
            <param name="startPoint">start point</param>
            <param name="endPoint">end point</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddWire(WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Add a line wire.
            </summary>
            <param name="startPoint">start point</param>
            <param name="endPoint">end point</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddLoop(System.Int32[],System.Boolean)">
            <summary>
            Add a loop wire.
            </summary>
            <param name="indexes">indexes of loop points</param>
            <param name="closed">is the loop closed?</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddLoop(System.Collections.Generic.ICollection{WW.Math.Point3D},System.Boolean)">
            <summary>
            Add a loop wire.
            </summary>
            <param name="loopPoints">loop points</param>
            <param name="closed">is the loop closed?</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.AddBounds(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Add the bounds of this collection to a bounds collector.
            </summary>
            <param name="bounds">bounds collector</param>
            <param name="transformation">transformation to use</param>
            <returns>number of wires and loops</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.Accuracy">
            <summary>
            Get the accuracy.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.Points">
            <summary>
            Get all points.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.Wires">
            <summary>
            Get all wires.
            </summary>
            <returns>wires indexing into the points returned from <see cref="P:WW.Cad.Model.Acis.IndexedWireframeCollection.Points"/></returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.IndexedWireframeCollection.IWire">
            <summary>
            Interface of a wire.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.IWire.GetPoints(WW.Math.Point3D[])">
            <summary>
            Get the points of this wire from a point set.
            </summary>
            <param name="pointSet">point set for index resolution</param>
            <returns>points of this wire</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.IWire.Indexes">
            <summary>
            Get the indexes of the points in this wire.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.IWire.NumberPoints">
            <summary>
            Get the numbers of points in this wire.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.IndexedWireframeCollection.LineWire">
            <summary>
            A simple line.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.LineWire.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="startIndex">line start index</param>
            <param name="endIndex">line end index</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.LineWire.GetPoints(WW.Math.Point3D[])">
            <summary>
            Get the points of this wire from a point set.
            </summary>
            <param name="pointSet">point set for index resolution</param>
            <returns>points of this wire</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.LineWire.Indexes">
            <summary>
            Get the indexes of the points in this wire.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.LineWire.NumberPoints">
             Get the number of points/indexes in this wire.
            
             @return number of points
        </member>
        <member name="T:WW.Cad.Model.Acis.IndexedWireframeCollection.LoopWire">
            <summary>
            A wire defining a loop.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.IndexedWireframeCollection.LoopWire.GetPoints(WW.Math.Point3D[])">
            <summary>
            Get the points of this wire from a point set.
            </summary>
            <param name="pointSet">point set for index resolution</param>
            <returns>points of this wire</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.LoopWire.Indexes">
            <summary>
            Get the indexes of the points in this wire.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.IndexedWireframeCollection.LoopWire.NumberPoints">
            <summary>
            Get the numbers of points in this wire.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.DwgWriterR27">
            <summary>
            The R27 writer is the same as the R18 writer, but with a new Data Store section.
            The bit streams are the same as R24.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.SectionPage.PageNumber">
            <summary>
            Gets or sets the page number (starts at 1).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.SectionPage.StreamOffset">
            <summary>
            Gets or sets the offset in the raw stream.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.SectionPage.Length">
            <summary>
            Gets or sets the page length (page header + (compressed) data).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.SectionPage.ContainsOnlyZeroes">
            <summary>
            Gets or sets a value indicating whether the page contains only zeroes.
            A page that contains only zeroes is not written to file.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.LogicalSection.Name">
            <summary>
            Gets or sets the name (max 64 characters).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.LogicalSection.SectionSize">
            <summary>
            Gets or sets the size of the section (total uncompressed).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.LogicalSection.PageCount">
            <summary>
            Gets or sets the page count.
            This may be different from <see cref="P:WW.Cad.IO.Dwg.Dwg2004.LogicalSection.Pages"/>.Count, because
            PageCount only includes pages with a <see cref="P:WW.Cad.IO.Dwg.Dwg2004.SectionPage.PageNumber"/> greater
            than zero.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.LogicalSection.MaxDecompressedPageSize">
            <summary>
            Gets or sets the size of the max decompressed page (default value is 0x7400).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.LogicalSection.Compressed">
            <summary>
            Gets or sets whether the section is compressed (1 = no, 2 = yes, default value = 2).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.LogicalSection.SectionId">
            <summary>
            Gets or sets the section id (starts at 0).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.LogicalSection.Encrypted">
            <summary>
            Gets or sets whether the section is encrypted (0 = no, 1 = yes, default value = 0).
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfHandledObjectBuilderLinkedList">
            <summary>
            A linked list for <see cref="T:WW.Cad.IO.Builders.DxfHandledObjectBuilder"/> objects.
            When the object builder is added to the list, it will set property <see cref="P:WW.Cad.IO.Builders.DxfHandledObjectBuilder.ListNode"/> so
            it can also be easily removed later when needed.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.EntityDrawable">
            <summary>
            A container for entity drawables.
            In an editor scenario each entity has a geometry, which may be empty (entity is invisible) or not empty (entity is visible).
            By having this geometry node in the linked list of all entity drawables, the drawing order
            is preserved when e.g. toggling entity visibility.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.IDrawable">
            <summary>
            An interface for drawing onto framework elements.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.EntityDrawable.Drawables">
            <summary>
            Gets or sets the drawables.
            This may be <c>null</c> to save some memory on entities that are not visible.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.ColorContextWithBackgroundColor">
            <summary>
            Color context to change color schemes depending on the back ground color 
            (on screen usually black, on paper white).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.ColorContextWithBackgroundColor.#ctor(WW.Drawing.ArgbColor)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Wpf.ColorContextWithBackgroundColor.BackColor">
            <summary>
            Gets the back ground color.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.ColorContext">
            <summary>
            Color context without a background color.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.QuadStrip1">
            <summary>
            Represents a coplanar quad strip primitive with a single normal vector.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadStrip1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.QuadStrip1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadStrip1.#ctor(System.Collections.Generic.IList{WW.Math.Point3D},System.Collections.Generic.IList{WW.Math.Point3D},WW.Math.Vector3D,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.QuadStrip1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.QuadStrip1.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip1.Polyline1">
            <summary>
            Gets or sets the polyline 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip1.Polyline2">
            <summary>
            Gets or sets the polyline 2.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip1.Normal">
            <summary>
            Gets or sets the normal.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.QuadStrip1.Closed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Drawing.Surface.QuadStrip1"/> is closed.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Polyline2D2N">
            <summary>
            Polyline based on <see cref="T:WW.Cad.Drawing.Point2D2N"/> objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.Polyline2D2N.Factory">
            <summary>
            Gets the factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{WW.Cad.Drawing.Point2D2N})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor(System.Boolean,WW.Cad.Drawing.Point2D2N[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor(WW.Cad.Drawing.Point2D2N[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Drawing.Point2D2N})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.#ctor(WW.Math.Geometry.Polyline{WW.Cad.Drawing.Point2D2N})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.GetLength">
            <summary>
            Gets the total length.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2N.GetLength(System.Collections.Generic.IList{WW.Cad.Drawing.Point2D2N},System.Boolean)">
            <summary>
            Gets the total length of the polyline defined by specified points.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.LineTypeScaler">
            <summary>
            All of the line type scalers are immutable.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.ILineTypeScaler">
            <summary>
            An interface to calculate the length of a vector in the OCS after it is transformed to the WCS/eye CS.
            Line type is applied in the WCS/eye CS, but the actual calculation happens in the OCS, which is easier as
            there can happen various clippings at the insert stage before the WCS is actually reached.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILineTypeScaler.GetScaledLength(WW.Math.Vector2D)">
            <summary>
            Transforms the specified OCS vector to the WCS/eye CS and returns its length.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILineTypeScaler.GetScaledLength(WW.Math.Vector3D)">
            <summary>
            Transforms the specified OCS vector to the WCS/eye CS and returns its length.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILineTypeScaler.GetLengths(WW.Math.Vector2D,System.Double@,System.Double@)">
            <summary>
            Transforms the specified OCS vector to the WCS/eye CS and returns its length (scaled) as well as the length of the original vector.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILineTypeScaler.ApplyWcsToOcsCorrection(WW.Math.Matrix3D)">
            <summary>
            Applies a WCS/eye CS to OCS correction to the specified matrix.
            Take into account additional (non-uniform) transformations due to inserts/paper space projection transforms.
            Since line type is applied to OCS, and transformed to the WCS later, a correction (only scale and shear) has to be applied
            because the line type should appear as if it was applied in the WCS.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.LineTypeScaler.WithShearBase">
            <summary>
            Base class for line type scalers that have a shear component in them.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.VerticalAlignment">
            <summary>
            Vertical alignment.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.VerticalAlignment.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.VerticalAlignment.Middle">
            <summary>
            Middle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.VerticalAlignment.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.AttributeFlags">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfAttribute"/> flags 
            (also applies to <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/>).
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfAttribute"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttributeFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttributeFlags.Invisible">
            <summary>
            DxfAttribute is invisible (does not appear).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttributeFlags.Constant">
            <summary>
            This is a constant attribute.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttributeFlags.InputVerificationRequired">
            <summary>
            Verification is required on input of this attribute.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.AttributeFlags.Preset">
            <summary>
            DxfAttribute is preset (no prompt during insertion).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.ViewFlags">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfView"/> flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewFlags.PaperSpace">
            <summary>
            If set, this is a paper space view.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewFlags.IsExternallyDependent">
            <summary>
            If set, view is externally dependent on an xref.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewFlags.IsResolvedExternalRef">
            <summary>
            If both this flag and <see cref="F:WW.Cad.Model.Tables.ViewFlags.IsExternallyDependent"/> are set, the externally dependent xref
            has been successfully resolved.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewFlags.IsReferenced">
            <summary>
            If set, the table entry was referenced by at least one entity in the
            drawing the last time the drawing was edited.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.NamespaceDoc">
            <summary>
            Main class in this namespace is <see cref="T:WW.Cad.Model.DxfModel"/>, containing lower level
            elements like <see cref="T:WW.Cad.Model.DxfHeader"/>, <see cref="T:WW.Cad.Model.Tables.DxfLayer"/>s etc. 
            Entities are defined in sub name space <see cref="N:WW.Cad.Model.Entities"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColoredComplexPath">
            <summary>
            Path that can consist of several sub drawables.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredComplexPath.#ctor(WW.Drawing.ArgbColor,WW.Cad.Drawing.GDI.IDrawable[],System.Boolean,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredComplexPath.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredComplexPath.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredComplexPath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.AsciiGroupWriter">
            <summary>
            Ascii group writer.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupWriter.WriteGroup(WW.Cad.IO.Group)">
            <summary>
            Write a group. See <see cref="T:WW.Cad.IO.IGroupWriter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupWriter.WriteGroup(System.Int32,WW.Cad.IO.Group)">
            <summary>
            Write a group. See <see cref="T:WW.Cad.IO.IGroupWriter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupWriter.WriteGroupAsInt16(WW.Cad.IO.Group)">
            <summary>
            Write given group as Int16. See <see cref="T:WW.Cad.IO.IGroupWriter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupWriter.WriteGroupAsUInt16(WW.Cad.IO.Group)">
            <summary>
            Write given group as UInt16. See <see cref="T:WW.Cad.IO.IGroupWriter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupWriter.Flush">
            <summary>
            Flushes the writer.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupWriter.Close">
            <summary>
            Close the writer and underlying stream.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.AsciiGroupReader">
            <summary>
            Ascii group reader.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupReader.#ctor(System.IO.TextReader)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupReader.ReadGroup(WW.Cad.IO.DxfReader)">
            <summary>
            Read the next group. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupReader.ReadGroup(WW.Cad.IO.DxfReader,System.Int32)">
            <summary>
            Read the next group. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupReader.ReadGroupTryParse(WW.Cad.IO.DxfReader)">
            <summary>
            Read the next group. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.AsciiGroupReader.Close">
            <summary>
            Close the reader and underlying stream. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.AsciiGroupReader.Position">
            <summary>
            Give the current position string for error messages. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.GroupCodes">
            <summary>
            Group codes (only a very small subset is listed here).
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupCodes.EntityType">
            <summary>
            Entity type.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupCodes.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupCodes.LayerName">
            <summary>
            Layer name.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupCodes.SubClassMarker">
            <summary>
            Subclass model marker (with derived class name as a string). 
            Required for all objects and entity classes that are derived from another concrete class. 
            The subclass model marker segregates model defined by different 
            classes in the inheritance chain for the same object.
            This is in addition to the requirement for DXF names for 
            each distinct concrete class derived from ObjectARX (see "Subclass Markers")
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupCodes.Comment">
            <summary>
            Comment.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.VariableAttribute">
            <summary>
            DxfAttribute to annotate an property with to link it with a Cad DxfVariable.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.VariableAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.VariableAttribute.#ctor(System.String)">
            <summary>
            Constructor for variables consisting of multiple groups.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.VariableAttribute.Name">
            <summary>
            Gets the variable name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.VariableAttribute.ValueGroupCode">
            <summary>
            Group code of the value.
            </summary>
            <remarks>
            When the value consists of more than 1 group (e.g. a vertex),
            then this has value -1 and has no meaning.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.PolylineFlags">
            <summary>
            Represents Polyline3D flags (used by both <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> and <see cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/>).
            </summary>
            <remarks>
            For <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> only <see cref="F:WW.Cad.Model.Entities.PolylineFlags.Closed"/> and <see cref="F:WW.Cad.Model.Entities.PolylineFlags.Plinegen"/>
            are applicable.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.Closed">
            <summary>
            Polyline3D is closed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.HasCurveFitVertices">
            <summary>
            Polyline3D has curve fit vertices.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.HasSplineFitVertices">
            <summary>
            Polyline3D has spline vertices.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.Is3DPolyline">
            <summary>
            Polyline3D is 3D (otherwise 2D).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.Is3DPolygonMesh">
            <summary>
            Polyline3D is a 3D polygon mesh.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.PolygonMeshClosedInNDirection">
            <summary>
            Polygon mesh is closed in N direction.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.IsPolyfaceMesh">
            <summary>
            Polyline3D is a polyface mesh.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.PolylineFlags.Plinegen">
            <summary>
            If set then the line type is applied on the polyline as a whole,
            other wise on each line segment separately.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.DxfUtil">
            <summary>
            Dxf utility class.
            </summary>
            <remarks>
            <para>
            The <see cref="M:WW.Cad.Base.DxfUtil.OpenFileRead(System.String)"/> method supports unzipping input files (non-Silverlight version only).
            </para>
            <para>
            Use <see cref="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)"/> 
            to calculate the scale transform
            needed to display model correctly to fit within a viewport.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.OpenFileRead(System.String)">
            <summary>
            Opens file with given filename.
            </summary>
            <remarks>
            Accepts uncompressed files or compressed files (*.zip, *.bz2, *.gzip, *.tar).
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Constructs a Matrix4D to fit the from bounding box to the target bounding box.
            Useful to fit an object to a viewport.
            </summary>
            <remarks>
            The from points can be calculated using e.g.
            method <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.BoundingBox(WW.Math.Bounds3D)"/> or helper class
            <see cref="T:WW.Cad.Drawing.BoundsCalculator"/>.
            This method will return a transformation which will center the source
            viewport in the target viewport. If you need more control about the alignment
            use <see cref="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)"/>
            </remarks>
            <param name="fromPoint1">corner of source viewport</param>
            <param name="fromPoint2">opposite corner of source viewport</param>
            <param name="toPoint1">corner of target viewport corresponding to <paramref name="fromPoint1"/></param>
            <param name="toPoint2">corner of target viewport corresponding to <paramref name="fromPoint2"/></param>
            <returns>uniform scaling mapping transformation</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,System.Double@)">
            <summary>
            Constructs a Matrix4D to fit the from bounding box to the target bounding box.
            Useful to fit an object to a viewport.
            </summary>
            <remarks>
            The from points can be calculated using e.g.
            method <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.BoundingBox(WW.Math.Bounds3D)"/> or helper class
            <see cref="T:WW.Cad.Drawing.BoundsCalculator"/>.
            This method will return a transformation which will center the source
            viewport in the target viewport. If you need more control about the alignment
            use <see cref="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)"/>
            </remarks>
            <param name="fromPoint1">corner of source viewport</param>
            <param name="fromPoint2">opposite corner of source viewport</param>
            <param name="toPoint1">corner of target viewport corresponding to <paramref name="fromPoint1"/></param>
            <param name="toPoint2">corner of target viewport corresponding to <paramref name="fromPoint2"/></param>
            <param name="scaling">output of the calculated source-to-target scaling</param>
            <returns>uniform scaling mapping transformation</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Constructs a Matrix4D to fit the from bounding box to the target bounding box.
            Useful to fit an object to a viewport.
            </summary>
            <remarks>
            The from points can be calculated using e.g.
            method <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.BoundingBox(WW.Math.Bounds3D)"/> or helper class
            <see cref="T:WW.Cad.Drawing.BoundsCalculator"/>.
            </remarks>
            <param name="fromPoint1">corner of source viewport</param>
            <param name="fromPoint2">opposite corner of source viewport</param>
            <param name="fromReferencePoint">reference point of source viewport</param>
            <param name="toPoint1">corner of target viewport corresponding to <paramref name="fromPoint1"/></param>
            <param name="toPoint2">corner of target viewport corresponding to <paramref name="fromPoint2"/></param>
            <param name="toReferencePoint">
             Reference point of target viewport. The calculated transformation is always mapping 
             <paramref name="fromReferencePoint"/> to <paramref name="toReferencePoint"/>.
            </param>
            <returns>uniform scaling mapping transformation</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,System.Double@)">
            <summary>
            Constructs a Matrix4D to fit the from bounding box to the target bounding box.
            Useful to fit an object to a viewport.
            </summary>
            <remarks>
            The from points can be calculated using e.g.
            method <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.BoundingBox(WW.Math.Bounds3D)"/> or helper class
            <see cref="T:WW.Cad.Drawing.BoundsCalculator"/>.
            </remarks>
            <param name="fromPoint1">corner of source viewport</param>
            <param name="fromPoint2">opposite corner of source viewport</param>
            <param name="fromReferencePoint">reference point of source viewport</param>
            <param name="toPoint1">corner of target viewport corresponding to <paramref name="fromPoint1"/></param>
            <param name="toPoint2">corner of target viewport corresponding to <paramref name="fromPoint2"/></param>
            <param name="toReferencePoint">
             Reference point of target viewport. The calculated transformation is always mapping 
             <paramref name="fromReferencePoint"/> to <paramref name="toReferencePoint"/>.
            </param>
            <param name="scaling">output of the calculated source-to-target scaling</param>
            <returns>uniform scaling mapping transformation</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetScaleWMMatrixTransform(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D)">
            <summary>
            Constructs a Windows.Media.MatrixTransform to fit the from bounding box to the target bounding box.
            Useful to fit an object to a viewport.
            </summary>
            <remarks>
            The from points can e.g. be calculated using <see cref="T:WW.Cad.Drawing.BoundsCalculator"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetScaleWMMatrixTransform(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Double@)">
            <summary>
            Constructs a Windows.Media.MatrixTransform to fit the from bounding box to the target bounding box.
            Useful to fit an object to a viewport.
            </summary>
            <remarks>
            The from points can e.g. be calculated using <see cref="T:WW.Cad.Drawing.BoundsCalculator"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ToMatrix4D(System.Windows.Media.Matrix)">
            <summary>
            Convert a WPF matrix to an internal matrix.
            </summary>
            <remarks>
            As WPF matrixes define simple affine 2D transformations 
            while Matrix4D is handling homogeneous 3D transformations, 
            the other way round is often not possible.
            </remarks>
            <param name="matrix">Windows media matrix.</param>
            <returns>Equivalent internal matrix.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetToWCSTransform(WW.Math.Vector3D)">
            <summary>
            Calculate coordinate transformation to WCS (world coordinate system)
            according to given z-axis (in WCS).
            </summary>
            <remarks>
            Useful to transform coordinates from the 
            OCS (object coordinate system) 
            to the WCS (world coordinate system).
            See <see href="http://www.autodesk.com/techpubs/autocad/acad2000/dxf/"/>,
            subject "Arbitrary Axis Algorithm".
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetToWcsTransformXAxis(WW.Math.Vector3D)">
            <summary>
            Calculate coordinate transformation to WCS (world coordinate system)
            according to given z-axis (in WCS) and returns its x-axis.
            </summary>
            <remarks>
            Useful to transform coordinates from the 
            OCS (object coordinate system) 
            to the WCS (world coordinate system).
            See <see href="http://www.autodesk.com/techpubs/autocad/acad2000/dxf/"/>,
            subject "Arbitrary Axis Algorithm".
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetToWCSTransform(WW.Math.Vector3D,WW.Math.Vector3D)">
            <summary>
            Calculate coordinate transformation to WCS (world coordinate system)
            according to given x-axis and z-axis.
            </summary>
            <remarks>
            No check is done to ensure that given x and z axis are perpendicular to eachother.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetToWCSTransform2(WW.Math.Vector3D,WW.Math.Vector3D)">
            <summary>
            Calculate coordinate transformation to WCS (world coordinate system)
            according to given x-axis and z-axis. Same as <see cref="M:WW.Cad.Base.DxfUtil.GetToWCSTransform(WW.Math.Vector3D,WW.Math.Vector3D)"/>, but assumes given
            x-axis and z-axis are already normalized.
            </summary>
            <remarks>
            No check is done to ensure that given x and z axis are perpendicular to eachother.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetToWCSTransform3D(WW.Math.Vector3D)">
            <summary>
            Calculate coordinate transformation to WCS (world coordinate system)
            according to given z-axis (in WCS).
            </summary>
            <remarks>
            Useful to transform coordinates from the 
            OCS (object coordinate system) 
            to the WCS (world coordinate system).
            See <see href="http://www.autodesk.com/techpubs/autocad/acad2000/dxf/"/>,
            subject "Arbitrary Axis Algorithm".
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetToWCSTransform3D(WW.Math.Vector3D,WW.Math.Vector3D)">
            <summary>
            Calculate coordinate transformation to WCS (world coordinate system)
            according to given x-axis and z-axis.
            </summary>
            <remarks>
            No check is done to ensure that given x and z axis are perpendicular to eachother.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetToWCSTransform2_3D(WW.Math.Vector3D,WW.Math.Vector3D)">
            <summary>
            Calculate coordinate transformation to WCS (world coordinate system)
            according to given x-axis and z-axis. Same as <see cref="M:WW.Cad.Base.DxfUtil.GetToWCSTransform(WW.Math.Vector3D,WW.Math.Vector3D)"/>, but assumes given
            x-axis and z-axis are already normalized.
            </summary>
            <remarks>
            No check is done to ensure that given x and z axis are perpendicular to eachother.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetArbitraryAxisAndZRotation(WW.Math.Matrix3D,WW.Math.Vector3D@,System.Double@)">
            <summary>
            Get the arbitrary axis and an additional z rotation angle from a general rotation.
            </summary>
            <remarks>
            This is useful to determine the z rotation angle and arbitrary axis for <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> entities.
            </remarks>
            <param name="rotation">
             General rotation matrix. It is assumed that the transformation really defines a rotation, 
             i.e. its determinant is <c>1</c>.
            </param>
            <param name="arbitraryAxis">Return of the arbitrary axis.</param>
            <param name="zAngle">Return of the rotation angle around the z axis in radians, counterclockwise</param>
            <returns>
            <c>true</c> if the input <paramref name="rotation"/> is a rotation matrix (and so could be converted)
            and <c>false</c> if not.
            </returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.Extrude(System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Double,WW.Math.Vector3D)">
            <summary>
            Extrude given list of <see cref="T:WW.Math.Geometry.Polyline3D"/> objects.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.Offset(System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Double,WW.Math.Vector3D)">
            <summary>
            Offset given list of <see cref="T:WW.Math.Geometry.Polyline3D"/> objects (useful for extrusion).
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.Equal(System.Double,System.Double)">
            <summary>
            Returns <see langword="true"/> if a and b are approximately equal.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.DisposeThreadStaticObjects">
            <summary>
            Dispose all thread static objects.
            </summary>
            <remarks>
            <para>
            Normally all thread static objects are released by the garbage collector when a thread
            ends, but method Dipose is not called on <see cref="T:System.IDisposable"/> objects.
            With this method these disposable objects can be explicitly disposed of at the end of a thread.
            </para>
            <para>
            When the thread static objects are disposed, the thread can still be used, all 
            needed thread static objects are initialized as needed.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.IsSaneNotZero(System.Double)">
            <summary>
            Determines whether the specified value is neither infinity nor NaN nor 0.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value is sane in teh abovce sense, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType(WW.Cad.Drawing.GraphicsConfig,System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D},WW.Math.Geometry.Polyline2D,WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler)">
            <summary>
            Apply line type to given polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType(WW.Cad.Drawing.GraphicsConfig,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D},System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},WW.Cad.Model.Tables.DxfLineType,WW.Math.Vector3D,System.Double,WW.Cad.Drawing.ILineTypeScaler)">
            <summary>
            Apply line type to given polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType(WW.Cad.Drawing.GraphicsConfig,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D},WW.Math.Geometry.Polyline3D,WW.Cad.Model.Tables.DxfLineType,WW.Math.Vector3D,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Boolean)">
            <summary>
            Apply line type to given polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType(WW.Cad.Drawing.GraphicsConfig,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D},WW.Math.Geometry.Polyline3D,WW.Cad.Model.Tables.DxfLineType,WW.Math.Vector3D,System.Double,WW.Cad.Drawing.ILineTypeScaler)">
            <summary>
            Apply line type to given polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ConvertWidePolylineSidesToPolygons(System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},WW.Math.Matrix4D,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Boolean)">
            <summary>
            Method to convert 2 collections of polylines that come out of <see cref="M:WW.Cad.Base.DxfUtil.ApplyLineTypeAndWidth1(WW.Cad.Drawing.GraphicsConfig,WW.Cad.Drawing.Polyline2D2WN,WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D}@,System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D}@,System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D}@,System.Boolean@)"/>
            to a single collection of polylines representing polygon boundaries.
            </summary>
            <remarks>
            The number of points in both polylines does not have to be equal.
            Sometimes a polyline with vertices with bulge result in e.g. a circle, 
            where the polylines1 vanishes into a dot and should be ignored.
            </remarks>
            <param name="polylines1">One side of the wide polyline.</param>
            <param name="polylines2">The other side of the wide polyline.</param>
            <param name="transform">The transform.</param>
            <param name="result">converted polygons are added to this collection.</param>
            <param name="mergeClosedPolylineSides">if set to <c>true</c> merge closed polyline sides.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ConvertWidePolylineSidesToPolygons(System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},WW.Math.Matrix4D,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Boolean)">
            <summary>
            Method to convert 2 collections of polylines that come out of <see cref="M:WW.Cad.Base.DxfUtil.ApplyLineTypeAndWidth2(WW.Cad.Drawing.GraphicsConfig,WW.Cad.Drawing.Polyline2D2WN,WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Boolean,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N}@,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N}@,System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D}@,System.Boolean@)"/>
            to a single collection of polylines representing polygon boundaries.
            </summary>
            <param name="polylines1">One side of the wide polyline.</param>
            <param name="polylines2">The other side of the wide polyline.</param>
            <param name="transform">The transform.</param>
            <param name="result">converted polygons are added to this collection.</param>
            <param name="mergeClosedPolylineSides">if set to <c>true</c> merge closed polyline sides.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType3(WW.Cad.Drawing.GraphicsConfig,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D},System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler)">
            <summary>
            Apply line type to given polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType3(WW.Cad.Drawing.GraphicsConfig,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D},WW.Cad.Drawing.Polyline2D2N,WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler)">
            <summary>
            Apply line type to given polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType4``2(WW.Cad.Drawing.GraphicsConfig,WW.Math.Geometry.IPolylineFactory{``0,``1},System.Collections.Generic.IList{``1},``1,WW.Math.Matrix4D,WW.Cad.Model.Tables.DxfLineType,System.Double,System.Boolean)">
            <summary>
            Apply line type to given polyline.
            </summary>
            <remarks>
            The line type is applied in the WCS. The polyline is transformed to the WCS by <param name="transform"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType4``2(WW.Cad.Drawing.GraphicsConfig,WW.Math.Geometry.IPolylineFactory{``0,``1},System.Collections.Generic.IList{``1},``1,WW.Math.Matrix4D,WW.Cad.Model.Tables.DxfLineType,System.Double)">
            <summary>
            Apply line type to given polyline.
            </summary>
            <remarks>
            The line type is applied in the WCS. The polyline is transformed to the WCS by <param name="transform"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.AddLineTypeSegment4``2(System.Collections.Generic.IList{``1},WW.Math.Geometry.IPolylineFactory{``0,``1},``1,System.Double[],System.Double,System.Int32@,System.Double@)">
            <summary>
            Adds a line type segment.
            </summary>
            <param name="result">The result.</param>
            <param name="polylineFactory">The polyline factory.</param>
            <param name="polyline">The input polyline.</param>
            <param name="transformedLengths">The transformed lengths between points in the input polyline.</param>
            <param name="length">The length to be drawn.</param>
            <param name="startVertexIndex">Start index of the vertex.</param>
            <param name="localStart">The local start projected length on the segment starting at the start vertex.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType4(WW.Cad.Drawing.GraphicsConfig,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},WW.Math.Geometry.Polyline3D,WW.Math.Matrix4D,WW.Cad.Model.Tables.DxfLineType,System.Double,System.Boolean)">
            <summary>
            Apply line type to given polyline.
            </summary>
            <remarks>
            The line type is applied in the WCS. The polyline is transformed to the WCS by <param name="transform"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineType4(WW.Cad.Drawing.GraphicsConfig,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},WW.Math.Geometry.Polyline3D,WW.Math.Matrix4D,WW.Cad.Model.Tables.DxfLineType,System.Double)">
            <summary>
            Apply line type to given polyline.
            </summary>
            <remarks>
            The line type is applied in the WCS. The polyline is transformed to the WCS by <param name="transform"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.AddLineTypeSegment4(System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},WW.Math.Geometry.Polyline3D,WW.Math.Vector3D[],System.Double[],System.Double,System.Int32@,System.Double@)">
            <summary>
            Adds a line type segment.
            </summary>
            <param name="result">The result.</param>
            <param name="polyline">The input polyline.</param>
            <param name="deltas">The deltas.</param>
            <param name="transformedLengths">The transformed lengths between points in the input polyline.</param>
            <param name="length">The length to be drawn.</param>
            <param name="startVertexIndex">Start index of the vertex.</param>
            <param name="localStart">The local start projected length on the segment starting at the start vertex.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineTypeAndWidth1(WW.Cad.Drawing.GraphicsConfig,WW.Cad.Drawing.Polyline2D2WN,WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D}@,System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D}@,System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D}@,System.Boolean@)">
            <summary>
            Splits the polyline first in its segments if plinegen is false.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineTypeAndWidthHelper1(WW.Cad.Drawing.GraphicsConfig,WW.Cad.Drawing.Polyline2D2WN,WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D})">
            <summary>
            Apply line type and width.
            </summary>
            <remarks>
            <para>
            The input curve should be a 2d curve in the xy plane.
            The z coordinate of each vertex is really the width and not the z coordinate.
            </para>
            <para>
            Returned polylines represent either points, line segments or quadrilaterals.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineTypeAndWidth2(WW.Cad.Drawing.GraphicsConfig,WW.Cad.Drawing.Polyline2D2WN,WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Boolean,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N}@,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N}@,System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D}@,System.Boolean@)">
            <summary>
            Splits the polyline first in its segments if plinegen is false.
            </summary>
            <returns>
            <para><c>true</c>: the result is valid</para>
            <para><c>false</c>: ignore the result</para>
            </returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.ApplyLineTypeAndWidthHelper2(WW.Cad.Drawing.GraphicsConfig,WW.Cad.Drawing.Polyline2D2WN,WW.Cad.Model.Tables.DxfLineType,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Boolean,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Collections.Generic.IList{WW.Math.Geometry.FlatShape4D})">
            <summary>
            Apply line type and width.
            </summary>
            <remarks>
            <para>
            The input curve should be a 2d curve in the xy plane.
            The z coordinate of each vertex is really the width and not the z coordinate.
            </para>
            <para>
            Returned polylines represent either points, line segments or quadrilaterals.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.AddLineTypeSegment2(System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},WW.Cad.Drawing.Polyline2D2WN,System.Double,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Int32@,System.Double@)">
            <summary>
            Apply line type and width.
            The segments don't have to connect.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.AddLineTypeSegment2(System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},WW.Cad.Drawing.Polyline2D2WN,System.Double,System.Double,WW.Cad.Drawing.ILineTypeScaler,System.Int32@,System.Double@)">
            <summary>
            Apply line type and width.
            The segments don't have to connect.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetCorners(WW.Math.Bounds3D)">
            <summary>
            Helper method: collect the corners of a bounding box.
            </summary>
            <param name="bounds">Bounding box.</param>
            <returns>The unique corners of the bounding box as 4D homogeneous points.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.TransformFlatShapes(System.Collections.Generic.ICollection{WW.Math.Geometry.FlatShape4D},WW.Cad.Drawing.IClippingTransformer)">
            <summary>
            Transform a collection of flat 4D shapes. 
            </summary>
            <param name="flatShapes">The Collection of flat 4D shapes, can be <c>null</c>.</param>
            <param name="transformer">The ransformer.</param>
            <returns>Transformed shapes, or <c>null</c> if incoming shape collection was <c>null</c> or empty.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetMemoryStream(System.IO.Stream)">
            <summary>
            First decompress into a memory stream because we need to be able
            to random access the stream.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.Atan2(System.Double,System.Double)">
            <summary>
            Same as System.Math.Atan2, but returns angles in range 0 to 2 * pi.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.PruneAngle(System.Double)">
            <summary>
            Keeps angle in 0 to 2 * pi range.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.GetMatrix4D(WW.Math.Matrix3D)">
            <summary>
            Convert 3D to 4D matrix, where the 3d column of the 3D matrix is assumed
            to be the translation vector and hence put in the 4th column of the resulting 4D matrix.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfUtil.WideSegment2D.#ctor(WW.Cad.Drawing.Point2D2WN,WW.Cad.Drawing.Point2D2WN)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.DxfUtil.WideSegment2D.RayA1">
            <summary>
            Gets the ray starting at p1a going throug p2a.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.DxfUtil.WideSegment2D.RayA2">
            <summary>
            Gets the ray starting at p2a going throug p1a.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.DxfUtil.WideSegment2D.RayB1">
            <summary>
            Gets the ray starting at p1b going throug p2b.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.DxfUtil.WideSegment2D.RayB2">
            <summary>
            Gets the ray starting at p2b going throug p1b.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.AcClasses">
            <summary>
            Autocad classes (group 100).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.SymbolTable">
            <summary>
            Symbol table class (TABLE section).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.SymbolTableRecord">
            <summary>
            Symbol table record (e.g. layer table instance).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.RegAppTableRecord">
            <summary>
            AppId table record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.LinetypeTableRecord">
            <summary>
            Line type table record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.TextStyleTableRecord">
            <summary>
            Text style record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.LayerTableRecord">
            <summary>
            Layer table record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.UcsTableRecord">
            <summary>
            Ucs table record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.ViewTableRecord">
            <summary>
            View table record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.ViewportTableRecord">
            <summary>
            Viewport table record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.BlockTableRecord">
            <summary>
            Block table record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.DimensionStyleTable">
            <summary>
            Dimension style table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.DimensionStyleTableRecord">
            <summary>
            Dimension style table record.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.BlockBegin">
            <summary>
            Block begin class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.BlockEnd">
            <summary>
            Block end class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.ModelerGeometry">
            <summary>
            ACIS based classes (3dSolid, Body, Region).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Db3dSolid">
            <summary>
            ACIS based classe 3dSolid.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Arc">
            <summary>
            Arc class (sub class of circle).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.AttributeDefinition">
            <summary>
            Attribute definition class (sub class of text).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Attribute">
            <summary>
            Attribute class (sub class of text).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Circle">
            <summary>
            Circle class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Dimension">
            <summary>
            Dimension class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.AlignedDimension">
            <summary>
            Aligned dimension class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.RotatedDimension">
            <summary>
            Rotated dimension class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.RadialDimension">
            <summary>
            Radial dimension class (same as Diametric).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.DiametricDimension">
            <summary>
            Diametric dimension class (same as Radial).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.ThreePointAngularDimension">
            <summary>
            3-DxfPoint angular dimension class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.FourPointAngularDimension">
            <summary>
            4-DxfPoint angular dimension class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.OrdinateDimension">
            <summary>
            Ordinate dimension class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Ellipse">
            <summary>
            Ellipse class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Entity">
            <summary>
            Entity class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Hatch">
            <summary>
            Hatch class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Wipeout">
            <summary>
            Wipeout class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.RasterImage">
            <summary>
            Image class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Leader">
            <summary>
            Leader class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Line">
            <summary>
            Line class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.MLine">
            <summary>
            MLine class (multiple parallel lines).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Point">
            <summary>
            Point class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.ProxyEntity">
            <summary>
            Proxy entity class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Face">
            <summary>
            3DFace class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.LwPolyline">
            <summary>
            Light weight polyline (2D), (LWPOLYLINE).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Polyline2D">
            <summary>
            2D polyline class (POLYLINE).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Polyline3D">
            <summary>
            3D polyline class (POLYLINE).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.PolygonMesh">
            <summary>
            Polygon mesh (used in stead of DxfPolyline3D from R13 onwards).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.PolyfaceMesh">
            <summary>
            Polyface mesh (used in stead of DxfPolyline3D from R13 onwards).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Ray">
            <summary>
            Ray.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Shape">
            <summary>
            Shape.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Solid">
            <summary>
            Solid is same as trace.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Spline">
            <summary>
            Spline.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Table">
            <summary>
            Table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Trace">
            <summary>
            Trace class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Vertex">
            <summary>
            Vertex class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Vertex2D">
            <summary>
            2D vertex class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.PolylineVertex3D">
            <summary>
            3D polyline vertex class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.PolygonMeshVertex">
            <summary>
            Polygon mesh vertex (used in stead of AcDb3dPolylineVertex from R13 onwards).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.PolyfaceMeshVertex">
            <summary>
            Polyface mesh vertex (used in stead of AcDb3dPolylineVertex from R13 onwards).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.FaceRecord">
            <summary>
            Polyface mesh face vertex (used in stead of AcDb3dPolylineVertex from R13 onwards).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Text">
            <summary>
            Text class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.MText">
            <summary>
            MText (multiline text) class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Tolerance">
            <summary>
            Tolerance class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Viewport">
            <summary>
            View port class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.BlockReference">
            <summary>
            Block reference class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.MInsertBlock">
            <summary>
            After R12 AcDbBlockReference was replaced with AcDbMInsertBlock.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.XLine">
            <summary>
            XLine.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AcClasses.Ole">
            <summary>
            Ole.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfEllipse">
            <summary>
            Ellipse entity.
            </summary>
            <remarks>
            <para>
            The <see cref="P:WW.Cad.Model.Entities.DxfEllipse.Center"/>, <see cref="P:WW.Cad.Model.Entities.DxfEllipse.MajorAxisEndPoint"/> and <see cref="P:WW.Cad.Model.Entities.DxfEllipse.MinorToMajorRatio"/>
            define the ellipse curve.
            <see cref="P:WW.Cad.Model.Entities.DxfEllipse.StartParameter"/> and <see cref="P:WW.Cad.Model.Entities.DxfEllipse.EndParameter"/> define where the curve starts and ends.
            </para>
            <para>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </para>
            </remarks>
            <example>
            Example of how to create an ellipse.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class EllipseExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            // Simple ellipse in XY plane.
            DxfEllipse ellipse1 = new DxfEllipse(
                new Point3D(6d, 2d, 3d), // Center
                new Vector3D(2d, 1d, 1d), // Long axis
                0.5d // Minor to major axis ratio
            );
            ellipse1.Color = EntityColors.Red;
            model.Entities.Add(ellipse1);
    
            // DxfEllipse with non default z-axis.
            Vector3D longAxis = new Vector3D(2d, 1d, 1d);
            Vector3D longAxisNormalized = longAxis;
            longAxisNormalized.Normalize();
            Vector3D ellipseZAxis = Vector3D.CrossProduct(Vector3D.ZAxis, longAxisNormalized);
            DxfEllipse ellipse2 = new DxfEllipse(
                new Point3D(4d, 2d, 3d),
                longAxis,
                0.5d,
                ellipseZAxis);
            ellipse2.Color = EntityColors.LightGreen;
            model.Entities.Add(ellipse2);
    
            DxfWriter.Write("Ellipse Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.#ctor(WW.Math.Point3D,WW.Math.Vector3D,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.#ctor(WW.Math.Point3D,WW.Math.Vector3D,System.Double,WW.Math.Vector3D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.#ctor(WW.Math.Point3D,WW.Math.Vector3D,System.Double,WW.Math.Vector3D,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.AngleToParameter(System.Double,System.Double)">
            <summary>
            Calculates the parameter from an angle.
            A point on the ellipse is defined as: Center + MajorAxisEndPoint * cos(parameter) + MinorAxisEndPoint * sin(parameter).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.ParameterToAngle(System.Double,System.Double)"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.ParameterToAngle(System.Double,System.Double)">
            <summary>
            Calculates the angle from a parameter.
            A point on the ellipse is defined as: Center + MajorAxisEndPoint * cos(parameter) + MinorAxisEndPoint * sin(parameter).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.AngleToParameter(System.Double,System.Double)"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.GetPoint(System.Double)">
            <summary>
            Gets the point for specified parameter (normally 0 - 2 π, but values outside this range are allowed as well).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate ellipse as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate ellipse as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw.
            </summary>
            <remarks>
            Approximate ellipse as line segments.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified ellipse in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.SetMinorToMajorRatioUnchecked(System.Double)">
            <summary>
            Some files have a value slightly greater than 1 (floating point inaccuracy), see file
            E:\wout\doc\Cad\DWGSamples\Customers\MST\EllipseWithInvalidMinorToMajorRatio.dwg.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfEllipse.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.Center">
            <summary>
            Gets or sets the ellipse center in WCS.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.MajorAxisEndPoint">
            <summary>
            Gets or sets major axis end point (relative to <see cref="P:WW.Cad.Model.Entities.DxfEllipse.Center"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.MinorToMajorRatio">
            <summary>
            Gets or sets the minor to major axis ratio (default value is 1).
            </summary>
            <remarks>
            Value should not be larger than 1.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when value is set to bigger than 1.</exception>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.StartParameter">
            <summary>
            Gets or sets the start parameter (this value is 0.0 for a full ellipse).
            The start point is defined as: Center + MajorAxisEndPoint * cos(StartParameter) + MinorAxisEndPoint * sin(StartParameter).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.AngleToParameter(System.Double,System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.ParameterToAngle(System.Double,System.Double)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.EndParameter">
            <summary>
            Gets or sets the end parameter (this value is 2 pi for a full ellipse).
            The end point is defined as: Center + MajorAxisEndPoint * cos(EndParameter) + MinorAxisEndPoint * sin(EndParameter).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.AngleToParameter(System.Double,System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEllipse.ParameterToAngle(System.Double,System.Double)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.ZAxis">
            <summary>
            Gets or sets the z-axis defining the ellipse plane (but not the coordinate system).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfEllipse.Transform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.PlotStyleType">
            <summary>
            Plot style type for new objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PlotStyleType.ByLayer">
            <summary>
            By layer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PlotStyleType.ByBlock">
            <summary>
            By block.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PlotStyleType.ByDictionaryDefault">
            <summary>
            By dictionary default.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PlotStyleType.ByObjectId">
            <summary>
            By object id.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.LineWeight">
            <summary>
            Special line weight values 
            (see <see cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/> and <see cref="P:WW.Cad.Model.Tables.DxfLayer.LineWeight"/>).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LineWeight.Standard">
            <summary>
            Standard line weight.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LineWeight.ByBlock">
            <summary>
            By block line weight.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LineWeight.ByLayer">
            <summary>
            By layer line weight (see <see cref="P:WW.Cad.Model.Tables.DxfLayer.LineWeight"/>).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.UnsupportedObject">
            <summary>
            Represents an unsupported object that was encountered while
            reading a DXF or DWG file.
            </summary>
            <seealso cref="P:WW.Cad.Model.DxfModel.UnsupportedObjects"/>
        </member>
        <member name="M:WW.Cad.Model.UnsupportedObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.UnsupportedObject"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.UnsupportedObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.UnsupportedObject"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.UnsupportedObject.#ctor(WW.Cad.Model.UnsupportedObject)">
            <summary>
            Copy constructor.
            </summary>
            <param name="obj">object to copy</param>
        </member>
        <member name="M:WW.Cad.Model.UnsupportedObject.CompareTo(System.Object)">
            <summary>
            Compare by name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.UnsupportedObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.UnsupportedObject.Name">
            <summary>
            Gets or sets the unsupported object type name.
            This might be empty in case of DWG.
            </summary>
            <remarks>
            In case of DWG <see cref="P:WW.Cad.Model.UnsupportedObject.DwgObjectType"/> is always filled, and if the object type is known, then
            the name property is filled too.
            </remarks>
            <seealso cref="P:WW.Cad.Model.UnsupportedObject.DwgObjectType"/>
        </member>
        <member name="P:WW.Cad.Model.UnsupportedObject.DwgObjectType">
            <summary>
            Gets or sets the DWG object type.
            </summary>
            <remarks>
            The DWG object type only pertains to DWG, not to DXF.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.UnsupportedObject.Count">
            <summary>
            Gets or sets the number of unsupported entities.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Transparency">
            <summary>
            Represents transparency.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Transparency.ByLayer">
            <summary>
            Represents the by layer transparency.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Transparency.ByBlock">
            <summary>
            Represents the by block transparency.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Transparency.Transparent">
            <summary>
            Represents full transparency.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Transparency.Opaque">
            <summary>
            Represents total opaqueness (fully non-transparent).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Transparency.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Transparency.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Transparency.Create(System.Byte)">
            <summary>
            Creates a new transparancy instance with the specified alpha (0 = transparent, 255 = opaque).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Transparency.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Transparency.op_Equality(WW.Cad.Model.Transparency,WW.Cad.Model.Transparency)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Transparency.op_Inequality(WW.Cad.Model.Transparency,WW.Cad.Model.Transparency)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Transparency.Equals(WW.Cad.Model.Transparency)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Transparency.TransparencyType">
            <summary>
            Gets the transparency type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Transparency.Alpha">
            <summary>
            Gets the alpha value (0 = transparent, 255 = opaque).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Point2D2WN">
            <summary>
            Represents a 2D point with start/end widths/normals 
            helper class to that is using to approximate 2D (wide) polylines by
            line segments.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.#ctor(WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.#ctor(WW.Math.Point2D,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.#ctor(WW.Math.Point2D,System.Double,System.Double,WW.Math.Vector2D,WW.Math.Vector2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.GetPoint(WW.Cad.Drawing.Point2D2WN,System.Double)">
            <summary>
            Gets the point between this point and the nextVertex at the given fraction (0-1).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.GetEndPoint(WW.Cad.Drawing.Point2D2WN,System.Double)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.IExtendedPoint2D`1.GetEndPoint(`0,System.Double)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.SetEndProperties(WW.Cad.Drawing.Point2D2WN,System.Double)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.IExtendedPoint2D`1.SetEndProperties(`0,System.Double)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2WN.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2WN.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2WN.IsInterpolatedPoint">
            <summary>
            See <see cref="!:IExtendedPoint2D&lt;T&gt;.IsInterpolatedPoint"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2WN.StartWidth">
            <summary>
            Gets or sets the start width.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2WN.EndWidth">
            <summary>
            Gets or sets the end width.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2WN.StartNormal">
            <summary>
            Gets or sets the start normal.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2WN.EndNormal">
            <summary>
            Gets or sets the end normal.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.IVertex2D">
            <summary>
            2D vertex interface.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.IVertex2D.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.IVertex2D.Bulge">
            <summary>
            Gets or sets the bulge (optional; default is 0) for curve segment. 
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the
            included angle for an arc segment, made negative if the arc goes
            clockwise from the start point to the endpoint. A bulge of 0 indicates a
            straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.IVertex2D.StartWidth">
            <summary>
            Gets or sets the start width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.IVertex2D.EndWidth">
            <summary>
            Gets or sets the end width.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfVertex3DCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3DCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfVertex3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3DCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3DCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Math.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3DCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.#ctor(System.Collections.Generic.IList{WW.Math.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3DCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.#ctor(WW.Math.Point3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3DCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.Add(WW.Math.Point3D)">
            <summary>
            Adds the specified vertex.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a vertex with specified coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.AddRange(System.Collections.Generic.IEnumerable{WW.Math.Point3D})">
            <summary>
            Adds the specified vertices.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3DCollection.AddRange(WW.Math.Point3D[])">
            <summary>
            Adds the specified vertices.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.TableCellStyleType">
            <summary>
            Represents the <see cref="T:WW.Cad.Model.Objects.DxfTableCellStyle"/> type.
            For internal use only.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStyleType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStyleType.Cell">
            <summary>
            Cell.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStyleType.Row">
            <summary>
            Row.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStyleType.Column">
            <summary>
            Column.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStyleType.FormattedTableData">
            <summary>
            Formatted table data.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStyleType.Table">
            <summary>
            Table.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCell">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Entities.DxfTable">table</see> cell.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell.ScaleMe(System.Double,WW.Actions.CommandGroup)">
            <summary>
            Scales this cell.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Entities.DxfTableCell)">
            <summary>
            Copies the contents from specified cell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.StateFlags">
            <summary>
            Gets or sets the state flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.CustomDataCollection">
            <summary>
            Gets the custom data collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.CustomData">
            <summary>
            Gets or sets a custom data Int32.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.LinkedData">
            <summary>
            Gets or sets the linked data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.Contents">
            <summary>
            Gets the contents.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.CellStyleOverrides">
            <summary>
            Gets the cell style containing cell style overrides.
            </summary>
            <remarks>
            Using this property, cell style properties can be overridden to change from
            the cell style in the table style pointed to by <see cref="P:WW.Cad.Model.Entities.DxfTableCell.CellStyle"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.CellStyle">
            <summary>
            Gets or sets the cell style, must be a cell style instance from
            the table's <see cref="P:WW.Cad.Model.Entities.DxfTable.TableStyle">table style</see>.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell.HasLinkDataFlags">
            <summary>
            Gets or sets linked data flags.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCustomData">
            <summary>
            Represents custom data for a <see cref="T:WW.Cad.Model.Entities.DxfTableCell">table cell</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCustomData.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object using the specified clone context.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCustomData.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCustomData.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Colors">
            <summary>
            Represents a collection of well known indexed colors (ACI).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.ByLayer">
            <summary>
            By layer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.ByBlock">
            <summary>
            By block.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Default">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Yellow">
            <summary>
            Yellow.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Green">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Cyan">
            <summary>
            Cyan.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Purple">
            <summary>
            Purple.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.DarkGray">
            <summary>
            Dark gray.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Gray">
            <summary>
            Gray.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.LightGray">
            <summary>
            Light gray.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Orange">
            <summary>
            Orange.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.DarkOrange">
            <summary>
            Dark orange.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.DarkRed">
            <summary>
            Dark red.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.LightBlue">
            <summary>
            Light blue.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.DarkBlue">
            <summary>
            Dark blue.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Pink">
            <summary>
            Pink.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Brown">
            <summary>
            Brown.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Maroon">
            <summary>
            Maroon.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Violet">
            <summary>
            Violet.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.GreenYellow">
            <summary>
            Green yellow.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Indigo">
            <summary>
            Indigo.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.LightGreen">
            <summary>
            Light green.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.DarkGreen">
            <summary>
            Dark green.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Colors.Magenta">
            <summary>
            Magenta: #FF00FF (color index 6).
            </summary>
        </member>
        <member name="M:WW.Cad.JulianDate.TimeSpanFromJulianDateTime(System.Double)">
            <summary>
            Converts specified Julian timespan double representing a number of days to a time span.
            </summary>
            <remarks>
            The value is capped to be within the <see cref="F:System.TimeSpan.MinValue"/> and <see cref="F:System.TimeSpan.MaxValue"/>.
            </remarks>
            <param name="julianDateTime">Represents the number of days.</param>
        </member>
        <member name="M:WW.Cad.JulianDate.DxfTimeSpanFromJulianDateTime(System.Double)">
            <summary>
            Converts specified Julian timespan double representing a number of days to a time span.
            </summary>
            <param name="julianDateTime">Represents the number of days.</param>
        </member>
        <member name="T:WW.Cad.Model.Entities.Silhouette">
            <summary>
            Represents a silhouette (used by <see cref="T:WW.Cad.Model.Entities.DxfModelerGeometry"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Silhouette.ViewportId">
            <summary>
            Gets or sets the viewport ID.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Silhouette.ViewportTarget">
            <summary>
            Gets or sets the viewport target.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Silhouette.ViewportDirectionFromTarget">
            <summary>
            Gets or sets the viewport direction from target.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Silhouette.ViewportUpDirection">
            <summary>
            Gets or sets the viewport up direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Silhouette.ViewportPerspectiveMode">
            <summary>
            Gets or sets a value indicating whether the viewport shows a perspective view.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Silhouette.Wires">
            <summary>
            Gets the wires.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.Ttf2WwfConverter">
            <summary>
            Helper class for converting system fonts to WW fonts.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CreateWWF(System.String,System.Char,System.Char)">
            <summary>
            Create a WW font from a system font filename.
            </summary>
            <param name="fontFileName">System font file name.</param>
            <param name="startCharacter">First character to convert.</param>
            <param name="endCharacter">Last character to convert.</param>
            <returns>WW font</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CreateWWF(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Create a WW font from a system font filename.
            </summary>
            <param name="fontFileName">System font file name.</param>
            <param name="characters">Character set to include in font file.</param>
            <returns>WW font</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CreateWWF(System.String,System.Char)">
            <summary>
            Create a WW font from a system font filename.
            </summary>
            <param name="fontFileName">System font file name.</param>
            <param name="endCharacter">Last character to convert.</param>
            <returns>WW font</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CreateWWF(System.String)">
            <summary>
            Create a WW font from a system font filename.
            </summary>
            <param name="fontFileName">System font file name.</param>
            <returns>WW font</returns>
        </member>
        <member name="T:WW.Cad.Model.Text.Ttf2WwfConverter.CharRange">
            <summary>
            Helper class: on the fly char range.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CharRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CharRange.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CharRange.IntRangeEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CharRange.IntRangeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:WW.Cad.Model.Text.Ttf2WwfConverter.CharRange.IntRangeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:WW.Cad.Model.Text.Ttf2WwfConverter.CharRange.IntRangeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:WW.Cad.Model.Text.Ttf2WwfConverter.CharRange.IntRangeEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph">
            <summary>
            Root class for the graph.
            </summary>
            <remarks>
            Containes two collections - graph nodes and graph edges.
            Seems that Dynamic block structure is duplicated. The first is eval graph nodes and edges.
            The second topology is Parameter\Grips\Actions.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.LastNodeId">
            <summary>
            Get/set the last graph node id.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.Nodes">
            <summary>
            Get/set node array.
            </summary>
            <remarks>
            The array must not include the null elements.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.Edges">
            <summary>
            Get/set edge array.
            </summary>
            <remarks>
            The array must not include the null elements.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId">
            <summary>
            The node ID type.
            </summary>
            <remarks>
            Used in evaluation graph nodes as identificator.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId.#ctor">
            <summary>
            Constructor with default initialization.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId.#ctor(System.Int32)">
            <summary>
            Constructor with initialization via id code.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId.CopyFrom(WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId)">
            <summary>
            Copies all fields from specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId.Clone(WW.Cad.Model.CloneContext,WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId[])">
            <summary>
            Clones the input NodeId array.
            </summary>
            <remarks>
            Return null, if input is null.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNodeId.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode">
            <summary>
            Represents the node of graph.
            </summary>
            <remarks>
            Graph node containes node ID and link to DxfObject.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.#ctor">
            <summary>
            Constructor with default initialization.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.#ctor(System.Int32,WW.Cad.Model.Objects.DxfObject,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor with initialization via parameters.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode)">
            <summary>
            Copies the fields from the specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.Id">
            <summary>
            This node ID.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.Expression">
            <summary>
            handle Id of linked with node expression.
            </summary>
            <remarks>
            Node is owner of the expression.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.FirstIncomingEdge">
            <summary>
            Id of the first incomming edge to this node.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.LastIncomingEdge">
            <summary>
            Id of the last incomming edge to this node.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.FirstOutgoingEdge">
            <summary>
            Id of the first outgoing edge from this node.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphNode.LastOutgoingEdge">
            <summary>
            Id of the last outgoing edge from this node.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.EdgeFlags">
            <summary>
            Enum with possible edge flag values.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge">
            <summary>
            Represents the edge of graph.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.#ctor">
            <summary>
            Constructor with default initialization.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor with initialization via parameters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.StartNode">
            <summary>
            Edge start node ID.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.EndNode">
            <summary>
            Edge end node ID.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.Flags">
            <summary>
            Edge flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.ReferenceCount">
            <summary>
            Count of links to this edge.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.PreviousIncoming">
            <summary>
            Previous incoming edge in the graph.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.NextIncoming">
            <summary>
            Next incoming edge in the graph.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.PreviousOutgoing">
            <summary>
            Previous outgoing edge in the graph.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.NextOutgoing">
            <summary>
            Next outgoing edge in the graph.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.ReverseEdgeIndex">
            <summary>
            ID of the edge with reversed to this edge direction.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfEvalGraph.GraphEdge.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityGrip">
            <summary>
            Represents the dynamic block visibility grip.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityGrip.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockVisibilityGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearGrip">
            <summary>
            Represents the dynamic block linear grip.
            </summary>
            <remarks>
            Linear parameter linked with two linear grips.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearGrip.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearGrip.Distance">
            <summary>
            Gets or sets the distance vector.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfFieldList">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Objects.DxfField">field</see> list.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfField"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfFieldList.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfFieldList.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfFieldList.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfFieldList.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfFieldList.GetClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the class (creates one if not present).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFieldList.Fields">
            <summary>
            Gets the fields.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFieldList.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFieldList.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfField">
            <summary>
            Represents a field object with a key and value. A field contains a key value dictionary
            as well as child fields and objects.
            </summary>
            <remarks>
            <para>
            The current implementation provides only support for reading and writing fields.
            At the moment there is no support for evaluation, neither automatic nor explicit.
            So if a field object is created from scratch, the creator has to take care that 
            the properties of the field are in a valid state to be written to file.
            </para>
            <para>
            A new field must be added to the <see cref="P:WW.Cad.Model.DxfModel.FieldList"/>.
            </para>
            <para>
            This object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.DxfModel.FieldList"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfFieldList"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfField"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfField.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfField.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfField.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfField.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone of the same source object a new CloneContext instance has to be used.
            For cloning multiple objects once only one CloneContext is needed (as demonstrated in the example below).
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
            <returns>The cloned object.</returns>
            <example>
            Below an example is shown of how to clone entities from one <see cref="T:WW.Cad.Model.DxfModel"/> to another.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    // This class demonstrates how to clone entities from a source DxfModel to a target DxfModel.
    public class CloneContextExample {
        public static void DemonstrateEntityCloning() {
            DxfModel sourceModel = new DxfModel();
            DxfLineType lineType = new DxfLineType("DASH_DOT", 1d, -0.2d, 0d, -0.2d);
            sourceModel.LineTypes.Add(lineType);

            DxfCircle circle = new DxfCircle(Point2D.Zero, 5d);
            circle.LineType = lineType;
            sourceModel.Entities.Add(circle);

            DxfLine line = new DxfLine(Point2D.Zero, new Point2D(5d, 0d));
            line.LineType = lineType;
            sourceModel.Entities.Add(line);

            DxfModel targetModel = new DxfModel();

            // The ReferenceResolutionType.CloneMissing will result in the DASH_DOT line type created
            // above to also be cloned indirectly as a result of cloning the entities.
            CloneContext cloneContext = new CloneContext(sourceModel, targetModel, ReferenceResolutionType.CloneMissing);

            foreach(DxfEntity entity in sourceModel.Entities) {
                DxfEntity clonedEntity = (DxfEntity)entity.Clone(cloneContext);
                targetModel.Entities.Add(clonedEntity);
            }

            cloneContext.ResolveReferences();

            DxfWriter.Write("clone_source.dxf", sourceModel);
            DxfWriter.Write("clone_target.dxf", targetModel);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfField.GetClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the class (creates one if not present).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.EvaluatorId">
            <summary>
            Get/set the id of the valuator of this field.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.FieldCode">
            <summary>
            Get/set the field code.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.ChildFields">
            <summary>
            Get the modifiable list of child fields.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.FieldObjects">
            <summary>
            Get the modifiable list of field objects.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.FormatString">
            <summary>
            Get/set the format string.
            Only available until <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, after that
            use <see cref="P:WW.Cad.Model.DxfValue.Format"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.EvalutationOptionFlags">
            <summary>
            Get/set the evaluation option flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.FilingOptionFlags">
            <summary>
            Get/set the filing option flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.FieldStateFlags">
            <summary>
            Get/set the field state flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.EvaluationStatusFlags">
            <summary>
            Get/set the evaluation status flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.EvaluationErrorCode">
            <summary>
            Gets or sets the evaluation error code.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.EvaluationErrorMessage">
            <summary>
            Get/set the evaluation error message.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.Key">
            <summary>
            Get/set the field key.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.Value">
            <summary>
            Gets the field value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.ValueString">
            <summary>
            Gets or sets the string representation of <see cref="P:WW.Cad.Model.Objects.DxfField.Value"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfField.Values">
            <summary>
            Gets the key/value dictionary.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.FieldEvaluationOptionFlags">
            <summary>
            The evaluation option describes when a field is evaluated.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldEvaluationOptionFlags.Never">
            <summary>
            The field is never evaluated.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldEvaluationOptionFlags.OnOpen">
            <summary>
            The field is evaluated when a model is opened.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldEvaluationOptionFlags.OnSave">
            <summary> 
            The field is evaluated when a model is saved.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldEvaluationOptionFlags.OnPlot">
            <summary>
            The field is evaluated when a model is plotted.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldEvaluationOptionFlags.OnETransmit">
            <summary>
            The field is evaluated when a model is packaged for eTransmit.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldEvaluationOptionFlags.OnRegen">
            <summary>
            The field is evaluated when the model is regenerated.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldEvaluationOptionFlags.OnDemand">
            <summary>
            The field is evaluated on demand.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldStateFlags.Unknown">
            <summary>
            The field state is unknown.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldStateFlags.Initialized">
            <summary>
            The field was initialized.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldStateFlags.Compiled">
            <summary>
            The field was compiled.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldStateFlags.Modified">
            <summary>
            The field was modified.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldStateFlags.Evaluated">
            <summary>
            The field was evaluated.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FieldStateFlags.Cached">
            <summary>
            The field was cached.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.EvaluationStatusFlags">
            <summary>
            Evaluation result flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.EvaluationStatusFlags.NotEvaluated">
            <summary>
            No evaluation done.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.EvaluationStatusFlags.Success">
            <summary>
            Evaluation was successful.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.EvaluationStatusFlags.EvaluatorNotFound">
            <summary>
            Evaluator not found.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.EvaluationStatusFlags.SyntaxError">
            <summary>
            Syntax error.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.EvaluationStatusFlags.InvalidCode">
            <summary>
            Invaild code.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.EvaluationStatusFlags.InvalidContext">
            <summary>
            Invalid context.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.EvaluationStatusFlags.OtherError">
            <summary>
            Other error.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FilingOptionFlags.None">
            <summary>
            No special option.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.FilingOptionFlags.SkipFilingResult">
            <summary>
            Don't file field result.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfScaleCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.Annotations.DxfScale"/> keyed collection (the scale name can be used as indexer parameter).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScaleCollection.TryGetValue(System.String,WW.Cad.Model.Objects.Annotations.DxfScale@)">
            <summary>
            Tries to the get the scale with specified name (if the name is not empty).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfScaleCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a scale with the specified name (if the name is not empty).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfScaleCollection.Item(System.String)">
            <summary>
            Gets the first scale with the specified name (if the name is not empty).
            Returns <c>null</c> if not found.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatIntcurve">
            <summary>
            SAT intcurve entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatIntcurve.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatIntcurve.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatIntcurve.CreateCurvePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of curve primitive.
            </summary>
            <returns>newly created and initialized curve primitive</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatIntcurve.ReadCurveData(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the curve data.
            </summary>
            <param name="reader">reader to read from</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatIntcurve.CurvePrimitive">
            <summary>
            Get the curve primitive.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatIntcurve.IsReversed">
            <summary>
            Is this curve reversed?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhBackgroundEntity">
            <summary>
            SAT Rh background entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhBackgroundEntity.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhBackgroundEntity.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhBackgroundEntity.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhBackgroundEntity.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineType">
            <summary>
            B-spline curve or surface type
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineType.BSplineTypeEnumValues">
            <summary> B-spline curve or surface type strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineType.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineType.WriteDataTo(WW.Cad.Model.Acis.ISatWriter,WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineType.BSplineTypeEnum)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineType.BSplineTypeEnum">
            <summary>
            B-spline curve or surface type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFunctional">
            <summary>
            This class defines a variable radius function that is specified by a given
            function, which is represented by a spline2dCurve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFunctional.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFunctional.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFunctional.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.VarRadius.SatFunctional.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVertexBlendSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVertexBlendSplineSurfacePrimitive.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVertexBlendSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVertexBlendSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVertexBlendSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSkinSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSkinSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSkinSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSkinSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSkinSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatSurfaceLawData">
            <summary>
            SAT class for Surface Law data.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawData">
            <summary>
            SAT base class for Law data.
            <remarks>
            Represents law mathematic functions. Used in SatLawDefinition
            </remarks>
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawData.NameToLawDataCreator">
            <summary>
            Dictionary for Law data objects creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawData.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawData.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawData.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawData.LawDataCreator">
            <summary>
            Law data creator delegate.
            </summary>
            <returns>created Law data object</returns>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatSurfaceLawData.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatSurfaceLawData.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatSurfaceLawData.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatSurfaceLawData.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealSurfaceGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealSurfaceGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealSurfaceGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealSurfaceGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.AcisEntityCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Acis.AcisEntity"/> collection.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.StreamWithCrc16">
            <summary>
            Represents a stream that calculates a 16-bit CRC as bytes are written to it.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.StreamWithCrc16.GetCrc(System.UInt16,System.Byte[],System.Int64)">
            <summary>
            16-bit CRC calculation (ODA names this crc8 for some reason).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.StreamWithCrc16.GetCrc(System.UInt16,System.Byte[],System.Int64,System.Int64)">
            <summary>
            16-bit CRC calculation.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR15.#ctor(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DwgWriter"/> class.
            </summary>
            <param name="stream">
            The stream to which the DWG file is written.
            The stream must support writing and seeking.
            </param>
            <param name="model">The model to write.</param>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR15.Write(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Writes the specified model to the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR15.Write">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.DwgSecondHeaderWriter">
            <summary>
            The second header only contains redundant information.
            The information is also present in the (first) header.
            </summary>
            <remarks>
            This is used only versions R13-R15.
            </remarks>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.Crc64">
            <summary>
            Represents a class to compute a 64-bit CRC (thread-safe).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.Crc64.UpdateSeed2(System.UInt64,System.UInt32)">
            <summary>
            Use for file header.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.Crc64._Normal">
            <summary>
            Represents a normal 64-bit CRC.
            </summary>
            <remarks>
            See also <see href="http://www.ecma.ch/ecma1/STAND/ECMA-182.HTM"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.Crc64._Mirrored">
            <summary>
            Represents a reflected 64-bit CRC.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfApplicationDataBuilder">
            <summary>
            Builder for application data (extended entity/object data).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Polyline2D2WN">
            <summary>
            Represents a wide 2D polyline primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline2D2WN.#ctor(WW.Cad.Drawing.Polyline2D2WN,System.Boolean,WW.Math.Matrix4D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline2D2WN.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline2D2WN.Wrappee">
            <summary>
            Gets or sets the wrappee.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline2D2WN.Fill">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Drawing.Surface.Polyline2D2WN"/> is filled.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline2D2WN.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.RenderedEntityInfo">
            <summary>
            Represents a class containing information about a rendered <see cref="T:WW.Cad.Model.Entities.DxfEntity">entity</see>.
            </summary>
            <remarks>
            <para>
            A rendered entity info object contains information about an entity, together
            with the transformation matrix that was used to render the entity.
            This transformation can be used to transform back from the rendered
            coordinate system back to the entity's coordinate system (by using <see cref="M:WW.Math.Matrix4D.GetInverse"/>).
            This is useful when manipulating an entity with the mouse.
            </para>
            <para>
            A rendered entity may or may not have a <see cref="P:WW.Cad.Drawing.RenderedEntityInfo.Parent"/>. 
            If it has a parent, it may have its own associated transformation matrix. 
            Typically a chain is formed by inserts and a block's child entities, which
            may recurse a number of levels.
            </para>
            <para>
            Custom filters may need to create their own <see cref="T:WW.Cad.Drawing.RenderedEntityInfo"/> instances using method
            <see cref="M:WW.Cad.Drawing.EntitySelector.GetRenderedEntityInfo(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Drawing.EntitySelector"/>
        </member>
        <member name="M:WW.Cad.Drawing.RenderedEntityInfo.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.RenderedEntityInfo"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.RenderedEntityInfo.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D,WW.Cad.Drawing.RenderedEntityInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.RenderedEntityInfo"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.RenderedEntityInfo.GetRoot">
            <summary>
            Gets the root entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.RenderedEntityInfo.GetParents">
            <summary>
            Gets all parents in a collection, the root entity being the first.
            The result does not include this entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.RenderedEntityInfo.ThisOrParentsContainEntity(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Returns whether this instance's or one its parents' <seealso cref="P:WW.Cad.Drawing.RenderedEntityInfo.Entity"/> is equal to the specified entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.RenderedEntityInfo.MatchesEntityChain(WW.Cad.Drawing.RenderedEntityInfo)">
            <summary>
            Returns if this rendered entity info chain matches the specified chain.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.RenderedEntityInfo.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.RenderedEntityInfo.Transform">
            <summary>
            Gets the transform that was used to transform from the entity's
            coordinate system to the rendered coordinate system.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.RenderedEntityInfo.Parent">
            <summary>
            Gets the parent. Is <c>null</c> if the entity had no parent.
            </summary>
            <remarks>
            If it has a parent, the parent typically represents an <see cref="T:WW.Cad.Model.Entities.DxfInsert">insert</see>
            or a <see cref="T:WW.Cad.Model.Entities.DxfDimension">dimension</see>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ToGraphicsPathConverter">
            <summary>
            Draw a <see cref="T:WW.Cad.Model.DxfModel"/> or <see cref="T:WW.Cad.Model.Entities.DxfEntity"/>
            onto a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <remarks>
            <para>
            Note that a graphics path has no color nor does it has a property
            indicating whether it should be filled.
            </para>
            <para>
            To draw a <see cref="T:WW.Cad.Model.DxfModel"/> or e.g. a <see cref="T:WW.Cad.Model.Entities.DxfCircle"/> 
            onto a <c>GraphicsPath</c> the following must be done:
            <list type="bullet">
            <item>
            <description>
            Create a <see cref="T:WW.Cad.Drawing.DrawContext.Wireframe.ModelSpace"/> object and call
            <see cref="M:WW.Cad.Model.DxfModel.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)"/>, 
            <see cref="M:WW.Cad.Model.Objects.DxfLayout.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)"/>, or
            <see cref="M:WW.Cad.Model.Entities.DxfEntity.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)"/> passing
            the draw context and this converter object.
            </description>
            </item>
            <item>
            <description>
            Draw a <see cref="T:WW.Cad.Model.DxfModel"/> using method <see cref="M:WW.Cad.Model.DxfModel.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)"/>,
            a <see cref="T:WW.Cad.Model.Objects.DxfLayout"/> using method <see cref="M:WW.Cad.Model.Objects.DxfLayout.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)"/> or
            an <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> using method <see cref="M:WW.Cad.Model.Entities.DxfEntity.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)"/>.
            Pass the <see cref="T:WW.Cad.Drawing.DrawContext"/> object as a parameter.
            The model/entity will draw itself on the graphics factory.
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Constructor.
            </summary>
            <param name="graphicsPath">The graphics path to draw on to.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Begin graphics creation for specified entity.
            End creation with <see cref="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.EndEntity"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.EndEntity">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Begin graphics creation for specified insert.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.EndInsert">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.BeginInsert(WW.Cad.Model.Entities.DxfInsert)"/>
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreateDot(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D)">
            <summary>
            Create a colored dot.
            </summary>
            <param name="entity">The entity creating the dot.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the dot is created for text.</param>
            <param name="position">the position</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreateLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Create a colored line segment.
            </summary>
            <param name="entity">The entity creating the line segment.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the line segment is created for text.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreateRay(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored ray (infinite line in one direction).
            </summary>
            <param name="entity">The entity creating the ray.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="segment">The line segment, first point must be the starting point,
            the second point goes towards infinity.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreateXLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored DxfXLine (infinite line in both direction).
            </summary>
            <param name="entity">The entity creating the xline.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="startPoint">Starting point (for bounding box calculation).</param>
            <param name="segment">The line segment, both points approach infinity.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of dots, lines and polylines.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreatePathAsOne(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of lines and polylines.
            Similar to <see cref="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)"/> but in GDI graphics
            this matches drawing using <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
            <remarks>
            This is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the shape is created for text.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreateText(WW.Cad.Model.Entities.DxfText,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreateMText(WW.Cad.Model.Entities.DxfMText,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.DotSize">
            <summary>
            Gets or sets the dot size (0.001 by default).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.ToGraphicsPathConverter.SupportsText">
            <summary>
            Gets a value indicating whether the object supports text.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.EntityDrawable">
            <summary>
            A container for entity drawables.
            In an editor scenario each entity has a geometry, which may be empty (entity is invisible) or not empty (entity is visible).
            By having this geometry node in the linked list of all entity drawables, the drawing order
            is preserved when e.g. toggling entity visibility.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.EntityDrawable.Drawables">
            <summary>
            Gets or sets the drawables.
            This may be <c>null</c> to save some memory on entities that are not visible.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.ViewMode">
            <summary>
            DxfView mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewMode.PerspectiveMode">
            <summary>
            Enables perspective mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewMode.ClipFront">
            <summary>
            Enables front clipping.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewMode.ClipBack">
            <summary>
            Enables back clipping.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewMode.FollowUCS">
            <summary>
            Enables UCS follow.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ViewMode.ClipFrontNotAtEye">
            <summary>
            Enables front clip not at eye.
            </summary>
            <remarks>
            If set the front clipping distance is used, otherwise 
            it is ignored and all items behind the view position are clipped.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfViewport">
            <summary>
            The viewport entity specifies a view in paper space on model space.
            </summary>
            <remarks>
            <para>
            A viewport is part of a <see cref="T:WW.Cad.Model.Objects.DxfLayout"/>.
            The transformation from model space to paper space as specified by the viewport
            is only applied to entities in model space (see <see cref="M:WW.Cad.Model.Entities.DxfEntity.InPaperSpace(WW.Cad.Model.Entities.DxfEntity)"/>).
            Model space entities are part of the model space <see cref="T:WW.Cad.Model.Objects.DxfLayout">layout</see>, paper
            space entities are part of one of the paper space layouts. 
            There may be be zero or more paper space layouts, there is only one model space layout 
            (<see cref="P:WW.Cad.Model.DxfModel.ModelLayout"/>). Whether a layout is a model space or paper space layout is defined by
            property <see cref="P:WW.Cad.Model.Objects.DxfLayout.PaperSpace"/>.
            </para>
            <para>
            A viewport is by default in paper space.
            </para>
            <para>
            The viewport with <see cref="P:WW.Cad.Model.Entities.DxfViewport.Id"/> 1 represents paper space
            itself and does not show the model.
            </para>
            <para>
            The <see cref="P:WW.Cad.Model.Entities.DxfViewport.Target"/> defines the position at which the camera is looking in model space.
            The <see cref="P:WW.Cad.Model.Entities.DxfViewport.Direction"/> specifies the direction in which the camera is looking.
            The <see cref="P:WW.Cad.Model.Entities.DxfViewport.ViewHeight"/> defines the view height in model space.
            The <see cref="P:WW.Cad.Model.Entities.DxfViewport.ViewCenter"/> defines the view center in the display coordinate system 
            (the model is transformed to the display coordinate system according to <see cref="P:WW.Cad.Model.Entities.DxfViewport.Target"/> and <see cref="P:WW.Cad.Model.Entities.DxfViewport.Direction"/> and
            optionally the perspective transform).
            The <see cref="P:WW.Cad.Model.Entities.DxfViewport.Center"/> specifies where the viewport is placed in paper space.
            Finally the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Size"/> defines the viewport size in paper space.
            </para>
            </remarks>
            <example>
            Below is an example of how to create and write a drawing containing a scene in model space and 
            layouts with viewports showing the scene in paper space.
            <code lang="cs">
using System;
using System.Collections.Generic;

using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Cad.Model.Tables;
using WW.Cad.IO;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class LayoutExample {
        public static void DemonstrateLayouts() {
            DxfModel model = new DxfModel(DxfVersion.Dxf15);

            model.Entities.Add(new DxfCircle(EntityColors.Red, new Point3D(0d, 0d, 0d), 2d));
            model.Entities.Add(new DxfLine(EntityColors.GreenYellow, new Point3D(-3d, 4d, 0d), new Point3D(5d, 3d, 0d)));
            model.Entities.Add(new DxfLine(EntityColors.Yellow, new Point3D(-4d, 0d, 0d), new Point3D(5d, 5d, 0d)));

            DxfLayer frozenLayer = new DxfLayer("Frozen");
            model.Layers.Add(frozenLayer);

            DxfLayout layout1 = model.Layouts["layout1"];
            layout1.Name = "Layout number 1";
            layout1.Entities.Add(new DxfText("Text on layout 1", new Point3D(2d, 0d, 0d), 1d));
            layout1.UnprintableMarginLeft = 5d;
            layout1.UnprintableMarginRight = 10d;
            layout1.UnprintableMarginTop = 5d;
            layout1.UnprintableMarginBottom = 5d;
            layout1.PlotPaperSize = new Size2D(100d, 100d);
            layout1.TabOrder = 1;

            {
                // This viewport is mandatory, it describes paper space itself.
                DxfViewport paperSpaceViewport = new DxfViewport();
                paperSpaceViewport.ViewCenter = new Point2D(0d, 0d);
                paperSpaceViewport.Size = new Size2D(300d, 200d);
                paperSpaceViewport.Visible = true;
                paperSpaceViewport.ViewHeight = 200d;
                paperSpaceViewport.PaperSpace = true;
                paperSpaceViewport.FrozenLayers.Add(frozenLayer);
                layout1.Viewports.Add(paperSpaceViewport);

                // This viewport is a viewport showing a piece of model space in paper space.
                // The total scale factor will be Size.Y / ViewHeight.
                DxfViewport modelSpaceViewport = new DxfViewport();
                modelSpaceViewport.ViewHeight = 6d;
                modelSpaceViewport.ViewCenter = new Point2D(0d, 0d);
                modelSpaceViewport.Center = new Point3D(4d, 3d, 0d);
                modelSpaceViewport.Target = new Point3D(0d, 0d, 0d);
                modelSpaceViewport.Size = new Size2D(8d, 8d);
                modelSpaceViewport.PaperSpace = true;
                modelSpaceViewport.Visible = true;
                layout1.Viewports.Add(modelSpaceViewport);
            }

            DxfLayout layout2 = new DxfLayout("Layout number 2");
            model.Layouts.Add(layout2);
            layout2.Entities.Add(new DxfText("Text on layout 2", new Point3D(2d, 0d, 0d), 1d));
            layout2.UnprintableMarginLeft = 5d;
            layout2.UnprintableMarginRight = 10d;
            layout2.UnprintableMarginTop = 5d;
            layout2.UnprintableMarginBottom = 5d;
            layout2.PlotPaperSize = new Size2D(100d, 100d);
            layout2.TabOrder = 2;

            {
                // This viewport is mandatory, it describes paper space itself.
                DxfViewport paperSpaceViewport = new DxfViewport();
                paperSpaceViewport.ViewCenter = new Point2D(0d, 0d);
                paperSpaceViewport.Size = new Size2D(600d, 400d);
                paperSpaceViewport.Visible = true;
                paperSpaceViewport.ViewHeight = 200d;
                paperSpaceViewport.PaperSpace = true;
                paperSpaceViewport.FrozenLayers.Add(frozenLayer);
                layout2.Viewports.Add(paperSpaceViewport);

                // This viewport is a viewport showing a piece of model space in paper space.
                // The total scale factor will be Size.Y / ViewHeight.
                DxfViewport modelSpaceViewport = new DxfViewport();
                modelSpaceViewport.ViewHeight = 6d;
                modelSpaceViewport.ViewCenter = new Point2D(0d, 0d);
                modelSpaceViewport.Center = new Point3D(4d, 3d, 0d);
                modelSpaceViewport.Target = new Point3D(0d, 0d, 0d);
                modelSpaceViewport.Size = new Size2D(500d, 350d);
                modelSpaceViewport.PaperSpace = true;
                modelSpaceViewport.Visible = true;
                layout2.Viewports.Add(modelSpaceViewport);
            }

            DxfWriter.Write("Layout Example R15.dxf", model);
            DwgWriter.Write("Layout Example R15.dwg", model);
        }
    }
}
</code>
            </example>
            <seealso cref="M:WW.Cad.Model.Entities.DxfEntity.InPaperSpace(WW.Cad.Model.Entities.DxfEntity)"/>
            <seealso cref="P:WW.Cad.Model.DxfHeader.ShowModelSpace"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfLayout"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfViewport.IdPaperView">
            <summary>
            Id of the paper view viewport.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.SetViewportEntityHeader(WW.Cad.Model.Tables.DxfViewportEntityHeader)">
            <summary>
            Sets the viewport entity header without modifying <see cref="P:WW.Cad.Model.DxfModel.ViewportEntityHeaders"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.GetModelToClipSpaceTransform">
            <summary>
            Gets the model space to clip space transform.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.GetClipSpaceToPaperTransform">
            <summary>
            Gets the clip space to paper space transform.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.GetMatrix3D">
            <summary>
            Gets the 3D transformation matrix, excluding translations and perspective projections.
            This is used for calculating the scaling vector for applying line type in the OCS 
            (because it has to look like it's applied in the eye CS).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.GetTransform">
            <summary>
            Calculates the transform for transforming the model to paper space.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.GetMappingTransform(WW.Math.Geometry.Rectangle2D,System.Boolean)">
            <summary>
            Get the projection transformation which uses the projection defined by this viewport and maps the result
            into a given rectangle.
            </summary>
            <remarks>
            This internally uses <see cref="M:WW.Cad.Model.ViewUtil.GetTransform(WW.Cad.Model.IViewDescription,WW.Math.Geometry.Rectangle2D,System.Boolean)"/> where more detailed information is provided.
            </remarks>
            <param name="targetRectangle">Target rectangle. If it does not have the aspect ratio of the viewport, the viewport is centered.</param>
            <param name="invertY">Invert the Y direction? This is necessary for target devices where Y points down like screens.</param>
            <returns>
            Transformation matrix which maps the view centered into the given rectangle. 
            The matrix will not be invertable for perspective views.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified viewport in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.GetPerspectiveToBlinnClipperTransform">
            <summary>
            Gets the transform just after the perspective transform to scale right for the BlinnClipper2D,
            such that in real space 0 &lt; x &lt; 1, 0 &lt; y &lt; 1, 0 &lt; z &lt; 1.
            </summary>
            <remarks>
            Point (-size.X * 0.5d, -size.Y * 0.5d, 1d / back) transforms to (0, 0, 0).
            Point (size.X * 0.5d, size.Y * 0.5d, 1d / front) transforms to (1, 1, 1).
            (All in real space).
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.GetNonPerspectiveToBlinnClipperTransform">
            <summary>
            Gets the transform just after the non-perspective to DCS transform to scale right for the BlinnClipper2D,
            such that in real space 0 &lt; position &lt; 1, 0 &lt; y &lt; 1, 0 &lt; z &lt; 1.
            </summary>
            <remarks>
            Point (-size.Position * 0.5d, -size.Y * 0.5d, back) transforms to (0, 0, 0).
            Point (size.Position * 0.5d, size.Y * 0.5d, front) transforms to (1, 1, 1).
            (All in real space).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.BackClipPlaneZValue">
            <summary>
            Gets or sets the back clip plane Z value.
            </summary>
            <remarks>
            <para>
            The back clip plane Z value is relative to the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Target"/> point
            in the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Direction">view direction</see>.
            </para>
            <para>
            The back clip plane is only active if <see cref="P:WW.Cad.Model.Entities.DxfViewport.BackClippingActive"/> is <see langword="true"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.BackClippingActive"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.FrontClipPlaneZValue"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.BackClippingActive">
            <summary>
            Gets or sets whether back clipping is active.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.StatusFlags"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.BackClipPlaneZValue"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.FrontClipPlaneZValue">
            <summary>
            Gets or sets the front clip plane Z value.
            </summary>
            <remarks>
            <para>
            The front clip plane Z value is relative to the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Target"/> point
            in the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Direction">view direction</see>.
            </para>
            <para>
            The front clip plane is only active if <see cref="P:WW.Cad.Model.Entities.DxfViewport.FrontClippingActive"/> is <see langword="true"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.BackClipPlaneZValue"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.FrontClippingActive"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.FrontClippingActive">
            <summary>
            Gets or sets whether front clipping is active.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.StatusFlags"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.FrontClipPlaneZValue"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.PerspectiveMode">
            <summary>
            Gets or sets whether perspective mode is active.
            </summary>
            <remarks>
            When the perspective mode is on, then the
            <see cref="P:WW.Cad.Model.Entities.DxfViewport.LensLength"/> and the length and direction of the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Direction"/> 
            vector define the perspective transform.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.StatusFlags"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.LensLength"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Direction"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.UseNonRectangularClipBoundary">
            <summary>
            Gets or sets whether to use a non rectangular clip boundary.
            If <c>true</c> then <see cref="P:WW.Cad.Model.Entities.DxfViewport.ClippingBoundaryEntity"/> is used as the clipping bounary.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.ClippingBoundaryEntity"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.ClippingBoundaryEntity">
            <summary>
            Gets or sets the entity that serves as the viewports clipping
            boundary (only present if viewport is non-rectangular). Default value is <c>null</c>.
            To use the clipping boundary entity, property <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.UseNonRectangularClipBoundary"/> must be set to <c>true</c>.
            </summary>
            <remarks>
            Only the following entities can be used as clipping boundary:
            <see cref="T:WW.Cad.Model.Entities.DxfCircle"/>, <see cref="T:WW.Cad.Model.Entities.DxfEllipse"/>, <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/>, <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/>,
            <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DBase"/>, <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DBase"/>, <see cref="T:WW.Cad.Model.Entities.DxfRegion"/>, <see cref="T:WW.Cad.Model.Entities.DxfSpline"/>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.UseNonRectangularClipBoundary"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Center">
            <summary>
            Gets or sets the center where the viewport itself is placed (in WCS, paper space).
            </summary>
            <remarks>
            The viewport is placed at the center position and has size <see cref="P:WW.Cad.Model.Entities.DxfViewport.Size"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Size"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.ViewCenter"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Target"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Size">
            <summary>
            Gets or sets the size of the viewport in paper space.
            </summary>
            <remarks>
            <para>
            The viewport position is defined by the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Center"/>.
            </para>
            <para>
            The scale factor that results is equal to the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Size"/>.Y divided by the view height.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Center"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.ViewHeight"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.CircleZoomPercentage">
            <summary>
            Gets or sets the circle zoom percentage.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.FrozenLayers">
            <summary>
            Gets the frozen layers.
            </summary>
            <remarks>
            When a layer is frozen in the context of a viewport, then that layer is not shown
            in that viewport.
            Note that this is different than the <see cref="P:WW.Cad.Model.Tables.DxfLayer.Frozen"/> property,
            which globally freezes a layer (regardless of the viewport).
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLayer.Frozen"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.GridSpacing">
            <summary>
            Gets or sets the grid spacing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.UcsPerViewport">
            <summary>
            Gets or sets the ucs per viewport flag.
            </summary>
            <remarks>
            If <see langword="true"/> this viewport stores its own <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> which will become the current
            UCS whenever the viewport is activated.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Ucs">
            <summary>
            Gets or sets the UCS.
            </summary>
            <remarks>
            UCS was added to <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> in autocad 2000 (release 15).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.DisplayUcsIcon">
            <summary>
            Gets or sets the display UCS icon at UCS origin flag:
            Controls whether UCS icon represents viewport UCS or current UCS
            (these will be different if <see cref="P:WW.Cad.Model.Entities.DxfViewport.UcsPerViewport"/> is <see langword="true"/> 
            and viewport is not active).
            However, this field is currently being ignored and the icon always
            represents the viewport UCS.
            </summary>
            <remarks>
            This property was introduced in version <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Id">
            <summary>
            Gets the id.
            </summary>
            <remarks>
            The first viewport of a <see cref="T:WW.Cad.Model.Objects.DxfLayout"/> represents paper space itself and does not show the model.
            This viewport always has <see cref="P:WW.Cad.Model.Entities.DxfViewport.Id"/> 1.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Objects.DxfLayout"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.UcsOrthographicType">
            <summary>
            Gets or sets the orthographic type of the associated <see cref="P:WW.Cad.Model.Entities.DxfViewport.Ucs"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.LensLength">
            <summary>
            Gets or sets the perspective lens length in mm (the default value is 50).
            </summary>
            <remarks>
            <para>
            The lens length is used when <see cref="P:WW.Cad.Model.Entities.DxfViewport.PerspectiveMode"/> is set to <c>true</c>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.PerspectiveMode"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.PlotStyleSheetName">
            <summary>
            Gets or sets the plot style sheet name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.RenderMode">
            <summary>
            Gets or sets the render mode.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.ShadePlotMode">
            <summary>
            Gets or sets the shade plot mode.
            </summary>
            <remarks>
            This property was added in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.MajorGridLineFrequency">
            <summary>
            Gets or sets the major grid line frequency compared to the minor grid lines.
            The default value is 5.
            </summary>
            <remarks>
            Introduced in version <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.UseDefaultLighting">
            <summary>
            Gets or sets a value indicating whether to use default lighting.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.DefaultLightingType">
            <summary>
            Gets or sets the default lighting type.
            The default value is <see cref="F:WW.Cad.Model.LightingType.TwoDistantLights"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Brightness">
            <summary>
            Gets or sets the brightness.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Constrast">
            <summary>
            Gets or sets the constrast.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color.
            The default value is <see cref="P:WW.Cad.Model.Objects.DxfColor.Color"/> index 250.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.SnapAngle">
            <summary>
            Gets or sets the snap angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.SnapBasePoint">
            <summary>
            Gets or sets the snap base point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.SnapSpacing">
            <summary>
            Gets or sets the snap spacing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Status">
            <summary>
            Gets the status.
            </summary>
            <remarks>
            <list type="table">
              <listheader>
                <term>status</term>
                <description>description</description>
              </listheader>
              <item>
                <term>-1</term>
                <description>On, but is fully off screen, or is one of the viewports that is not
            active because the $MAXACTVP count is currently being exceeded.</description>
              </item>
              <item>
                <term>0</term>
                <description>Off.</description>
              </item>
              <item>
                <term>&lt;positive value&gt;</term>
                <description>On and active. The value indicates the order of
            stacking for the viewports, where 1 is the active viewport, 2 is the next,
            and so forth.</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.StatusFlags">
            <summary>
            Gets or sets the status flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> is disabled.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.ViewCenter">
            <summary>
            Gets or sets the view center within the viewport in display coordinate system (DCS).
            Model space point <see cref="P:WW.Cad.Model.Entities.DxfViewport.Target"/> from the WCS is mapped onto this point.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Target"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Center"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Direction">
            <summary>
            Gets or sets the view direction pointing from the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Target">target</see> point towards the camera (in WCS). 
            The default value is <see cref="F:WW.Math.Vector3D.ZAxis"/>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Target"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.ViewHeight">
            <summary>
            Gets or sets the view height (in model space units).
            </summary>
            <remarks>
            The scale factor that results is equal to the <see cref="P:WW.Cad.Model.Entities.DxfViewport.Size"/>.Y divided by the view height.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Size"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Target">
            <summary>
            Gets or sets the view target point (in model space).
            The target point is mapped to the <see cref="P:WW.Cad.Model.Entities.DxfViewport.ViewCenter"/> within the viewport in paper space.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.ViewCenter"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.Center"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.TwistAngle">
            <summary>
            Gets or sets the view twist angle (in radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.ModelSpaceVisible">
            <summary>
            Gets whether model space is visible in this viewport.
            </summary>
            <remarks>
            Depends on <see cref="P:WW.Cad.Model.Entities.DxfEntity.PaperSpace"/> being <see langword="true"/>, 
            and <see cref="P:WW.Cad.Model.Entities.DxfViewport.Id"/> being unequal to 1.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.Layout">
            <summary>
            Gets the layout to which this viewport belongs.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.ViewportEntityHeader">
            <summary>
            Gets or sets the viewport entity header.
            </summary>
            <remarks>
            <para>
            The viewport entity header was used in releases before R15.
            From R15 its role is superseded by layouts, which were introduced in R15.
            In R15 viewport entity headers were still used
            for the layout associated with block "*Paper_Space".
            (typically "Layout1", but the name can be changed).
            For other layouts the viewport entity header is null.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.AnnotationScale">
            <summary>
            Gets or sets the annotation scale.
            Returns <c>null</c> if not present.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfViewport.ViewDescription">
            <summary>
            Gets the unified view description of this vport.
            </summary>
            <remarks>
            The returned object is backed up by this vport, so any changes to this vport will be reflected.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfViewport.ViewDescriptionWrapper">
            <summary>
            Helper class wrapping a viewport and providing the unified <see cref="T:WW.Cad.Model.IViewDescription"/> interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfViewport.ViewDescriptionWrapper.#ctor(WW.Cad.Model.Entities.DxfViewport)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfViewport.ViewDescriptionWrapper"/> class.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:WW.Cad.Drawing.NamespaceDoc" -->
        <member name="T:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode">
            <summary>
            Represents the dimension text background color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.NoBackground">
            <summary>
            No background color is used.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.DrawingBackgroundColor">
            <summary>
            In this mode the drawing background color is used.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DimensionTextBackgroundFillMode.DimensionTextBackgroundColor">
            <summary>
            In this mode, <seealso cref="P:WW.Cad.Model.Tables.IDimensionStyle.TextBackgroundColor"/> is used as the dimension text background.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.ArcLengthSymbolPosition">
            <summary>
            Controls the arc length symbol position in an arc length dimension.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ArcLengthSymbolPosition.BeforeDimensionText">
            <summary>
            Before the dimension text (default).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ArcLengthSymbolPosition.AboveDimensionText">
            <summary>
            Above the dimension text.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ArcLengthSymbolPosition.None">
            <summary>
            Don't display the arc length symbol.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfUcsCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> keyed collection (ucs name can be used as indexer parameter).
            </summary>
            <remarks>
            The key is the case insensitive ucs name.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfUcsCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcsCollection.GetKeyForItem(WW.Cad.Model.Tables.DxfUcs)">
            <summary>
            Gets the key for specified ucs.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.PaperSpaceLineTypeScaling">
            <summary>
            This enum controls paper space line type scaling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PaperSpaceLineTypeScaling.Viewport">
            <summary>
            Viewport scaling governs linetype scaling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PaperSpaceLineTypeScaling.Normal">
            <summary>
            No special linetype scaling.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfXRecordValueCollection">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Objects.DxfXRecordValue"/> collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfXRecordValueCollection.Add(System.Int16,System.Object)">
            <summary>
            Adds specified code and value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.WhiteSpaceHandlingFlags">
            <summary>
            Handling of whitespce when calculating bounding boxes.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.WhiteSpaceHandlingFlags.Ignore">
            <summary>
            Ignore white space.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.WhiteSpaceHandlingFlags.IncludeStart">
            <summary>
            Include white space at start of string.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.WhiteSpaceHandlingFlags.IncludeEnd">
            <summary>
            Include white space at end of string.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.WhiteSpaceHandlingFlags.IncludeAll">
            <summary>
            Include white space at string start and string end.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.LineTextBlock">
            <summary>
            Text block holding a line of text.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.LineTextBlock.#ctor(System.Double,WW.Cad.Model.Entities.LineSpacingStyle,WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="lineSpacingFactor">the line spacing factor</param>
            <param name="lineSpacingStyle">the line spacing style</param>
            <param name="settings">text settings</param>
        </member>
        <member name="M:WW.Cad.Model.Text.LineTextBlock.CreateBrokenBoxGroup(System.Boolean)">
            <summary>
            Create a clone of this group used as a part of a broken line.
            </summary>
            <param name="first">is this the first part of the break?</param>
            <returns>broken group</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.LineTextBlock.GetBounds(WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounding box of this text block.
            </summary>
            <param name="whiteSpaceHandling">how to handle white space when calculating the bounds</param>
        </member>
        <member name="M:WW.Cad.Model.Text.LineTextBlock.Layout(WW.Math.Vector2D@,System.Double,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Lay out this block.
            </summary>
            <param name="baselinePos">current baseline position, advanced after layout</param>
            <param name="height">height of the surrounding text block</param>
        </member>
        <member name="T:WW.Cad.Model.Text.TextLayoutEngine">
            <summary>
            Engine for layed out texts and mtexts.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextLayoutEngine.Layout(System.String,System.Double,WW.Cad.Model.Tables.DxfTextStyle,System.Double,WW.Drawing.ArgbColor,System.Int16,WW.Math.Matrix4D,WW.Math.Bounds2D,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Layout a simple left-aligned text.
            </summary>
            <param name="text">The text.</param>
            <param name="height">The inital font height.</param>
            <param name="style">The style.</param>
            <param name="widthFactor">The width factor.</param>
            <param name="color">The color.</param>
            <param name="lineWeight">The line weight.</param>
            <param name="insertionTransformation">The insertion transformation.</param>
            <param name="collectBounds">if not <code>null</code> the bounds of the layouted text will be added</param>
            <param name="whiteSpaceHandlingFlags">The white space handling flags.</param>
            <returns>
            a list of text chunks, each with a fix setting
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextLayoutEngine.Layout(System.String,System.Double,System.Double,WW.Cad.Model.Entities.AttachmentPoint,System.Double,WW.Cad.Model.Entities.LineSpacingStyle,WW.Cad.Model.Tables.DxfTextStyle,System.Double,WW.Drawing.ArgbColor,WW.Cad.Model.Entities.DrawingDirection,System.Int16,WW.Math.Matrix4D,WW.Math.Bounds2D,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Layouts the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="width">The width.</param>
            <param name="height">The initial font height.</param>
            <param name="attachmentPoint">The attachment point.</param>
            <param name="lineSpacingFactor">The line spacing factor.</param>
            <param name="lineSpacingStyle">The line spacing style.</param>
            <param name="style">The style.</param>
            <param name="widthFactor">The width factor.</param>
            <param name="color">The color.</param>
            <param name="drawingDirection">The drawing direction.</param>
            <param name="insertionTransformation">The insertion transformation.</param>
            <param name="collectBounds">if not <code>null</code> the bounds of the layouted text will be added</param>
            <returns>
            a list of text chunks, each with a fix setting
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextLayoutEngine.Layout(WW.Cad.Model.Entities.DxfMText,WW.Drawing.ArgbColor,System.Int16)">
            <summary>
            Layout a MTEXT, using its standard transformation as insertion transformation.
            </summary>
            <param name="mtext">the MTEXT</param>
            <param name="color">color used for text</param>
            <param name="lineWeight">The line weight.</param>
            <returns>
            a list of text chunks, each with a fix setting
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextLayoutEngine.Layout(WW.Cad.Model.Entities.DxfMText,WW.Drawing.ArgbColor,System.Int16,WW.Math.Matrix4D,WW.Math.Bounds2D)">
            <summary>
            Layout a MTEXT.
            </summary>
            <param name="mtext">the MTEXT</param>
            <param name="color">color used for text</param>
            <param name="lineWeight">The line weight.</param>
            <param name="insertionTransformation">insertion transformation</param>
            <param name="collectBounds">contains untransformed bounds of text if not <c>null</c></param>
            <returns>
            a list of text chunks, each with a fix setting
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextLayoutEngine.Layout(WW.Cad.Model.Entities.DxfText,WW.Drawing.ArgbColor,System.Int16,WW.Math.Matrix4D,WW.Math.Bounds2D)">
            <summary>
            Layout TEXT.
            </summary>
            <param name="text">the TEXT</param>
            <param name="color">color used for text</param>
            <param name="lineWeight">The line weight.</param>
            <param name="insertionTransformation">insertion transformation</param>
            <param name="collectBounds">contains untransformed bounds of text if not <c>null</c></param>
            <returns>list of text chunks</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TextLayoutEngine.Layout(WW.Cad.Model.Entities.DxfText,WW.Drawing.ArgbColor,System.Int16,WW.Math.Matrix4D,WW.Math.Bounds2D,WW.Math.Vector2D@,WW.Math.Vector2D@)">
            <summary>
            Layout TEXT.
            </summary>
            <param name="text">the TEXT</param>
            <param name="color">color used for text</param>
            <param name="lineWeight">The line weight.</param>
            <param name="insertionTransformation">insertion transformation</param>
            <param name="collectBounds">contains untransformed bounds of text if not <c>null</c></param>
            <param name="alignmentTranslation">The alignment translation.</param>
            <param name="alignmentScaling">The additional scaling imposed by the alignment when horizontal alignment is Fit or Aligned</param>
            <returns>list of text chunks</returns>
        </member>
        <member name="T:WW.Cad.Model.SimpleLineType">
            <summary>
            Simple line type definition used for obscured lines in AutoCAD.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.Off">
            <summary>
            No obscured lines.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.Solid">
            <summary>
            Obscured lines are drawn with solid line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.Dashed">
            <summary>
            Obscured lines are drawn with dashed line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.Dotted">
            <summary>
            Obscured lines are drawn with dotted line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.ShortDash">
            <summary>
            Obscured lines are drawn with short dash line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.MediumDash">
            <summary>
            Obscured lines are drawn with medium dash line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.LongDash">
            <summary>
            Obscured lines are drawn with long dash line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.DoubleShortDash">
            <summary>
            Obscured lines are drawn with double short dash line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.DoubleMediumDash">
            <summary>
            Obscured lines are drawn with double medium dash line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.DoubleLongDash">
            <summary>
            Obscured lines are drawn with double long dash line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.MediumLongDash">
            <summary>
            Obscured lines are drawn with medium long dash line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SimpleLineType.SparseDot">
            <summary>
            Obscured lines are drawn with sparse dot line type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolyline3DSpline">
            <summary>
            Spline curve subtype of the 3D poly line (POLYLINE) entity, built from <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> objects.
            </summary>
            <remarks>
            <para>
            The spline can be of degree 2 (quadratic) or 3 (cubic), see property <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.SplineType">SplineType</see>.
            </para>
            <para>
            The spline is defined by the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/> and its degree (<see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.SplineType">SplineType</see>).
            </para>
            <para>
            The <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ApproximationPoints"/> are derived from the control points and are required
            for rendering by programs that itself don't calculate the spline curve from the control points 
            (see method <see cref="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.RecalculateApproximationPoints(System.Int32)"/>).
            </para>
            <para>
            Use the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DBase.Closed"/> property to specify whether the polyline should be closed.
            </para>
            </remarks>
            <example>
            An example of how to create and write a dxf file containing a DxfPolyline3DSpline.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace Examples {
    public class Polyline3DSplineExample {
        public void Demonstrate()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            // 3D spline.
            DxfPolyline3DSpline polyline3 = new DxfPolyline3DSpline(SplineType.CubicBSpline);
            polyline3.ControlPoints.AddRange(
                new DxfVertex3D[] {
                    new DxfVertex3D(0, -2, 0),
                    new DxfVertex3D(0, -1, 0),
                    new DxfVertex3D(1, -1, 0),
                    new DxfVertex3D(1, -2, 0)
                }
            );
            model.Entities.Add(polyline3);
    
            DxfWriter.Write("WriteDxfPolyline3DTest-R14.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline3D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline3DBase"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfSpline"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.#ctor(WW.Cad.Model.Entities.SplineType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/> class.
            </summary>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.#ctor(WW.Cad.Model.Entities.SplineType,WW.Cad.Model.Entities.DxfVertex3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.#ctor(WW.Cad.Model.Entities.DxfVertex3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/> class.
            </summary>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/>.</param>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.#ctor(WW.Cad.Model.Entities.SplineType,WW.Math.Point3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.#ctor(WW.Math.Point3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/> class.
            </summary>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/>.</param>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.#ctor(WW.Cad.Model.Entities.SplineType,System.Collections.Generic.IEnumerable{WW.Math.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.#ctor(System.Collections.Generic.IEnumerable{WW.Math.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/> class.
            </summary>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/>.</param>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.RecalculateApproximationPoints(System.Int32)">
            <summary>
            Fills the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ApproximationPoints"/> based on the <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/> and given 
            <paramref name="noOfSplineLineParts"/>.
            </summary>
            <remarks>
            This method can be called explicitly to create the approximation points.
            If there are no approximation points then they will be created when writing the spline to file
            using <see cref="P:WW.Cad.Model.DxfHeader.NumberOfSplineSegments"/>.
            </remarks>
            <param name="noOfSplineLineParts">
            Number of line parts by which to approximate the spline.
            </param>
            <seealso cref="P:WW.Cad.Model.DxfHeader.NumberOfSplineSegments"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified 3D spline in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline3DSpline.Get3DBSplineCurve(System.Int32,System.Int32)">
            <summary>
            Get 3d bspline of given power (3 for cubic, 2 for quadratic).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints">
            <summary>
            Gets the spline control points (<see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>) of the spline poly line.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ApproximationPoints">
            <summary>
            Get the spline approximation points (<see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>) of the spline poly line.
            </summary>
            <remarks>
            These vertices are derived from <see cref="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.ControlPoints"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline3DSpline.SplineType">
            <summary>
            Gets or sets the spline type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfMeshFace">
            <summary>
            A 3D face that is part of a <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/>.
            </summary>
            <remarks>
            The 3D face consists of one to four <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners">corners</see>.
            </remarks>
            <example>
            An example of how to create and write a dxf file containing a <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/> object.
            <!-- No matching elements were found for the following include tag --><include file="ExamplesDoc.xml" path="examples/example[@name=&quot;create DxfPolyfaceMesh example&quot;]/code"/>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.DxfMeshFace.Corner[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corners.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <b>cornerVertices</b> is <b>null</b> or has 0 or more than 4 vertices.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.DxfMeshFace.Corner[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corners.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <b>cornerVertices</b> is <b>null</b> or has 0 or more than 4 vertices.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.DxfVertex3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertices in <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> objects and adds them to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when <b>cornerVertices</b> is <b>null</b> or has 0 or more than 4 vertices.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.DxfVertex3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertices in <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> objects and adds them to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when <b>cornerVertices</b> is <b>null</b> or has 0 or more than 4 vertices.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertex in a <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> object and add it to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertex in a <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> object and add it to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertices in <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> objects and adds them to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertices in <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> objects and adds them to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertices in <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> objects and adds them to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertices in <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> objects and adds them to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertices in <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> objects and adds them to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D,WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> class with given corner vertices.
            </summary>
            <remarks>
            Wraps given corner vertices in <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> objects and adds them to the
            <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corners"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (throws exception).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (throws exception).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.Clone(WW.Cad.Model.CloneContext,WW.Cad.Model.Entities.DxfPolyfaceMesh,System.Collections.Generic.Dictionary{WW.Cad.Model.Entities.DxfVertex3D,System.Int32})">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="fromMesh">The source mesh.</param>
            <param name="fromVertexToIndex">dictionary from vertex object to vertex index.</param>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.CopyFrom(WW.Cad.Model.Entities.DxfMeshFace,WW.Cad.Model.CloneContext,WW.Cad.Model.Entities.DxfPolyfaceMesh,System.Collections.Generic.Dictionary{WW.Cad.Model.Entities.DxfVertex3D,System.Int32})">
            <summary>
            Copy face from given mesh face.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMeshFace.Corners">
            <summary>
            Gets the corners.
            </summary>
            <remarks>
            Note that the corner vertices (<see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> may 
            be shared with other <see cref="T:WW.Cad.Model.Entities.DxfMeshFace">mesh faces</see>.
            All corner vertices must be part of the same <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMeshFace.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMeshFace.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfMeshFace.Corner">
            <summary>
            Edge start <see cref="T:WW.Cad.Model.Entities.DxfVertex3D">vertex</see> with a boolean flag specifying whether the edge is visible.
            </summary>
            <remarks>
            <para>
            By default the edge that starts with this corner is visible.
            To make the edge invisible set <see cref="P:WW.Cad.Model.Entities.DxfMeshFace.Corner.EdgeVisible"/> to <see langword="false"/>.
            </para>
            <para>
            Note that the corner vertex can be shared with other <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> instances.
            All corner vertices must however be part of the same <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/>.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfMeshFace"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.Corner.#ctor(WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> class with given vertex.
            </summary>
            <remarks>
            Note that the corner vertex can be shared with other <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> instances.
            All corner vertices must however be part of the same <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/>.
            </remarks>
            <param name="vertex">The corner vertex.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMeshFace.Corner.#ctor(WW.Cad.Model.Entities.DxfVertex3D,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMeshFace.Corner"/> class with given vertex 
            and edgeVisible flag.
            </summary>
            <remarks>
            Note that the corner vertex can be shared with other <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> instances.
            All corner vertices must however be part of the same <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/>.
            </remarks>
            <param name="vertex">The corner vertex.</param>
            <param name="edgeVisible">
            Specifies whether the face edge that starts with this corner is visible.
            </param>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMeshFace.Corner.Vertex">
            <summary>
            Gets or sets the corner position.
            </summary>
            <remarks>
            Note that the corner vertex can be shared with other <see cref="T:WW.Cad.Model.Entities.DxfMeshFace"/> instances.
            All corner vertices must however be part of the same <see cref="T:WW.Cad.Model.Entities.DxfPolyfaceMesh"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMeshFace.Corner.EdgeVisible">
            <summary>
            Gets or sets whether the face edge that starts with this corner is visible.
            </summary>
            <remarks>
            Default value is <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableRowCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Entities.DxfTableRow"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableRowCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableRowCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableRowCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableRowCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableRowCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfTableRow})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableRowCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableRow">
            <summary>
            A table row for use in <see cref="T:WW.Cad.Model.Entities.DxfTable"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableRow"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableRow.ScaleMe(System.Double,WW.Actions.CommandGroup)">
            <summary>
            Scales me.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableRow.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this row.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableRow.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Entities.DxfTableRow)">
            <summary>
            Copies the contents from specified row into this row.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow.CellStyleOverrides">
            <summary>
            Gets the cell style containing cell style overrides.
            </summary>
            <remarks>
            Using this property, cell style properties can be overridden to change from
            the cell style in the table style pointed to by <see cref="P:WW.Cad.Model.Entities.DxfTableRow.CellStyle"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow.CellStyle">
            <summary>
            Gets or sets the cell style, must be a cell style instance from
            the table's <see cref="P:WW.Cad.Model.Entities.DxfTable.TableStyle">table style</see>.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow.CustomData">
            <summary>
            Gets or sets the custom data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow.CustomDataCollection">
            <summary>
            Gets the custom data collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow.Cells">
            <summary>
            Gets the cells.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow.Height">
            <summary>
            Gets or sets the row height.
            The default value is 0.36.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.SvgExporter">
            <summary>
            Class for exporting a CAD drawing to the SVG format (Scalable Vector Graphics).
            </summary>
            <remarks>
            <para>
            Note that the SVG x-axis points right and the y-axis points down,
            and the origin is at the top left. 
            </para>
            <para>
            Depending on the constructor call used the exporter is either running in <b>paper mode</b>
            outputting real world units meant for output fitting on a paper, or in <b>pixel mode</b> 
            where pixel coordinates are written. Setting <see cref="P:WW.Cad.IO.SvgExporter.PaperSize"/> or <see cref="P:WW.Cad.IO.SvgExporter.PixelSize"/>
            allows to switch modes, but is discouraged as some default values (eg <see cref="P:WW.Cad.IO.SvgExporter.LineWidth"/>)
            depend on mode.
            </para>
            <para>
            Generally all properties should be set before calling one of the Draw() methods.
            </para>
            <para>
            CAD layers can be simulated by SVG groups by setting <see cref="P:WW.Cad.IO.SvgExporter.ExportCadLayersAsSvgGroups"/> to <c>true</c>.
            </para>
            <para>
            If custom XML attributes are needed inside the generated XML elements, set property <see cref="P:WW.Cad.IO.SvgExporter.WriteSvgXmlElementAttributes"/> to
            a delegate that is called for writing these XML attributes.
            </para>
            </remarks>
            <example>
            An example of how to read a DXF file and export to SVG.
            <code lang="cs">
using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace Example {
    class ExportToSvgExample {
        public void ExportToSvg(DxfModel model) {
            BoundsCalculator boundsCalculator = new BoundsCalculator();
            boundsCalculator.GetBounds(model);
            Bounds3D bounds = boundsCalculator.Bounds;
            PaperSize paperSize = PaperSizes.GetPaperSize(PaperKind.A4);
            // Lengths in hundredths of cm.
            const float hundredthsInchToCm = 2.54f / 100f;
            float pageWidth = paperSize.Width * hundredthsInchToCm * 100f;
            float pageHeight = paperSize.Height * hundredthsInchToCm * 100f;
            float margin = 200f;
            // Scale and transform such that its fits max width/height
            // and the top left middle of the cad drawing will match the 
            // top middle of the svg page.
            Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                bounds.Corner1,
                bounds.Corner2,
                new Point3D(bounds.Center.X, bounds.Corner2.Y, 0d),
                new Point3D(margin, pageHeight - margin, 0d),
                new Point3D(pageWidth - margin, margin, 0d),
                new Point3D(pageWidth / 2d, margin, 0d)
            );
            using (Stream stream = File.Create("test.svg")) {
                SvgExporter exporter = new SvgExporter(stream, paperSize);
                exporter.Draw(model, GraphicsConfig.BlackBackground, to2DTransform);
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.SvgExporter"/> class in paper mode.
            </summary>
            <remarks>
            By default the page is of letter format.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.IO.Stream,System.Drawing.Printing.PaperKind)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.SvgExporter"/> class in paper mode.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.IO.Stream,System.Drawing.Printing.PaperSize)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.SvgExporter"/> class in paper mode.
            </summary>
            <remarks>
            <para>
            See <see cref="T:System.Drawing.Printing.PaperKind"/> for standard paper sizes.
            </para>
            <para>
            See also <see cref="T:WW.Cad.Drawing.PaperSizes"/> for a utility class that converts from 
            <see cref="T:System.Drawing.Printing.PaperKind"/> to <see cref="P:WW.Cad.IO.SvgExporter.PaperSize"/>.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance if the <see cref="T:WW.Cad.IO.SvgExporter"/> class in pixel mode.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="width">Desired output width in pixel.</param>
            <param name="height">Desired output height in pixel.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.IO.Stream,System.Drawing.Size)">
            <summary>
            Initializes a new instance if the <see cref="T:WW.Cad.IO.SvgExporter"/> class in pixel mode.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="size">Desired output size in pixel.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.Xml.XmlTextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.SvgExporter"/> class in paper mode.
            </summary>
            <remarks>
            By default the page is of letter format.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.Xml.XmlTextWriter,System.Drawing.Printing.PaperKind)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.SvgExporter"/> class in paper mode.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.Xml.XmlTextWriter,System.Drawing.Printing.PaperSize)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.SvgExporter"/> class in paper mode.
            </summary>
            <remarks>
            <para>
            See <see cref="T:System.Drawing.Printing.PaperKind"/> for standard paper sizes.
            </para>
            <para>
            See also <see cref="T:WW.Cad.Drawing.PaperSizes"/> for a utility class that converts from 
            <see cref="T:System.Drawing.Printing.PaperKind"/> to <see cref="P:WW.Cad.IO.SvgExporter.PaperSize"/>.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.Xml.XmlTextWriter,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance if the <see cref="T:WW.Cad.IO.SvgExporter"/> class in pixel mode.
            </summary>
            <param name="w">Output XML text writer.</param>
            <param name="width">Desired output width in pixel.</param>
            <param name="height">Desired output height in pixel.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.#ctor(System.Xml.XmlTextWriter,System.Drawing.Size)">
            <summary>
            Initializes a new instance if the <see cref="T:WW.Cad.IO.SvgExporter"/> class in pixel mode.
            </summary>
            <param name="w">Output XML text writer.</param>
            <param name="size">Desired output size in pixel.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Draw given model on the svg stream.
            </summary>
            <remarks>
            Draws only the model space entities.
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="modelToSvgTransform">Transform from model space to svg paper space.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given model on the svg stream.
            </summary>
            <remarks>
            Draws only the model space entities.
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="modelToSvgTransform">Transform from model space to svg paper space.</param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Draw given model on the svg stream using given view port.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">Model to draw.</param>
            <param name="layout">The layout to draw (optional).</param>
            <param name="viewports">The view ports to use for rendering (optional).</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="paperToSvgTransform">Transform from paper space to svg paper space.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.Draw(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Draw given model on the svg stream using given view port.
            </summary>
            <param name="model">Model to draw.</param>
            <param name="layout">The layout to draw (optional).</param>
            <param name="viewports">The view ports to use for rendering (optional).</param>
            <param name="config">The configuration that steers the drawing.</param>
            <param name="paperToSvgTransform">Transform from paper space to svg paper space.</param>
            <param name="progressEventHandler">Pass handler to track the progress. May be <c>null</c>.</param>
            <remarks>
            Entities in model space are transformed to paper space according to
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Begin graphics creation for specified entity.
            End creation with <see cref="M:WW.Cad.IO.SvgExporter.EndEntity"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.EndEntity">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.IO.SvgExporter.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Begin graphics creation for specified insert.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.EndInsert">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.IO.SvgExporter.BeginInsert(WW.Cad.Model.Entities.DxfInsert)"/>
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreateDot(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D)">
            <summary>
            Create a colored dot.
            </summary>
            <param name="entity">The entity creating the dot.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the dot is created for text.</param>
            <param name="position">the position</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreateLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Create a colored line segment.
            </summary>
            <param name="entity">The entity creating the line segment.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the line segment is created for text.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreateRay(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored ray (infinite line in one direction).
            </summary>
            <param name="entity">The entity creating the ray.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="segment">The line segment, first point must be the starting point,
              the second point goes towards infinity.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreateXLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored DxfXLine (infinite line in both direction).
            </summary>
            <param name="entity">The entity creating the xline.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="startPoint">Starting point (for bounding box calculation).</param>
            <param name="segment">The line segment, both points approach infinity.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of dots, lines and polylines.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreatePathAsOne(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of lines and polylines.
            Similar to <see cref="M:WW.Cad.IO.SvgExporter.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)"/> but in GDI graphics
            this matches drawing using <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <remarks>
            This is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the shape is created for text.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreateText(WW.Cad.Model.Entities.DxfText,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.IO.SvgExporter.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreateMText(WW.Cad.Model.Entities.DxfMText,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.IO.SvgExporter.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.Write(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Cad.Drawing.GraphicsConfig,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Call this to actually write the svg file.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.SvgExporter.WriteSvgGroupStart(System.String)">
            <summary>
            The g element is an SVG group.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.LineWidth">
            <summary>
            Gets or sets the line width.
            </summary>
            <remarks>
            <para>
            Default value is 0.1 when contructed in paper mode,
            and 1 when constructed in pixel mode.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.PaperSize">
            <summary>
            Gets or sets the paper size (Default is letter).
            </summary>
            <remarks>
            <para>
            See <see cref="T:System.Drawing.Printing.PaperKind"/> for standard paper sizes.
            </para>
            <para>
            The exporter can work either in paper or in pixel mode,
            basically depending on the constructor used to create it.
            The mode may be implicitly set by setting the paper size using
            this property (afterwards the exporter is in paper mode) or
            the pixel size with the <see cref="P:WW.Cad.IO.SvgExporter.PixelSize"/> property (after 
            which the exporter is in pixel mode).
            </para>
            <para>
            When in pixel mode this returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.PixelSize">
            <summary>
            Gets or sets the pixel size.
            </summary>
            <remarks>
            <para>
            The exporter can work either in paper or in pixel mode. 
            The mode is implicitly set by setting the paper size using
            this property (afterwards the exporter is in paper mode) or
            the 
            </para>
            <para>
            When in pixel mode this returns a size with negative width and height.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.ExportCadLayersAsSvgGroups">
            <summary>
            Gets or sets a value indicating whether to export CAD layers as SVG groups.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            SVG doesn't have support for layers, but they can be simulated to some extent using SVG groups.
            This however does possibly alter the drawing order of the entities.
            The layer name is assigned to the SVG group id attribute.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.LayerComparer">
            <summary>
            Gets or sets the layer comparer used for defining the layer order during the conversion to SVG groups
            when <see cref="P:WW.Cad.IO.SvgExporter.ExportCadLayersAsSvgGroups"/> is <c>true</c>.
            The default value is <c>null</c>, meaning that the layer order of the drawing is used.
            </summary>
            <remarks>
            Use e.g. <see cref="F:WW.Cad.Model.Tables.DxfLayer.CaseInsensitiveNameComparer"/>.
            </remarks>
            <seealso cref="P:WW.Cad.IO.SvgExporter.ExportCadLayersAsSvgGroups"/>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.Description">
            <summary>
            Gets or sets the description that is stored in the svg drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.Title">
            <summary>
            Gets or sets the title that is stored in the svg drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.CoordinateFormat">
            <summary>
            Gets or sets the coordinate format.
            The default value is "0.##".
            </summary>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.WriteSvgXmlElementAttributes">
            <summary>
            Gets or sets an optional delegate for writing XML attributes inside the SVG XML element for a graphical element.
            The default value is <c>null</c>.
            </summary>
            <remarks>
            This can be used for example to write some attributes to identity the identiy in the SVG file.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.WriteBackgroundRectangle">
            <summary>
            Gets or sets whether an additional rectangle with the background color is written to the SVG.
            </summary>
            <remarks>
            if <c>false</c> the SVG can be considered having a tranparent background.
             The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.SvgExporter.SupportsText">
            <summary>
            Gets a value indicating whether the object supports text.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.XmlWriteDelegate">
            <summary>
            A delegate for writing to the specified XML text writer.
            </summary>
        </member>
        <member name="T:WW.Cad.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.Degrees">
            <summary>
              Looks up a localized string similar to degrees.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.Edit">
            <summary>
              Looks up a localized string similar to edit.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.Height">
            <summary>
              Looks up a localized string similar to height.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.Length">
            <summary>
              Looks up a localized string similar to length.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.Other">
            <summary>
              Looks up a localized string similar to other.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.Radius">
            <summary>
              Looks up a localized string similar to radius.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.Rotation">
            <summary>
              Looks up a localized string similar to rotation.
            </summary>
        </member>
        <member name="P:WW.Cad.Strings.ScaleFactor">
            <summary>
              Looks up a localized string similar to scale factor.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfShape">
            <summary>
            Represents a shape.
            </summary>
            <remarks>
            A shape entity inserts a shape from an <see cref="T:WW.Cad.Model.Entities.ShxFile"/> with <see cref="P:WW.Cad.Model.Entities.ShxShape.Index"/> equal to <see cref="P:WW.Cad.Model.Entities.DxfShape.ShapeIndex"/>.
            The shapes are present in a <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/> (with the <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.IsShape"/> property
            set to <c>true</c>). 
            The <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.FontFilename"/> contains the filename of the SHX file containing the shapes.
            </remarks>
            <example>
            The example below demonstrates how to create and write a DXF/DWG file containing a shape.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public static class ShapeExample {
        public static void CreateDrawingWithShape() {
            DxfModel model = new DxfModel();

            // Create a text style referencing a shx file containing shapes.
            DxfTextStyle textStyle = new DxfTextStyle();
            textStyle.FontFilename = "your_shape_file.shx";
            textStyle.IsShape = true;
            model.TextStyles.Add(textStyle);

            // Create a shape that inserts shape at index 7 in the shx file.
            DxfShape shape = new DxfShape(textStyle, 7, new Point2D(2, 1));
            shape.Color = EntityColors.Green;
            shape.ScaleFactor = 0.1;
            model.Entities.Add(shape);

            DxfWriter.Write("DrawingWithShape.dxf", model);
            DwgWriter.Write("DrawingWithShape.dwg", model);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Tables.DxfTextStyle"/>
            <seealso cref="T:WW.Cad.Model.Entities.ShxFile"/>
            <seealso cref="T:WW.Cad.Model.Entities.ShxShape"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.#ctor(WW.Cad.Model.Tables.DxfTextStyle,System.UInt16,WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfShape"/> class.
            </summary>
            <param name="textStyle">The text style.</param>
            <param name="shapeIndex">The index of the shape in the shape file (<see cref="T:WW.Cad.Model.Entities.ShxFile"/>).</param>
            <param name="insertionPoint">The insertion point.</param>
            <exception cref="T:System.ArgumentException">
            thrown when the SHX file referenced by the specified <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.FontFilename"/> doesn't exist.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.#ctor(WW.Cad.Model.Tables.DxfTextStyle,System.UInt16,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfShape"/> class.
            </summary>
            <param name="textStyle">The text style.</param>
            <param name="shapeIndex">
            The index of the shape in the shape file (<see cref="T:WW.Cad.Model.Entities.ShxFile"/>), this corresponds to <see cref="P:WW.Cad.Model.Entities.ShxShape.Index"/>.
            </param>
            <param name="insertionPoint">The insertion point.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.SetShape(WW.Cad.Model.Tables.DxfTextStyle,System.UInt16)">
            <summary>
            Sets the shape specified by the text style and shape index within the text style's <see cref="T:WW.Cad.Model.Entities.ShxFile"/>.
            </summary>
            <param name="textStyle">The text style.</param>
            <param name="shapeIndex">The index of the shape in the shape file (<see cref="T:WW.Cad.Model.Entities.ShxFile"/>).</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified entity using the specified clone context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfShape.SetShape(WW.Cad.Model.DxfModel,WW.Cad.Model.Tables.DxfTextStyle,System.UInt16,System.Boolean)">
            <summary>
            Sets the text style and shape index within the text style's <see cref="T:WW.Cad.Model.Entities.ShxFile"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.TextStyle">
            <summary>
            Gets the text style that contains the shape.
            This must be a text style that contains shapes (i.e. property <see cref="P:WW.Cad.Model.Tables.DxfTextStyle.IsShape"/> must be <c>true</c>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfShape.ShapeIndex"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.ShapeIndex">
            <summary>
            Gets the index of the shape in the shape file (<see cref="T:WW.Cad.Model.Entities.ShxFile"/>), this corresponds to <see cref="P:WW.Cad.Model.Entities.ShxShape.Index"/>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfShape.TextStyle"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.Thickness">
            <summary>
            Gets or sets the thickness. The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.InsertionPoint">
            <summary>
            Gets or sets the insertion point (defined in the OCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.ScaleFactor">
            <summary>
            Gets or sets the scale factor. The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.Rotation">
            <summary>
            Gets or sets the rotation angle in radians.
            Rotation is applied before the translation by <see cref="P:WW.Cad.Model.Entities.DxfShape.InsertionPoint"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.RelativeXScaleFactor">
            <summary>
            Gets or sets the relative X scale factor. The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.ObliqueAngle">
            <summary>
            Gets or sets the oblique angle in radians.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.ZAxis">
            <summary>
            Gets or sets the z-axis. The default value is (0, 0, 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.Transform">
            <summary>
            Gets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfShape.Name">
            <summary>
            Gets or sets the name (this corresponds to <see cref="P:WW.Cad.Model.Entities.ShxShape.Description"/>),
            which is used in the DXF format, but not the DWG format.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfSpatialFilter">
            <summary>
            Represents a spatial <see cref="T:WW.Cad.Model.Objects.DxfFilter"/>.
            </summary>
            <remarks>
            <para>
            A spatial filter defines a space volume by a 
            <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryPoints">2D clip boundary polygon</see>,
            which defines infinite clipping planes by elongating the edges of the polygon 
            perpendicular to the polygon's plane (i.e. a prism). Everything outside of the volume is clipped 
            away. The volume may be further reduced by optional 
            <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.FrontClippingPlaneDistance">front clipping</see> and
            <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.BackClippingPlaneDistance">back clipping planes</see>, which are parallel
            to the boundary polygon plane. The boundary polygon plane itself is given by
            <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryPlaneNormal">its normal</see> and 
            <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryPlaneOrigin">the origin of plane coordinate system</see>.
            The other axis directions of the plane cs are given by the arbitrary axis algorithm,
            or can be determined by the <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryTransform"/> which transforms the
            clipping boundary points into 3D space.
            </para>
            <para>
            Spatial filter was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">release 14</see>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfInsert.SpatialFilter"/>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfFilter">
            <summary>
            Base class for filters.
            </summary>
            <remarks>
            Filters are be applied to <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> entities, and allow 
            to filter out inserted entities by their location or there layer.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfFilter.DictKeyFilter">
            <summary>
            Dictionary key in the extension dictionary for the filter dictionary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFilter.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFilter.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfSpatialFilter.DictKeySpatialFilter">
            <summary>
            Dictionary key in the filter dictionary for the spatial filter.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSpatialFilter.GetClipBoundaryPolygon">
            <summary>
            Get the clipping boundary as a polygon.
            </summary>
            <remarks>
            This removes the pecularity to check for the special 2 point case
            when using <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryPoints"/>.
            </remarks>
            <returns>Clipping polygon boundary. This is a temporary object, changes will not influence this filter.</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSpatialFilter.UpdateTransforms(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Call this the values of <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.InverseInsertionTransform"/>
            and <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryTransform"/>.
            </summary>
            <param name="insert">
            The DXF insert entity with which this filter is associated, 
            or <c>null</c> to just update the <see cref="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryTransform"/>
            after changes.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSpatialFilter.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSpatialFilter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSpatialFilter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSpatialFilter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified MLine style in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryPoints">
            <summary>
            Get the points of the clipping boundary.
            </summary>
            <remarks>
            The boundary path needs at least 2 points. In case of 2 points 
            they define opposite corners of a rectangle, with 3 or more points 
            the points define a polygon. 
            See <see cref="M:WW.Cad.Model.Objects.DxfSpatialFilter.GetClipBoundaryPolygon"/> for a more convenient access to
            the clipping boundary.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryPlaneNormal">
            <summary>
            Get/set the plane normal of the plane in which the clip boundary polygon is defined.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryPlaneOrigin">
            <summary>
            Get/set the origin of the plane in which the clip boundary polygon is defined.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryDisplayEnabled">
            <summary>
            Get/set whether display of the clip boundary and the filtering is enabled.
            </summary>
            <remarks>
            Please note that this not only sets whether the boundary is displayed but
            also switches the filtering on and off. You can set whether boundaries are
            displayed only globally via 
            <see cref="P:WW.Cad.Model.DxfHeader.ExternalReferenceClippingBoundaryType">model.Header.ExternalReferenceClippingBoundaryType</see>.
            If set to <see cref="F:WW.Cad.Model.SimpleLineType.Off"/> boundaries are not displayed.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.FrontClippingPlaneDistance">
            <summary>
            Get/set the distance of the front clipping plane.
            </summary>
            <remarks>
            The front clipping plane is optional, so setting this to <c>null</c> is disabling front clipping.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.BackClippingPlaneDistance">
            <summary>
            Get/set the distance of the back clipping plane.
            </summary>
            <remarks>
            The back clipping plane is optional, so setting this to <c>null</c> is disabling back clipping.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.InverseInsertionTransform">
            <summary>
            Get/set the inverse insertion transform.
            </summary>
            <remarks>
            <para>
            Although this returns a 4x4 matrix, only the twelve elements of the first three rows are used,
            the elements <see cref="F:WW.Math.Matrix4D.M30"/>, <see cref="F:WW.Math.Matrix4D.M31"/>, <see cref="F:WW.Math.Matrix4D.M32"/>,
            and <see cref="F:WW.Math.Matrix4D.M30"/> are always <c>0</c>, <c>0</c>, <c>0</c>, <c>1</c>, respectively.
            </para>
            <para>
            This matrix defines the inverse of insertion transformation of the associated DxfInsert entity 
            (including the associated DxfBlock's <see cref="P:WW.Cad.Model.Tables.DxfBlock.BaseTransformation">base transformation</see>
            at the time of the creation of the spatial filter.
            </para>
            <para>
            Use <see cref="M:WW.Cad.Model.Objects.DxfSpatialFilter.UpdateTransforms(WW.Cad.Model.Entities.DxfInsert)"/> when the properties of the associated insert element are changed
            to update this property.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.ClipBoundaryTransform">
            <summary>
            Get/set the clip boundary transform.
            </summary>
            <remarks>
            <para>
            The clip boundary transform describes the transformation from the associated DxfInsert's model space
            to the space where the clipping boundary is defined.
            </para>
            <para>
            Although this returns a 4x4 matrix, only the twelve elements of the first three rows are used,
            the elements <see cref="F:WW.Math.Matrix4D.M30"/>, <see cref="F:WW.Math.Matrix4D.M31"/>, <see cref="F:WW.Math.Matrix4D.M32"/>,
            and <see cref="F:WW.Math.Matrix4D.M30"/> are always <c>0</c>, <c>0</c>, <c>0</c>, <c>1</c>, respectively.
            </para>
            <para>
            Use <see cref="M:WW.Cad.Model.Objects.DxfSpatialFilter.UpdateTransforms(WW.Cad.Model.Entities.DxfInsert)"/> when the properties of the associated insert element are changed
            to update this property.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.ObjectType">
            <summary>
            Gets the object type (e.g. SPATIAL_FILTER).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSpatialFilter.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbSpatialFilter).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfHatchScaleContextData">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfHatch">Hatch</see> annotation (scale specific) data.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfAttributeObjectContextData">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfAttribute"/> annotation data.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfTextObjectContextData">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfText"/> annotation data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfTextObjectContextData.Rotation">
            <summary>
            Gets or sets the text rotation in radians.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfTextObjectContextData.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment (the default value is <see cref="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Left"/>).
            </summary>
            <remarks>
            The horizontal alignment defines the horizontal placement of the text relative to <see cref="!:AlignmentPoint2"/>.
            </remarks>
            <seealso cref="!:AlignmentPoint2"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfTextObjectContextData.Position">
            <summary>
            Gets or sets the absolute text position (in OCS).
            </summary>
            <remarks>
            The absolute position corresponds to the left baseline corner of the text rectangle.
            This coordinate is redundant for any alignment other than left, baseline. 
            In these cases it can be derived from <see cref="P:WW.Cad.Model.Objects.Annotations.DxfTextObjectContextData.AlignmentPoint"/>, <see cref="T:WW.Cad.Model.Entities.TextHorizontalAlignment"/>,
            <see cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/> and font characteristics.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Objects.Annotations.DxfTextObjectContextData.AlignmentPoint"/>
            <seealso cref="T:WW.Cad.Model.Entities.TextHorizontalAlignment"/>
            <seealso cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/>
        </member>
        <!-- Badly formed XML comment ignored for member "P:WW.Cad.Model.Objects.Annotations.DxfTextObjectContextData.AlignmentPoint" -->
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfAttributeObjectContextData.Mtext">
            <summary>
            Gets or sets the mtext representation specific data for the attribute.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.BasicEntityVisitor">
            <summary>
            Basic do-nothing implementation of an entity visitor.
            </summary>
            <remarks>
            <para>
            It is useful as a base class for writing your own entity visitor 
            in case you are only interested in special entities.
            </para>
            <para>
            Please be aware that entities are organized in a tree, so in order to walk the 
            complete tree you'll need to get throw the entity walker at the sub entities of
            DxfDimension, DxfInsert (don't forget the Attributes), DxfTable, and DxfPolyline.
            </para>
            <para>
            Extending from this class has the further impact that new entity types
            added to CadLib will not break your code because in this case this class 
            will be adopted. This may be an advantage or disadvantage depending on the 
            purpose of your class. As a rule of thumb extend this class if you are only
            interested in some special entity types, and extend the basic interface if 
            you want to reach all entities.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.DxfModel,WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Apply an entity visitor to the entities of a model.
            </summary>
            <param name="model">The model which entities needs a visit.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Apply an entity visitor to a bunch of entities.
            </summary>
            <param name="entities">The entities which needs a visit.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.Dxf3DFace)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.Dxf3DSolid)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfArc)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfAttribute)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfAttributeDefinition)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfCircle)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Aligned)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Angular3Point)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Angular4Point)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Diametric)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Linear)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Ordinate)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Radial)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfEllipse)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfHatch)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfImage)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfWipeout)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.InventorDrawing.DxfIDBlockReference)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLeader)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLine)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLwPolyline)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMeshFace)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMLine)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMText)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPoint)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyfaceMesh)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolygonMesh)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolygonSplineMesh)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline2D)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline2DSpline)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline3D)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline3DSpline)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfRay)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfRegion)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfBody)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSequenceEnd)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfShape)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSolid)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSpline)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfTable)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfText)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfTolerance)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfVertex2D)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfViewport)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfXLine)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.BasicEntityVisitor.Visit(WW.Cad.Model.Entities.DxfOle)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileSegmentHeader">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DataStorage.FileSegment"/> header.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.Name">
            <summary>
            Gets or sets the name (7 bytes).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.SegmentIndex">
            <summary>
            Gets or sets the segment index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.Unknown1">
            <summary>
            Unknown1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.SegmentSize">
            <summary>
            Gets or sets the segment size.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.Unknown2">
            <summary>
            Unknown2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.DataStorageRevision">
            <summary>
            Gets or sets the data storage revision.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.Unknown3">
            <summary>
            Unknown 3.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.SystemDataAlignmentOffset">
            <summary>
            Gets or sets the system data alignment offset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.SystemDataLocalOffset">
            <summary>
            Gets or sets the system data local offset (is equal to <see cref="P:WW.Cad.Model.DataStorage.FileSegmentHeader.SystemDataAlignmentOffset"/> multiplied by 0x10).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.ObjectDataAlignmentOffset">
            <summary>
            Gets or sets the object data alignment offset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileSegmentHeader.ObjectDataLocalOffset">
            <summary>
            Gets or sets the object data local offset (is equal to <see cref="P:WW.Cad.Model.DataStorage.FileSegmentHeader.ObjectDataAlignmentOffset"/> multiplied by 0x10).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatSimpleWoodShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatSimpleWoodShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatSimpleWoodShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatSimpleWoodShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatTransformEntity">
            <summary>
            SAT transform entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTransformEntity.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTransformEntity.transformation">
            <summary>The transformation.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTransformEntity.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTransformEntity.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTransformEntity.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatTransformEntity.Transformation">
            <summary>
            Get the transformation.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatSkinBaseCurve">
            <summary>
            SAT base class for skin support primitives.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatSkinBaseCurve.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatSkinBaseCurve.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatNetSplineVCurve">
            <summary>
            SAT base class for net spline curve in V direction.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatNetSplineUCurve">
            <summary>
            SAT base class for net spline curve in U direction.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatNetSplineUCurve.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatNetSplineUCurve.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatNetSplineVCurve.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatNetSplineVCurve.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTubeSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTubeSplineSurfacePrimitive.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTubeSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTubeSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTubeSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSimGeomBaseAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSimGeomBaseAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameRealAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameRealAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameRealAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameRealAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals">
            <summary>
            Static class used to hold various logicals.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.BaseLogical">
            <summary>
            Base class for all logical classes.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.ILogical">
            <summary>
            A logical type used in SAT/SAB format. There are three values possible : true, false, uninitialized.
            Uninitialized value is used to prevent saving of invalid data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.ILogical.Value">
            <summary>
            Get\set stored boolean value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.ILogical.SAT">
            <summary>
            Return Logical value as string to store in SAT stream.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatLogicals.BaseLogical.#ctor">
            <summary>Prevent creation of Logical without initialization.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatLogicals.BaseLogical.#ctor(System.Boolean)">
            <summary>Initialization via bool value constructor.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatLogicals.BaseLogical.#ctor(WW.Cad.Model.Acis.ISatReader)">
            <summary>Initialization via reader constructor.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatLogicals.BaseLogical.logicalValue">
            <summary>Possible logical values.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatLogicals.BaseLogical.Value">
            <summary>
            Get\set stored boolean value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatLogicals.BaseLogical.SAT">
            <summary>
            Return Logical value as string to store in SAT stream.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsBoundFinite">
            <summary>
            true - finite bound
            false - infinite bound
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsDirectionReversed">
            <summary> 
            Direction of something with respect to something. 
            true - opposite direction
            false - the same direction
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsInside">
            <summary> 
            logical for containment.
            true - containment inside
            false - containment outside
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.HasRotation">
            <summary>
            Boolean values for rotation flag.
            true - has rotation
            false - no rotation
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.HasReflection">
            <summary>
            Boolean values for hasReflection flag.
            true - has reflect
            false - no reflect
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.HasShear">
            <summary>
            Boolean values for hasShear flag.
            true - has shear
            false - no shear
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsVParametrizationReversed">
            <summary>
            V parametrization flag.
            true - V parametrization reversed
            false - normal V parametrization
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsFaceDoubleSided">
            <summary>
            Face sidedness flag.
            true - double sided face
            true - single sided face
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsFirstSurface">
            <summary>
            Define the true surface for operation.
            true - the first surface used
            false - the alternative surface used
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsLeftEdge">
            <summary>
            Boolean enum values for left\right edge type number.
            true - this is left edge
            false - this is right edge
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsLeftFace">
            <summary>
            Boolean enum values for left\right face type number.
            true - this is left face
            false - this is right face
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsInXYPlane">
            <summary>
            Curve lies in XY plane.
            true - lies in XY plane
            false - not in XY plane
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsPlanar">
            <summary>
            Boolean enum values for planarity type.
            true - planar entity
            false - non planar entity
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.Is2D">
            <summary>
            Boolean enum values for Z coordinate.
            true - 2d variant
            false - 3d variant
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.HasScale">
            <summary>
            Boolean enum values for scaling.
            true - has scale
            false - no scale
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.HasXScale">
            <summary>
            Boolean enum values for X scaling.
            true - has scale
            false - no scale
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.HasYScale">
            <summary>
            Boolean enum values for Y scaling.
            true - has scale
            false - no scale
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.HasNoRail">
            <summary>
            Boolean enum values for railing.
            true - has no rail
            false - has rail
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsPeriodic">
            <summary>
            Boolean enum values for periodic flag.
            true - periodic
            false - not periodic
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsNormal">
            <summary>
            Is the normal "normal" either “angled”
            true - normal is normal
            false - normal is angled
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsCalibrated">
            <summary>
            The two ends calibrated variable flag. 
            true - calibrated
            false - uncalibrated
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.HasRadius">
            <summary>
            Boolean enum values for radius state.
            true - has radius
            false - has no radius
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.Is2p1SkinSurface">
            <summary>
            Boolean enum values for flag in skin surface.
            true - old skin surface version
            false - new skin surface version
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsArcParametrization">
            <summary>
            Boolean enum values for the arc length parameterization.
            true - arc length parameterization
            false - iso parameterization
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsLoftDirectionPerpendicular">
            <summary>
            Loft direction option flag.
            true - perpendicular
            false - non perpendicular
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsConvex">
            <summary>
            Boolean enum values for convex state.
            true - state is convex
            false - state is concave
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsEnvelope">
            <summary>
            Boolean enum values for envelope or snapshot state.
            true - state is envelope
            false - state is snapshot
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsOriginLost">
            <summary>
            Boolean enum values for origin state.
            true - state is lost
            false - state is live
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsBackDifferenceSet">
            <summary>
            SetBackDifference boolean enum values.
            true - state is set
            false - state is free
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsCross">
            <summary>
            IsCross boolean enum values.
            true - state is cross
            false - state is non_cross
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatLogicals.IsSmooth">
            <summary>
            IsSmooth boolean enum values.
            true - state is smooth
            false - state is non_smooth
            </summary>
        </member>
        <member name="T:WW.Cad.IO.XRecordValuesGroupReader">
            <summary>
            Helper class: reading groups from a list of <see cref="T:WW.Cad.Model.Objects.DxfXRecordValue"/> objects.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.XRecordValuesGroupReader.#ctor(WW.Cad.IO.Group,System.Collections.Generic.IEnumerable{WW.Cad.Model.Objects.DxfXRecordValue})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.XRecordValuesGroupReader"/> class.
            </summary>
            <param name="endGroup">Group to return after end.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:WW.Cad.IO.XRecordValuesGroupReader.ReadGroup(WW.Cad.IO.DxfReader)">
            <summary>
            Read the next group.
            </summary>
            <returns>
            Returns <see cref="F:WW.Cad.IO.Group.Empty"/> when reached the end of input.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.XRecordValuesGroupReader.ReadGroup(WW.Cad.IO.DxfReader,System.Int32)">
            <summary>
            Read the next group.
            </summary>
            <returns>
            Returns <see cref="F:WW.Cad.IO.Group.Empty"/> when reached the end of input.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.XRecordValuesGroupReader.ReadGroupTryParse(WW.Cad.IO.DxfReader)">
            <summary>
            Read the next group. Tries to parse the group value, but does not throw an exception
            in case the group value type does not match the expected type (in some cases
            where a deviant type may occur).
            </summary>
            <returns>
            Returns <see cref="F:WW.Cad.IO.Group.Empty"/> when reached the end of input.
            </returns>
        </member>
        <member name="M:WW.Cad.IO.XRecordValuesGroupReader.Close">
            <summary>
            Close the reader and underlying stream.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.XRecordValuesGroupReader.Position">
            <summary>
            Give the current position string for error messages.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.IoUtil.UpperCaseModelSpace">
            <summary>
            Upper case model space name constant.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.IoUtil.UpperCasePaperSpace">
            <summary>
            Upper case paper space name constant.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.IoUtil.GetEntryName(WW.Cad.Model.DxfVersion,System.String)">
            <summary>
            Do special handling of names.
            </summary>
            <param name="effectiveVersion">Version for which the name is requested.</param>
            <param name="name">Basic name.</param>
            <returns>Corrected name.</returns>
        </member>
        <member name="T:WW.Cad.IO.FileFormat">
            <summary>
            Represents the file format.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.FileFormat.Dxf">
            <summary>
            DXF.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.FileFormat.Dwg">
            <summary>
            DWG.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR14.#ctor(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DwgWriter"/> class.
            </summary>
            <param name="stream">
            The stream to which the DWG file is written.
            The stream must support writing and seeking.
            </param>
            <param name="model">The model to write.</param>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR14.Write(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Writes the specified model to the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR14.Write">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.DwgSection">
            <summary>
            Represents a DWG section.
            Not all sections end up in the section map.
            </summary>
            <remarks>
            Used in DWG 13-15, for writing.
            TODO: refactor into DWG13 folder, should be similar to Dwg2004.LogicalSection.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.DataSectionPage.CompressedSize">
            <summary>
            Gets or sets the compressed size of the page data (does not include page header).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.DataSectionPage.DecompressedSize">
            <summary>
            Gets or sets the decompressed page data size (does not include page header).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.DataSectionPage.PageSize">
            <summary>
            Gets or sets the page size (page header + data + padding).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.DataSectionPage.StartOffset">
            <summary>
            Gets or sets the page start offset into the decompressed buffer.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.DataSectionPage.DataChecksum">
            <summary>
            Gets or sets the data checksum.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2004.DataSectionPage.HeaderChecksum">
            <summary>
            Gets or sets the header checksum.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.BitStreamWriterR15">
            <summary>
            Bit stream writer for release 15.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.BitStreamWriterR13">
            <summary>
            Bit stream writer for release 15.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.BitStreamWriter">
            <summary>
            Base bit stream writer, containing all common bit stream writing methods.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.ISingleBitStreamWriter.FlushByteUsingOriginalBits">
            <summary>
            Flush byte, using the original bits in the stream.
            Use when writing (partial) bytes in the middle of an existing stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.ISingleBitStreamWriter.WriteStringStreamLength(System.Int32)">
            <summary>
            Writes the length of the stream stream.
            The string stream follows the main data stream and is followed by the handles stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.CreateUnsplit(WW.Cad.Model.DxfVersion,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates an unsplit bit stream writer.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.WriteStreamContents(WW.IO.PagedMemoryStream,WW.Cad.IO.Dwg.IBitStreamWriter)">
            <summary>
            Writes all of the stream contents from specified paged memory stream to specified bit stream writer.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.Clear">
            <summary>
            Clears the stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.WriteSoftOwnershipReference(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Writes a soft ownership reference (2).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.WriteHardOwnershipReference(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Writes a hard ownership reference (3).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.WriteSoftPointerReference(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Writes a soft pointer reference (4).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.WriteHardPointerReference(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Writes a hard pointer reference (5).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.Flush">
            <summary>
            Add filler bits until the next byte boundary is reached.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamWriter.FlushByteUsingOriginalBits">
            <summary>
            Flush byte, using the original bits in the stream.
            Use when writing (partial) bytes in the middle of an existing stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.BitStreamReaderR21.ReadString">
            <summary>
            TV	:	Variable text, T for 2004 and earlier files, TU for 2007+ files.
            </summary>
            <remarks>
            TU	:	Unicode text (bitshort character length, followed by Unicode string, 2 bytes per character).  
            Unicode text is read from the “string stream” within the object data, 
            see the main Object description section for details.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Builders.DxfSortEntsTableBuilder.#ctor(WW.Cad.Model.Objects.DxfSortEntsTable,WW.Cad.Base.DxfMessageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.Builders.DxfSortEntsTableBuilder"/> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="messages">Messages for warnings during build.</param>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.ProcessedGraphics">
            <summary>
            Represents processed surface graphics, where line type and extrusion are applied
            to the unprocessed graphics in <see cref="T:WW.Cad.Drawing.Surface.Graphics"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.ProcessedGraphicElementBlock">
            <summary>
            Represents a processed block of graphic elements (i.e. line type and extrusion have been applied).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.ProcessedGraphicElementBlock.#ctor(WW.Math.Matrix4D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.ProcessedGraphicElementBlock"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementBlock.GraphicElements">
            <summary>
            Gets the graphic elements in the object coordinate system (OCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementBlock.Inserts">
            <summary>
            Gets the inserts.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.ProcessedGraphicElementBlock.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.ProcessedGraphics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.ProcessedGraphics"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.ProcessedGraphics.Process(WW.Cad.Drawing.GraphicsConfig,WW.Cad.Drawing.Surface.Graphics)">
            <summary>
            Processes the specified graphics, taking into consideration the specified graphic configuration.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Polyline2DE">
            <summary>
            Represents a 2D polyline primitive with a transformation matrix (E stands for Extended).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline2DE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline2DE.#ctor(WW.Cad.Drawing.Polyline2DE,WW.Math.Matrix4D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline2DE.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline2DE.Wrappee">
            <summary>
            Gets or sets the wrappee.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline2DE.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Point2D2N">
            <summary>
            2D point with start/end normals 
            helper class to that is using to approximate 2D polylines by
            line segments.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2N.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2N.#ctor(WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2N.#ctor(WW.Math.Point2D,WW.Math.Vector2D,WW.Math.Vector2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2N.GetPoint(WW.Cad.Drawing.Point2D2N,System.Double)">
            <summary>
            Gets the point between this point and the nextVertex at the given fraction (0-1).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2N.GetEndPoint(WW.Cad.Drawing.Point2D2N,System.Double)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.IExtendedPoint2D`1.GetEndPoint(`0,System.Double)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2N.SetEndProperties(WW.Cad.Drawing.Point2D2N,System.Double)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.IExtendedPoint2D`1.SetEndProperties(`0,System.Double)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2D2N.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2N.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2N.IsInterpolatedPoint">
            <summary>
            See <see cref="!:IExtendedPoint2D&lt;T&gt;.IsInterpolatedPoint"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2N.StartNormal">
            <summary>
            Gets or sets the start normal.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2D2N.EndNormal">
            <summary>
            Gets or sets the end normal.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.ILinearTransformer">
            <summary>
            Transformer that transforms points.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILinearTransformer.Transform(WW.Math.Point2D)">
            <summary>
            Transforms given point.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILinearTransformer.TransformTo3D(WW.Math.Point2D)">
            <summary>
            Transforms given point.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILinearTransformer.Transform(WW.Math.Point3D)">
            <summary>
            Transforms given point.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILinearTransformer.TransformTo3D(WW.Math.Point3D)">
            <summary>
            Transforms given point.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILinearTransformer.Transform(WW.Math.Vector3D)">
            <summary>
            Transforms given vector.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ILinearTransformer.SetPreTransform(WW.Math.Matrix4D)">
            <summary>
            Applies given transform (pre) before all other transforms.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ILinearTransformer.Matrix3D">
            <summary>
            Gets or sets the 3x3 matrix for transforming a line segment before line type is applied to it.
            Line type is applied in the world coordinate system (for model space), or in paper space,
            but the perspective transformation component is omitted from this matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ILinearTransformer.LineTypeScaler">
            <summary>
            Gets the line type scaler.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.GraphicsToCadConverter">
            <summary>
            Represents a converter class that can converts from <see cref="T:System.Drawing.Graphics"/> style drawing
            methods to CAD.
            The resulting entities are retrieved from property <see cref="P:WW.Cad.Drawing.GDI.GraphicsToCadConverter.Entities"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsToCadConverter.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GDI.GraphicsToCadConverter"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsToCadConverter.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws a line.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsToCadConverter.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measures the specified string.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsToCadConverter.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
            <summary>
            Draws a string.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsToCadConverter.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an arc.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsToCadConverter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GraphicsToCadConverter.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GraphicsToCadConverter.Entities">
            <summary>
            Gets the entities.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.AngleIntervalD">
            <summary>
            Double based angle interval.
            </summary>
            <remarks>
            <para>
            Has some special behaviour as compared to <see cref="T:WW.Math.IntervalD"/>.
            When min &lt; max then behaviour is the same.
            When min &gt; max then angle is assumed to be running from 
            min to 2 pi and 0 to max.
            </para>
            <para>
            Note that input angles are expected to be in the range 0 to 2 pi, but this is not enforced.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.AngleIntervalD.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.AngleIntervalD.Contains(System.Double)">
            <summary>
            Returns <see langword="true"/> when interval contains given value.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.AngleIntervalD.Overlaps(WW.Cad.Base.AngleIntervalD)">
            <summary>
            Returns <see langword="true"/> when interval overlaps given interval.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.AngleIntervalD.Max">
            <summary>
            Gets or sets the maximum angle in radians.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.AngleIntervalD.Min">
            <summary>
            Gets or sets the minimum angle in radians.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.GraphicsUtil">
            <summary>
            Graphics utility.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsUtil.GetPen(System.Drawing.Color,System.Single)">
            <summary>
            Get pen with given color/pen width.
            </summary>
            <remarks>
            Get pen from this method in stead of creating a new pen
            for speed (creating a <see cref="T:System.Drawing.Pen"/> is expensive).
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsUtil.GetBrush(System.Drawing.Color)">
            <summary>
            Get brush with given color.
            </summary>
            <remarks>
            Get brush from this method in stead of creating a new brush
            for speed (creating a <see cref="T:System.Drawing.Brush"/> is expensive).
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GraphicsUtil.DrawDot(System.Drawing.Graphics,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draw a dot onto given graphics object.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfTextStyleCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/> collection (text style name can be used as indexer parameter).
            </summary>
            <remarks>
            The (non-unique) key is the case insensitive text style name.
            The text style name may be entity when it respresents a shape file.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyleCollection.TryGetValue(System.String,WW.Cad.Model.Tables.DxfTextStyle@)">
            <summary>
            Tries to the get the text style with specified name (if the name is not empty).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyleCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a text style with the specified name (if the name is not empty).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyleCollection.Item(System.String)">
            <summary>
            Gets the first text style with the specified name (if the name is not empty).
            Returns <c>null</c> if not found.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.TableFlowDirection">
            <summary>
            Table flow direction for use in <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.TableFlowDirection.Down">
            <summary>
            Down.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.TableFlowDirection.Up">
            <summary>
            Up.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.PolylineLineTypeGeneration">
            <summary>
            Governs the generation of linetype patterns around the vertices of a 2D polyline.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PolylineLineTypeGeneration.PerSegment">
            <summary>
            Each segment of the polyline starts and ends with a dash.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PolylineLineTypeGeneration.Continuous">
            <summary>
            Linetype is generated in a continuous pattern around vertices of the polyline.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfTableStyle">
            <summary>
            A table style object to be used in <see cref="T:WW.Cad.Model.Entities.DxfTable"/> objects.
            </summary>
            <remarks>
            The default table style has name <see cref="F:WW.Cad.Model.Objects.DxfTableStyle.DefaultTableStyleName"/>.
            </remarks>
            <example>
            This example shows how create a table, merge cells and create a custom table style.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class TableExample {
        public void CreateTableExample() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTableStyle tableStyle = new DxfTableStyle("Double bordered");
            tableStyle.DataCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.DataCellStyle.SetAllBordersColor(Colors.Green);
            tableStyle.TitleCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.ContentColor = Colors.Blue;
            model.TableStyles.Add(tableStyle);

            DxfTable table = new DxfTable(tableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 3;

            foreach (DxfTableColumn column in table.Columns) {
                column.Width = 8d;
            }

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");
            table.Rows[1].Cells[0].Contents.Add(new DxfValueFormat.String(), "Column 1 Header");
            table.Rows[1].Cells[1].Contents.Add(new DxfValueFormat.String(), "Column 2 Header");
            table.Rows[1].Cells[2].Contents.Add(new DxfValueFormat.String(), "Column 3 Header");
            table.Rows[2].Cells[0].Contents.Add(new DxfValueFormat.String(), "Text");
            table.Rows[2].Cells[0].CellStyleOverrides.ContentColor = Colors.Red;
            table.Rows[4].Cells[0].Contents.Add(DxfValueFormat.Date.CreateRegionalLongDateTime(), DateTime.Now);
            table.Rows[5].Cells[0].Contents.Add(new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal), 123.45d);

            // Merge the title row cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(0, 0, 0, 2));
            // This demonstrates a merged cell block of 3 by 2 cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(2, 0, 3, 2));

            model.Entities.Add(table);

            DxfWriter.Write("Table Example.dxf", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfTableStyle.DefaultTableStyleName">
            <summary>
            The name of the default table style.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfTableStyle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfTableStyle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyle.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyle.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyle.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableStyle.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <remarks>
            If overridden, subclass must call base method.
            </remarks>
            <param name="from">source object</param>
            specifies what to do when a reference to e.g. a line type is missing.
            <param name="cloneContext">the clone context</param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.FlowDirection">
            <summary>
            Gets or sets the flow direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.Flags">
            <summary>
            Gets or sets the flags (meaning unknown).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.HorizontalCellMargin">
            <summary>
            Gets or sets the horizontal cell margin.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.VerticalCellMargin">
            <summary>
            Gets or sets the vertical cell margin.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.SuppressTitle">
            <summary>
            Gets or sets a value indicating whether to suppress the title.
            This property is no longer used from <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/> onwards.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.SuppressHeaderRow">
            <summary>
            Gets or sets a value indicating whether to suppress the header row.
            This property is no longer used from <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/> onwards.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.TableCellStyle">
            <summary>
            Gets the table cell style. This cell style is not part of <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.CellStyles"/>.
            </summary>
            <remarks>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.TitleCellStyle">
            <summary>
            Gets the title cell style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.HeaderCellStyle">
            <summary>
            Gets the header cell style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.DataCellStyle">
            <summary>
            Gets the data cell style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.CellStyles">
            <summary>
            Gets the cell styles.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableStyle.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfLayout">
            <summary>
            A layout consists of one more more <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> objects.
            </summary>
            <remarks>
            <para>
            Model space entities are part of the model space <see cref="T:WW.Cad.Model.Objects.DxfLayout">layout</see>, paper
            space entities are part of one of the paper space layouts. 
            There may be be zero or more paper space layouts, there is only one model space layout 
            (<see cref="P:WW.Cad.Model.DxfModel.ModelLayout"/>). Whether a layout is a model space or paper space layout is defined by
            property <see cref="P:WW.Cad.Model.Objects.DxfLayout.PaperSpace"/>.
            </para>
            <para>
            Add viewports to the <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> collection.
            The viewport with id 1 describes paper space itself. 
            The other viewports are views on model space.
            See for more information class <see cref="T:WW.Cad.Model.Entities.DxfViewport"/>
            </para>
            <para>
            This object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15">release 15</see>.
            </para>
            </remarks>
            <example>
            Below is an example of how to create and write a drawing containing a scene in model space and 
            layouts with viewports showing the scene in paper space.
            <code lang="cs">
using System;
using System.Collections.Generic;

using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Cad.Model.Tables;
using WW.Cad.IO;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class LayoutExample {
        public static void DemonstrateLayouts() {
            DxfModel model = new DxfModel(DxfVersion.Dxf15);

            model.Entities.Add(new DxfCircle(EntityColors.Red, new Point3D(0d, 0d, 0d), 2d));
            model.Entities.Add(new DxfLine(EntityColors.GreenYellow, new Point3D(-3d, 4d, 0d), new Point3D(5d, 3d, 0d)));
            model.Entities.Add(new DxfLine(EntityColors.Yellow, new Point3D(-4d, 0d, 0d), new Point3D(5d, 5d, 0d)));

            DxfLayer frozenLayer = new DxfLayer("Frozen");
            model.Layers.Add(frozenLayer);

            DxfLayout layout1 = model.Layouts["layout1"];
            layout1.Name = "Layout number 1";
            layout1.Entities.Add(new DxfText("Text on layout 1", new Point3D(2d, 0d, 0d), 1d));
            layout1.UnprintableMarginLeft = 5d;
            layout1.UnprintableMarginRight = 10d;
            layout1.UnprintableMarginTop = 5d;
            layout1.UnprintableMarginBottom = 5d;
            layout1.PlotPaperSize = new Size2D(100d, 100d);
            layout1.TabOrder = 1;

            {
                // This viewport is mandatory, it describes paper space itself.
                DxfViewport paperSpaceViewport = new DxfViewport();
                paperSpaceViewport.ViewCenter = new Point2D(0d, 0d);
                paperSpaceViewport.Size = new Size2D(300d, 200d);
                paperSpaceViewport.Visible = true;
                paperSpaceViewport.ViewHeight = 200d;
                paperSpaceViewport.PaperSpace = true;
                paperSpaceViewport.FrozenLayers.Add(frozenLayer);
                layout1.Viewports.Add(paperSpaceViewport);

                // This viewport is a viewport showing a piece of model space in paper space.
                // The total scale factor will be Size.Y / ViewHeight.
                DxfViewport modelSpaceViewport = new DxfViewport();
                modelSpaceViewport.ViewHeight = 6d;
                modelSpaceViewport.ViewCenter = new Point2D(0d, 0d);
                modelSpaceViewport.Center = new Point3D(4d, 3d, 0d);
                modelSpaceViewport.Target = new Point3D(0d, 0d, 0d);
                modelSpaceViewport.Size = new Size2D(8d, 8d);
                modelSpaceViewport.PaperSpace = true;
                modelSpaceViewport.Visible = true;
                layout1.Viewports.Add(modelSpaceViewport);
            }

            DxfLayout layout2 = new DxfLayout("Layout number 2");
            model.Layouts.Add(layout2);
            layout2.Entities.Add(new DxfText("Text on layout 2", new Point3D(2d, 0d, 0d), 1d));
            layout2.UnprintableMarginLeft = 5d;
            layout2.UnprintableMarginRight = 10d;
            layout2.UnprintableMarginTop = 5d;
            layout2.UnprintableMarginBottom = 5d;
            layout2.PlotPaperSize = new Size2D(100d, 100d);
            layout2.TabOrder = 2;

            {
                // This viewport is mandatory, it describes paper space itself.
                DxfViewport paperSpaceViewport = new DxfViewport();
                paperSpaceViewport.ViewCenter = new Point2D(0d, 0d);
                paperSpaceViewport.Size = new Size2D(600d, 400d);
                paperSpaceViewport.Visible = true;
                paperSpaceViewport.ViewHeight = 200d;
                paperSpaceViewport.PaperSpace = true;
                paperSpaceViewport.FrozenLayers.Add(frozenLayer);
                layout2.Viewports.Add(paperSpaceViewport);

                // This viewport is a viewport showing a piece of model space in paper space.
                // The total scale factor will be Size.Y / ViewHeight.
                DxfViewport modelSpaceViewport = new DxfViewport();
                modelSpaceViewport.ViewHeight = 6d;
                modelSpaceViewport.ViewCenter = new Point2D(0d, 0d);
                modelSpaceViewport.Center = new Point3D(4d, 3d, 0d);
                modelSpaceViewport.Target = new Point3D(0d, 0d, 0d);
                modelSpaceViewport.Size = new Size2D(500d, 350d);
                modelSpaceViewport.PaperSpace = true;
                modelSpaceViewport.Visible = true;
                layout2.Viewports.Add(modelSpaceViewport);
            }

            DxfWriter.Write("Layout Example R15.dxf", model);
            DwgWriter.Write("Layout Example R15.dwg", model);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfViewport"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.Layouts"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.ModelLayout"/>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfPlotSettings">
            <summary>
            Represents plot settings (see also <see cref="P:WW.Cad.Model.DxfModel.PlotSettingsCollection"/>).
            Furthermore this class serves as a base class for <see cref="T:WW.Cad.Model.Objects.DxfLayout"/>
            </summary>
            <remarks>
            This object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15">release 15</see>.
            </remarks>
            <example>
            Below is an example of how to create plot settings.
            <code lang="cs">
using System;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class PlotSettingsExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            model.PlotSettingsCollection.Add(
                new DxfPlotSettings {
                    PageSetupName = "Plotsettings A4",
                    PlotPaperSize = new Size2D(210, 297),
                    PlotPaperUnits = PlotPaperUnits.Millimeters,
                    PaperSizeName = "ISO_A4_(210.00_x_297.00_MM)",
                    PlotConfigurationFile = "none_device",
                    ShadePlotCustomDpi = 300,
                    PlotType = PlotType.LastScreenDisplay,
                    CustomPrintScaleDenominator = 0.19488560276442321,
                    PaperImageOrigin = new Point2D(1.09977402772272, -1.01427984484845),
                    PlotLayoutFlags =
                        PlotLayoutFlags.UseStandardScale |
                        PlotLayoutFlags.PlotPlotStyles |
                        PlotLayoutFlags.PrintLineweights |
                        PlotLayoutFlags.DrawViewportsFirst |
                        PlotLayoutFlags.ModelType |
                        PlotLayoutFlags.UpdatePaper |
                        PlotLayoutFlags.Initializing,
                    ShadePlotResolution = ShadePlotResolution.Normal,
                    StandardScaleFactor = 5.1312153684784771,
                    UnprintableMarginBottom = 20,
                    UnprintableMarginLeft = 7.5,
                    UnprintableMarginRight = 7.5,
                    UnprintableMarginTop = 20
                }
            );

            DwgWriter.Write("PlotSettingsExample.dwg", model);
        }
    }
}
    </code>
            </example>
            <seealso cref="P:WW.Cad.Model.DxfModel.PlotSettingsCollection"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfLayout"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlotSettings.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlotSettings.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlotSettings.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified plot settings in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlotSettings.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlotSettings.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlotSettings.GetClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the class (creates one if not present).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PageSetupName">
            <summary>
            Gets or sets the page setup name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotConfigurationFile">
            <summary>
            Gets or sets the name of system printer or plot configuration file.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PaperSizeName">
            <summary>
            Gets or sets the paper size name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotViewName">
            <summary>
            Gets or sets the plot view name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.UnprintableMarginLeft">
            <summary>
            Gets the unprintable margin on left side of paper (in millimeters).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.UnprintableMarginRight">
            <summary>
            Gets the unprintable margin on right side of paper (in millimeters).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.UnprintableMarginBottom">
            <summary>
            Gets the unprintable margin on bottom side of paper (in millimeters).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.UnprintableMarginTop">
            <summary>
            Gets the unprintable margin on top side of paper (in millimeters).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotPaperSize">
            <summary>
            Gets or sets the paper size (in millimeters).
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotOrigin"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotOrigin">
            <summary>
            Gets or sets the plot origin (in millimeters).
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotPaperSize"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotWindowArea">
            <summary>
            Gets or sets the plot window area.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.CustomPrintScaleNumerator">
            <summary>
            Gets or sets the numerator of custom print scale: real world (paper) units.
            </summary>
            <remarks>
            The default value is 1.
            The unit of this number is determined by <see cref="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotPaperUnits">PlotPaperUnits</see>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Objects.DxfPlotSettings.CustomPrintScaleDenominator"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.CustomPrintScaleDenominator">
            <summary>
            Gets or sets the denominator of custom print scale: drawing units.
            </summary>
            <remarks>
            Default value is 1.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Objects.DxfPlotSettings.CustomPrintScaleNumerator"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotLayoutFlags">
            <summary>
            Gets or sets the plot layout flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotPaperUnits">
            <summary>
            Gets or sets the plot paper units.
            This specifies the units of the <see cref="P:WW.Cad.Model.Objects.DxfPlotSettings.CustomPrintScaleNumerator"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotRotation">
            <summary>
            Gets or sets the plot rotation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotType">
            <summary>
            Gets or sets the plot type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.CurrentStyleSheet">
            <summary>
            Gets or sets the current style sheet.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.StandardScaleType">
            <summary>
            Gets or sets the standard scale type.
            </summary>
            <remarks>
            <list type="table">
              <listheader>
                <term>value</term>
                <description>description</description>
              </listheader>
              <item>
                <term>0</term>
                <description>Scaled to fit</description>
              </item>
              <item>
                <term>1</term>
                <description>1/128"=1'</description>
              </item>
              <item>
                <term>2</term>
                <description>1/64"=1'</description>
              </item>
              <item>
                <term>3</term>
                <description>1/32"=1'</description>
              </item>
              <item>
                <term>4</term>
                <description>1/16"=1'</description>
              </item>
              <item>
                <term>5</term>
                <description>3/32"=1'</description>
              </item>
              <item>
                <term>6</term>
                <description>1/8"=1'</description>
              </item>
              <item>
                <term>7</term>
                <description>3/16"=1'</description>
              </item>
              <item>
                <term>8</term>
                <description>1/4"=1'</description>
              </item>
              <item>
                <term>9</term>
                <description>3/8"=1'</description>
              </item>
              <item>
                <term>10</term>
                <description>1/2"=1'</description>
              </item>
              <item>
                <term>11</term>
                <description>3/4"=1'</description>
              </item>
              <item>
                <term>12</term>
                <description>1"=1'</description>
              </item>
              <item>
                <term>13</term>
                <description>3"=1'</description>
              </item>
              <item>
                <term>14</term>
                <description>6"=1'</description>
              </item>
              <item>
                <term>15</term>
                <description>1'=1'</description>
              </item>
              <item>
                <term>16</term>
                <description>1:1</description>
              </item>
              <item>
                <term>17</term>
                <description>1:2</description>
              </item>
              <item>
                <term>18</term>
                <description>1:4</description>
              </item>
              <item>
                <term>19</term>
                <description>1:8</description>
              </item>
              <item>
                <term>20</term>
                <description>1:10</description>
              </item>
              <item>
                <term>21</term>
                <description>1:16</description>
              </item>
              <item>
                <term>22</term>
                <description>1:20</description>
              </item>
              <item>
                <term>23</term>
                <description>1:30</description>
              </item>
              <item>
                <term>24</term>
                <description>1:40</description>
              </item>
              <item>
                <term>25</term>
                <description>1:50</description>
              </item>
              <item>
                <term>26</term>
                <description>1:100</description>
              </item>
              <item>
                <term>27</term>
                <description>2:1</description>
              </item>
              <item>
                <term>28</term>
                <description>4:1</description>
              </item>
              <item>
                <term>29</term>
                <description>8:1</description>
              </item>
              <item>
                <term>30</term>
                <description>10:1</description>
              </item>
              <item>
                <term>31</term>
                <description>100:1</description>
              </item>
              <item>
                <term>32</term>
                <description>1000:1</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.ShadePlotMode">
            <summary>
            Gets or sets the shade plot mode.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.ShadePlotResolution">
            <summary>
            Gets or sets the shade plot resolution.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.ShadePlotCustomDpi">
            <summary>
            Gets or sets the ShadePlot custom DPI: Valid range: 100 to 32767.
            </summary>
            <remarks>
            Only applied when the <see cref="P:WW.Cad.Model.Objects.DxfPlotSettings.ShadePlotResolution">ShadePlot resolution level</see> is set to Custom.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.StandardScaleFactor">
            <summary>
            Gets or sets the standard scale factor.
            </summary>
            <remarks>
            Default value is 1.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.PaperImageOrigin">
            <summary>
            Gets or sets the paper image origin.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfPlotSettings.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfLayout"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfLayout"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the model as a wire frame using given draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.DrawFrame(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the frame around the layout to the given context.
            </summary>
            <param name="context">Draw context.</param>
            <param name="graphicsFactory">Graphics factory.</param>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the model as a wire frame using given draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.DrawFrame(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the frame around the layout to the given context.
            </summary>
            <param name="context">Draw context.</param>
            <param name="graphicsFactory">Graphics factory.</param>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.Draw(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the model as surfaces using given draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.DrawFrame(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the frame around the layout to the given context.
            </summary>
            <param name="context">Draw context.</param>
            <param name="graphicsFactory">Graphics factory.</param>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified layout in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.GetSortedEntities">
            <summary>
            Gets the sorted entities.
            If a <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/> is associated with the layout's block, then that is used
            to determine the entity order.
            </summary>
            <seealso cref="M:WW.Cad.Model.Objects.DxfLayout.GetUnsortedEntities"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.GetUnsortedEntities">
            <summary>
            Gets the unsorted entities.
            </summary>
            <remarks>
            This returns the entities in file order, regardless of a possibly associated 
            <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/>.
            </remarks>
            <returns>Unsorted entities.</returns>
            <seealso cref="M:WW.Cad.Model.Objects.DxfLayout.GetSortedEntities"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.GetPlotInfo(System.Boolean)">
            <summary>
            Gets the plot information which plots this layout as defined.
            </summary>
            <param name="invertY">
            If <c>true</c> the Y axis of the paper target is pointing downwards, with point (0,0) in the upper left corner,
            if <c>false</c> the Y axis of the paper target is pointing upwards, with point (0,0) in the lower left corner.
            </param>
            <returns>Layout plot information with millimeter paper units, or <c>null</c> if the settings of this layout don't define useful plotting (eg if no paper size is defined).</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.GetPlotInfo(System.Boolean,WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo)">
            <summary>
            Gets the plot information which plots this layout as defined.
            </summary>
            <param name="invertY">
            If <c>true</c> the Y axis of the paper target is pointing downwards, with point (0,0) in the upper left corner,
            if <c>false</c> the Y axis of the paper target is pointing upwards, with point (0,0) in the lower left corner.
            </param>
            <param name="layoutRenderInfo">Basic layout render informaion</param>
            <returns>Layout plot information with millimeter paper units, or <c>null</c> if the settings of this layout don't define useful plotting (eg if no paper size is defined).</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.GetPlotInfo(System.Double,System.Double,WW.Math.Geometry.Rectangle2D,System.Boolean,System.Boolean)">
            <summary>
            Gets the plot information for scaled plot to the given paper size.
            </summary>
            <param name="paperWidth">Width of the target paper in arbitrary units.</param>
            <param name="paperHeight">Height of the target paper in arbitrary units.</param>
            <param name="printArea">Printable area of the paper in arbitrary units.</param>
            <param name="autoRotate">
            If <c>true</c> the plot is automatically rotated in order to fit the paper depending on aspect ratio,
            if <c>false</c> the plot is not rotated but kept in its original orientation defined by this layout's
            <see cref="T:WW.Cad.Model.Objects.PlotRotation"/>.
            </param>
            <param name="invertY">
            If <c>true</c> the Y axis of the paper target is pointing downwards, with point (0,0) in the upper left corner,
            if <c>false</c> the Y axis of the paper target is pointing upwards, with point (0,0) in the lower left corner.
            </param>
            <returns>
            Layout plot information with the units defined by <paramref name="paperWidth"/>, <paramref name="paperHeight"/>
            and <paramref name="printArea"/> or <c>null</c> if the settings of this layout don't define useful plotting.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.PrePrepareForWrite">
            <summary>
            Called before PrepareForWrite.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.GetPaperViewportOrAny">
            <summary>
            FOr drawing the frame we need an entity.
            </summary>
            <returns>Viewport used for drawing the frame, possibly <c>null</c>.</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.GetEntitiesInDrawingOrder(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Get the entities in the order in which they are drawn.
            </summary>
            <remarks>
            The order may depend on the configuration's 
            <see cref="P:WW.Cad.Drawing.GraphicsConfig.UseSortEntsTables"/> setting.
            </remarks>
            <param name="config">draw configuration</param>
            <returns>entities of this layout in drawing order</returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.PaperSpace">
            <summary>
            Gets a value indicating whether this layout is a paper space layout.
            There is only one model space layout in a drawing.
            </summary>
            <seealso cref="P:WW.Cad.Model.DxfModel.Layouts"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.ModelLayout"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.Entities">
            <summary>
            Gets the entities for this layout.
            </summary>
            <remarks>
            <para>
            Paper space entities are part of a paper space layout.
            Model space entities are part of the <see cref="T:WW.Cad.Model.DxfModel"/> 
            (or the model space layout, these are linked by CadLib).
            </para>
            <para>
            CadLib automatically sets the <see cref="P:WW.Cad.Model.Entities.DxfEntity.PaperSpace"/> property 
            to the correct value depending on whether the layout is a model or paper space layout as 
            an entity is added to a layout.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.Name">
            <summary>
            Gets or sets the layout name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.Options">
            <summary>
            Gets or sets the layout options.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.TabOrder">
            <summary>
            Gets or sets the tab order.
            </summary>
            <remarks>
            This number is an ordinal indicating this layout’s ordering in
            the tab control that is attached to the AutoCAD drawing frame
            window. Note that the “Model” tab always appears as the first tab
            regardless of its tab order. 
            Thus the model tab always has tab order 0, and the paper space layouts have tab orders
            starting at 1.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.Limits">
            <summary>
            Gets or sets the limits rectangle of this layout.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.InsertionBasePoint">
            <summary>
            Gets or sets the insertion base point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.MinExtents">
            <summary>
            Gets or sets the minimum extents point.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.MaxExtents"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.MaxExtents">
            <summary>
            Gets or sets the maximum extents point.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.MinExtents"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.FramePolygon">
            <summary>
            Gets the frame polygon.
            </summary>
            <remarks>
            Layouts draw a frame around their extent.
            Depending on the settings the polygon returned here may not contain any points.
            The coordinates of the polygon are in layout space.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.Elevation">
            <summary>
            Gets or sets the elevation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.Ucs">
            <summary>
            Gets or sets the UCS.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.UcsOrthographicType">
            <summary>
            Gets or sets the orthographic type of the associated <see cref="P:WW.Cad.Model.Objects.DxfLayout.Ucs"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.LastActiveViewport">
            <summary>
            Gets or sets the viewport that was last active in this layout when the
            layout was current (can be either a <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> or a <see cref="T:WW.Cad.Model.Entities.DxfViewport"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.Viewports">
            <summary>
            Gets the viewports.
            Viewport with id 1 is the viewport that describes paper space.
            The other viewports are views on model space.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfViewport"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.OwnerBlock">
            <summary>
            Gets the owner block.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLayout.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfLayout.PlotInfo">
            <summary>
            Layout plot information.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfLayout.PlotInfo.Layout">
            <summary>
            The layout on which this plot information is based.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfLayout.PlotInfo.PaperSize">
            <summary>
            The paper size.
            </summary>
            <remarks>
            The unit depends on the creation of this info, but will be the same as the one used for <see cref="F:WW.Cad.Model.Objects.DxfLayout.PlotInfo.PrintableArea"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfLayout.PlotInfo.PrintableArea">
            <summary>
            The printable area of the paper.
            </summary>
            <remarks>
            This can be used as a clipping frame.
            The unit depends on the creation of this info, but will be the same as the one used for <see cref="F:WW.Cad.Model.Objects.DxfLayout.PlotInfo.PaperSize"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfLayout.PlotInfo.ToPaperTransform">
            <summary>
            The transformation which puts the layout to the paper.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfLayout.PlotInfo.Scaling">
            <summary>
            Overall scaling implied by <see cref="F:WW.Cad.Model.Objects.DxfLayout.PlotInfo.ToPaperTransform"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.PlotInfo.#ctor(WW.Cad.Model.Objects.DxfLayout,WW.Math.Size2D,WW.Math.Geometry.Rectangle2D,WW.Math.Matrix4D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfLayout.PlotInfo"/> class.
            </summary>
            <param name="layout">The basic layout.</param>
            <param name="paperSize">Size of the paper.</param>
            <param name="printableArea">The printable area.</param>
            <param name="toPaperTransform">To paper transform.</param>
            <param name="scaling">Overall scaling from model to paper.</param>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo">
            <summary>
            Basic layout render information.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo.LayoutViewport">
            <summary>
            The viewport in layout space to which the layout is rendered.
            </summary>
            <remarks>
            This viewport might be invalid!
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo.ModelToLayoutTransform">
            <summary>
            Transformation from model or paper space to layout space.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo.ModelToLayoutScaling">
            <summary>
            Scaling from model or paper space to layout space.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo.#ctor(WW.Math.Bounds2D,WW.Math.Matrix4D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo"/> class.
            </summary>
            <param name="layoutViewport">The layout viewport.</param>
            <param name="modelToLayoutTransform">The model to layout transform.</param>
            <param name="modelToLayoutScaling">The model to layout scaling.</param>
            
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo.#ctor(WW.Math.Bounds2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo"/> class.
            </summary>
            <param name="layoutViewport">The layout viewport.</param>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo.#ctor(WW.Cad.Model.IViewDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo"/> class.
            </summary>
            <param name="viewDescription">The view description.</param>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfLayout.BasicLayoutRenderInfo"/> class.
            </summary>
            <remarks>
            This will create an invalid viewport.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.LayoutOptions">
            <summary>
            Layout options.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfLayout"/>
        </member>
        <member name="F:WW.Cad.Model.Objects.LayoutOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.LayoutOptions.PaperSpaceLinetypeScaling">
            <summary>
            Flag controlling paper space linetype scaling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.LayoutOptions.LimitsChecking">
            <summary>
            Set flag for limits checking.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDictionaryVariable">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.DxfDictionary"/> variable.
            </summary>
            <remarks>
            The dictionary variable object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">release 14</see>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryVariable.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryVariable.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryVariable.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryVariable.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryVariable.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified dictionary variable in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryVariable.Value">
            <summary>
            Gets or sets the variable value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryVariable.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryVariable.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfColorCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Objects.DxfColor"/> elements.
            </summary>
            <remarks>
            Duplicate color book name/color name combinations may exist.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColorCollection.GetColor(System.String,System.String)">
            <summary>
            Gets the color that matches specified color book name and color name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfColorCollection.Item(WW.Cad.Model.Objects.DxfColor.Key)">
            <summary>
            Get the color for a given key.
            </summary>
            <param name="key">Color key.</param>
            <returns>Color for the <paramref name="key"/> or <c>null</c> if there is none.</returns>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfColor">
            <summary>
            Represents a named color from a color book.
            </summary>
            <remarks>
            Color book colors are supported from <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/> onwards.
            </remarks>
            <example>
            The example below demonstrates the use of the DxfColor class.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Math;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;

namespace WW.Cad.Test.Examples {
    public class DxfColorExample {
        public void ColorExample() {
            DxfModel model = new DxfModel();

            DxfColor color = new DxfColor(
                Color.CreateFromRgb(
                    217, 122, 120,
                    "PANTONE(R) Paints + Int.",
                    "PANTONE 16-1624 TPX"
                )
            );
            model.Colors.Add(color);

            DxfLine line = new DxfLine(new Point2D(0, 0), new Point2D(30, 15));
            line.DxfColor = color;
            model.Entities.Add(line);

            DxfWriter.Write("Color example.dxf", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.#ctor(WW.Cad.Model.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.#ctor(WW.Cad.Model.Objects.DxfColor)">
            <summary>
            Copy constructor.
            </summary>
            <param name="from">color to copy from</param>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.GetKey">
            <summary>
            Get a key useful for hashing.
            </summary>
            <returns>hash key</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            TODO: AcDbColor was introduced in R18, but R15 files can still contain a 
            AcDbColor (with just the color index).
            The R15 COLOR object is different and only contains a color index.
            See file E:\wout\doc\Cad\DWGSamples\Customers\GCMEX\Proyecto Lotificacion.dwg.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified color in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfColor.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfColor.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfColor.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfColor.Key">
            <summary>
            The color key.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.Key.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfColor.Key"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.Key.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfColor.Key.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfColor.Key.ColorBookName">
            <summary>
            Gets or sets the name of the color book.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfColor.Key.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableColumn2005">
            <summary>
            A table column for use in <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableColumn2005.Width">
            <summary>
            Gets or sets the column width.
            The default value is 2.5.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableAttributeCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Entities.DxfTableAttribute"/> elements.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfImage">
            <summary>
            Represents an image showing a <see cref="T:WW.Cad.Model.Objects.DxfImageDef"/>.
            </summary>
            <remarks>
            <para>
            An image inserts an image definition (<see cref="T:WW.Cad.Model.Objects.DxfImageDef"/>) at a specifiable <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.InsertionPoint">position</see>.
            To scale the image, scale properties <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis">XAxis</see> and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis">YAxis</see>.
            </para>
            <para>
            Set the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.BoundaryVertices">BoundaryVertices</see> to specify the image's visible portion (mandatory).
            </para>
            <para>
            This class was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/>
            </para>
            </remarks>
            <example>
            Below is an example of how to create an image definition and an image.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Cad.IO;
using WW.Math;

namespace WW.Cad.Examples {
    public class ImageWriteExample {
        public static void CreateModelWithImage() {
            DxfModel model = new DxfModel();

            DxfImageDef imageDef = new DxfImageDef(model);
            imageDef.Filename = "image.png";
            imageDef.Size = new Size2D(840d, 525d);
            imageDef.DefaultPixelSize = new Size2D(1d, 1d);
            imageDef.ImageIsLoaded = true;
            model.Images.Add(imageDef);

            DxfImage image = new DxfImage();
            image.ImageDef = imageDef;
            image.InsertionPoint = new Point3D(3d, 2d, 0d);
            image.ImageDisplayFlags = ImageDisplayFlags.ShowImage;
            image.SetDefaultBoundaryVertices();
            model.Entities.Add(image);

            DxfWriter.Write("Image Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Objects.DxfImageDef"/>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfRasterImage">
            <summary>
            Represents an image showing a <see cref="T:WW.Cad.Model.Objects.DxfImageDef"/>.
            </summary>
            <remarks>
            <para>
            An image inserts an image definition (<see cref="T:WW.Cad.Model.Objects.DxfImageDef"/>) at a specifiable <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.InsertionPoint">position</see>.
            To scale the image, scale properties <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis"/>.
            </para>
            <para>
            Set the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.BoundaryVertices">BoundaryVertices</see> to specify the image's visible portion (mandatory).
            </para>
            <para>
            This class was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/>
            </para>
            </remarks>
            <example>
            Below is an example of how to create an image definition and an image.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Cad.IO;
using WW.Math;

namespace WW.Cad.Examples {
    public class ImageWriteExample {
        public static void CreateModelWithImage() {
            DxfModel model = new DxfModel();

            DxfImageDef imageDef = new DxfImageDef(model);
            imageDef.Filename = "image.png";
            imageDef.Size = new Size2D(840d, 525d);
            imageDef.DefaultPixelSize = new Size2D(1d, 1d);
            imageDef.ImageIsLoaded = true;
            model.Images.Add(imageDef);

            DxfImage image = new DxfImage();
            image.ImageDef = imageDef;
            image.InsertionPoint = new Point3D(3d, 2d, 0d);
            image.ImageDisplayFlags = ImageDisplayFlags.ShowImage;
            image.SetDefaultBoundaryVertices();
            model.Entities.Add(image);

            DxfWriter.Write("Image Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Objects.DxfImageDef"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfRasterImage.PixelOffset">
            <summary>
            For some reason AutoCAD offsets pixel values by half a pixel.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfRasterImage"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.#ctor(WW.Cad.Model.Objects.DxfImageDef)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfRasterImage"/> class.
            </summary>
            <remarks>
            Initializes <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis"/>, <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.Size"/> based on the image definition's 
            <see cref="P:WW.Cad.Model.Objects.DxfImageDef.DefaultPixelSize"/> and <see cref="P:WW.Cad.Model.Objects.DxfImageDef.Size"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.SetImageDef(WW.Cad.Model.Objects.DxfImageDef,System.Boolean)">
            <summary>
            Sets the image definition and optionally updates the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis"/>
            using image definition's <see cref="P:WW.Cad.Model.Objects.DxfImageDef.DefaultPixelSize"/>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfRasterImage.ImageDef"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.SetDefaultBoundaryVertices">
            <summary>
            Sets the default boundary vertices to show the entire image rectangle.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfRasterImage.BoundaryVertices"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRasterImage.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified image using the specified clone context.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.InsertionPoint">
            <summary>
            Gets or sets the insertion point (corresponds to the bottom left corner of the image).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis">
            <summary>
            Gets or sets the image x-axis.
            The length represents the pixel size in the x-direction (use this to scale the image).
            </summary>
            <remarks>
            The x-axis is automatically set when the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.ImageDef"/> property is set.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis">
            <summary>
            Gets or sets the image y-axis.
            The length represents the pixel size in the y-direction (use this to scale the image).
            </summary>
            <remarks>
            The y-axis is automatically set when the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.ImageDef"/> property is set.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.Size">
            <summary>
            Gets or sets the image size in pixels.
            </summary>
            <remarks>
            The size is automatically set when the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.ImageDef"/> property is set.
            To scale the image, scale properties <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.ImageDef">
            <summary>
            Gets or sets the image.
            </summary>
            <remarks>
            <para>
            The image must be part of <see cref="P:WW.Cad.Model.DxfModel.Images"/>.
            </para>
            <para>
            Initializes <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis"/>, <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.Size"/> 
            based on the image definition's 
            <see cref="P:WW.Cad.Model.Objects.DxfImageDef.DefaultPixelSize"/> and <see cref="P:WW.Cad.Model.Objects.DxfImageDef.Size"/>.
            To not change the axes when setting the image definition, use method <see cref="M:WW.Cad.Model.Entities.DxfRasterImage.SetImageDef(WW.Cad.Model.Objects.DxfImageDef,System.Boolean)"/> and 
            pass <c>false</c> for parameter <c>updateAxes</c>.
            </para>
            </remarks>
            <seealso cref="M:WW.Cad.Model.Entities.DxfRasterImage.SetImageDef(WW.Cad.Model.Objects.DxfImageDef,System.Boolean)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.ImageDisplayFlags">
            <summary>
            Gets or sets the image display flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.ClippingEnabled">
            <summary>
            Gets or sets whether clipping is enabled (default is false).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.Brightness">
            <summary>
            Gets or sets the brightness (0-100, default is 50).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.Contrast">
            <summary>
            Gets or sets the contrast (0-100, default is 50).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.Fade">
            <summary>
            Gets or sets the fade value (0-100, default is 0).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.BoundaryVertices">
            <summary>
            Gets the boundary vertices of the visible portion of the image. 
            </summary>
            <remarks>
            <para>
            The boundary vertices are defined in image coordinates, the origin being the center of the top left pixel of the image.
            The x-axis points right and the y-axis points down.
            Use 2 boundary vertices to indicate the opposite corners of a rectangle boundary.
            Use more vertices to create a polygonal boundary.
            </para>
            <para>
            This property must be set, otherwise the image is not visible.
            Use method <see cref="M:WW.Cad.Model.Entities.DxfRasterImage.SetDefaultBoundaryVertices"/> to set the default boundary vertices
            that shows the entire image.
            </para>
            <para>
            However polygonal boundaries can specified, CadLib currently only renders rectangular images.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.ClipMode">
            <summary>
            Gets or sets the clip mode.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.ReferencedImageSize">
            <summary>
            Get the size of the referenced image.
            </summary>
            <remarks>
            The actual size reflects the real size of the referenced image
            if it could be loaded. Otherwise it will return the same as 
            <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.Size"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.ClipBoundary">
            <summary>
            Get the clip boundary clipped to the referenced image size.
            The return values are in image coordinates (origin at the bottom left of the image).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRasterImage.ClipBounds">
            <summary>
            Get the bounds of the clipping boundary, in image coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfImage.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfImage.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfImage.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.BlockStatusFlags">
            <summary>
            Represents the <see cref="P:WW.Cad.Model.Tables.DxfBlock.StatusFlags">status flags</see> for a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.BlockStatusFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.BlockStatusFlags.ExternalReferenceUnresolved">
            <summary>
            The external reference is unresolved.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.BlockStatusFlags.ExternalReferenceUnloaded">
            <summary>
            The external reference is unloaded.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.BlockStatusFlags.CorrectionNeeded">
            <summary>
            Correction is needed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.BlockStatusFlags.DrawReentered">
            <summary>
            Draw re-entered.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.BlockStatusFlags.ExternalReferenceFileNotFound">
            <summary>
            The external reference file is not found.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableColumn">
            <summary>
            A table column for use in <see cref="T:WW.Cad.Model.Entities.DxfTable"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableColumn.ScaleMe(System.Double,WW.Actions.CommandGroup)">
            <summary>
            Scales me.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableColumn.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableColumn.CopyFrom(WW.Cad.Model.Entities.DxfTableColumn,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents of specified object into this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableColumn.CustomData">
            <summary>
            Gets or sets the custom data integer.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableColumn.CustomDataCollection">
            <summary>
            Gets the custom data collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableColumn.CellStyleOverrides">
            <summary>
            Gets the cell style containing cell style overrides.
            </summary>
            <remarks>
            Using this property, cell style properties can be overridden to change from
            the cell style in the table style pointed to by <see cref="P:WW.Cad.Model.Entities.DxfTableColumn.CellStyle"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableColumn.CellStyle">
            <summary>
            Gets or sets the cell style, must be a cell style instance from
            the table's <see cref="P:WW.Cad.Model.Entities.DxfTable.TableStyle">table style</see>.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableColumn.Width">
            <summary>
            Gets or sets the column width.
            The default value is 2.5.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.ObjectCollectionResolver">
            <summary>
            This class adds each object to the right DxfModel collection.
            </summary>
            <remarks>
            Still need to update DxfReader/DwgReader to use this class instead of 
            letting those classes put each object into the right collection.
            The point is that some objects get the right name only when
            the related dictionary entry (name) is read.
            E.g. the TABLESTYLE name is not stored with the TABLESTYLE in DXF, but
            it's stored in the dictionary entry.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.ModelerGeometryMaterial">
            <summary>
            Represents materials for <see cref="T:WW.Cad.Model.Entities.DxfModelerGeometry"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ModelerGeometryMaterial.MaterialIdLow">
            <summary>
            Gets or sets the low material ID.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ModelerGeometryMaterial.MaterialIdHigh">
            <summary>
            Gets or sets the high material ID.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.ModelerGeometryMaterial.Material">
            <summary>
            Gets or sets the material.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfDynamicBlockProxyNode">
            <summary>
            Represents the dynamic block proxy node.
            </summary>
            <remarks>
            The dummy node of evaluation graph.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfDynamicBlockProxyNode.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfDynamicBlockProxyNode.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfDynamicBlockProxyNode.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfDynamicBlockProxyNode.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfDynamicBlockProxyNode.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter">
            <summary>
            Represents the dynamic block X and Y parameter.
            </summary>
            <remarks>
            Controls the distance in X and Y directions with some origin point.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.LabelOffsetX">
            <summary>
            Gets or sets the label offset. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.LabelTextX">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.DescriptionX">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.ParameterValueSetX">
            <summary>
            Gets or sets the parameter value in X.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.LabelOffsetY">
            <summary>
            Gets or sets the label offset. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.LabelTextY">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.DescriptionY">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.ParameterValueSetY">
            <summary>
            Gets or sets the parameter value in Y.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotateAction">
            <summary>
            Represents the dynamic block rotate action.
            </summary>
            <remarks>
            Action makes rotation. 
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotateAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotateAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotateAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotateAction.ActionConnection">
            <summary>
            Gets or sets the connections for rotate action.
            For example, link to DxfBlockRotationParameter AngleDelta parameter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotateAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotateAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameterPropertyInfo">
            <summary>
            Represents the dynamic block parameter property info.
            </summary>
            <remarks>
            Property info containes list of connection points.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameterPropertyInfo.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameterPropertyInfo.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameterPropertyInfo)">
            <summary>
            Copies all fields from specified object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParameterPropertyInfo.ConnectionPoints">
            <summary>
            Gets or sets the array of connection points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataColumn">
            <summary>
            Represents a data column inside a <see cref="T:WW.Cad.Model.Objects.DxfDataTable"/>.
            All of the cells in a data column are of the same <see cref="P:WW.Cad.Model.Objects.DxfDataColumn.CellType">cell type</see>.
            </summary>
            <remarks>
            Do not add cells to this collection directly,
            but instead set the <see cref="P:WW.Cad.Model.Objects.DxfDataTable.RowCount"/>.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Objects.DxfDataTable"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfDataCell"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataColumn"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataColumn.#ctor(WW.Cad.Model.Objects.DataCellType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataColumn"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataColumn.#ctor(WW.Cad.Model.Objects.DataCellType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDataColumn"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataColumn.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataColumn.CellType">
            <summary>
            Gets or sets the type of the cell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataColumn.Cells">
            <summary>
            Gets the cells.
            Do not add cells to this collection directly,
            but instead set the <see cref="P:WW.Cad.Model.Objects.DxfDataTable.RowCount"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DataCellType">
            <summary>
            Represents the cell type of a <see cref="T:WW.Cad.Model.Objects.DxfDataCell"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.Int32">
            <summary>
            Int32.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.Point3D">
            <summary>
            3D point.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.ObjectId">
            <summary>
            Reference to object.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.HardOwnerId">
            <summary>
            Hard owner reference to object.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.SoftOwnerId">
            <summary>
            Soft owner reference to object.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.HardPointerId">
            <summary>
            Hard pointer reference to object.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.SoftPointerId">
            <summary>
            Soft pointer reference to object.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.Bool">
            <summary>
            Bool.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DataCellType.Vector3D">
            <summary>
            3D vector.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.ValueType">
            <summary>
            A value type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.DataStore">
            <summary>
            Represents a temporary data store used during reading/writing to a DWG/DXF file.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.DataStore.Schemas">
            <summary>
            Gets the schemas.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.DataStore.SchemaUnknownProperties">
            <summary>
            Gets the schema unknown properties.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.DataStore.SchemaSearchDataList">
            <summary>
            Gets the schema search data list.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.DataStore.HandleToDataRecord">
            <summary>
            Gets the handle to data record (binary data) dictionary.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.DataStore.FileSerializer">
            <summary>
            A class for serializing a data store to a DWG/DXF file.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.DataStore.FileSerializer.WriteData(WW.Cad.IO.Dwg.ByteStream)">
            <summary>
            Writes the data, this will also add index entries to the data index during writing.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.DataStore.FileSerializer.WriteBinaryDataAsBlobs(WW.Cad.IO.Dwg.ByteStream,System.UInt64,System.IO.Stream)">
            <summary>
            Splits the specified binary data into blobs (pages), and returns
            a data blob entry reference containing references to those blobs.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DataStorage.DataStore.FileSerializer.WriteSchemaData(WW.Cad.IO.Dwg.ByteStream)">
            <summary>
            Writes the schema data, and updates the schema index while writing.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.DataStorage.DataStore.FileSerializer.FileSegmentWritten">
            <summary>
            Occurs when file segment is written.
            Useful for unit testing what is written exactly.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatTransform">
            <summary>
            SAT transform entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTransform.scaleFactor">
            <summary>The scale factor - in addition to transformation.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTransform.hasRotation">
            <summary>Properties of transformation. Don't affect the transformation.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTransform.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTransform.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatTransform.Transformation">
            <summary>
            Get the transformation.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatSpline">
            <summary>
            SAT spline entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSpline.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSpline.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSpline.CreateSurfacePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of surface primitive.
            </summary>
            <returns>newly created surface primitive</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatCone">
            <summary>
            SAT cone entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCone.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCone.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCone.CreateSurfacePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of surface primitive.
            </summary>
            <returns>newly created surface primitive</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCone.ConePrimitive">
            <summary>
            Get the underlying cone primitive.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLoftSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLoftSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLoftSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLoftSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatLoftSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryParametric">
            <summary>
            SAT body geometry class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryParametric.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryParametric.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryParametric.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryParametric.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatCurve">
            <summary>
            SAT base class for blend support curve primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatCurve.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatCurve.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatIntIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatIntIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatIntIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive">
            <summary>
            SAT ellipse primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.DefaultMinimalSegments">
            <summary>Default value for minimal segment number.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.ReadBasicDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the basic curve data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.WriteBasicDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the basic curve data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.CalculateSegmentNumber(System.Double,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Calculate the segments necessary for a whole ellipse by keeping a certain accuracy.
            </summary>
            <remarks>
            This uses a minimal segment number of <see cref="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.DefaultMinimalSegments"/>.</remarks>
            <param name="radius">length of major axis</param>
            <param name="accuracy">accuracy</param>
            <returns>number of segments (dividable by 4)</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.CalculateSegmentNumber(System.Double,WW.Cad.Model.Acis.Accuracy,System.Int32)">
            <summary>
            Calculate the segments necessary for a whole ellipse by keeping a certain accuracy.
            </summary>
            <remarks>
            This uses a minimal segment number of <see cref="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.DefaultMinimalSegments"/>.</remarks>
            <param name="radius">length of major axis</param>
            <param name="accuracy">accuracy</param>
            <param name="minimalSegments">minimal number of segments</param>
            <returns>number of segments (dividable by 4)</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.Position">
            <summary>
            Position of the center of the ellipse.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.Normal">
            <summary>
            Normal of the plane of the ellipse.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.MajorAxis">
            <summary>
            Major axis of the ellipse.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.AspectRatio">
            <summary>
            Aspect ratio of the ellipses minor to major axis.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatEllipsePrimitive.FromCanonicalTransformation">
            <summary>
            Get the transformation which transforms this curve from canonical form into
            model space.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.RBase.SatRBaseRenderAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.RBase.SatRBaseRenderAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.RBase.SatRBaseRenderAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.RBase.SatRBaseRenderAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealLoopGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealLoopGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealLoopGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealLoopGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.IO.Dwg.EntityType">
            <summary>
            Entity mode (entmode).  
            Generally, this indicates whether or not the subentity relative handle reference is present.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Dwg.EntityType.HasOwnerRelativeRef">
             <summary>
             The owner relative handle reference is present.
             Applies to the following:
             VERTEX, ATTRIB, and SEQEND.
             BLOCK, ENDBLK, and the defining entities in all
             block defs except *MODEL_SPACE and *PAPER_SPACE.
            
             Wout, remarks on Viewport: 
            
             In R13-14: Only values 1 and 2 are used.
             In R15: parent handle points to the owner block record,
               for layout1 value = 1.
             In R18: it's still used, but only for Layout1 it appears.
             </summary>
        </member>
        <member name="F:WW.Cad.IO.Dwg.EntityType.IsPaperSpaceEntity">
            <summary>
            PSPACE entity without a relative handle ref.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Dwg.EntityType.IsModelSpaceEntity">
            <summary>
            MSPACE entity without a relative handle ref.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR13.#ctor(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DwgWriter"/> class.
            </summary>
            <param name="stream">
            The stream to which the DWG file is written.
            The stream must support writing and seeking.
            </param>
            <param name="model">The model to write.</param>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR13.Write(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Writes the specified model to the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR13.Write">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding">
            <summary>
            Represents a class for Reed-Solomon encoding.
            </summary>
            <remarks>
            Encoding is systematic. Decoding uses the Berlekamp algorithm.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding.Encode(System.Byte[],System.Int32)">
            <summary>
            Returns the parity bytes.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding.Encode(System.Byte*,System.Byte*)">
            <summary>
            Returns the parity bytes.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding.GenerateGaloisFieldLuts">
            <summary>
            Generate lookup tables.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding.N">
            <summary>
            Gets the total block size.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding.K">
            <summary>
            Gets the data size.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Point2DN">
            <summary>
            2D point with normal.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DN.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DN.#ctor(WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DN.#ctor(WW.Math.Point2D,WW.Math.Vector2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Point2DN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DN.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DN.GetPoint(WW.Cad.Drawing.Point2DN,System.Double)">
            <summary>
            Gets the point between this point and the nextVertex at the given fraction (0-1).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DN.GetEndPoint(WW.Cad.Drawing.Point2DN,System.Double)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.IExtendedPoint2D`1.GetEndPoint(`0,System.Double)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DN.SetEndProperties(WW.Cad.Drawing.Point2DN,System.Double)">
            <summary>
            See <see cref="M:WW.Cad.Drawing.IExtendedPoint2D`1.SetEndProperties(`0,System.Double)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Point2DN.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2DN.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2DN.IsInterpolatedPoint">
            <summary>
            See <see cref="!:IExtendedPoint2D&lt;T&gt;.IsInterpolatedPoint"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Point2DN.Normal">
            <summary>
            Gets or sets the normal.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.OpenGL.IDrawable">
            <summary>
            Drawable interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.OpenGL.IDrawable.Draw">
            <summary>
            Draw the colored path onto given graphics object.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColoredPath">
            <summary>
            Path that can consist of one sub drawable.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredPath.#ctor(WW.Drawing.ArgbColor,WW.Cad.Drawing.GDI.IDrawable,System.Boolean,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredPath.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredPath.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredPath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ChangeToNonTextModeDrawable">
            <summary>
            This class changes the GDI draw context to non-text mode, but doesn't draw anything.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.GdiDrawUtil">
            <summary>
            Represents a collection of GDI drawing utility methods.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GdiDrawUtil.DrawEditHandle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Double)">
            <summary>
            Draws an edit handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GdiDrawUtil.DrawEditHandle(System.Drawing.Graphics,System.Drawing.Pen,WW.Math.Point2D,System.Double)">
            <summary>
            Draws an edit handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.GeometryUtil.IsInside(WW.Math.Point2D,WW.Math.Geometry.Polyline3D)">
            <summary>
            Determine if a point is inside of a (closed) polyline.
            </summary>
            <remarks>
            Uses the Jordan Curve theorem.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.GeometryUtil.IsInside(WW.Math.Point2D,WW.Math.Geometry.Polyline2D)">
            <summary>
            Determine if a point is inside of a (closed) polyline.
            </summary>
            <remarks>
            Uses the Jordan Curve theorem.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.GeometryUtil.IsInside(WW.Math.Point2D,System.Collections.Generic.IEnumerable{WW.Math.Geometry.Polyline2D})">
            <summary>
            Determine if a point is inside of a set of (closed) polylines.
            </summary>
            <remarks>
            Uses the Jordan Curve theorem.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.GeometryUtil.GetNrOfIntersections(WW.Math.Geometry.Ray2D,WW.Math.Geometry.Polyline2D)">
            <summary>
            Gets the number of intersections between a ray and a polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.GeometryUtil.IsInside(WW.Math.Point2D,WW.Math.Geometry.Polyline4D)">
            <summary>
            Determine if a point is inside of a (closed) polyline.
            </summary>
            <remarks>
            Uses the Jordan Curve theorem.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.GeometryUtil.IsInside(WW.Math.Point2D,System.Collections.Generic.IEnumerable{WW.Math.Geometry.Polyline4D})">
            <summary>
            Determine if a point is inside of a set of (closed) polylines.
            </summary>
            <remarks>
            Uses the Jordan Curve theorem.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.GeometryUtil.GetNrOfIntersections(WW.Math.Geometry.Ray2D,WW.Math.Geometry.Polyline4D)">
            <summary>
            Gets the number of intersections between a ray and a polyline.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.CadInteractionContext">
            <summary>
            Represents an interaction context for interacting with CAD drawings.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.CadInteractionContext.#ctor(WW.Math.Geometry.Rectangle2D,WW.Math.Matrix4D,System.Boolean,WW.Drawing.ArgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.CadInteractionContext"/> class.
            </summary>
            <param name="projectionTransform">The world coordinate system to display coordinate system transform.</param>
            <param name="uiElementSize">Size of the UI element.</param>
        </member>
        <member name="P:WW.Cad.Actions.CadInteractionContext.DefaultNonDiagonalLines">
            <summary>
            Gets or sets a value indicating whether lines are non diagonal by default when editing.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ZeroHandling">
            <summary>Represents supression of zeros in displaying decimal numbers.</summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroHandling.SuppressZeroFeetAndInches">
            <summary>Suppress zero feet and exactly zero inches.</summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroHandling.ShowZeroFeetAndInches">
            <summary>Show zero feet and exactly zero inches.</summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroHandling.ShowZeroFeetSuppressZeroInches">
            <summary>Show zero feet and suppress zero inches.</summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroHandling.SuppressZeroFeetShowZeroInches">
            <summary>Suppress zero feet and show zero inches.</summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroHandling.SuppressDecimalLeadingZeroes">
            <summary>
            Suppress leading zeroes in decimal numbers (e.g. 0.3200 is converted to 0.3200).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroHandling.SuppressDecimalTrailingZeroes">
            <summary>
            Suppress trailing zeroes in decimal numbers (e.g. 0.3200 is converted to 0.32).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ZeroHandling.SuppressDecimalLeadingAndTrailingZeroes">
            <summary>
            Suppress both leading and trailing zeroes in decimal numbers 
            (e.g. 0.3200 is converted to .32).
            </summary>
        </member>
        <member name="T:WW.Cad.Base.DxfStatus">
            <summary>
            Represents Cad status codes.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.Ok">
            <summary>
            Ok.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidName">
            <summary>
            E.g. DxfLine type may not contain spaces for DXF release 12.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.EmptyName">
            <summary>
            Empty name.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidSplineKnots">
            <summary>
            Invalid spline knots.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidSplineWeights">
            <summary>
            Invalid spline weights.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.UnsupportedDxfVersion">
            <summary>
            Dxf version unsupported.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidNoOfPointsForSolid">
            <summary>
            Solid has invalid number of points (must be four).
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidNameLength">
            <summary>
            E.g. DxfBlock name may not be longer than 31 characters until dxf version 14.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidVPortHeight">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> height must be greater than zero.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.HatchPolylineVerticesIdentical">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfHatch"/> boundary closed polyline may not have the same start and end point.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ImageNotEnoughBoundaryVertices">
            <summary>
            An image must have at least two boundary vertices.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.FaceIllegalVertexCount">
            <summary>
            A 3D face must have either three or four vertices.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.CellStyleNeedTextStyle">
            <summary>
            A cell style must have a text style.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.UnknownEntity">
            <summary>
            An unknown entity was encountered during reading
            of DXF or DWG file.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.DuplicateObjectHandle">
            <summary>
            There's a duplicate object handle.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.UnresolvedReference">
            <summary>
            The referenced object with a specific name or handle could not be found.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.DxfReadError">
            <summary>
            Represents a DXF reading error.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ShxFontNotFound">
            <summary>
            An SHX font could not be found.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.DimStyleAlreadySet">
            <summary>
            The dimenstion style is already set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.WrongType">
            <summary>
            Object has the wrong object type.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.MTextMustHaveBackgroundFillInfo">
            <summary>
            The MTEXT instance must have background fill information set because
            the background fill type is set to UseBackgroundFillColor.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.AuditRepairedDuplicateName">
            <summary>
            CadLib changed an object name because it was a duplicate.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.TableSharedBorderOverrideConflict">
            <summary>
            A shared border has border overrides in both adjacent cells.
            Border overrides may only be present in one of the adjacent cells.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidValue">
            <summary>
            An invalid value was encountered.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidXDataGroupCode">
            <summary>
            The extended data (<see cref="T:WW.Cad.Model.DxfExtendedData"/>) contains an invalid group code.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseByteError">
            <summary>
            The string could not be parsed into a byte.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseInt16Error">
            <summary>
            The string could not be parsed into a short.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseUInt16Error">
            <summary>
            The string could not be parsed into a ushort.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseInt32Error">
            <summary>
            The string could not be parsed into an int.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseUInt32Error">
            <summary>
            The string could not be parsed into a uint.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseInt64Error">
            <summary>
            The string could not be parsed into a long.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseUInt64Error">
            <summary>
            The string could not be parsed into a ulong.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseSingleError">
            <summary>
            The string could not be parsed into a float.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseDoubleError">
            <summary>
            The string could not be parsed into a double.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.ParseIntegralTypeErrorButCouldRoundFromFloatingPoint">
            <summary>
            The string could not be parsed into a an integral type, but could be parsed
            as a double and then rounded to the target integral type.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.BlockLayoutReferenceCorrupt">
            <summary>
            The reference from a block to a layout is corrupt
            (i.e. the block references a layout, but the layout does not reference that block).
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.TableMissesTableStyle">
            <summary>
            A <see cref="T:WW.Cad.Model.Entities.DxfTable"/> doesn't have a <see cref="P:WW.Cad.Model.Entities.DxfTable.TableStyle"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidDoubleSubstitutedWithZero">
            <summary>
            An invalid double value was read, it was substituted with zero.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidXRecordGroupCodeEncounteredValueDiscarded">
            <summary>
            An invalid XRECORD group code was encountered and the value is discarded.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidMeshFaceVertexIndex">
            <summary>
            In invalid mesh face vertex index is encountered, the mesh is discarded.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidGroupCode">
            <summary>
            An invalid group code is encountered in a DXF file.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidPolylineVertexEntityType">
            <summary>
            A polyline vertex has the wrong entity type, the polyline entity is discarded.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.InvalidXRecordGroupCodeEncounteredXRecordDiscarded">
            <summary>
            An invalid XRECORD group code was encountered and the entire XRECORD is discarded.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfStatus.RecursiveBlockInsertRemoved">
            <summary>
            Removed a recursive block insert.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfBlock">
            <summary>
            Block is a container of <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> objects.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> entity to add a reference to a block in a drawing.
            </para>
            <para>
            A block and its child entities are neither in <see cref="P:WW.Cad.Model.Entities.DxfEntity.PaperSpace">paper space</see>
            or model space. A block can be used in both spaces.
            When an <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> references a block, and the insert is in paper space, 
            the block and its entities are in paper space in the context of that block.
            </para>
            <para>
            The drawing order of a block may differ from the order of the <see cref="P:WW.Cad.Model.Tables.DxfBlock.Entities"/>
            when a <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/> is associated with the block.
            </para>
            </remarks>
            <example>
            An example of how to create and write a DXF file containing inserts referencing a block.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class InsertExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);

            // Create block.
            DxfBlock block = new DxfBlock("TEST_BLOCK");
            model.Blocks.Add(block);
            block.Entities.Add(new DxfCircle(EntityColors.Blue, Point3D.Zero, 2d));
            block.Entities.Add(new DxfLine(EntityColors.Red, Point3D.Zero, new Point3D(-1, 2, 1)));
            block.Entities.Add(new DxfLine(EntityColors.Green, Point3D.Zero, new Point3D(2, 0, 1)));

            // Insert block at 3 positions.
            model.Entities.Add(new DxfInsert(block, new Point3D(1, 0, 0)));
            model.Entities.Add(new DxfInsert(block, new Point3D(3, 1, 0)));
            model.Entities.Add(new DxfInsert(block, new Point3D(2, -3, 0)));

            DxfWriter.Write("Insert Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfInsert"/>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfBlock.BlockNameModelSpace">
            <summary>Name of the model space block.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfBlock.BlockNamePaperSpace">
            <summary>Name of the paper space block.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfBlock.BlockNamePaperSpace0">
            <summary>Name of the paper space 0 block.</summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> class.
            </summary>
            <param name="name">The block name.</param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.SetBasePoint(WW.Math.Vector3D)">
            <summary>
            Internally used method allowing to set the base point during read regardless whether the block is an XREF or not.
            </summary>
            <param name="point">New base point.</param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.RegisterClone(WW.Cad.Model.CloneContext,WW.Cad.Model.IGraphCloneable)">
            <summary>
            Registers the clone in the specified clone context.
            This is a helper method that is called by <see cref="M:WW.Cad.Model.Tables.DxfBlock.Clone(WW.Cad.Model.CloneContext)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified block record in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.LoadExternalReference(WW.Cad.Model.Tables.DxfBlock.GetExternalReferenceDelegate)">
            <summary>
            Loads the external reference if <see cref="P:WW.Cad.Model.Tables.DxfBlock.IsExternalReference"/> is <c>true</c> and
            <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/> has a value.
            The loaded model is added to <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>.
            </summary>
            <param name="resolveExternalReference">The delegate to resolve the external reference.</param>
            <returns>
            Returns <c>true</c> if the reference could be loaded or was loaded already.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.LoadExternalReference(System.String)">
            <summary>
            Loads the external reference if <see cref="P:WW.Cad.Model.Tables.DxfBlock.IsExternalReference"/> is <c>true</c> and
            <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/> has a value. 
            The loaded model is added to <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>.
            </summary>
            <returns>
            Returns <c>true</c> if the reference could be loaded or was loaded already.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the block.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.GetAttributeDefinitions">
            <summary>
            Get the attribute definitions that are defined in this block.
            </summary>
            <returns>Attribute definitions.</returns>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.GetAttributeDefinition(System.String)">
            <summary>
            Get an attribute definition by its tag name.
            </summary>
            <param name="tag">The tag name.</param>
            <returns>The first attribute definition with the given tag name, or <c>null</c> if no matching attribute definition was found.</returns>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.GetEntitiesInDrawingOrder(System.Boolean)">
            <summary>
            Get the entities of this block in drawing order.
            </summary>
            <param name="useSortEntsTable">
            if <c>true</c> entities may be reordered by a possibly associated <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/> associated to this 
            block. If <c>false</c> or no <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/> is associated with this block the entities are drawn in 
            their natural order defined by the order of the <see cref="P:WW.Cad.Model.Tables.DxfBlock.Entities"/> list.
            </param>
            <returns>Entities in drawing order.</returns>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.SetName(System.String)">
            <summary>
            Some DWG files contain blocks without a name.
            See e.g. E:\wout\doc\Cad\DWGSamples\Customers\Grazer\Aconex\AB M10.dwg.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.Repair(WW.Cad.Model.DxfModelRepairer)">
            <summary>
            Attempts to repair this object if is invalid and if it's possible to repair it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.RegisterEntity(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Sets the entity owner to this block, unless this block is a special block associated to a layout.
            In that case control is handed over to the layout.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlock.DrawInternal(WW.Cad.Model.Entities.DxfInsert.IDrawHandler,System.Boolean)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.BasePoint">
            <summary>
            Gets or sets the base point.
            </summary>
            <remarks>
            <para>
            The base point acts as the origin of the block, so all the block's entity coordinates are
            displaced with minus the base point.
            </para>
            <para>
            If this block defines an external reference the base point is taken from the
            <see cref="P:WW.Cad.Model.DxfHeader.InsertionBase"/> of the referenced file, and no longer changeable.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.BaseTransformation">
            <summary>
            Get the transformation defined by the <see cref="P:WW.Cad.Model.Tables.DxfBlock.BasePoint"/>.
            </summary>
            <remarks>
            When inserting the entities of this block you'll have to multiply the transformation 
            given by the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> entity inserting this block with the transformation
            returned by this property (in this order) to get the complete transformation which is applied
            to the <see cref="P:WW.Cad.Model.Tables.DxfBlock.Entities"/> of this block.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.Entities">
            <summary>
            Gets the entities.
            </summary>
            <remarks>
            This returns the entities in file order. 
            See <see cref="M:WW.Cad.Model.Tables.DxfBlock.GetEntitiesInDrawingOrder(System.Boolean)"/> to get the entities in a possibly different order
            defined by a <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/> associated with this block.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.Name">
            <summary>
            Gets the name. A block is referenced by entities by its name.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the DXF file by method <see cref="M:WW.Cad.Model.Tables.DxfBlock.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">thrown when setting null value.</exception>
            <exception cref="T:System.ArgumentException">thrown when setting empty string value.</exception>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.Description">
            <summary>
            Gets the block description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference">
            <summary>
            Gets or sets the external reference DWG file name (without extension).
            </summary>
            <remarks>
            <para>
            Only DWG files can be referenced.
            </para>
            <para>
            This property is only used during drawing when flag <see cref="P:WW.Cad.Model.Tables.DxfBlock.IsExternalReference"/> is set
            to <c>true</c>.
            The external reference must be loaded explicitly, using method
            <see cref="M:WW.Cad.Model.Tables.DxfBlock.LoadExternalReference(WW.Cad.Model.Tables.DxfBlock.GetExternalReferenceDelegate)"/> or
            <see cref="M:WW.Cad.Model.DxfModel.LoadExternalReferences(System.String)"/> for all blocks in the model.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.IsExternalReference"/>
            <seealso cref="M:WW.Cad.Model.Tables.DxfBlock.LoadExternalReference(WW.Cad.Model.Tables.DxfBlock.GetExternalReferenceDelegate)"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.LoadExternalReferences(System.String)"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalModel"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.ExternalModel">
            <summary>
            Gets the external model that is specified by <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>.
            This property returns <c>null</c> if the references have not been loaded yet or the reference could not be found.
            Call <see cref="M:WW.Cad.Model.Tables.DxfBlock.LoadExternalReference(WW.Cad.Model.Tables.DxfBlock.GetExternalReferenceDelegate)"/> or
            <see cref="M:WW.Cad.Model.DxfModel.LoadExternalReferences(System.String)"/> to load the external reference(s).
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.LoadExternalReferences(System.String)"/>
            <seealso cref="M:WW.Cad.Model.Tables.DxfBlock.LoadExternalReference(WW.Cad.Model.Tables.DxfBlock.GetExternalReferenceDelegate)"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.BlockBegin">
            <summary>
            Gets or sets the referenced <see cref="T:WW.Cad.Model.Tables.DxfBlock">block</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.Layout">
            <summary>
            Gets or sets the associated layout.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.Flags">
            <summary>
            Gets or sets the block flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.StatusFlags">
            <summary>
            Gets or sets the status flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsAnonymous">
            <summary>
            Gets or sets a value indicating whether this block is anonymous.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsExternalReference">
            <summary>
            Gets or sets a value indicating whether this block is an external reference (also named xref or cross ref).
            </summary>
            <remarks>
            The referenced DWG file is defined by property <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>
            <seealso cref="M:WW.Cad.Model.Tables.DxfBlock.LoadExternalReference(WW.Cad.Model.Tables.DxfBlock.GetExternalReferenceDelegate)"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.LoadExternalReferences(System.String)"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsXRefOverlay">
            <summary>
            Gets or sets a value indicating whether this block is a cross reference overlay.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this block is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this block is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this block is a referenced external reference.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsExternalReferenceUnresolved">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/> is unresolved.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsExternalReferenceUnloaded">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/> is unloaded.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsExternalReferenceFileNotFound">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/> file is not found.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.SortEntsTable">
            <summary>
            Get/set the <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/> associated with this block.
            </summary>
            <remarks>
            If no block is associated, <c>null</c> is return. On setting,
            previously assciated tables are removed. If set to <c>null</c>,
            entity sorting for this block is disabled.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsReallyAnonymous">
            <summary>
            If the block starts with a * then it's anonymous.
            Apparently not always the IsAnonymous flag is set, 
            e.g. resolved external references can also be anonymous.
            In normal blocks the * character is illegal.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfBlock.IsAnnotationBlock">
            <summary>
            Gets a value indicating whether this instance is an annotation block.
            Entities with annotation scales are exported to several anonymous blocks/layers to 
            pre AutoCAD 2008 files so they can be displayed in older AutoCAD versions.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfBlock.GetExternalReferenceDelegate">
            <summary>
            Gets the referenced model for the specified block.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.AttributeDefinitionExtractor">
            <summary>
            Entity visitor used to extract only attribute definitions.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.AttributeDefinitionExtractor.Visit(WW.Cad.Model.Entities.DxfAttributeDefinition)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.AttributeDefinitionExtractor.AttributeDefinitions">
            <summary>
            Get the attribute definitions.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.AttributeDefinitionByTagExtractor">
            <summary>
            Entity visitor used to extract an attribute definition by its tag.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.AttributeDefinitionByTagExtractor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.AttributeDefinitionByTagExtractor"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:WW.Cad.Model.Tables.AttributeDefinitionByTagExtractor.Visit(WW.Cad.Model.Entities.DxfAttributeDefinition)">
            <summary>
            Visits the specified entity.
            See the <see cref="T:WW.Cad.Model.Entities.IEntityVisitor"/> for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.AttributeDefinitionByTagExtractor.GetAttributeDefinition(System.String,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity})">
            <summary>
            Gets an attribute definition by its tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="entities">The entities of the block.</param>
            <returns>First attribute definiton with the given tag, or <c>null</c> if none was found.</returns>
        </member>
        <member name="P:WW.Cad.Model.Tables.AttributeDefinitionByTagExtractor.AttributeDefinition">
            <summary>
            Gets the found attribute definition.
            </summary>
            <value>The attribute definition, or <c>null</c> if none was found.</value>
        </member>
        <member name="T:WW.Cad.Base.LogMessage">
            <summary>
            Log message.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.LogMessage.#ctor(System.String,WW.Cad.Base.Severity)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.LogMessage.ToString">
            <summary>
            To string conversion.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.LogMessage.DateTime">
            <summary>
            Gets the log message date time.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.LogMessage.Message">
            <summary>
            Gets the log message string.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.LogMessage.Severity">
            <summary>
            Gets the log message severity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ShadeEdge">
            <summary>
            Determines how edges are shaded.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadeEdge.FacesShadedEdgesNotHighlighted">
            <summary>
            Faces shaded, edges not highlighted.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadeEdge.FacesShadedEdgesHighlightedInBlack">
            <summary>
            Faces shaded, edges highlighted in black.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadeEdge.FacesNotFilledEdgesInEntityColor">
            <summary>
            Faces not filled, edges in entity color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadeEdge.FacesInEntityColorEdgesInBlack">
            <summary>
            Faces in entity color, edges in black.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDictionary">
            <summary>
            Represents a dictionary of name value pairs.
            </summary>
            <remarks>
            <para>
            The name value pairs are stored in property <see cref="P:WW.Cad.Model.Objects.DxfDictionary.Entries"/>.
            </para>
            <para>
            The dictionary object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionary"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionary"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified dictionary in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionary.GetValueByName(System.String)">
            <summary>
            Get the value of the first matching entry with a given name.
            </summary>
            <param name="name">Entry name to look for.</param>
            <returns>Vlue of first matching entry or <c>null</c> if there was no match.</returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionary.HardOwner">
            <summary>
            Gets or sets whether elements of this dictionary are
            to be treated as hard-owned.
            </summary>
            <remarks>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15">release 15</see>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionary.DuplicateRecordCloning">
            <summary>
            Gets or sets the duplicate record cloning.
            </summary>
            <remarks>
            <para>
            Default value is 
            <see cref="F:WW.Cad.Model.Objects.DuplicateRecordCloning.KeepExisting">DuplicateRecordCloning.KeepExisting</see>.
            </para>
            <para>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15">release 15</see>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionary.Entries">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionary.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionary.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DuplicateRecordCloning">
            <summary>
            Duplicate record cloning flag (determines how to merge duplicate 
            <see cref="T:WW.Cad.Model.Objects.DxfDictionary"/> entries).
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfDictionary"/>
        </member>
        <member name="F:WW.Cad.Model.Objects.DuplicateRecordCloning.NotApplicable">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DuplicateRecordCloning.KeepExisting">
            <summary>
            Keep existing.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DuplicateRecordCloning.UseClone">
            <summary>
            Use clone.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DuplicateRecordCloning.XRefDollarName">
            <summary>
            &lt;xref&gt;$0$&lt;name&gt;
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DuplicateRecordCloning.DollarName">
            <summary>
            $0$&lt;name&gt;
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DuplicateRecordCloning.UnmangleName">
            <summary>
            Unmangle name.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.TransparencyType">
            <summary>
            Represents the transparency type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.TransparencyType.ByLayer">
            <summary>
            By layer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.TransparencyType.ByBlock">
            <summary>
            By block.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.TransparencyType.ByValue">
            <summary>
            By value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.ShxDxfFont">
            <summary>
            A DXF font based on a SHX shape file.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.ShxDxfFont.#ctor(WW.Cad.Model.Text.ShxFontTextMetrics,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="textMetrics">metrics on which this font is based</param>
            <param name="vertical">vertical output?</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ShxDxfFont.GetText(System.String,WW.Drawing.ArgbColor,System.Int16,System.Boolean)">
            <summary>
            Get the shape for a given character.
            </summary>
            <param name="text">character</param>
            <param name="color">color of the text</param>
            <param name="lineWeight">The line weight.</param>
            <param name="vertical">Is the text vertical?</param>
            <returns>the graphics path for a given character</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.ShxDxfFont.IsDefinedCharacter(System.Char)">
            <summary>
            Is this character defined in the font?
            </summary>
            <param name="ch">character</param>
            <returns><c>true</c> if this font contains the character</returns>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxDxfFont.ShxFile">
            <summary>
            Get the underlying SHX file.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxDxfFont.Filled">
            <summary>
            Are the shapes of this font drawn filled?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxDxfFont.Metrics">
            <summary>
            Get the text metrics defined by this font.
            </summary>
            <value></value>
            <remarks>The metrics returned includes the transformation defined by <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxDxfFont.SystemFont">
            <summary>
            Get the system font which is the base of this font.
            In case of an SHX font which has no underlying system font, this may return <c>null</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfLinkedTableData">
            <summary>
            Represents linked table data. For internal use only.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedTableData.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedTableData.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents from specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedTableData.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedTableData.AddRow(WW.Cad.Model.Entities.DxfTableRow)">
            <summary>
            Add a row without triggering row initialization.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfLinkedTableData.AddColumn(WW.Cad.Model.Entities.DxfTableColumn)">
            <summary>
            Add a column without triggering column initialization.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedTableData.Rows">
            <summary>
            Gets the rows.
            </summary>
            <remarks>
            By default when adding rows, the first row's <see cref="P:WW.Cad.Model.Entities.DxfTableRow.CellStyle"/> gets assigned the 
            <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.TitleCellStyle"/>,
            the second row gets assigned <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.HeaderCellStyle"/> and
            subsequence rows get assigned the <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.DataCellStyle"/>.
            The row/cell/cell content cell style instance may be changed, but must be present in <see cref="P:WW.Cad.Model.Objects.DxfTableStyle.CellStyles"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedTableData.RowCount">
            <summary>
            Gets or sets the row count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedTableData.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedTableData.ColumnCount">
            <summary>
            Gets or sets the column count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedTableData.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfLinkedTableData.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.TextHorizontalAlignment">
            <summary>
            Horizontal alignment for text.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Left">
            <summary>
            Aligned left.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Center">
            <summary>
            Aligned to center.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Right">
            <summary>
            Aligned right.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Aligned">
            <summary>
            Like <see cref="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Fit"/> but scale the vertical size with the same factor.
            Applicable if <see cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/> is 0 (baseline).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Middle">
            <summary>
            Aligned to center of bounding box of text (also vertically).
            Applicable if <see cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/> is 0 (baseline).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextHorizontalAlignment.Fit">
            <summary>
            Fit width.
            Applicable if <see cref="T:WW.Cad.Model.Entities.TextVerticalAlignment"/> is 0 (baseline).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.IVertex2DCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.IVertex2D"/> collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.IVertex2DCollection.GetIVertex2D(System.Int32)">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.IVertex2D"/> object at the specified index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.IVertex2DCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.TableCellStateFlags">
            <summary>
            Represents the state flags of a <see cref="T:WW.Cad.Model.Entities.DxfTableCell">table cell</see>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.ContentLocked">
            <summary>
            Content is locked.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.ContentReadOnly">
            <summary>
            Content is read only.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.Linked">
            <summary>
            Linked.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.ContentModifiedAfterUpdate">
            <summary>
            Content was modifed after update.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.FormatLocked">
            <summary>
            Format is locked.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.FormatReadOnly">
            <summary>
            Format is readonly.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.FormatModifiedAfterUpdate">
            <summary>
            Format was modified after update.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellStateFlags.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.CloneContext">
            <summary>
            Represents a clone context that facilitates
            making clones of object graphs.
            </summary>
            <remarks>
            <para>
            The clone context enables making a clone of multiple objects
            and fixing the object references after all objects are cloned.
            To resolve these references, call method <see cref="M:WW.Cad.Model.CloneContext.ResolveReferences"/>
            after all objects have been cloned.
            E.g. e hatch entity may reference a circle entity as its boundary.
            After cloning both hatch and circle entities, this method will restore
            these references in the cloned objects.
            When cloning multiple entities from a source <see cref="T:WW.Cad.Model.DxfModel"/> to a target <see cref="T:WW.Cad.Model.DxfModel"/>,
            only one clone context instance needs to be created, with the target model as parameter. See also
            the example below.
            </para>
            <para>
            The cloning of an entity (or other object) may result in cloning a referenced entity indirectly.
            These are gathered in <see cref="P:WW.Cad.Model.CloneContext.IndirectlyClonedObjects"/>. The caller should add
            these indirectly cloned entities to the appropriate entity collection.
            </para>
            <para>
            Cloning to the same target model as the source model is allowed.
            In this case when cloning an object, any objects this object is referencing are only
            cloned if these objects are owned.
            E.g. when cloning an entity, its line type, and layer will not be cloned when cloning within the same model
            as the line type and layer are not owned by the entity, only referenced.
            On the other hand an entity's extension dictionary is owned by the entity, and will be cloned when cloning within the same model.
            </para>
            </remarks>
            <seealso cref="M:WW.Cad.Model.CloneContext.ResolveReferences"/>
            <example>
            The example below shows how to clone entities from one <see cref="T:WW.Cad.Model.DxfModel"/> to another.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    // This class demonstrates how to clone entities from a source DxfModel to a target DxfModel.
    public class CloneContextExample {
        public static void DemonstrateEntityCloning() {
            DxfModel sourceModel = new DxfModel();
            DxfLineType lineType = new DxfLineType("DASH_DOT", 1d, -0.2d, 0d, -0.2d);
            sourceModel.LineTypes.Add(lineType);

            DxfCircle circle = new DxfCircle(Point2D.Zero, 5d);
            circle.LineType = lineType;
            sourceModel.Entities.Add(circle);

            DxfLine line = new DxfLine(Point2D.Zero, new Point2D(5d, 0d));
            line.LineType = lineType;
            sourceModel.Entities.Add(line);

            DxfModel targetModel = new DxfModel();

            // The ReferenceResolutionType.CloneMissing will result in the DASH_DOT line type created
            // above to also be cloned indirectly as a result of cloning the entities.
            CloneContext cloneContext = new CloneContext(sourceModel, targetModel, ReferenceResolutionType.CloneMissing);

            foreach(DxfEntity entity in sourceModel.Entities) {
                DxfEntity clonedEntity = (DxfEntity)entity.Clone(cloneContext);
                targetModel.Entities.Add(clonedEntity);
            }

            cloneContext.ResolveReferences();

            DxfWriter.Write("clone_source.dxf", sourceModel);
            DxfWriter.Write("clone_target.dxf", targetModel);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.CloneContext.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Model.DxfModel,WW.Cad.Model.ReferenceResolutionType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.CloneContext"/> class.
            </summary>
            <param name="sourceModel">The source model.</param>
            <param name="targetModel">
            The target model. 
            If the target model is the same as the source model, property <see cref="!:CloneOwnedReferencesOnly"/> is set to <c>true</c>.
            </param>
            <param name="referenceResolutionType">How to handle undefined references</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <remarks>
            The target block is set to the model's model space layout block.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.CloneContext.GetExistingClone(WW.Cad.Model.IGraphCloneable)">
            <summary>
            Gets the existing clone for specified source object.
            This method tries to find the clone in the <see cref="P:WW.Cad.Model.CloneContext.SourceToClonedObject"/> dictionary.
            </summary>
            <param name="sourceObject">object which clone is looked for</param>
            <returns>the clone or <c>null</c> if no clone is found 
            or the <paramref name="sourceObject"/> is <c>null</c></returns>
        </member>
        <member name="M:WW.Cad.Model.CloneContext.Clone(WW.Cad.Model.IGraphCloneable)">
            <summary>
            Clones the specified source object.
            Returns <c>null</c> when the source object is <c>null</c>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.CloneContext.CloneTableRecord(WW.Cad.Model.Tables.ITableRecord)">
            <summary>
            Clones the specified table record.
            </summary>
            <remarks>
            Will try to use the target model's table record with the same name if exists, otherwise
            will clone the table record and add it to the target model.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.CloneContext.RegisterClone(WW.Cad.Model.IGraphCloneable,WW.Cad.Model.IGraphCloneable)">
            <summary>
            Registers the specified source object and clone.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.CloneContext.CreateNew">
            <summary>
            Creates a new clone context based on this clone context's target model and
            reference resolution type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.CloneContext.ResolveReferences">
            <summary>
            Resolves references for all cloned objects if needed.
            E.g. e hatch entity may reference a circle entity as its boundary.
            After cloning both hatch and circle entities, this method will restore
            these references in the cloned objects.
            If e.g. only the hatch was cloned, the relation will not be restored.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.SourceToClonedObject">
            <summary>
            Gets the source to cloned object dictionary.
            </summary>
            <remarks>
            This dictionary is used to be able to resolve object references
            after all objects are cloned.
            </remarks>
            <seealso cref="M:WW.Cad.Model.CloneContext.ResolveReferences"/>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.SourceModel">
            <summary>
            Gets the source model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.TargetModel">
            <summary>
            Gets the target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.ReferenceResolutionType">
            <summary>
            Gets the type of the reference resolution.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.CloneBuilders">
            <summary>
            Gets the clone builders.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.AllowDuplicateNames">
            <summary>
            Gets or sets a value indicating whether duplicate names are allowed when cloning.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            E.g. duplicate <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> names are allowed, but the user may not intend this
            to happen.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.RenameClashingBlocks">
            <summary>
            Gets or sets whether to rename a block when a block with that name already exists in the target drawing.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            When copying a user-defined block from one model to another and there is already 
            a block with the same name, what is about to happen? If this property is <c>true</c>,
            the block is renamed and copied, if it is <c>false</c> than the block reference 
            of the already existing block with the same name is taken.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.CloneHeader">
            <summary>
            Gets or sets a value indicating whether to clone the header.
            Only relevant when cloning a whole model.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.IndirectlyClonedObjects">
            <summary>
            Gets the indirectly cloned objects that have not yet been added to the target model.
            </summary>
            <remarks>
            Some objects are cloned indirectly, e.g. a <see cref="T:WW.Cad.Model.Entities.DxfLeader"/> optionally has 
            an associated annotiation (<see cref="P:WW.Cad.Model.Entities.DxfLeader.AssociatedAnnotation"/>), which gets cloned too,
            but which is not added automatically to any target entity collection.
            The caller that makes the clones should add these indirectly cloned entities to the appropriate
            entity collection (this could be the model entities, layout entities or block entities).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.AddDefaultReactorToDictionaryEntries">
            <summary>
            Gets or sets a value indicating whether to add default a reactor to cloned dictionary entries.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.CloneContext.CloneExact">
            <summary>
            Gets or sets a value indicating whether an exact copy has to be made (including handles etc).
            Only use this when copying a model exactly where the target model should be 
            an identical copy of the source model.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.ITableRecordVisitor">
            <summary>
            Represents a visitor for table records.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfAppId)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfBlock)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfLayer)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfTextStyle)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfUcs)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfView)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfViewportEntityHeader)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.ITableRecordVisitor.Visit(WW.Cad.Model.Tables.DxfVPort)">
            <summary>
            Visits the specified value.
            See the <see cref="T:WW.Cad.Model.Tables.ITableRecordVisitor"/> interface for more details.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.LineBreakInfo">
            <summary>
            Unicode line break information.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.LineBreakInfo.FileName">
            <summary>
            Filename of data file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.LineBreakInfo.Singleton">
            <summary>
            The singleton via which we access the line break info.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.LineBreakInfo.Head">
            <summary>
            Binary magic number for the head of the ata file.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.LineBreakInfo.#ctor">
            <summary>
            Don't let this get created.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.LineBreakInfo.Load(System.IO.Stream)">
            <summary>
            Load the information from a binary stream.
            </summary>
            <param name="stream">Stream to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Text.LineBreakInfo.ReadChar16(System.IO.BinaryReader)">
            <summary>
            Read a 16bit character value in big endian order.
            </summary>
            <param name="r">Binary iput stream.</param>
            <returns>Character.</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.LineBreakInfo.ReadUInt32(System.IO.BinaryReader)">
            <summary>
            Read a 32bit unsigned int in big endian order.
            </summary>
            <param name="r">Binaray input stream.</param>
            <returns>Unsigned int.</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.LineBreakInfo.GetLineBreakType(System.UInt32)">
            <summary>
            Get the line break type for a given Unicode 32bit character.
            </summary>
            <param name="character">The character.</param>
            <returns>Its line break type, <see cref="F:WW.Cad.Model.Text.LineBreakType.XX"/> for unknown characters.</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.LineBreakInfo.IsValid">
            <summary>
            Is this line break info valid?
            </summary>
            <remarks>
            The info is valid when it could successfully load the underlying data file.
            </remarks>
            <returns><c>true</c> if it is valid an could be used, otherwise <c>false</c>.</returns>
        </member>
        <member name="F:WW.Cad.Model.Text.LineBreakInfo.LineBreakData">
            <summary>
            This is the line break data file as an embedded byte array.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.LineBreakInfo.Item(System.UInt32)">
            <summary>
            Get the line break type for a given Unicode 32bit character.
            </summary>
            <param name="character">The character.</param>
            <returns>Its line break type, <see cref="F:WW.Cad.Model.Text.LineBreakType.XX"/> for unknown characters.</returns>
        </member>
        <member name="P:WW.Cad.Model.Text.LineBreakInfo.Description">
            <summary>
            Get the description.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.LineBreakType">
            <summary>
            The various possible settings for a Unicode character's linebreak characteristics.
            </summary>
            <remarks>
            See http://www.unicode.org/reports/tr14/tr14-17.html for more info.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics">
            <summary>
            Represents proxy graphics.
            The graphics are represented by draw commands, see property <see cref="P:WW.Cad.Model.ProxyGraphics.DrawCommands"/>.
            </summary>
            <remarks>
            Each draw command inherits from <see cref="T:WW.Cad.Model.ProxyGraphics.DrawCommand"/>. For more information see the specific draw command sub classes.
            </remarks>
            <seealso cref="T:WW.Cad.Model.ProxyGraphics.DrawCommand"/>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Draw(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draws the proxy graphics using specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Draw(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draws the proxy graphics using specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the proxy graphics.
            </summary>
            <remarks>
            <para>
            Depending on the entity not all transformations can be possibly. E.g. a non-uniform 
            scaling of a circle would create an ellipse, thereby changing the entity type.
            </para>
            <para>
            Overriding methods must add the action to the undoStack only if it succeeded.
            If it succeeded partially (in case of child actions), the undoStack should contain the successful child actions
            that succeeded, so they can be rolled back.
            </para>
            </remarks>
            <param name="config">Transformation  configuration.</param>
            <param name="matrix">Transformation matrix.</param>
            <param name="undoGroup">Stack for adding an undo operation for the changes done by the transforamtion (optional).</param>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics)">
            <summary>
            Copies all fields from specified proxy graphics.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Read(System.IO.Stream,WW.Cad.IO.ModelBuilder)">
            <summary>
            Reads all draw commands from the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Write(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Writes all draw commands to the specified stream.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.DrawCommands">
            <summary>
            Gets the draw commands.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer">
            <summary>
            A class to facilitate drawing proxy graphics to a <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/> interface.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.DrawCommand">
            <summary>
            Represents a draw command base class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.DrawCommand.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.DrawCommand.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.DrawCommand.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.DrawCommand.HasGeometricData">
            <summary>
            Returns whether this draw command contains geometric data 
            (e.g. a circle and push model transform has geometric data, but a line type does not).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Unknown0">
            <summary>
            Represents an unknown draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Unknown0.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Unknown15">
            <summary>
            Represents an unknown draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Unknown15.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Unknown17">
            <summary>
            Represents an unknown draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Unknown17.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Unknown21">
            <summary>
            Represents an unknown draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Unknown21.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Unknown37">
            <summary>
            Represents an unknown draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Unknown37.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Extents">
            <summary>
            Represents extents.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Extents.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Extents.CopyFrom(WW.Cad.Model.ProxyGraphics.Extents)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Circle">
            <summary>
            Represents a circle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle.CopyFrom(WW.Cad.Model.ProxyGraphics.Circle)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle.Center">
            <summary>
            Gets or sets the center.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle.ZAxis">
            <summary>
            Gets or sets the z-axis.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle.Transform">
            <summary>
            Gets the OCS to WCS transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle.DenormalizationTransform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.CircleArc">
            <summary>
            Represents a circle arc.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc.CopyFrom(WW.Cad.Model.ProxyGraphics.CircleArc)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.CircleArc.Start">
            <summary>
            Gets or sets the arc start vector.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.CircleArc.SweepAngle">
            <summary>
            Gets or sets the sweep angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.CircleArc.ArcType">
            <summary>
            Gets or sets the type of the arc.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Circle3Point">
            <summary>
            Represents a circle defined by 3 points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle3Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.ProxyGraphics.Circle3Point"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle3Point.#ctor(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.ProxyGraphics.Circle3Point"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle3Point.CalculateDerivedFields">
            <summary>
            Calculates the derived fields. Call this when any of the 
            3 points changes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle3Point.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle3Point.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle3Point.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Circle3Point.CopyFrom(WW.Cad.Model.ProxyGraphics.Circle3Point)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle3Point.Point1">
            <summary>
            Gets or sets point 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle3Point.Point2">
            <summary>
            Gets or sets point 2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle3Point.Point3">
            <summary>
            Gets or sets point 3.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle3Point.Transform">
            <summary>
            Gets the OCS to WCS transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Circle3Point.DenormalizationTransform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.CircleArc3Point">
            <summary>
            Represents a circle arc defined by 3 points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc3Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.ProxyGraphics.CircleArc3Point"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc3Point.#ctor(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.ProxyGraphics.CircleArc3Point"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc3Point.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc3Point.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc3Point.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.CircleArc3Point.CopyFrom(WW.Cad.Model.ProxyGraphics.CircleArc3Point)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.CircleArc3Point.StartAngle">
            <summary>
            Gets the start angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.CircleArc3Point.EndAngle">
            <summary>
            Gets the end angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.CircleArc3Point.ArcType">
            <summary>
            Gets or sets the arc type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Polyline">
            <summary>
            Represents a polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Polyline.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Polyline.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Polyline.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Polyline.CopyFrom(WW.Cad.Model.ProxyGraphics.Polyline)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Polyline.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.PolylineWithNormal">
            <summary>
            Represents a polyline with normal.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PolylineWithNormal.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PolylineWithNormal.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PolylineWithNormal.CopyFrom(WW.Cad.Model.ProxyGraphics.PolylineWithNormal)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PolylineWithNormal.Normal">
            <summary>
            Gets or sets the normal.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Polygon">
            <summary>
            Represents a polygon.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Polygon.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Polygon.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Polygon.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Polygon.CopyFrom(WW.Cad.Model.ProxyGraphics.Polygon)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Polygon.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.MeshBase">
            <summary>
            Represents a mesh base class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.MeshBase.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.MeshBase)">
            <summary>
            Copies all fields from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.MeshBase.VertexCount">
            <summary>
            Gets or sets the vertex count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.MeshBase.FaceCount">
            <summary>
            Gets or sets the face count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.MeshBase.EdgeCount">
            <summary>
            Gets or sets the edge count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.MeshBase.Points">
            <summary>
            Gets or sets the points. Value is <c>null</c> initially, but should have a value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.MeshBase.EdgeData">
            <summary>
            Gets or sets the edge data. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.MeshBase.FaceData">
            <summary>
            Gets or sets the face data. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.MeshBase.VertexData">
            <summary>
            Gets or sets the vertex data. May be <c>null</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Mesh">
            <summary>
            Represents a mesh.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Mesh.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Mesh.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Mesh.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Mesh.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.Mesh)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Mesh.RowCount">
            <summary>
            Gets or sets the row count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Mesh.ColumnCount">
            <summary>
            Gets or sets the column count.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Shell">
            <summary>
            Represents a shell.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Shell.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Shell.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Shell.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Shell.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.Shell)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Shell.Faces">
            <summary>
            Gets or sets the faces.
            Faces contains edge count for the face (negative if face not drawn),
            followed by vertex indexes.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.EdgeData">
            <summary>
            Contains edge data for n edges.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.EdgeData.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.EdgeData)">
            <summary>
            Copies all fields from the specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.EdgeData.Colors">
            <summary>
            Gets or sets the colors. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.EdgeData.TrueColors">
            <summary>
            Gets or sets the true colors. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.EdgeData.Layers">
            <summary>
            Gets or sets the layers. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.EdgeData.LineTypes">
            <summary>
            Gets or sets the line types. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.EdgeData.SelectionMarkers">
            <summary>
            Gets or sets the selection markers. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.EdgeData.Visibilities">
            <summary>
            Gets or sets the visibilities. May be <c>null</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.FaceData">
            <summary>
            Contains face data amongst which colors, layers and normals.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.FaceData.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.FaceData)">
            <summary>
            Copies all field from specified face data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.Colors">
            <summary>
            Gets or sets the colors. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.TrueColors">
            <summary>
            Gets or sets the true colors. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.Layers">
            <summary>
            Gets or sets the layers. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.SelectionMarkers">
            <summary>
            Gets or sets the selection markers. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.Visibilities">
            <summary>
            Gets or sets the visibilities. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.Normals">
            <summary>
            Gets or sets the normals. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.MaterialIndexes">
            <summary>
            Gets or sets the material indexes. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.Mappers">
            <summary>
            Gets or sets the mappers. May be <c>null</c>.
            Not implemented at the moment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.FaceData.Transparencies">
            <summary>
            Gets or sets the transparencies. May be <c>null</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.VertexData">
            <summary>
            Contains vertex data like normals, orientation and colors.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.VertexData.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.VertexData)">
            <summary>
            Copies all fields from specified vertex data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.VertexData.Normals">
            <summary>
            Gets or sets the normals. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.VertexData.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.VertexData.TrueColors">
            <summary>
            Gets or sets the true colors. May be <c>null</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.TextBase">
            <summary>
            Represents a text base class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.TextBase.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.TextBase.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.TextBase.CopyFrom(WW.Cad.Model.ProxyGraphics.TextBase)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextBase.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextBase.Normal">
            <summary>
            Gets or sets the normal. The default value is <see cref="F:WW.Math.Vector3D.ZAxis"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextBase.Direction">
            <summary>
            Gets or sets the direction. The default value is <see cref="F:WW.Math.Vector3D.XAxis"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextBase.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextBase.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextBase.ObliqueAngle">
            <summary>
            Gets or sets the oblique angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextBase.Value">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Text">
            <summary>
            Represents a text.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Text.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Text2Base">
            <summary>
            Represents a base text object,  but with more properties than <see cref="T:WW.Cad.Model.ProxyGraphics.TextBase"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Text2Base.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Text2Base.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Text2Base.CopyFrom(WW.Cad.Model.ProxyGraphics.Text2Base)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Text2Base.Normal">
            <summary>
            Gets or sets the normal. The default value is <see cref="F:WW.Math.Vector3D.ZAxis"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Text2Base.Position">
            <summary>
            Gets or sets the position. The default value is <see cref="F:WW.Math.Vector3D.XAxis"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Text2Base.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Text2Base.Value">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Text2Base.Raw">
            <summary>
            Gets or sets a value indicating whether the text is raw, meaning
            sequences like "%%" should not be decoded.
            CadLib does not implement the decoding of these sequences at the moment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Text2Base.TextStyle">
            <summary>
            Gets the text style.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Text2">
            <summary>
            Represents a text object,  but with more properties than <see cref="T:WW.Cad.Model.ProxyGraphics.Text"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Text2.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.XLine">
            <summary>
            Represents an infinite line.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.XLine.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.XLine.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.XLine.CopyFrom(WW.Cad.Model.ProxyGraphics.XLine)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.XLine.P1">
            <summary>
            Gets or sets point 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.XLine.P2">
            <summary>
            Gets or sets point 2.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.Ray">
            <summary>
            Represents a ray.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Ray.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Ray.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.Ray.CopyFrom(WW.Cad.Model.ProxyGraphics.Ray)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Ray.P1">
            <summary>
            Gets or sets point 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.Ray.P2">
            <summary>
            Gets or sets point 2.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityColor">
            <summary>
            This draw command sets the color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityColor.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityColor.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityColor.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityColor.CopyFrom(WW.Cad.Model.ProxyGraphics.SetSubEntityColor)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityColor.ColorIndex">
            <summary>
            Gets or sets the color index 
            (use e.g. <see cref="T:WW.Cad.Model.DxfIndexedColorSet"/> to get a color index for a certain color).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityLayer">
            <summary>
            Draw command for setting the current layer.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLayer.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLayer.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLayer.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLayer.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.SetSubEntityLayer)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityLayer.Layer">
            <summary>
            Gets or sets the layer.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityLineType">
            <summary>
            Draw command for setting the current line type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineType.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineType.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineType.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineType.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.SetSubEntityLineType)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityLineType.LineType">
            <summary>
            Gets or sets the line type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntitySelectionMarker">
            <summary>
            Draw command for setting the current selection marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntitySelectionMarker.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntitySelectionMarker.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntitySelectionMarker.CopyFrom(WW.Cad.Model.ProxyGraphics.SetSubEntitySelectionMarker)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntitySelectionMarker.SelectionMarker">
            <summary>
            Gets or sets the selection marker.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityFillOn">
            <summary>
            Draw command for setting the current fill type (on/off).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityFillOn.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityFillOn.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityFillOn.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityFillOn.CopyFrom(WW.Cad.Model.ProxyGraphics.SetSubEntityFillOn)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityFillOn.FillType">
            <summary>
            Gets or sets the fill type (on/off).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityTrueColor">
            <summary>
            Draw command for setting the current entity color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityTrueColor.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityTrueColor.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityTrueColor.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityTrueColor.CopyFrom(WW.Cad.Model.ProxyGraphics.SetSubEntityTrueColor)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityTrueColor.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityLineWeight">
            <summary>
            Draw command for setting the current entity line weight.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineWeight.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineWeight.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineWeight.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineWeight.CopyFrom(WW.Cad.Model.ProxyGraphics.SetSubEntityLineWeight)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityLineWeight.LineWeight">
            <summary>
            Gets or sets the line weight. See the documentation on <see cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/> for more details.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityLineTypeScale">
            <summary>
            Draw command for setting the current entity line type scale.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineTypeScale.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineTypeScale.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineTypeScale.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityLineTypeScale.CopyFrom(WW.Cad.Model.ProxyGraphics.SetSubEntityLineTypeScale)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityLineTypeScale.LineTypeScale">
            <summary>
            Gets or sets the line type scale.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityThickness">
            <summary>
            Draw command for setting the current entity thickness.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityThickness.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityThickness.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityThickness.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityThickness.CopyFrom(WW.Cad.Model.ProxyGraphics.SetSubEntityThickness)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityThickness.Thickness">
            <summary>
            Gets or sets the thickness.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityPlotStyleName">
            <summary>
            Draw command for setting the current entity line type scale.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityPlotStyleName.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityPlotStyleName.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityPlotStyleName.CopyFrom(WW.Cad.Model.ProxyGraphics.SetSubEntityPlotStyleName)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityPlotStyleName.PlotStyleNameType">
            <summary>
            Gets or sets the type of the plot style name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityPlotStyleName.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.PushClip">
            <summary>
            Represents a draw command to push a clipping volume onto the clipping volume stack.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushClip.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushClip.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushClip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushClip.CopyFrom(WW.Cad.Model.ProxyGraphics.PushClip)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.ClipPlaneNormal">
            <summary>
            Gets or sets the clip plane normal. The default value is <see cref="F:WW.Math.Vector3D.ZAxis"/>;
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.ClipBoundaryOrigin">
            <summary>
            Gets or sets the clip boundary origin.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.ClipBoundary">
            <summary>
            Gets or sets the clip boundary projection onto the clipping plane.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.WcsToClipCsTransform">
            <summary>
            Gets or sets the WCS (world coordinate system) to clip coordinate system transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.BlockCsToWcsTransform">
            <summary>
            Gets or sets the block coordinate system to the WCS (world coordinate system) transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.ClipFront">
            <summary>
            Gets or sets a value indicating whether the front clipping plane is enabled.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.ClipBack">
            <summary>
            Gets or sets a value indicating whether the back clipping plane is enabled.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.FrontClipZ">
            <summary>
            Gets or sets the front clip z-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.BackClipZ">
            <summary>
            Gets or sets the back clip z-coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushClip.DrawBoundary">
            <summary>
            Gets or sets a value indicating whether to draw the clipping boundary.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.PopClip">
            <summary>
            Represents a draw command to pop a clipping volume from the clipping volume stack.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PopClip.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PopClip.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PopClip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PopClip.CopyFrom(WW.Cad.Model.ProxyGraphics.PopClip)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.PushModelTransformMatrix">
            <summary>
            Represents a command to push a model transform onto the stack.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushModelTransformMatrix.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushModelTransformMatrix.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushModelTransformMatrix.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushModelTransformMatrix.CopyFrom(WW.Cad.Model.ProxyGraphics.PushModelTransformMatrix)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushModelTransformMatrix.ModelTransform">
            <summary>
            Gets or sets the model transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.PushModelTransformFromVector">
            <summary>
            Represents a command to push a model transform onto the stack.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushModelTransformFromVector.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushModelTransformFromVector.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushModelTransformFromVector.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PushModelTransformFromVector.CopyFrom(WW.Cad.Model.ProxyGraphics.PushModelTransformFromVector)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.PushModelTransformFromVector.ModelTransform">
            <summary>
            Gets or sets the model transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.PopModelTransform">
            <summary>
            Represents a command to pop a model transform from the stack.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PopModelTransform.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PopModelTransform.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PopModelTransform.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.PopModelTransform.CopyFrom(WW.Cad.Model.ProxyGraphics.PopModelTransform)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.LwPolyline">
            <summary>
            Represents a lightweight polyline based on <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.LwPolyline.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.LwPolyline.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.LwPolyline.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.LwPolyline.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.LwPolyline)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.LwPolyline.Polyline">
            <summary>
            Gets the polyline.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityMaterial">
            <summary>
            Draw command for setting the current entity material.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityMaterial.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityMaterial.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityMaterial.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.SetSubEntityMaterial)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityMaterial.MaterialHandle">
            <summary>
            Gets or sets the material.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.SetSubEntityMapper">
            <summary>
            Draw command for setting the current entity mapper.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityMapper.DrawInternal(WW.Cad.Model.ProxyGraphics.WireframeGraphicsFactoryDrawer,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Lets this command draw itself using the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityMapper.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.SetSubEntityMapper.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.ProxyGraphics.SetSubEntityMapper)">
            <summary>
            Copies all field from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityMapper.Projection">
            <summary>
            Gets or sets the projection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityMapper.UTiling">
            <summary>
            Gets or sets the u tiling.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityMapper.VTiling">
            <summary>
            Gets or sets the v tiling.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.SetSubEntityMapper.AutoTransform">
            <summary>
            Gets or sets the automatic transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.UnicodeText">
            <summary>
            Represents unicode text.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.UnicodeText.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.UnicodeText2">
            <summary>
            Represents unicode text. Similar to <see cref="T:WW.Cad.Model.ProxyGraphics.UnicodeText"/>, but with more properties.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.UnicodeText2.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this draw command.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyGraphics.ArcType.Simple">
            <summary>
            Arc is not filled.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyGraphics.ArcType.Sector">
            <summary>
            Area between arc and its center is filled.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyGraphics.ArcType.Chord">
            <summary>
            Area between arc and the line segment defined by its end points is filled.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.DrawCommandCode">
            <summary>
            Represents the code for a <see cref="T:WW.Cad.Model.ProxyGraphics.DrawCommand"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.GraphicPropertyFlags">
            <summary>
            Used for mesh face/edge flags.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.TextStyle">
            <summary>
            Represents a text style for <see cref="T:WW.Cad.Model.ProxyGraphics.Text2"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.TextStyle.CopyFrom(WW.Cad.Model.ProxyGraphics.TextStyle)">
            <summary>
            Copies all fields from specified argument.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.FontFilename">
            <summary>
            Gets or sets the font filename.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.BigFontFilename">
            <summary>
            Gets or sets the big font filename (asian .shx fonts).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.XScale">
            <summary>
            Gets or sets the horizontal scale factor.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.ObliqueAngle">
            <summary>
            Gets or sets the oblique angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.TrackingPercentage">
            <summary>
            Gets or sets the tracking percentage.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.IsBackwards">
            <summary>
            Gets or sets a value indicating whether the text is backwards.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.IsUpsideDown">
            <summary>
            Gets or sets a value indicating whether the text is upside down.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.IsVertical">
            <summary>
            Gets or sets a value indicating whether the text is vertical.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.IsUnderlined">
            <summary>
            Gets or sets a value indicating whether the text is underlined.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.IsOverlined">
            <summary>
            Gets or sets a value indicating whether the text is overlined.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.ProxyGraphics.TextStyle.TrueTypeFontDescriptor">
            <summary>
            Gets or sets the true type font descriptor.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyGraphics.FillType.Fill">
            <summary>
            Fill closed contours.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyGraphics.FillType.NoFill">
            <summary>
            Don't fill closed contours.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ProxyGraphics.TransformContext">
            <summary>
            A helper class to deal with pushing/popping model transformations when
            needing to transform draw commands.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.TransformContext.PushTransform(WW.Math.Matrix4D)">
            <summary>
            Pushes a model transform onto the stack.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.ProxyGraphics.TransformContext.PopTransform">
            <summary>
            Pops the model transform from the stack.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.OverrideColorPlotStyle">
            <summary>
            Implementation of a plot style allowing to set all parameters directly.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.OverrideColorPlotStyle.#ctor(WW.Drawing.ArgbColor,WW.Cad.Model.Entities.IPlotPropertyOwner,WW.Cad.Drawing.DrawContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.OverrideColorPlotStyle"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="plotPropertyOwner">The plot property owner, usually an entity.</param>
            <param name="drawContext">Its draw context.</param>
        </member>
        <member name="P:WW.Cad.Model.OverrideColorPlotStyle.Color">
            <summary>
            Get the color.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation">
            <summary>
            Represents the dynamic block lookup table column type information.
            </summary>
            <remarks>
            The class is a part of lookup functionality. Lookup functionality 
            allows add custom parameters to dynamic blocks.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation.ResourceType">
            <summary>
            Gets or sets the resource type. Default value is 0.
            </summary>
            <remarks>
            see also ConvertResourceTypeForEvalGraphExpression
            1 - string
            40 - double
            70 - int16\bool
            90 - int32
            11 - point
            91 - handle
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation.Type">
            <summary>
            Gets or sets the type. Default value is 0.
            </summary>
            <remarks>
            Actual meaning is unknown. Probably 0 - digits, 1 - angles.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation.PropertyType">
            <summary>
            Gets or sets the property type. Default value is true.
            </summary>
            <remarks>
            true - information is lookup properties.
            false - information is input properties.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation.Unmatched">
            <summary>
            Gets or sets the text for unmatched situation.
            </summary>
            <remarks>
            This text will be shown in case of any unmatchment in lookup table.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation.ConnectionText">
            <summary>
            Gets or sets the text for the connection string.
            </summary>
            <remarks>
            UpdatedDistance, UpdatedFlip and so on... The name of Parameter.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfLookupActionInformation.AllowEditing">
            <summary>
            Gets or sets the allow editing flag. Default value is true.
            </summary>
            <remarks>
            Read only state for table.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction">
            <summary>
            Represents the dynamic block polar stretch action.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAngleOffsetAction">
            <summary>
            Represents the dynamic block base class for "angle" actions.
            </summary>
            <remarks>
            Base class for DxfBlockMoveAction, DxfBlockPolarStretchAction, DxfBlockStretchAction.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAngleOffsetAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAngleOffsetAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAngleOffsetAction.ScaleType">
            <summary>
            Gets or sets the scale type. Default value is ScaleTypeXY.XY.
            </summary>
            <remarks>
            Field used only if action linked with XY parameter. If value is X, it means 
            that block can be moved only in X direction.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAngleOffsetAction.DistanceCoefficient">
            <summary>
            Gets or sets the distance coefficient. Default value is 1.
            </summary>
            <remarks>
            If you change the distace parameter, linked DXF entities will be moved by distance x DistanceCoefficient.
            So if DistanceCoefficient is 2, moving of grip by 1 will lead to moving of geometry by 2.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAngleOffsetAction.AngleOffset">
            <summary>
            Gets or sets the angle offset. Default value is 0.
            </summary>
            <remarks>
            Offset for angle parameter. If it set to 90 and parameter is 10 geometry will be rotated by 100.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAngleOffsetAction.Unknown1">
            <summary>
            Gets or sets the unknown1. Default value is 0.
            </summary>
            <remarks>
            Field used only if action linked with XY parameter and scale type is X or Y.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAngleOffsetAction.Unknown2">
            <summary>
            Gets or sets the unknown2. Default value is 0.
            </summary>
            <remarks>
            Field used only if action linked with XY parameter and scale type is Y.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.ActionConnections">
            <summary>
            Gets or sets the connections for stretch action.
            </summary>
            <remarks>
            EndXData, EndYData parameters.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.Frame">
            <summary>
            Gets or sets the frame points.
            </summary>
            <remarks>
            Frame to define area for stretching.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.StretchEntities">
            <summary>
            Gets or sets the stretch entity array.
            </summary>
            <remarks>
            DXF entities to stretch.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.StretchNodes">
            <summary>
            Gets or sets the stretch node array.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockStretchAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter">
            <summary>
            Represents the dynamic block polar parameter.
            </summary>
            <remarks>
            Controls distance and angle between two points
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.LabelOffset">
            <summary>
            Gets or sets the label offset. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.AngleDescription">
            <summary>
            Gets or sets the angle description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.AngleLabelText">
            <summary>
            Gets or sets the angle label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.Distance">
            <summary>
            Gets or sets the distance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.Angle">
            <summary>
            Gets or sets the angle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip">
            <summary>
            Represents the dynamic block flip grip.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip.Orientation">
            <summary>
            Gets or sets the orientation vector.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip.FlipExpression">
            <summary>
            Gets or sets the 1st flip expression id.
            </summary>
            <remarks>
            Flip grid linked to flip parameter via expression.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataColumnCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Objects.DxfDataColumn"/> items.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfHatchViewContextData">
            <summary>
            Viewport specific <see cref="T:WW.Cad.Model.Entities.DxfHatch">hatch</see> annotation data.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfOleXData">
            <summary>
            Helper class to work with Ole XData in run-time.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOleXData.AutoQuality">
            <summary>
            State of OLEQUALITY variable at the moment of OLE insertion.
            The default value is true.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOleXData.LockAspect">
            <summary>
            If the value is true. Changes of width or height will affect to both uniscaled.
            The default value is true.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOleXData.Rotation">
            <summary>
            Rotation angle.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOleXData.InitialWidth">
            <summary>
            Width in WCS of OLE at the moment of insertion. Used as restore value in OLE reset.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOleXData.InitialHeight">
            <summary>
            Height in WCS of OLE at the moment of insertion. Used as restore value in OLE reset.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOleXData.Unknown">
            <summary>
            Uknown short type field.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOleXData.ActiveFontMapping">
            <summary>
            Maps the point size of one of the fonts in an OLE object to a 
            text height in the drawing. The OLE object is scaled automatically 
            to accommodate the size of the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOleXData.InitialFontMapping">
            <summary>
            Mapping of the OLE object when it was inserted in the drawing.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.FontMappingData">
            <summary>
            Maps the point size of one of the fonts in an OLE object to a text height in the drawing. 
            The OLE object is scaled automatically to accommodate the size of the text. 
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.FontMappingData.Font">
            <summary>
            Font name
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.FontMappingData.PointSize">
            <summary>
            One of the point sizes available for the selected font
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.FontMappingData.TextHeight">
            <summary>
            Sets a text height for the font at the selected point size.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatTool">
            <summary>
            Static helper methods for SAT handling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatTool.MajorFactor">
            <summary>
            Factor used for major part of version number.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.Portmanteau(System.Int32,System.Int32)">
            <summary>
            Calculate the SAT version from its major and minor part.
            </summary>
            <param name="major">major version number</param>
            <param name="minor">minor version number</param>
            <returns>complete version number</returns> 
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.Major(System.Int32)">
            <summary>
            Get the mayor part from a SAT version number.
            </summary>
            <param name="version">SAT version number</param>
            <returns>mayor part</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.Minor(System.Int32)">
            <summary>
            Get the minor part from a SAT version number.
            </summary>
            <param name="version">SAT version number</param>
            <returns>minor part</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.CreateSatReader(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.String)">
            <summary>
            Create a reader for a SAT file content.
            </summary>
            <remarks>
            The returned reader is put behind the version number and ready to be used
            by the <see cref="T:WW.Cad.Model.Acis.SatHeader"/> constructor accepting just an <see cref="T:WW.Cad.Model.Acis.ISatReader"/>
            argument.
            </remarks>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="content">SAT file content</param>
            <returns>SAT file reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.CreateSabReader(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.IO.MemoryStream)">
            <summary>
            Create a reader for a SAB file content.
            </summary>
            <remarks>
            The returned reader is put behind the version number and ready to be used
            by the <see cref="T:WW.Cad.Model.Acis.SatHeader"/> constructor accepting just an <see cref="T:WW.Cad.Model.Acis.ISatReader"/>
            argument.
            </remarks>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="content">SAB file content</param>
            <returns>SAB file reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.CreateSatWriter(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32)">
            <summary>
            Create a writer for a SAT file content.
            </summary>
            <remarks>
            </remarks>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="content">SAT file content</param>
            <returns>SAT file writer</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.CreateSabWriter(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.IO.MemoryStream,System.Int32)">
            <summary>
            Create a writer for a SAB file content.
            </summary>
            <remarks>
            The returned writer is put behind the version number and ready to be used
            by the <see cref="T:WW.Cad.Model.Acis.SatHeader"/> constructor accepting just an <see cref="T:WW.Cad.Model.Acis.ISatWriter"/>
            argument.
            </remarks>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="content">SAB file content</param>
            <returns>SAB file writer</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.GetIntervalValue(WW.Cad.Model.Acis.IExtendedInterval,System.Double)">
            <summary>
            Get a value mapped into the interval [0, periodicy[
            if the interval is periodic.
            </summary>
            <param name="interval">extended interval</param>
            <param name="value">value</param>
            <returns>mapped value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.GetIntervalValue(WW.Cad.Model.Acis.IExtendedInterval,WW.Cad.Model.Acis.IExtendedInterval,WW.Math.Point2D)">
            <summary>
            Get a point mapped into the intervals if the intervals are periodic.
            </summary>
            <param name="xInterval">Interval for X values</param>
            <param name="yInterval">Interval for Y values</param>
            <param name="point">point to map</param>
            <returns>mapped ppint</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.GetIntersection(WW.Cad.Model.Acis.IExtendedInterval,WW.Cad.Model.Acis.IExtendedInterval,WW.Math.Geometry.Polygon2D[],WW.Math.Geometry.Polygon2D[],System.Boolean,System.Double)">
            <summary>
            Get the intersection polylines of boundary polylines with possibly periodic intervals.
            </summary>
            <param name="xInterval">interval in x</param>
            <param name="yInterval">interval in y</param>
            <param name="outer">outer boundaries</param>
            <param name="holes">inner boundaries</param>
            <param name="right">is the coordinate system right-handed?</param>
            <param name="epsilon">accuracy epsilon</param>
            <returns>result of the intersection</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.MapShapeToInterval(WW.Math.Geometry.Polygon2D[],System.Boolean,System.Boolean,WW.Cad.Model.Acis.IExtendedInterval,WW.Cad.Model.Acis.IExtendedInterval,System.Double)">
            <summary>
            Map a shape consisting of polygons to a possibly periodic interval.
            </summary>
            <param name="polies">boundary polygons</param>
            <param name="right">is the coordinate system right-handed?</param>
            <param name="outer">is this an outer boundary?</param>
            <param name="xInterval">interval in x</param>
            <param name="yInterval">interval in y</param>
            <param name="epsilon">accuracy epsilon</param>
            <returns>result of the mapping</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatTool.ReadPoint3D(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read a 3D point from a reader.
            </summary>
            <param name="reader">reader to read from</param>
            <returns>3D point</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatTool.IntersectionParam">
            <summary>
            Helper struct.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatNoneShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatNoneShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatNoneShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatNoneShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatFile">
            <summary>
            Representation of a SAT file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.DefaultSize">
            <summary>Default capacity for entity list.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.header">
            <summary>The SAT header.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.entities">
            <summary>A list of SAT entities.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.subEntities">
            <summary>A list of SAT sub-entities.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.bodies">
            <summary>A list of SAT bodies.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.asmheader">
            <summary>The ASM header (if any).</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.entityBinders">
            <summary>Mapping of entity indexes (Integer) to binder lists.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.mode">
            <summary>Inform that SatFile was created only for version update.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.NameSeparator">
            <summary>
            Separator for name splits.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatFile.NameToEntityCreator">
            <summary>
            Dictionary for SAT entity creation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.#ctor(WW.Cad.Model.Acis.SatFile.ParsingMode)">
            <summary>
            Constructor.
            </summary>
            <param name="mode">parsing mode</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.RemoveAttribute(WW.Cad.Model.Acis.SatEntities.Attributes.SatAttribute)">
            <summary>
            Remove this attribute from attribute chain of the entity.
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.ReadFrom(System.String)">
            <summary>
            Read this file from a string.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.ReadFrom(System.IO.MemoryStream)">
            <summary>
            Read this file from a memory stream.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.WriteTo(System.Int32,System.String@)">
            <summary>
            Write this file to a string.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.WriteTo(System.IO.MemoryStream,System.Int32)">
            <summary>
            Read this file from a memory stream.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.GetTransformation(WW.Math.Matrix4D@)">
            <summary>
            Gets the applied transformation.
            </summary>
            <param name="transform">transform to be applied</param>
            <returns><c>true</c> if the entity has transformation,
                    <c>false</c> if the entity is not transformed</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.ApplyTransformation(WW.Math.Matrix4D)">
            <summary>
            Apply transformation.
            </summary>
            <param name="transform">transform to be applied</param>
            <remarks>It mults with already available at entity transformation</remarks>>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.RemoveColorAttributes">
            <summary>
            Remove SatAdeskColorAttribute and SatAdeskTrueColorAttribute from all SAT entities.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.GetEntity(System.Int32)">
            <summary>
            Get the entity with a given index.
            </summary>
            <param name="index">entity index</param>
            <returns><c>null</c> if index is not associated with an entity</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.GetSubEntity(System.Int32)">
            <summary>
            Get the sub-entity with a given index.
            </summary>
            <param name="index">sub-entity index</param>
            <returns><c>null</c> if index is not associated with an sub-entity</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.GetWires(WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Collect all wireframe wires in this file.
            </summary>
            <param name="accuracy">accuracy</param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.ReadFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read this file from via ISatReader interface.
            </summary>
            <param name="reader">Reader to read from.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.WriteTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write this file via ISatWriter interface.
            </summary>
            <param name="writer">Writer to write to.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.FireAndRemoveBinders(System.Int32)">
            <summary>
            Call all registered entity binders for a given index and remove them.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.AddBody(WW.Cad.Model.Acis.SatEntities.SatBody)">
            <summary>
            Add a body to this file.
            </summary>
            <param name="body">body to add</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.RegisterEntityBinder(System.Int32,WW.Cad.Model.Acis.BindEntity)">
            <summary>
            Register an entity binder.
            </summary>
            <remarks>
            The binder is never called if the index is less than <c>0</c>,
            it is called immediately if the index can be resolved to an entity,
            and it may be called later as soon as an entity with the given index
            is registered. 
            </remarks>
            <param name="index">index for which binder is called</param>
            <param name="binder">binder to be called for the given index</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.RegisterNextSubEntity(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Register a sub-entity.
            </summary>
            <param name="subEntity">subEntity to registration</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.SubEntity(System.Int32)">
            <summary>
            Get an entity for a given index.
            </summary>
            <param name="index">entity index</param>
            <returns>
            entity or <c>null</c> if the index is less than <c>0</c>
            or the entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.SubEntityIndex(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Get a sub-entity index for a given sub entity.
            </summary>
            <param name="subEntity">sub-entity</param>
            <returns>
            sub-entity index or -1 if sub-entity was not indexed
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.CreateFrom(System.String,WW.Cad.Model.Acis.SatFile.ParsingMode)">
            <summary>
            Create a SAT file from a string description.
            </summary>
            <param name="content">SAT file content</param>
            <returns>SAT file</returns>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the content is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatFile.CreateFrom(System.IO.MemoryStream,WW.Cad.Model.Acis.SatFile.ParsingMode)">
            <summary>
            Create a SAB file from a string description.
            </summary>
            <param name="content">SAB file content</param>
            <returns>SAB file</returns>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the content is broken</exception>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatFile.Header">
            <summary>
            Get the header of the SAT file.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatFile.NumberOfEntities">
            <summary>
            Get the number of entities.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatFile.NumberOfSubEntities">
            <summary>
            Get the number of entities.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatFile.Bodies">
            <summary>
            Get the bodies.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatFile.Asmheader">
            <summary>
            Get/set the ASM header.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatFile.Item(System.Int32)">
            <summary>
            Get an entity for a given index.
            </summary>
            <param name="index">entity index</param>
            <returns>
            entity or <c>null</c> if the index is less than <c>0</c>
            or the entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatFile.ParsingMode">
            <summary>
            Supported two modes - full parsing and partly parsing.
            Partly parsing used to fast access to SAT\SAB version.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatFile.EntityCreator">
            <summary>
            Entity creator delegate.
            </summary>
            <returns>created entity</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplinePrimitive">
            <summary>
            SAT spline surface primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplinePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplinePrimitive.subEntity">
            <summary>
            Sub spline surface entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplinePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplinePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplinePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.SatDiscontinuity">
            <summary>
            Discontinuity support class
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.SatDiscontinuity.#ctor">
            <summary>
            Prevent default initialization.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.SatDiscontinuity.#ctor(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Prevent default initialization.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.SatDiscontinuity.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.SatDiscontinuity.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSubSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRbBlendSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            <remarks>
            Implements the constant radius rolling ball blend surface.
            </remarks>
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRbBlendSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRbBlendSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatDegeneratePrimitive">
            <summary>
            Straight line curve primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatDegeneratePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatDegeneratePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatDegeneratePrimitive.ReadBasicDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the basic curve data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatDegeneratePrimitive.WriteBasicDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the basic curve data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatDegeneratePrimitive.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysVertexEdgeAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysVertexEdgeAttribute.listOfEdges">
            <summary>The list of linked edges.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysVertexEdgeAttribute.helper">
            <summary>The helper to bind indexes to entitis.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysVertexEdgeAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysVertexEdgeAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysVertexEdgeAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysVertexEdgeAttribute.EdgeVertexType.Edge">
            <summary>Pointer to egde which uses vertex.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysVertexEdgeAttribute.EdgeVertexType.VertexType">
            <summary>Vertex type.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTRGBAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTRGBAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTRGBAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTRGBAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.BasicSatInterval">
            <summary>
            Basic interval which can be read from SAT file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSatInterval.EnumBorderType">
            <summary>Boolean enum value for infinite interval bounds.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatInterval.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="start">interval start</param>
            <param name="end">interval end</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatInterval.#ctor(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Constructor for reading from SAT file.
            </summary>
            <param name="reader">SAT reader</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSatInterval.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.AcisHeader">
            <summary>
            This class represents the ACIS header, present for each <see cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.VersionNumber">
            <summary>
            Gets or sets the version number.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.NumberOfDataRecords">
            <summary>
            Gets or sets the number of data records.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.EntitiesCount">
            <summary>
            Gets or sets the entities count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.HasHistory">
            <summary>
            Gets or sets a value indicating whether the ACIS data contains history data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.ProductId">
            <summary>
            Gets or sets the product id.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.AcisVersionString">
            <summary>
            Gets or sets the ACIS version string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.DateTimeString">
            <summary>
            Gets or sets the date time string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.MillimetersPerUnit">
            <summary>
            Gets or sets the millimeters per unit.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.ResAbs">
            <summary>
            Gets or sets the res abs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.AcisHeader.ResNor">
            <summary>
            Gets or sets the res nor.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.PageLocator">
            <summary>
            Used in DWG 2007.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphicsFactoryUtil">
            <summary>
            A utility class for creating drawables for a model or a layout using the <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/> interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactoryUtil.CreateDrawables(WW.Cad.Drawing.IWireframeGraphicsFactory,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Create drawable objects for given dxf model from entities in model space.
            </summary>
            <param name="graphicsFactory">The graphics factory.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <remarks>Entities that are in paper space are not drawn.</remarks>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactoryUtil.CreateDrawables(WW.Cad.Drawing.IWireframeGraphicsFactory,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Create drawable objects for specified entities in model space.
            </summary>
            <remarks>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            </remarks>
            <param name="graphicsFactory">The graphics factory.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactoryUtil.CreateDrawables(WW.Cad.Drawing.IWireframeGraphicsFactory,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Create drawable objects for given DXF model using specified view ports.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="graphicsFactory">The graphics factory.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactoryUtil.CreateDrawables(WW.Cad.Drawing.IWireframeGraphicsFactory,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates drawables for given model using given view ports.
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="graphicsFactory">The graphics factory.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in paper space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="T:WW.Cad.Drawing.Transformer">
            <summary>
            Not extremely useful class. 
            Is modeled after the <see cref="T:WW.Cad.Drawing.IClippingTransformer"/> counterpart for design consistency.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Transformer.Transform(WW.Math.Point2D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Transformer.TransformTo3D(WW.Math.Point2D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Transformer.Transform(WW.Math.Point3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Transformer.TransformTo3D(WW.Math.Point3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Transformer.Transform(WW.Math.Vector3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Transformer.SetPreTransform(WW.Math.Matrix4D)">
            <summary>
            Multiplies transformation with given transform (pre).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Transformer.Clone">
            <summary>
            Clones the transformer.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Transformer.Matrix">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Transformer.Matrix3D">
            <summary>
            Gets or sets the 3x3 matrix for transforming a line segment before line type is applied to it.
            Line type is applied in the world coordinate system (for model space), or in paper space,
            but the perspective transformation component is omitted from this matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Transformer.LineTypeScaler">
            <summary>
            Gets the line type scaler.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.TriangleWithEdges">
            <summary>
            Represents a triangle primitive with edges.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.TriangleWithEdges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.TriangleWithEdges"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.TriangleWithEdges.#ctor(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.TriangleWithEdges"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.TriangleWithEdges.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TriangleWithEdges.V0">
            <summary>
            Gets or sets vertex 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TriangleWithEdges.V1">
            <summary>
            Gets or sets vertex 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TriangleWithEdges.V2">
            <summary>
            Gets or sets vertex 2.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TriangleWithEdges.Edge0Visible">
            <summary>
            Gets or sets a value indicating whether edge 0 is visible.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TriangleWithEdges.Edge1Visible">
            <summary>
            Gets or sets a value indicating whether edge 1 is visible.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TriangleWithEdges.Edge2Visible">
            <summary>
            Gets or sets a value indicating whether edge 2 is visible.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsPathUtil.AddTransformedPathToPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Add one path to another, while using an transformation on the added path.
            </summary>
            <param name="targetPath">path to with the transformed <para>addPath</para> will be added</param>
            <param name="addPath">path to add in an transformed way to the <para>targetPath</para> (unchanged by this method)</param>
            <param name="trafo">transformation to use</param>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsPathUtil.CreateTransformedPathFast(System.Drawing.Drawing2D.GraphicsPath,WW.Math.Matrix4D)">
            <summary>
            Get a path transformed with a complex transformation.
            </summary>
            <remarks>
            The path returned is the projection of the transformed original path.
            This is the fast version of getting the path, which will give results which may 
            look a little rough.
            </remarks>
            <param name="path">original path</param>
            <param name="transform">transformation to apply to path</param>
            <returns>a transformed path</returns>
            <seealso cref="M:WW.Cad.Drawing.GraphicsPathUtil.CreateTransformedPathNice(System.Drawing.Drawing2D.GraphicsPath,WW.Math.Matrix4D)"/>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsPathUtil.CreateTransformedPathNice(System.Drawing.Drawing2D.GraphicsPath,WW.Math.Matrix4D)">
            <summary>
            Get a path transformed with a complex transformation.
            </summary>
            <remarks>
            The path returned is the projection of the transformed original path.
            This is the nice version of getting the path, which will give results which may 
            are perfect to look at, but is only about half as fast as the fast version.
            </remarks>
            <param name="path">original path</param>
            <param name="transform">transformation to apply to path</param>
            <returns>a transformed path</returns>
            <seealso cref="M:WW.Cad.Drawing.GraphicsPathUtil.CreateTransformedPathFast(System.Drawing.Drawing2D.GraphicsPath,WW.Math.Matrix4D)"/>
        </member>
        <member name="M:WW.Cad.Drawing.GraphicsPathUtil.AddTransformedPathBounds(WW.Math.Bounds3D,System.Drawing.Drawing2D.GraphicsPath,WW.Math.Matrix4D)">
            <summary>
            Add the bounds of a transformed path.
            </summary>
            <param name="bounds">bounds where to add transformed path bounds</param>
            <param name="path">path for which bounds are needed</param>
            <param name="transform">transformation to apply before calculating bounds</param>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColoredShape">
            <summary>
             Colored path class based on a real GraphicsPath without the need of intermediate polylines.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredShape.#ctor(WW.Drawing.ArgbColor,WW.Math.Geometry.IShape4D,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredShape.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredShape.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredShape.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Polyline2DE">
            <summary>
            Polyline based on <see cref="T:WW.Cad.Drawing.Point2DE"/> objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.Polyline2DE.Factory">
            <summary>
            Gets the factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{WW.Cad.Drawing.Point2DE})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor(System.Boolean,WW.Cad.Drawing.Point2DE[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor(WW.Cad.Drawing.Point2DE[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Drawing.Point2DE})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.#ctor(WW.Math.Geometry.Polyline{WW.Cad.Drawing.Point2DE})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2DE"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.GetLength">
            <summary>
            Gets the total length.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2DE.GetLength(System.Collections.Generic.IList{WW.Cad.Drawing.Point2DE},System.Boolean)">
            <summary>
            Gets the total length of the polyline defined by specified points.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ChangeToTextModeDrawable">
            <summary>
            This class changes the GDI draw context to text mode, but doesn't draw anything.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.TransformableBlinnClipper">
            <summary>
            Blinn clipper implementation dedicated to model space clipping.
            For more efficiency it allows for transformation.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.TransformableBlinnClipper.#ctor(System.Collections.Generic.ICollection{WW.Math.Geometry.BlinnClipper4D.ClipPlane})">
            <summary>
            Constructor.
            </summary>
            <param name="clipPlanes">´Clipping planes.</param>
        </member>
        <member name="M:WW.Cad.Base.TransformableBlinnClipper.TransformBy(WW.Math.Matrix4D)">
            <summary>
            Transform this clipper by the given transformation.
            </summary>
            <param name="transform">The transformation.</param>
        </member>
        <member name="M:WW.LicenseChecker.#cctor">
            <summary>
            See for more details <see href="http://www.pcreview.co.uk/forums/signedxml-checksignature-very-slow-t3428177.html"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.FontUtil.GetString(System.IO.FileStream,System.IO.BinaryReader,WW.Cad.Base.TT_TABLE_DIRECTORY@,WW.Cad.Base.TT_NAME_TABLE_HEADER@,WW.Cad.Base.TT_NAME_RECORD@)">
            <summary>
            See http://www.microsoft.com/typography/otspec/name.htm
            for platform/encoding definitions.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfMLineStyle">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfMLine">MLine</see> style.
            </summary>
            <remarks>
            The MLine style was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfMLine"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfMLineStyle.Element"/>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfMLineStyle.DefaultMLineStyleName">
            <summary>
            Name of the default MLine style 
            (see also <see cref="P:WW.Cad.Model.DxfModel.DefaultMLineStyle"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified MLine style in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <remarks>
            The maximum string length is 255 characters.
            </remarks>
            <exception cref="T:System.ArgumentException">
            thrown when setting an illegal description.
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.Elements">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle.Element">elements</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.EndAngle">
            <summary>
            Gets or sets the end angle in radians.
            </summary>
            <remarks>
            Default is pi / 2 (90 degrees).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.FillColor">
            <summary>
            Gets or sets the fill color.
            The default value is <see cref="F:WW.Cad.Model.Color.ByLayer"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.IsFillOn">
            <summary>
            Gets or sets a value indicating whether fill is on.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.DisplayMiters">
            <summary>
            Gets or sets a value indicating whether to display miters.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.StartHasSquareEndCap">
            <summary>
            Gets or sets a value indicating whether the start point has a square end cap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.StartHasInnerArcsCap">
            <summary>
            Gets or sets a value indicating whether the start point has an inner arcs cap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.StartHasRoundCap">
            <summary>
            Gets or sets a value indicating whether the start point has a round cap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.EndHasSquareCap">
            <summary>
            Gets or sets a value indicating whether the end point has a square cap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.EndHasInnerArcs">
            <summary>
            Gets or sets a value indicating whether the end point has an inner arcs cap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.EndHasRoundCap">
            <summary>
            Gets or sets a value indicating whether the end point has a round cap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            The maximum string length is 32 characters.
            </remarks>
            <exception cref="T:System.ArgumentException">
            thrown when setting an illegal description.
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.StartAngle">
            <summary>
            Gets or sets the start angle in radians.
            </summary>
            <remarks>
            Default is pi / 2 (90 degrees).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfMLineStyle.Element">
            <summary>
            Defines <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> element by <see cref="P:WW.Cad.Model.Objects.DxfMLineStyle.Element.Color"/>,
            <see cref="P:WW.Cad.Model.Objects.DxfMLineStyle.Element.Offset"/> and <see cref="T:WW.Cad.Model.Tables.DxfLineType"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Element.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Element.#ctor(WW.Cad.Model.DxfModel,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Element.#ctor(WW.Cad.Model.DxfModel,System.Double,WW.Cad.Model.Color)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Element.#ctor(System.Double,WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Element.#ctor(System.Double,WW.Cad.Model.Color,WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Element.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfMLineStyle.Element.CopyFrom(WW.Cad.Model.Objects.DxfMLineStyle.Element,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified elment in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.Element.Color">
            <summary>
            Gets or sets the color.
            The default value is <see cref="F:WW.Cad.Model.Color.ByBlock"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.Element.LineType">
            <summary>
            Gets or sets the line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfMLineStyle.Element.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.RenderMode">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> render mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.RenderMode.Optimized2D">
            <summary>
            Classic 2D.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.RenderMode.Wireframe">
            <summary>
            Wire frame.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.RenderMode.HiddenLine">
            <summary>
            Hidden line.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.RenderMode.FlatShaded">
            <summary>
            Flat shaded.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.RenderMode.GouraudShaded">
            <summary>
            Gouraud shaded.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.RenderMode.FlatShadedWithWireframe">
            <summary>
            Flat shaded with wire frame.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.RenderMode.GouraudShadedWithWireframe">
            <summary>
            Gouraud shaded with wireframe.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher">
            <summary>
            Hatcher.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchPolylinesByAngle(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a shape which contains the continuous hatching lines which hatch the given borders
            using even-odd hatching.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="angle">hatching angle in radians</param>
            <param name="distance">hatching distance</param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>hatch lines.</returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchPolylinesByAngle(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,System.Double,System.Double,System.Double[],System.Boolean)">
            <summary>
            Create a shape which contains the hatching lines which hatch the given borders
            using even-odd hatching.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="angle">hatching angle in radians</param>
            <param name="distance">hatching distance</param>
            <param name="dashPattern">
                dash pattern for dashed pattern lines or <code>null</code> for continuous pattern
            </param>
            <param name="fillInterior">
                specifies whether to fill the whole interior of all borders 
                as opposed to applying the even odd algorithm.
            </param>
            <returns>hatch lines.</returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchPolylinesByDirection(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,WW.Math.Vector2D,WW.Math.Vector2D,System.Boolean)">
            <summary>
            Create a shape which contains the continuous hatching lines which hatch the given borders
            using even-odd hatching.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="offset">hatch line offset</param>
            <param name="direction">hatch direction</param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>hatch lines.</returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchPolylinesByDirection(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,WW.Math.Vector2D,WW.Math.Vector2D,System.Double[],System.Boolean)">
            <summary>
            Create a shape which contains the hatching lines which hatch the given borders
            using even-odd hatching.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="offset">hatch line offset</param>
            <param name="direction">hatch direction</param>
            <param name="dashPattern">
            dash pattern for dashed pattern lines or <code>null</code> for continuous pattern
            </param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>hatch lines.</returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchLinesByAngle(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a bunch of continuous hatch lines which fill the given borders
            using even-odd hatching.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="angle">hatching angle in radians</param>
            <param name="distance">hatching distance</param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>
            collection of <see cref="T:WW.Math.Geometry.Segment2D"/> arrays, where each element represents
            the lines created from one hatch line during the hatching process.
            </returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchLinesByDirection(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,WW.Math.Vector2D,WW.Math.Vector2D,System.Boolean)">
            <summary>
            Create a bunch of continuous hatch lines which fill the given borders
            using even-odd hatching.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="offset">hatch line offset</param>
            <param name="direction">hatch direction</param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>
            collection of <see cref="T:WW.Math.Geometry.Segment2D"/> arrays, where each element represents
            the lines created from one hatch line during the hatching process.
            </returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchLinesByDirection(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,WW.Math.Vector2D,WW.Math.Vector2D,System.Double[],System.Boolean)">
            <summary>
            Create a bunch of hatch lines which fill the given borders
            using even-odd hatching.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="offset">hatch line offset</param>
            <param name="direction">hatch direction</param>
            <param name="dashPattern">
            dash pattern for dashed pattern lines or <code>null</code> for continuous pattern
            </param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>
            collection of <see cref="T:WW.Math.Geometry.Segment2D"/> arrays, where each element represents
            the lines created from one hatch line during the hatching process.
            </returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchPolylines(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,WW.Math.Vector2D,WW.Math.Vector2D,System.Double[],System.Boolean)">
            <summary>
            Create a shape which contains the hatching lines which hatch the given borders
            using even-odd hatching. This internal mehtod assumes that the length of the vertex
            [dirX,dirY] is the distance between the hatching lines.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="offset">hatch line offset</param>
            <param name="direction">hatch direction</param>
            <param name="dashPattern">
            dash pattern for dashed pattern lines or <code>null</code> for continuous pattern
            </param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>
            Polylines containing hatch lines
            </returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CreateHatchLines(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,WW.Math.Vector2D,WW.Math.Vector2D,System.Double[],System.Boolean)">
            <summary>
            Create polylines which contains the hatching lines which hatch the given borders
            using even-odd hatching. This internal method assumes that the length of the vertex
            <paramref name="direction"/> is the distance between the hatching lines.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="offset">hatch line offset</param>
            <param name="direction">hatch direction</param>
            <param name="dashes">
            dashes used for the lines, make lines continuous if this is <code>null</code>
            </param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>Polylines containing hatch lines</returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher._CreateHatchLines(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,WW.Math.Vector2D,WW.Math.Vector2D,System.Double[],System.Boolean)">
            <summary>
            Create polylines which contains the hatching lines which hatch the given borders
            using even-odd hatching. This internal method assumes that the length of the vertex
            <paramref name="direction"/> is the distance between the hatching lines.
            </summary>
            <param name="borders">polylines defining closed borders</param>
            <param name="reference">reference point for hatching</param>
            <param name="offset">hatch line offset</param>
            <param name="direction">hatch direction</param>
            <param name="dashes">
            dashes used for the lines, make lines continuous if this is <code>null</code>
            </param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>Polylines containing hatch lines</returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CalculateLines(WW.Math.Point2D,WW.Math.Vector2D,System.Double[],System.Double[],System.Double)">
            <summary>
            Calculate arrays of lines represented by a infinite line form and it's parameters.
            </summary>
            <param name="start">start of infinite line</param>
            <param name="direction">direction of infinite line</param>
            <param name="parameters">line start/end parameters (always of even length)</param>
            <param name="dashPattern">
            dashes used for lines, make continuous line if this is <code>null</code>
            </param>
            <param name="dashPatternLength">cumulated length of dashPattern</param>
            <returns>equivalent lines</returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CalculateIntersectionParameters(WW.Math.Geometry.Polyline2D[],WW.Math.Point2D,WW.Math.Vector2D,System.Boolean)">
            <summary>
            Calculate the intersection parameters of a line of infinite 
            length and a collection of simple closed boundaries.
            </summary>
            <param name="borders">collection of simple closed boundary polygons</param>
            <param name="start">start point of hatching line</param>
            <param name="direction">direction of hatching line</param>
            <param name="fillInterior">
            specifies whether to fill the whole interior of all borders 
            as opposed to applying the even odd algorithm.
            </param>
            <returns>
            array of intersection parameters (always with even length) or 
            <code>null</code> if there was no intersection at all
            </returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CalcIntersection(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,WW.Math.Vector2D)">
            <summary>
            Calculate the intersection parameter of the intersection of an infinite and a finite line.
            This assumes the equations
            <code>
            	 start + lambda * dir = location1 + nu * (location2 - location1)
            </code>
            and returns <code>lambda</code>.
            </summary>
            <param name="location1">one end of finite line</param>
            <param name="location2">other end of finite line</param>
            <param name="start">point on infinite line</param>
            <param name="direction">direction of infinite line</param>
            <returns>intersection parameter <code>lambda</code></returns>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.CalcIntersection(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Vector2D)">
            <summary>
            Calculate the intersection parameter of the intersection of an infinite and a finite line.
            This assumes the equations
            <code>
            	 start + lambda * dir = location
            </code>
            and returns <code>lambda</code>.
            </summary>
            <param name="location">point on infinite line</param>
            <param name="start">point on infinite line</param>
            <param name="direction">direction of infinite line</param>
            <returns>intersection parameter <code>lambda</code></returns>
        </member>
        <member name="F:WW.Cad.Base.Hatcher.PointSorter">
            <summary>
            Reusable point comparer.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.Hatcher.SegmentStartSorter">
            <summary>
            Reusable segment start comparer.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.Hatcher.SegmentEndSorter">
            <summary>
            Reusable segment end comparer.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher.Intersection">
            <summary>
            Internally used interface for intersections.
            Because a intersection of a hatch line with a polygon boundary may not only
            be a point but an interval special handling is necessary.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.Intersection.CompareTo(System.Object)">
            <summary>
            Compare for sorting.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.Intersection.IsInterval">
            <summary>
            Is this intersection an interval?
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.Intersection.LowerCut">
            <summary>
            Get the lower of the intersection parameters.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.Intersection.UpperCut">
            <summary>
            Get the upper of the intersection parameters.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher.IntervalIntersection">
            <summary>
            A intersection which is an interval.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.IntervalIntersection.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.IntervalIntersection.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.IntervalIntersection.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.IntervalIntersection.IsInterval">
            <summary>
            Is this intersection an interval?
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.IntervalIntersection.LowerCut">
            <summary>
            Get the lower of the intersection parameters.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.IntervalIntersection.UpperCut">
            <summary>
            Get the upper of the intersection parameters.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher.SimpleIntersection">
            <summary>
            A simple intersection defined by just one intersection parameter.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.SimpleIntersection.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.SimpleIntersection.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.SimpleIntersection.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.SimpleIntersection.IsInterval">
            <summary>
            Is this intersection an interval?
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.SimpleIntersection.LowerCut">
            <summary>
            Get the lower of the intersection parameters.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.SimpleIntersection.UpperCut">
            <summary>
            Get the upper of the intersection parameters.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher.PointComparer">
            <summary>
            Basic comparer which compares 2D points for Y scanlines.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher.SegmentStartComparer">
            <summary>
            Comparer which sorts segments by their start point.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher.SegmentEndComparer">
            <summary>
            Comparer which sorts segments by their end point.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher.Segment">
            <summary>
            A polyline segment in hatching space.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.Hatcher.Segment.borderId">
            <summary>
            Border ID: negative for open polylines
            </summary>
        </member>
        <member name="F:WW.Cad.Base.Hatcher.Segment.start">
            <summary>
            The start point of the segment, always with lower Y.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.Hatcher.Segment.end">
            <summary>
            The end point of the segment.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.Segment.#ctor(System.Int32,WW.Math.Point2D,WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.Hatcher.Segment"/> class.
            </summary>
            <param name="borderId">The border identifier.</param>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.Segment.GetIntersection(System.Double)">
            <summary>
            Gets the intersection of this segment and an horizontal line with the given y.
            The returned value is only valid if this segment is not horizontal and if the given y is in the
            range of this segment.
            </summary>
            <param name="y">The y.</param>
            <returns>Segment intersection.</returns>
        </member>
        <member name="P:WW.Cad.Base.Hatcher.Segment.Closed">
            <summary>
            Belongs this segment to a closed line?
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Hatcher.SegmentIntersection">
            <summary>
            Segment intersection.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.Hatcher.SegmentIntersection.#ctor(WW.Cad.Base.Hatcher.Segment,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.Hatcher.SegmentIntersection"/> class.
            </summary>
            <param name="segment">The segment.</param>
            <param name="x">The x.</param>
        </member>
        <member name="T:WW.Cad.IO.GroupUtil">
            <summary>
            Provides group value translation to/from string/bytes based on the group code.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupUtil.PrefixMinusInfinity">
            <summary>
            Prefix of stringized form of -Infinity.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.GroupUtil.PrefixPlusInfinity">
            <summary>
            Prefix of stringized form of +Infinity.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.GroupUtil.GetValue(WW.Cad.IO.DxfReader,System.Int32,System.String)">
            <summary>
            Get group value.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.GroupUtil.TryGetValue(WW.Cad.IO.DxfReader,System.Int32,System.String)">
            <summary>
            Tries to get group value. Returns <c>null</c> if could not be parsed.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.GroupUtil.GetValueString(System.Int32,System.Object)">
            <summary>
            Get value string.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.GroupUtil.GetValue(System.Int32,WW.Cad.IO.BinaryGroupReaderSB)">
            <summary>
            Get group value.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.GroupUtil.WriteBin(System.Int32,System.Object,WW.Cad.IO.BinaryGroupWriterSB)">
            <summary>
            Get method converting from a value to binary.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.BinaryGroupReader">
            <summary>
            Binary group reader (two bytes per group code).
            </summary>
        </member>
        <member name="T:WW.Cad.IO.BinaryGroupReaderSB">
            <summary>
            Binary group reader (single byte group codes).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupReaderSB.#ctor(System.IO.BinaryReader,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupReaderSB.ReadGroup(WW.Cad.IO.DxfReader)">
            <summary>
            Read the next group. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupReaderSB.ReadGroup(WW.Cad.IO.DxfReader,System.Int32)">
            <summary>
            Read the next group. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupReaderSB.ReadGroupTryParse(WW.Cad.IO.DxfReader)">
            <summary>
            Read the next group. Tries to parse the group value, but does not throw an exception
            in case the group value type does not match the expected type (in some cases
            where a deviant type may occur).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupReaderSB.Close">
            <summary>
            Close the reader and underlying stream. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.BinaryGroupReaderSB.Position">
            <summary>
            Give the current position string for error messages. See <see cref="T:WW.Cad.IO.IGroupReader"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupReader.#ctor(System.IO.BinaryReader,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Groups">
            <summary>
            Known Dxf groups.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Section">
            <summary>Start section.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.EndSection">
            <summary>End section.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Header">
            <summary>
            Contains general information about the drawing. 
            It consists of an AutoCAD database version number and a number of system variables. 
            Each parameter contains a variable name and its associated value. 
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Classes">
            <summary>
            Holds the information for application-defined classes, 
            whose instances appear in the BLOCKS, ENTITIES, and OBJECTS sections of the database. 
            A class definition is permanently fixed in class hierarchy. 
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Class">
            <summary>The CLASS object.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Tables">
            <summary>
            Tables group.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Table">
            <summary>Start table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Layer">
            <summary>Start of layer table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.LineType">
            <summary>Start of line type table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.TextStyle">
            <summary>Start of text style table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.EndTable">
            <summary>End table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Ucs">
            <summary>DxfUcs table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.View">
            <summary>DxfView table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.VPort">
            <summary>DxfVPort table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.DimStyle">
            <summary>DimStyle table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.AppId">
            <summary>Start of app id table.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Blocks">
            <summary>
            Contains block definition and drawing entities that make up 
            each block reference in the drawing.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Block">
            <summary>
            Start block group.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.EndBlock">
            <summary>
            End block group.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.BlockRecord">
            <summary>
            DxfBlock record.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Entities">
            <summary>
            Contains the graphical objects (entities) in the drawing, 
            including block references (insert entities). 
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Vertex">
            <summary>
            DxfVertex.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Attribute">
            <summary>
            DxfAttribute.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.SequenceEnd">
            <summary>
            This entity marks the end
            of vertex (vertex type name) for a polyline, or the end of attribute
            entities (attrib type name) for an insert entity that has attributes
            (indicated) by 66 group present and nonzero in insert entity).
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.Objects">
            <summary>
            Contains the nongraphical objects in the drawing. 
            All objects that are not entities or symbol table records or 
            symbol tables are stored in this section. 
            Examples of entries in the OBJECTS section are dictionaries 
            that contain mline styles and groups. 
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.DataStore">
            <summary>
            The data store section.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.ThumbnailImage">
            <summary>
            Contains the preview image model for of the drawing. This section is optional. 
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.EndOfFile">
            <summary>End of file.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.AcDbBlockBegin">
            <summary>AcDbBlockBegin subclass marker.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.AcDbBlockEnd">
            <summary>AcDbBlockEnd subclass marker.</summary>
        </member>
        <member name="F:WW.Cad.IO.Groups.EndXData">
            <summary>
            End of XData.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Groups.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DrawingCodePage">
            <summary>
            Drawing code page (see also <see cref="P:WW.Cad.Model.DxfHeader.DrawingCodePage"/>).
            </summary>
            <remarks>
            Matches the dxf $DWGCODEPAGE string definition.
            Value is the corresponding .NET code page number (cast to <see cref="T:System.Int32"/>).
            </remarks>
            <seealso cref="T:System.Text.Encoding"/>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Unknown">
            <summary>
            Unknown code page.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos437">
            <summary>
            Dos 437 code page (OEM United States).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos850">
            <summary>
            Dos 850 code page (Western European).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos852">
            <summary>
            Dos 852 code page (Central European).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos855">
            <summary>
            Dos 855 code page (OEM Cyrillic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos857">
            <summary>
            Dos 857 code page (Turkish).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos860">
            <summary>
            Dos 860 code page (Portuguese).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos861">
            <summary>
            Dos 861 code page (Icelandic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos862">
            <summary>
            Dos 862 code page (Hebrew).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos863">
            <summary>
            Dos 863 code page (French Canadian).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos864">
            <summary>
            Dos 864 code page (Arabic)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos865">
            <summary>
            Dos 865 code page (Nordic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos866">
            <summary>
            Dos 866 code page (Cyrillic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos869">
            <summary>
            Dos 869 code page (Greek, Modern).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos720">
            <summary>
            Dos 720 code page (Arabic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos737">
            <summary>
            Dos 737 code page (Greek).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos775">
            <summary>
            Dos 775 code page (Baltic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Windows874">
            <summary>
            Thai code page (Windows).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Dos932">
            <summary>
            Dos 932 code page (Japanese (Shift-JIS)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Gb2312">
            <summary>
            Chinese simplified code page (GB2312).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ksc5601">
            <summary>
            Korean code page.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi950">
            <summary>
            Ansi 950 code page (Chinese Traditional (Big5)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Utf16">
            <summary>
            Unicode utf-16 (note: not supported by DXF).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1250">
            <summary>
            Ansi 1250 code page (Central European (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1251">
            <summary>
            Ansi 1251 code page (Cyrillic (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1252">
            <summary>
            Ansi 1252 code page (Western European (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1253">
            <summary>
            Ansi 1253 code page (Greek (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1254">
            <summary>
            Ansi 1254 code page (Turkish (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1255">
            <summary>
            Ansi 1255 code page (Hebrew (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1256">
            <summary>
            Ansi 1256 code page (Arabic (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1257">
            <summary>
            Ansi 1257 code page (Baltic (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ansi1258">
            <summary>
            Ansi 1258 code page (Vietnamese (Windows)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Johab">
            <summary>
            Korean code page (Johab).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.MacRoman">
            <summary>
            Mac Roman code page.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Ascii">
            <summary>
            Ascii code page.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_1">
            <summary>
            Iso 8859-1 code page (Western European).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_2">
            <summary>
            Iso 8859-2 code page (Central European).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_3">
            <summary>
            Iso 8859-3 code page (Latin 3, Eastern Europe).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_4">
            <summary>
            Iso 8859-4 code page (Baltic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_5">
            <summary>
            Iso 8859-5 code page (Cyrillic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_6">
            <summary>
            Iso 8859-6 code page (Arabic).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_7">
            <summary>
            Iso 8859-7 code page (Greek).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_8">
            <summary>
            Iso 8859-8 code page (Hebrew (ISO-Visual)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_9">
            <summary>
            Iso 8859-9 code page (Latin 5 (Turkish)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_10">
            <summary>
            Iso 8859-10 code page (Latin 6 (Nordic)).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_13">
            <summary>
            Iso 8859-13 code page (Estonian).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingCodePage.Iso8859_15">
            <summary>
            Iso 8859-15 code page (Latin 9).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension">
            <summary>
            Represents an abstract dimension entity.
            </summary>
            <remarks>
            <para>
            This is an abstract class, see the subclasses for the different
            types of dimensions.
            </para>
            <para>
            To show feet/inches as linear dimension units, change the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat"/> 
            of the appropriate dimension style object.
            </para>
            <para>
            The visualization of a dimension is handled by its <see cref="P:WW.Cad.Model.Entities.DxfDimension.Block"/>
            which is generated by method <see cref="M:WW.Cad.Model.Entities.DxfDimension.GenerateBlock"/> upon writing a DXF file.
            </para>
            <para>
            Take care that some of the definition points of the dimension are in object coordinate system (OCS),
            while others are in world coordinate system (WCS). OCS is defined by the value of the <see cref="P:WW.Cad.Model.Entities.DxfDimension.ZAxis"/>
            property, if it is not (0,0,1) then OCS ansd WCS differ by a rotation defined by 
            <see cref="M:WW.Cad.Model.Entities.DxfDimension.GetOcsToWcsTransform"/> or (the other way round) <see cref="M:WW.Cad.Model.Entities.DxfDimension.GetWcsToOcsTransform"/>.
            Point properties defined in OCS have associated properties (ending with Wcs) which allow to set them 
            in WCS. Furthermore the <see cref="M:WW.Cad.Model.Entities.DxfDimension.ChangeZAxis(WW.Math.Vector3D)"/> method allows to apply a different <see cref="P:WW.Cad.Model.Entities.DxfDimension.ZAxis"/>
            vector while taking care of updating OCS point properties accordingly.
            </para>
            </remarks>
            <example>
            An example of how to create a dxf file with an aligned dimension.
            <code>
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class AlignedDimensionExample {
        public void Test()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfLayer layer = new DxfLayer("DIMENSIONS");
            model.Layers.Add(layer);

            DxfBlock block = new DxfBlock("ALIGNED_DIMENSIONS");
            model.Blocks.Add(block);

            DxfInsert insert = new DxfInsert(block, new Point3D(0, -35, 0));
            insert.Layer = layer;
            model.Entities.Add(insert);

            {
                // Dimension with no text.
                DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.TickSize = 0.5;
                dimension.DimensionStyleOverrides.DimensionLineExtension = 0.3;
                dimension.DimensionStyleOverrides.DimensionLineColor = Colors.Red;
                dimension.DimensionStyleOverrides.ExtensionLineColor = Colors.Green;
                // This means no text.
                dimension.Text = " ";
                dimension.Layer = layer;
                dimension.DimensionLineLocation = new Point3D(2d, 2d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(3d, 1, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0d, 0d, 0d);
                block.Entities.Add(dimension);
            }

            {
                // Dimension with text that doesn't fit between extension lines.
                DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.ArrowSize = 1d;
                dimension.Text = @"This is a long dimension text\PMulti line...";
                dimension.Layer = layer;
                dimension.DimensionLineLocation = new Point3D(2d, 4d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(3d, 3d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0d, 2d, 0d);
                block.Entities.Add(dimension);
            }

            {
                // Dimension with big arrows.
                DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.ArrowSize = 2d;
                dimension.DimensionStyleOverrides.TextAboveDimensionLine = true;
                dimension.Layer = layer;
                dimension.DimensionLineLocation = new Point3D(2d, 6d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(3d, 5d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0d, 4d, 0d);
                block.Entities.Add(dimension);
            }

            {
                // Dimension with text aligned with dimension line.
                DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.ArrowSize = 1d;
                dimension.DimensionStyleOverrides.TextInsideHorizontal = false;
                dimension.DimensionStyleOverrides.TextAboveDimensionLine = true;
                dimension.Layer = layer;
                dimension.DimensionLineLocation = new Point3D(2d, 8d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(3d, 7d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0d, 6d, 0d);
                dimension.UseTextMiddlePoint = true;
                dimension.TextMiddlePoint = new Point3D(3d, 8.5d, 0d);
                block.Entities.Add(dimension);
            }

            DxfWriter.Write("Test.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Aligned"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Linear"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Diametric"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Radial"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Angular3Point"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Angular4Point"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Ordinate"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfDimension"/> class.
            </summary>
            <param name="dimensionStyle">
            The dimension style, must be one of the dimension styles of <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            The default dimension style is <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            For use by DXF/DWG readers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.AfterTransformMe(WW.Actions.CommandGroup)">
            <summary>
            This method should be called by method that overrides <see cref="M:WW.Cad.Model.Entities.DxfDimension.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)"/> after calling <see cref="M:WW.Cad.Model.Entities.DxfDimension.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.ChangeZAxis(WW.Math.Vector3D)">
            <summary>
            Change the <see cref="P:WW.Cad.Model.Entities.DxfDimension.ZAxis">ZAxis vector</see> of this dimension, while updating all positions correctly.
            </summary>
            <remarks>
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.ZAxis"/> defines the OCS (object coordinate system of this dimension), so all positions given 
            in OCS need to be updated to reflect the new OCS.
            </remarks>
            <param name="axis">New Z axis vector</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GenerateBlock">
            <summary>
            Generates the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that contains the visual representation
            of the dimension.
            </summary>
            <remarks>
            <para>
            If a block is not present yet, an <see cref="F:WW.Cad.Model.BlockFlags.Anonymous">anonymous</see> 
            <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> is created and added to the model to which the dimension belongs.
            If a block was already present it is cleared and refilled with new entities.
            </para>
            <para>
            When writing a DXF file the block is automatically generated if it was
            not present yet.
            </para>
            <para>
            Subclasses must call the superclass GenerateBlock method.
            </para>
            <para>
            Block must be part of a <see cref="T:WW.Cad.Model.DxfModel"/> when calling this method.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when the dimension is not part of a <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetEffectiveDimensionStyle">
            <summary>
            Gets the effective dimension style. 
            </summary>
            <remarks>
            If the dimension style of this dimension is null, then <see cref="P:WW.Cad.Model.DxfHeader.DimensionStyleOverrides"/>
            is returned.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetText(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)">
            <summary>
            Gets the final text shown by the dimension.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfMText"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.Measurement"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.GetLinearMeasurementText(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetLinearMeasurementText(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)">
            <summary>
            Gets the linear measurement text based on the value returned by
            <see cref="M:WW.Cad.Model.Entities.DxfDimension.GetMeasurement"/> and given dimension style settings.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetLinearMeasurementText(WW.Cad.Model.Tables.DxfDimensionStyleOverrides,System.Double)">
            <summary>
            Converts given value to a string based on the settings in specified dimension style.
            </summary>
            <param name="dimensionStyle">The dimension style.</param>
            <param name="value">The value to convert to a string.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetLinearMeasurementText(WW.Cad.Model.Tables.IDimensionStyle,System.Double,System.Nullable{System.Char})">
            <summary>
            Converts given value to a string based on the settings in specified dimension style.
            </summary>
            <param name="dimensionStyle">The dimension style.</param>
            <param name="value">The value to convert to a string.</param>
            <param name="thousandsSeparator">The thousands separator.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetAlternateMeasurementText(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)">
            <summary>
            Gets the alternate measurement text based on the value returned by
            <see cref="M:WW.Cad.Model.Entities.DxfDimension.GetMeasurement"/> and given dimension style settings.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetAlternateMeasurementText(WW.Cad.Model.Tables.DxfDimensionStyleOverrides,System.Double)">
            <summary>
            Converts given value to a string based on the alternate unit settings in specified dimension style.
            </summary>
            <param name="dimensionStyle">The dimension style.</param>
            <param name="value">The value to convert to a string.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetAlternateMeasurementText(WW.Cad.Model.Tables.IDimensionStyle,System.Double,System.Nullable{System.Char})">
            <summary>
            Converts given value to a string based on the settings in specified dimension style.
            </summary>
            <param name="dimensionStyle">The dimension style.</param>
            <param name="value">The value to convert to a string.</param>
            <param name="thousandsSeparator">The thousands separator.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetMeasurement">
            <summary>
            Gets the measurement value.
            </summary>
            <returns>
            The <see cref="P:WW.Cad.Model.Entities.DxfDimension.Measurement"/> is returned if non-zero.
            Otherwise GetActualMeasurement is called to calculate the measurement from the definition points.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetAlternateMeasurement">
            <summary>
            Gets the alternate measurement value.
            </summary>
            <returns>
            The <see cref="P:WW.Cad.Model.Entities.DxfDimension.Measurement"/> is returned if non-zero.
            Otherwise GetActualAlternateMeasurement is called to calculate the measurement from the definition points.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetActualMeasurement">
            <summary>
            Calculates the actual measurement from the definition points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetLinearScaleFactor(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)">
            <summary>
            Gets the linear scale factor depending on <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearScaleFactor"/> and
            whether this dimension is in paper space.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetActualAlternateMeasurement">
            <summary>
            Calculates the actual alternate measurement from the definition points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetAlternateScaleFactor(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)">
            <summary>
            Gets the linear scale factor depending on <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearScaleFactor"/> and
            whether this dimension is in paper space.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.TransformFromOcs(WW.Math.Point3D)">
            <summary>
            Transforms a point from OCS (object coordinate system) into 
            WCS (world coordinate system).
            </summary>
            <remarks>All point properties of this object are defined in OCS.</remarks>
            <param name="point">point in OCS</param>
            <returns>point in WCS</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.TransformToOcs(WW.Math.Point3D)">
            <summary>
            Transforms a point from WCS (world coordinate system) into 
            OCS (object coordinate system).
            </summary>
            <remarks>All point properties of this object are defined in OCS.</remarks>
            <param name="point">point in WCS</param>
            <returns>point in OCS</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetOcsToWcsTransform">
            <summary>
            Get the transformation from the OCS (object coordinate system) of this dimension into 
            the WCS (world coordinate system).
            </summary>
            <returns>The transformation from the OCS to the WCS.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetWcsToOcsTransform">
            <summary>
            Get the transformation from the WCS (world coordinate system) into 
            the OCS (object coordinate system) of this dimension.
            </summary>
            <returns>The transformation from the WCS to the OCS.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates a create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory,WW.Math.Vector4D,WW.Drawing.ArgbColor)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory,System.Nullable{WW.Math.Vector4D},WW.Drawing.ArgbColor)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory,WW.Math.Vector4D,WW.Drawing.ArgbColor,System.Double)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory,System.Nullable{WW.Math.Vector4D},WW.Drawing.ArgbColor,System.Double)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Math.Vector4D,WW.Drawing.ArgbColor)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,System.Nullable{WW.Math.Vector4D},WW.Drawing.ArgbColor)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Math.Vector4D,WW.Drawing.ArgbColor,System.Double)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,System.Nullable{WW.Math.Vector4D},WW.Drawing.ArgbColor,System.Double)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="!:Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Math.Vector4D,WW.Drawing.ArgbColor)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Nullable{WW.Math.Vector4D},WW.Drawing.ArgbColor)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Math.Vector4D,WW.Drawing.ArgbColor,System.Double)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDebugCross(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Nullable{WW.Math.Vector4D},WW.Drawing.ArgbColor,System.Double)">
            <summary>
            Draws a crosshair for debugging purposes.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified dimension in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Repair(WW.Cad.Model.DxfModelRepairer)">
            <summary>
            Attempts to repair this object if is invalid and if it's possible to repair it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.SetTextAlignment(WW.Cad.Model.Entities.DxfMText,WW.Cad.Model.Tables.TextAlignment)">
            <summary>
            Set text alignment.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.SetTextAlignment(WW.Cad.Model.Entities.DxfText,WW.Cad.Model.Tables.TextAlignment)">
            <summary>
            Set text alignment.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.CreateLeader(WW.Cad.Model.DxfModel,WW.Cad.Model.Tables.DxfBlock,WW.Math.Point3D,WW.Math.Vector3D,System.Double,WW.Cad.Model.Tables.DxfDimensionStyleOverrides,System.Double,System.Boolean,System.Boolean,System.Boolean,WW.Math.Point3D@)">
            <summary>
            If Block is <c>null</c>, then all the calculations are still done, but no entities are created.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.AngularDimensionLineBetweenExtensionLines(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            dimensionLineArcPoint determines on which sides of the extension line start points
            the arc is placed.
            Determine all angles of extensionLine1StartPoint, extensionLine2StartPoint and
            dimensionLineArcPoint with respect to angleVertex.
            </summary>
            <remarks>
            Coordinates are expected to be in the BCS.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GenerateAngularBlock(WW.Cad.Model.DxfModel,WW.Cad.Model.Tables.DxfBlock,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Generates angular block, the parts that are common to 3 and 4-point angular dimensions.
            </summary>
            <remarks>
            Coordinates are expected to be in the BCS.
            DxfDimensionStyle.TextAboveDimensionLine is ignored (like VoloView does).
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawDimensionLineArc(WW.Cad.Model.DxfModel,WW.Cad.Model.Tables.DxfBlock,WW.Math.Point3D,WW.Cad.Model.Tables.DxfDimensionStyleOverrides,System.Double,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Draw dimension line arc and arrows.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.AddDefPointToBlock(WW.Cad.Model.DxfModel,WW.Cad.Model.Tables.DxfBlock,WW.Math.Point3D)">
            <summary>
            Points are put on the DEFPOINTS layer. 
            This layer is not affected by the PDMODE and PDSIZE system variables 
            (due to <see cref="P:WW.Cad.Model.Tables.DxfLayer.PlotEnabled"/> being <c>false</c>?).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawCross(WW.Cad.Model.Tables.DxfBlock,WW.Math.Point3D,WW.Cad.Model.Entities.EntityColor,System.Double)">
            <summary>
            Draws a crosshair.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.DrawCross(WW.Cad.Model.Tables.DxfBlock,System.Nullable{WW.Math.Point3D},WW.Cad.Model.Entities.EntityColor,System.Double)">
            <summary>
            Draws a crosshair.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.UpdatePositions(WW.Math.Matrix4D)">
            <summary>
            Called when the ZAxis is changed, has to be overwritten in order to recalculate all OCS positions.
            </summary>
            <remarks>
            Overwriting methods have to call their super's method at the end of their implementation!
            </remarks>
            <param name="transform">Transformation from old to new OCS</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetWcsToBcs">
            <summary>
            Gets the world coordinate system (WCS) to block coordinate system (BCS) transformation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.GetEffectiveDimensionStyle(WW.Cad.Model.DxfModel)">
            <summary>
            Gets the effective dimension style. 
            </summary>
            <remarks>
            If the dimension style of this dimension is null, then <see cref="P:WW.Cad.Model.DxfHeader.DimensionStyle"/>
            is returned.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Block">
            <summary>
            Gets or sets the block that is drawn.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.InsertionPoint">
            <summary>
            Gets or sets the insertion point (in OCS).
            </summary>
            <remarks>
            OCS depends on the value of <see cref="P:WW.Cad.Model.Entities.DxfDimension.ZAxis"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.InsertionPointWcs"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.GetOcsToWcsTransform"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.GetWcsToOcsTransform"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.TransformToOcs(WW.Math.Point3D)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.TransformFromOcs(WW.Math.Point3D)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.InsertionPointWcs">
            <summary>
            Gets or sets the insertion point in WCS.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.InsertionPoint"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.TextMiddlePoint">
            <summary>
            Gets or sets the text middle point (in OCS).
            </summary>
            <remarks>
            Also set property <see cref="P:WW.Cad.Model.Entities.DxfDimension.UseTextMiddlePoint"/> to <see langword="true"/> to
            override the default text location.
            OCS depends on the value of <see cref="P:WW.Cad.Model.Entities.DxfDimension.ZAxis"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.UseTextMiddlePoint"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.InsertionPointWcs"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.GetOcsToWcsTransform"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.GetWcsToOcsTransform"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.TransformToOcs(WW.Math.Point3D)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfDimension.TransformFromOcs(WW.Math.Point3D)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.TextMiddlePointWcs">
            <summary>
            Gets or sets the text middle point in WCS.
            </summary>
            <remarks>
            Also set property <see cref="P:WW.Cad.Model.Entities.DxfDimension.UseTextMiddlePoint"/> to <see langword="true"/> to
            override the default text location.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.UseTextMiddlePoint"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.TextMiddlePoint"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.UseTextMiddlePoint">
            <summary>
            Gets or sets whether to use the <see cref="P:WW.Cad.Model.Entities.DxfDimension.TextMiddlePoint"/> 
            instead of the default text location (default is <see langword="false"/>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.TextMiddlePoint"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.AttachmentPoint">
            <summary>
            Gets or sets the attachment point.
            </summary>
            <remarks>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.LineSpacingStyle">
            <summary>
            Gets or sets the text line spacing style.
            </summary>
            <remarks>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.LineSpacingFactor">
            <summary>
            Gets or sets the text line spacing factor (default value is 1).
            </summary>
            <remarks>
            <para>
            Percentage of default (3-on-5) line spacing to be applied. Valid values
            range from 0.25 to 4.00.
            </para>
            <para>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Measurement">
            <summary>
            Gets or sets the actual measurement.
            </summary>
            <remarks>
            <para>
            The measurement value is optional. 
            Leave at zero if measurement is to be derived
            from the dimension definition points.
            </para>
            <para>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Text">
            <summary>
            Gets or sets the dimension text.
            </summary>
            <remarks>
            <para>
            Dimension text explicitly entered by the user. Optional; default is the
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Measurement"/>. 
            If <b>null</b> or an empty string, the dimension <see cref="P:WW.Cad.Model.Entities.DxfDimension.Measurement"/> is drawn as the text. 
            The any occurrence of the string “&lt;&gt;” in the text is replaced with the dimension measurement.
            If “ “ (one blank space), the text is suppressed. 
            Anything else is drawn as the text.
            </para>
            <para>
            If the text contains the two characters '\X' all text after that is put below the dimension line.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.Measurement"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.HasTextRotation">
            <summary>
            Gets or sets whether <see cref="P:WW.Cad.Model.Entities.DxfDimension.TextRotation"/> should be used.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.TextRotation"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.TextRotation">
            <summary>
            Gets or sets the optional rotation (in radians) of the dimension text away from its default orientation 
            (the direction of the dimension line).
            </summary>
            <remarks>
            <para>
            This angle is measured in radians. The default value is 0.
            </para>
            <para>
            Setting a value also sets <see cref="P:WW.Cad.Model.Entities.DxfDimension.HasTextRotation"/> to true.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.HasTextRotation"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.HasHorizontalDirection">
            <summary>
            Gets or sets whether <see cref="P:WW.Cad.Model.Entities.DxfDimension.HorizontalDirection"/> should be used.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.HorizontalDirection"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.HorizontalDirection">
            <summary>
            Gets or sets the horizontal direction (in radians) for the dimension entity.
            </summary>
            <remarks>
            <para>
            The dimension entity
            determines the orientation of dimension <see cref="T:WW.Cad.Model.Entities.DxfMText"/> and lines for horizontal,
            vertical, and rotated linear dimensions.
            This group value is the negative of the angle between the OCS X axis
            and the UCS X axis. It is always in the XY plane of the OCS.
            </para>
            <para>
            Setting a value also sets <see cref="P:WW.Cad.Model.Entities.DxfDimension.HasHorizontalDirection"/> to true.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.HasHorizontalDirection"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.DimensionStyleOverrides">
            <summary>
            Gets the dimension style overrides.
            </summary>
            <remarks>
            The overrides override properties of <see cref="P:WW.Cad.Model.Entities.DxfDimension.DimensionStyle"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.DimensionStyle"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.DimensionStyle">
            <summary>
            Gets or sets the dimension style.
            </summary>
            <remarks>
            <para>
            Together with the <see cref="P:WW.Cad.Model.Entities.DxfDimension.DimensionStyleOverrides"/> the dimension style
            determines the style aspects of the dimension.
            </para>
            <para>
            The dimension style is shared and must be present in <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.DimensionStyleOverrides"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.ZAxis">
            <summary>
            Gets or sets the extrusion direction.
            </summary>
            <remarks>
            <para>
            Setting this to something else than the default (0,0,1) means that all points of 
            this dimension have to be transformed with the rotation transformation defined by 
            <see cref="M:WW.Cad.Model.Entities.DxfDimension.GetOcsToWcsTransform"/>
            in order to get their world position. This is a relict of AutoCAD starting as a 2D 
            CAD program.
            </para>
            <para>
            So in order to set the definition points of this dimension correctly you'll have 
            to transform the points with the inverse of this transformation (<see cref="M:WW.Cad.Model.Entities.DxfDimension.GetWcsToOcsTransform"/>. 
            Please note that the points of this entity are not updated automatically when setting 
            this property, rather use the <see cref="M:WW.Cad.Model.Entities.DxfDimension.ChangeZAxis(WW.Math.Vector3D)"/> method when this dimension is
            already containing useful point date.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.InsertionRotation">
            <summary>
            Gets or sets the rotation angle (in radians).
            Do not use, internal use only.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.InsertionScaleFactor">
            <summary>
            Gets or sets the scale factor.
            Do not use, internal use only.
            This value is not present in DXF files.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Version">
            <summary>
            Gets or sets the version (0 - R24).
            Introduced in R24.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Transform">
            <summary>
            Transform needed to transform points from the block coordinate system (BCS) to WCS (excluding block transform).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.IsAnnotative">
            <summary>
            Gets or sets a value indicating whether the entity is annotative.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.Aligned">
            <summary>
            Aligned dimension.
            </summary>
            <remarks>
            <para>
            An aligned dimension is a dimension where the dimension line is parallel to the line between
            points <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine1StartPoint"/> and <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine2StartPoint"/>.
            The location of the dimension line is defined by <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.DimensionLineLocation"/>.
            </para>
            <para>
            To show feet/inches as linear dimension units, change the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat"/> 
            of the appropriate dimension style object.
            </para>
            </remarks>
            <example>
            An example of how to create a dxf file with an aligned dimension.
            <code>
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class AlignedDimensionExample {
        public void Test()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfLayer layer = new DxfLayer("DIMENSIONS");
            model.Layers.Add(layer);

            DxfBlock block = new DxfBlock("ALIGNED_DIMENSIONS");
            model.Blocks.Add(block);

            DxfInsert insert = new DxfInsert(block, new Point3D(0, -35, 0));
            insert.Layer = layer;
            model.Entities.Add(insert);

            {
                // Dimension with no text.
                DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.TickSize = 0.5;
                dimension.DimensionStyleOverrides.DimensionLineExtension = 0.3;
                dimension.DimensionStyleOverrides.DimensionLineColor = Colors.Red;
                dimension.DimensionStyleOverrides.ExtensionLineColor = Colors.Green;
                // This means no text.
                dimension.Text = " ";
                dimension.Layer = layer;
                dimension.DimensionLineLocation = new Point3D(2d, 2d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(3d, 1, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0d, 0d, 0d);
                block.Entities.Add(dimension);
            }

            {
                // Dimension with text that doesn't fit between extension lines.
                DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.ArrowSize = 1d;
                dimension.Text = @"This is a long dimension text\PMulti line...";
                dimension.Layer = layer;
                dimension.DimensionLineLocation = new Point3D(2d, 4d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(3d, 3d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0d, 2d, 0d);
                block.Entities.Add(dimension);
            }

            {
                // Dimension with big arrows.
                DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.ArrowSize = 2d;
                dimension.DimensionStyleOverrides.TextAboveDimensionLine = true;
                dimension.Layer = layer;
                dimension.DimensionLineLocation = new Point3D(2d, 6d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(3d, 5d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0d, 4d, 0d);
                block.Entities.Add(dimension);
            }

            {
                // Dimension with text aligned with dimension line.
                DxfDimension.Aligned dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.ArrowSize = 1d;
                dimension.DimensionStyleOverrides.TextInsideHorizontal = false;
                dimension.DimensionStyleOverrides.TextAboveDimensionLine = true;
                dimension.Layer = layer;
                dimension.DimensionLineLocation = new Point3D(2d, 8d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(3d, 7d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0d, 6d, 0d);
                dimension.UseTextMiddlePoint = true;
                dimension.TextMiddlePoint = new Point3D(3d, 8.5d, 0d);
                block.Entities.Add(dimension);
            }

            DxfWriter.Write("Test.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfDimension.Aligned"/> class.
            </summary>
            <param name="dimensionStyle">
            The dimension style, must be one of the dimension styles of <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            The default dimension style is <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            For use by DXF/DWG readers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.GenerateBlock">
            <summary>
            Generates the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that contains the visual representation
            of the dimension.
            </summary>
            <remarks>
            <para>
            If a block is not present yet, it's created and added to given model.
            If a block was already present it is cleared and refilled with new entities.
            </para>
            <para>
            When writing a DXF file the block is automatically generated if it was
            not present yet.
            </para>
            <para>
            Block must be part of a <see cref="T:WW.Cad.Model.DxfModel"/> when calling this method.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when the dimension is not part of a <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.GetActualMeasurement">
            <summary>
            Returns the distance between <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine1StartPoint"/> and 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine2StartPoint"/> multiplied by <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearScaleFactor"/> if applicable.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.GetActualAlternateMeasurement">
            <summary>
            Returns the distance between <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine1StartPoint"/> and 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine2StartPoint"/> multiplied by <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.AlternateUnitScaleFactor"/> if applicable.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified aligned dimension in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.GetDimensionLineDirection(WW.Math.Matrix4D)">
            <summary>
            Gets the dimension line direction in the BCS.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Aligned.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Aligned.DimensionLineLocation">
            <summary>
            Gets or sets the dimension line location (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine1StartPoint">
            <summary>
            Gets or sets the start point of the first extension line (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine2StartPoint">
            <summary>
            Gets or sets the start point of the second extension line (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ObliqueAngle">
            <summary>
            Gets or sets the extension lines oblique angle (radians).
            Currently unused and not written to DXF file.
            </summary>
            <remarks>
            Default value is PI / 2 radians (90 degrees).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Aligned.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Aligned.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.Linear">
            <summary>
            Linear or rotated dimension.
            </summary>
            <remarks>
            <para>
            This is a horizontal, vertical or rotated linear dimension.
            The orientation of the dimension line is defined by the <see cref="P:WW.Cad.Model.Entities.DxfDimension.Linear.Rotation"/> angle.
            </para>
            <para>
            To show feet/inches as linear dimension units, change the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat"/> 
            of the appropriate dimension style object.
            </para>
            </remarks>
            <example>
            An example of how to create a dxf file with a linear dimension.
            <code>
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class LinearDimensionExample {
        public void Test()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfLayer layer = new DxfLayer("DIMENSIONS");
            model.Layers.Add(layer);

            DxfBlock block = new DxfBlock("LINEAR_DIMENSIONS");
            model.Blocks.Add(block);

            DxfInsert insert = new DxfInsert(block, new Point3D(5, -30, 0));
            insert.Layer = layer;
            model.Entities.Add(insert);

            {
                // Horizontal.
                DxfDimension.Linear dimension = new DxfDimension.Linear(model.CurrentDimensionStyle);
                dimension.ExtensionLine1StartPoint = new Point3D(0, 0, 0);
                dimension.ExtensionLine2StartPoint = new Point3D(2, 0, 0);
                dimension.DimensionLineLocation = new Point3D(2, 1, 0);
                block.Entities.Add(dimension);
            }

            {
                // Rotated and usage of "&lt;&gt;" text.
                DxfDimension.Linear dimension = new DxfDimension.Linear(model.CurrentDimensionStyle);
                dimension.Rotation = System.Math.PI / 6d;
                dimension.Text = "&lt;&gt; cm"; // &lt;&gt; is replaced by measurement.
                dimension.ExtensionLine1StartPoint = new Point3D(0, 2, 0);
                dimension.ExtensionLine2StartPoint = new Point3D(2, 2, 0);
                dimension.DimensionLineLocation = new Point3D(2, 4, 0);
                block.Entities.Add(dimension);
            }

            {
                // Rotated to the other side with rounded measurement and aligned text.
                DxfDimension.Linear dimension = new DxfDimension.Linear(model.CurrentDimensionStyle);
                dimension.DimensionStyleOverrides.TextInsideHorizontal = false;
                dimension.DimensionStyleOverrides.Rounding = 0.25;
                dimension.DimensionStyleOverrides.DimensionLineColor = Colors.Red;
                dimension.DimensionStyleOverrides.ExtensionLineColor = Colors.Green;
                dimension.Rotation = -System.Math.PI / 6d;
                dimension.ExtensionLine1StartPoint = new Point3D(3, 4, 0);
                dimension.ExtensionLine2StartPoint = new Point3D(0, 4, 0);
                dimension.DimensionLineLocation = new Point3D(0, 6, 0);
                block.Entities.Add(dimension);
            }

            {
                // Rotated.
                DxfDimension.Linear dimension = new DxfDimension.Linear(model.CurrentDimensionStyle);
                dimension.TextRotation = 0;
                dimension.Rotation = System.Math.PI / 6d;
                dimension.ExtensionLine1StartPoint = new Point3D(2, 6, 0);
                dimension.ExtensionLine2StartPoint = new Point3D(0, 6, 0);
                dimension.DimensionLineLocation = new Point3D(2, 8, 0);
                block.Entities.Add(dimension);
            }

            {
                // Vertical.
                DxfDimension.Linear dimension = new DxfDimension.Linear(model.CurrentDimensionStyle);
                dimension.TextRotation = System.Math.PI / 8d;
                dimension.Rotation = System.Math.PI / 2d;
                dimension.DimensionStyleOverrides.TextInsideHorizontal = false;
                dimension.ExtensionLine1StartPoint = new Point3D(0, 10, 0);
                dimension.ExtensionLine2StartPoint = new Point3D(0, 8, 0);
                dimension.DimensionLineLocation = new Point3D(2, 8, 0);
                block.Entities.Add(dimension);
            }

            {
                // Vertical.
                DxfDimension.Linear dimension = new DxfDimension.Linear(model.CurrentDimensionStyle);
                dimension.Rotation = System.Math.PI / 2d;
                dimension.DimensionStyleOverrides.TextInsideHorizontal = false;
                dimension.ExtensionLine1StartPoint = new Point3D(0, 12, 0);
                dimension.ExtensionLine2StartPoint = new Point3D(0, 10, 0);
                dimension.DimensionLineLocation = new Point3D(2, 10, 0);
                block.Entities.Add(dimension);
            }

            DxfWriter.Write("Test.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Linear.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfDimension.Linear"/> class.
            </summary>
            <param name="dimensionStyle">
            The dimension style, must be one of the dimension styles of <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            The default dimension style is <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Linear.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            For use by DXF/DWG readers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Linear.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Linear.GetActualMeasurement">
            <summary>
            Returns the distance between 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine1StartPoint">ExtensionLine1StartPoint</see> and 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Aligned.ExtensionLine2StartPoint">ExtensionLine2StartPoint</see> 
            corrected with the <see cref="P:WW.Cad.Model.Entities.DxfDimension.Linear.Rotation"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Linear.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Linear.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified linear dimension in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Linear.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Linear.Rotation">
            <summary>
            Gets or sets the dimension line angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Linear.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.Diametric">
            <summary>
            Diametric dimension.
            </summary>
            <remarks>
            <para>
            The diametric dimension measures the diameter between points
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Diametric.ArcLineIntersectionPoint1"/> and <see cref="P:WW.Cad.Model.Entities.DxfDimension.Diametric.ArcLineIntersectionPoint2"/>.
            </para>
            <para>
            To show feet/inches as linear dimension units, change the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat"/> 
            of the appropriate dimension style object.
            </para>
            </remarks>
            <example>
            An example of how to create a dxf file with a diametric dimension.
            <code>
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class DiametricDimensionExample {
        public void Test()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfLayer layer = new DxfLayer("DIMENSIONS");
            model.Layers.Add(layer);

            DxfBlock block = new DxfBlock("DIAMETRIC_DIMENSIONS");
            model.Blocks.Add(block);

            DxfInsert insert = new DxfInsert(block, new Point3D(10, -30, 0));
            insert.Layer = layer;
            model.Entities.Add(insert);

            {
                DxfDimension.Diametric dimension = new DxfDimension.Diametric(model.CurrentDimensionStyle);
                dimension.ArcLineIntersectionPoint1 = new Point3D(0, 0, 0);
                dimension.ArcLineIntersectionPoint2 = new Point3D(2, 1, 0);
                block.Entities.Add(dimension);
            }
            
            DxfWriter.Write("Test.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Radial"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfDimension.Diametric"/> class.
            </summary>
            <param name="dimensionStyle">
            The dimension style, must be one of the dimension styles of <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            The default dimension style is <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            For use by DXF/DWG readers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.GenerateBlock">
            <summary>
            Generates the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that contains the visual representation
            of the dimension.
            </summary>
            <remarks>
            <para>
            If a block is not present yet, it's created and added to given model.
            If a block was already present it is cleared and refilled with new entities.
            </para>
            <para>
            When writing a DXF file the block is automatically generated if it was
            not present yet.
            </para>
            <para>
            Block must be part of a <see cref="T:WW.Cad.Model.DxfModel"/> when calling this method.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when the dimension is not part of a <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.GetActualMeasurement">
            <summary>
            Returns the distance between <see cref="P:WW.Cad.Model.Entities.DxfDimension.Diametric.ArcLineIntersectionPoint1"/> and 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Diametric.ArcLineIntersectionPoint2"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.GetActualAlternateMeasurement">
            <summary>
            Calculates the actual alternate measurement from the definition points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified diametric dimension in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Diametric.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Diametric.ArcLineIntersectionPoint1">
            <summary>
            Gets or sets the the first point of the dimension line on the circle/arc (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Diametric.ArcLineIntersectionPoint2">
            <summary>
            Gets or sets the the point opposite to the 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Diametric.ArcLineIntersectionPoint1">first point of the dimension line on the circle/arc</see> (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Diametric.LeaderLength">
            <summary>
            Gets or sets the leader length.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Diametric.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Diametric.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.Radial">
            <summary>
            Radial dimension.
            </summary>
            <remarks>
            <para>
            The radial dimension measures the radius between points 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Radial.Center"/> and <see cref="P:WW.Cad.Model.Entities.DxfDimension.Radial.ArcLineIntersectionPoint"/>
            </para>
            <para>
            To show feet/inches as linear dimension units, change the <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.LinearUnitFormat"/> 
            of the appropriate dimension style object.
            </para>
            <para>
            Set properties <see cref="P:WW.Cad.Model.Entities.DxfDimension.TextMiddlePoint">TextMiddlePoint</see> and 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.UseTextMiddlePoint">UseTextMiddlePoint</see> to set a specific text position.
            </para>
            </remarks>
            <example>
            An example of how to create a dxf file with a radial dimension.
            <code>
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class RadialDimensionExample {
        public void Test()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfLayer layer = new DxfLayer("DIMENSIONS");
            model.Layers.Add(layer);

            DxfBlock block = new DxfBlock("RADIAL_DIMENSIONS");
            model.Blocks.Add(block);

            DxfInsert insert = new DxfInsert(block, new Point3D(15, -30, 0));
            insert.Layer = layer;
            model.Entities.Add(insert);

            {
                DxfDimension.Radial dimension = new DxfDimension.Radial(model.CurrentDimensionStyle);
                dimension.ArcLineIntersectionPoint = new Point3D(0, 0, 0);
                dimension.Center = new Point3D(1, 0.5, 0);
                block.Entities.Add(dimension);
            }

            DxfWriter.Write("Test.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfDimension.Diametric"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfDimension.Radial"/> class.
            </summary>
            <param name="dimensionStyle">
            The dimension style, must be one of the dimension styles of <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            The default dimension style is <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            For use by DXF/DWG readers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.GenerateBlock">
            <summary>
            Generates the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that contains the visual representation
            of the dimension.
            </summary>
            <remarks>
            <para>
            If a block is not present yet, it's created and added to given model.
            If a block was already present it is cleared and refilled with new entities.
            </para>
            <para>
            When writing a DXF file the block is automatically generated if it was
            not present yet.
            </para>
            <para>
            Block must be part of a <see cref="T:WW.Cad.Model.DxfModel"/> when calling this method.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when the dimension is not part of a <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.HandleControlPointChange">
            <summary>
            Updates properties <see cref="P:WW.Cad.Model.Entities.DxfDimension.TextMiddlePoint"/> and <see cref="P:WW.Cad.Model.Entities.DxfDimension.Measurement"/> if needed.
            If <see cref="P:WW.Cad.Model.Entities.DxfDimension.UseTextMiddlePoint"/> is true, the text middle point is updated by this method.
            The <see cref="P:WW.Cad.Model.Entities.DxfDimension.Measurement"/> is only updated if it was set originally.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.GetActualMeasurement">
            <summary>
            Returns the distance between <see cref="P:WW.Cad.Model.Entities.DxfDimension.Radial.Center"/> and 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Radial.ArcLineIntersectionPoint"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.GetActualAlternateMeasurement">
            <summary>
            Calculates the actual alternate measurement from the definition points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified radial dimension in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Radial.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Radial.ArcLineIntersectionPoint">
            <summary>
            Gets or sets the first point of the dimension line on the circle/arc (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Radial.Center">
            <summary>
            Gets or sets the circle/arc center point (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Radial.LeaderLength">
            <summary>
            Gets or sets the leader length.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Radial.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Radial.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.Radial.EditInteractor.State">
            <summary>
            Contains all of the dimension state that is modified by the edit interactor so
            it can be restored in the undo action.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.Angular3Point">
            <summary>
            3-point angular dimension.
            </summary>
            <remarks>
            The 3-point angular dimension measures the angle between 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.ExtensionLine1StartPoint"/> and 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.ExtensionLine2StartPoint"/> with respect to
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.AngleVertex"/>.
            The <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.DimensionLineArcPoint"/> determines where and on which side
            of the extension lines the arc is drawn (thus also determines the angle).
            </remarks>
            <example>
            An example of how to create a dxf file with a 3-point angular dimension.
            <code>
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class Angular3PointDimensionExample {
        public void Test()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfLayer layer = new DxfLayer("DIMENSIONS");
            model.Layers.Add(layer);

            DxfBlock block = new DxfBlock("ANGULAR3POINT_DIMENSIONS");
            model.Blocks.Add(block);

            DxfInsert insert = new DxfInsert(block, new Point3D(20, -30, 0));
            insert.Layer = layer;
            model.Entities.Add(insert);

            {
                DxfDimension.Angular3Point dimension = new DxfDimension.Angular3Point(model.CurrentDimensionStyle);
                dimension.AngleVertex = new Point3D(0, 0, 0);
                dimension.DimensionLineArcPoint = new Point3D(0d, -1d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(-0.3d, 0.4d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0.4d, 0.4d, 0d);
                block.Entities.Add(dimension);
            }

            {
                // Same dimension but swapped start and end point basically.
                // Dimension with some overridden dimension style settings.
                DxfDimension.Angular3Point dimension = new DxfDimension.Angular3Point(model.CurrentDimensionStyle);
                dimension.AngleVertex = new Point3D(0, 2, 0);
                dimension.DimensionLineArcPoint = new Point3D(0d, 3d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(0.4d, 2.4d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(-0.3d, 2.4d, 0d);
                dimension.DimensionStyleOverrides.AngularUnit = AngularUnit.Gradians;
                dimension.DimensionStyleOverrides.TextAboveDimensionLine = true; // ignored for angular dimensions
                block.Entities.Add(dimension);
            }

            DxfWriter.Write("Test.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfDimension.Angular3Point"/> class.
            </summary>
            <param name="dimensionStyle">
            The dimension style, must be one of the dimension styles of <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            The default dimension style is <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            For use by DXF/DWG readers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.GenerateBlock">
            <summary>
            Generates the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that contains the visual representation
            of the dimension.
            </summary>
            <remarks>
            <para>
            If a block is not present yet, it's created and added to given model.
            If a block was already present it is cleared and refilled with new entities.
            </para>
            <para>
            When writing a DXF file the block is automatically generated if it was
            not present yet.
            </para>
            <para>
            Block must be part of a <see cref="T:WW.Cad.Model.DxfModel"/> when calling this method.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when the dimension is not part of a <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.GetLinearMeasurementText(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)">
            <summary>
            Gets the measurement text based on the value returned by
            <see cref="M:WW.Cad.Model.Entities.DxfDimension.GetMeasurement"/> and given dimension style settings.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.GetActualMeasurement">
            <summary>
            Returns the enclosed angle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.GetActualAlternateMeasurement">
            <summary>
            Calculates the actual alternate measurement from the definition points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified angular dimension in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular3Point.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.AngleVertex">
            <summary>
            Gets or sets the angle vertex (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.ExtensionLine1StartPoint">
            <summary>
            Gets or sets the start point of the first extension line (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.ExtensionLine2StartPoint">
            <summary>
            Gets or sets the start point of the second extension line (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.DimensionLineArcPoint">
            <summary>
            Gets or sets the definition point for angular dimensions (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular3Point.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.Angular4Point">
            <summary>
            4-point angular dimension.
            </summary>
            <remarks>
            The 4-point angular dimension measures the angle between 
            extension line 1 and 2.
            These two lines are defined by points 
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.ExtensionLine1StartPoint"/>,
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.ExtensionLine1EndPoint"/>,
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.ExtensionLine2StartPoint"/> and
            <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.ExtensionLine2EndPoint"/>.
            The <see cref="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.DimensionLineArcPoint"/> determines where and on which side
            of the extension lines the arc is drawn (thus also determines the angle).
            </remarks>
            <example>
            An example of how to create a dxf file with a 4-point angular dimension.
            <code>
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class Angular4PointDimensionExample {
        public void Test() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);

            DxfLayer layer = new DxfLayer("DIMENSIONS");
            model.Layers.Add(layer);

            DxfBlock block = new DxfBlock("ANGULAR4POINT_DIMENSIONS");
            model.Blocks.Add(block);

            DxfInsert insert = new DxfInsert(block, new Point3D(25, -30, 0));
            insert.Layer = layer;
            model.Entities.Add(insert);

            {
                DxfDimension.Angular4Point dimension = new DxfDimension.Angular4Point(model.CurrentDimensionStyle);
                dimension.DimensionLineArcPoint = new Point3D(0d, 1d, 0d);
                dimension.ExtensionLine1StartPoint = new Point3D(-0.15d, 0.2d, 0d);
                dimension.ExtensionLine1EndPoint = new Point3D(-0.3d, 0.4d, 0d);
                dimension.ExtensionLine2StartPoint = new Point3D(0.2d, 0.2d, 0d);
                dimension.ExtensionLine2EndPoint = new Point3D(0.4d, 0.4d, 0d);
                block.Entities.Add(dimension);
            }

            DxfWriter.Write("Test.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfDimension.Angular4Point"/> class.
            </summary>
            <param name="dimensionStyle">
            The dimension style, must be one of the dimension styles of <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            The default dimension style is <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            For use by DXF/DWG readers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.GenerateBlock">
            <summary>
            Generates the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that contains the visual representation
            of the dimension.
            </summary>
            <remarks>
            <para>
            If a block is not present yet, it's created and added to given model.
            If a block was already present it is cleared and refilled with new entities.
            </para>
            <para>
            When writing a DXF file the block is automatically generated if it was
            not present yet.
            </para>
            <para>
            Block must be part of a <see cref="T:WW.Cad.Model.DxfModel"/> when calling this method.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when the dimension is not part of a <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.GetLinearMeasurementText(WW.Cad.Model.Tables.DxfDimensionStyleOverrides)">
            <summary>
            Gets the measurement text based on the value returned by
            <see cref="M:WW.Cad.Model.Entities.DxfDimension.GetMeasurement"/> and given dimension style settings.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.GetActualMeasurement">
            <summary>
            Returns the enclosed angle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.GetActualAlternateMeasurement">
            <summary>
            Calculates the actual alternate measurement from the definition points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified angular dimension in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Angular4Point.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.ExtensionLine1StartPoint">
            <summary>
            Gets or sets the start point of the first extension line (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.ExtensionLine2StartPoint">
            <summary>
            Gets or sets the start point of the second extension line (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.ExtensionLine1EndPoint">
            <summary>
            Gets or sets the end point of the first extension line (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.ExtensionLine2EndPoint">
            <summary>
            Gets or sets the end point of the second extension line (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.DimensionLineArcPoint">
            <summary>
            Gets or sets the definition point for angular dimensions (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Angular4Point.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.Ordinate">
            <summary>
            Ordinate dimension showing either the X or Y-coordinate of the feature position  
            depending on flag <see cref="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.ShowX"/>.
            </summary>
            <example>
            An example of how to create a dxf file with an ordinate dimension.
            <code>
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

using WW.Math;

namespace Examples {
    public class OrdinateDimensionExample {
        public void Test()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfLayer layer = new DxfLayer("DIMENSIONS");
            model.Layers.Add(layer);

            DxfBlock block = new DxfBlock("ORDINATE_DIMENSIONS");
            model.Blocks.Add(block);

            DxfInsert insert = new DxfInsert(block, new Point3D(30, -30, 0));
            insert.Layer = layer;
            model.Entities.Add(insert);

            {
                DxfDimension.Ordinate dimension = new DxfDimension.Ordinate(model.CurrentDimensionStyle);
                dimension.ShowX = false;
                dimension.FeaturePosition = new Point3D(0, 0, 0);
                dimension.LeaderEndPoint = new Point3D(1, 0, 0);
                block.Entities.Add(dimension);
            }

            {
                DxfDimension.Ordinate dimension = new DxfDimension.Ordinate(model.CurrentDimensionStyle);
                dimension.ShowX = true;
                dimension.FeaturePosition = new Point3D(0, 0, 0);
                dimension.LeaderEndPoint = new Point3D(0, -1, 0);
                block.Entities.Add(dimension);
            }

            {
                DxfDimension.Ordinate dimension = new DxfDimension.Ordinate(model.CurrentDimensionStyle);
                dimension.ShowX = false;
                dimension.FeaturePosition = new Point3D(0.2, 2.1, 0);
                dimension.LeaderEndPoint = new Point3D(-1, 2, 0);
                block.Entities.Add(dimension);
            }

            {
                DxfDimension.Ordinate dimension = new DxfDimension.Ordinate(model.CurrentDimensionStyle);
                dimension.ShowX = true;
                dimension.FeaturePosition = new Point3D(0.2, 2.1, 0);
                dimension.LeaderEndPoint = new Point3D(0, 3, 0);
                block.Entities.Add(dimension);
            }

            DxfWriter.Write("Test.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfDimension.Ordinate"/> class.
            </summary>
            <param name="dimensionStyle">
            The dimension style, must be one of the dimension styles of <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            The default dimension style is <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/>.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            For use by DXF/DWG readers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.GenerateBlock">
            <summary>
            Generates the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that contains the visual representation
            of the dimension.
            </summary>
            <remarks>
            <para>
            If a block is not present yet, it's created and added to given model.
            If a block was already present it is cleared and refilled with new entities.
            </para>
            <para>
            When writing a DXF file the block is automatically generated if it was
            not present yet.
            </para>
            <para>
            Block must be part of a <see cref="T:WW.Cad.Model.DxfModel"/> when calling this method.
            </para>
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when the dimension is not part of a <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.GetActualMeasurement">
            <summary>
            Returns the X or Y-coordinate of the <see cref="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.FeaturePosition"/> 
            depending on <see cref="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.ShowX"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.GetActualAlternateMeasurement">
            <summary>
            Calculates the actual alternate measurement from the definition points.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified ordinate dimensionn in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfDimension.Ordinate.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.FeaturePosition">
            <summary>
            Gets or sets the feature position (in WCS).
            </summary>
            <remarks>
            Either the X or Y-coordinate of the feature position is shown as the dimension measurement 
            depending on flag <see cref="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.ShowX"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.ShowX"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.ShowX">
            <summary>
            Gets or sets whether to show the X-coordinate of the <see cref="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.FeaturePosition"/> 
            (otherwise the Y-coordinate is shown).
            </summary>
            <remarks>
            Default value is <see langword="true"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.FeaturePosition"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.LeaderEndPoint">
            <summary>
            Gets or sets the leader end point (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.UcsOrigin">
            <summary>
            Gets or sets the ucs origin used at creation time (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfDimension.Ordinate.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfDimension.DimensionTexts">
            <summary>
            A dimension can have 1 or 2 lines of text associated with it.
            When it has 2 lines of text, one is put above the dimension line and one below.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfTextStyle">
            <summary>
            Represents a text style.
            </summary>
            <remarks>
            Shx and (windows) true type fonts are supported. Big fonts are not yet supported.
            </remarks>
            <example>
            An example of how to create a text style and apply it to text.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfTextStyle.DefaultTextStyleName">
            <summary>
            The name of the default <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/>. 
            See <see cref="P:WW.Cad.Model.DxfModel.DefaultTextStyle"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/> class.
            </summary>
            <param name="name">
            The unique text style name.
            </param>
            <param name="fontFilename">
            The font file name. Can be either a windows true type font (.e.g. "arial.ttf", "times.ttf") or
            an shx font (e.g. txt.shx).
            </param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the text style.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified text style in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.ToString">
            <summary>
            String representation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.IsShx">
            <summary>
            If fontFilename exists then this is an shx font.
            </summary>
            <remarks>
            First look in path for the shx font files, then in the current dir.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfTextStyle.Equals(WW.Cad.Model.Tables.DxfTextStyle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.FontFilename">
            <summary>
            Gets or sets the font file name (e.g. "txt.shx", "arial.ttf", or "times.ttf").
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.FontFamily">
            <summary>
            Gets the font family.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.FontStyle">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.BigFontFilename">
            <summary>
            Gets or sets the big font file name; blank if none.
            </summary>
            <remarks>
            Big fonts are currently not supported.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.TrueTypeFontDescriptor">
            <summary>
            Gets or sets the true type font info (optional).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.FixedHeight">
            <summary>
            Gets or sets the fixed text height; 0 if not fixed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.IsShape">
            <summary>
            Gets or sets a value indicating whether this text style is a shape (rather than a font).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.IsVertical">
            <summary>
            Gets or sets a value indicating whether this text style is vertical.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this text style is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this text style is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this text style is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.LastHeightUsed">
            <summary>
            Gets or sets the last height used.
            The default value is 0.2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.Tables.DxfTextStyle.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            <para>
            A text style that represents a shape file may or may not have a name.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.ObliqueAngle">
            <summary>
            Gets or sets the oblique angle (radians).
            </summary>
            <remarks>
            Displaying oblique angle is currently not supported.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.GenerationFlags">
            <summary>
            Gets or sets the generation flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.IsBackwards">
            <summary>
            Gets or sets a value indicating whether this text style is backwards.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.IsUpsideDown">
            <summary>
            Gets or sets a value indicating whether this text style is upside down.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfTextStyle.WidthFactor">
            <summary>
            Gets or sets the width factor (the default value is 1).
            </summary>
            <remarks>
            <para>
            For <see cref="T:WW.Cad.Model.Entities.DxfText"/> this property serves as a default value for
            <see cref="P:WW.Cad.Model.Entities.DxfText.WidthFactor"/>, but other than that it is not used by <see cref="T:WW.Cad.Model.Entities.DxfText"/>.
            Adjusting the width factor has no effect on the text.
            </para>
            <para>
            For <see cref="T:WW.Cad.Model.Entities.DxfMText"/> this property serves as the multiline text's width factor
            and is used for rendering the multiline text.
            Adjusting the width factor affects all multiline text entities that use this text style.
            For <see cref="T:WW.Cad.Model.Entities.DxfTolerance"/> the behavior is the same as for multiline text.
            </para>
            <para>
            Displaying oblique angle is currently not supported.
            </para>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Tables.TableIds">
            <summary>
            Table ids for dxf tables:
            VPORT, LTYPE, LAYER, STYLE, VIEW, DIMSTYLE, UCS or APPID.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.AppId">
            <summary>
            Application id table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.BlockRecord">
            <summary>
            Block reference table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.DimensionStyle">
            <summary>
            Dimension style table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.Layer">
            <summary>
            Layer table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.LineType">
            <summary>
            Line type table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.TextStyle">
            <summary>
            Text style table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.Ucs">
            <summary>
            User coordinate system table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.View">
            <summary>
            View table.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TableIds.ViewPort">
            <summary>
            Viewport configuration table.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfPlotSettingsCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.DxfPlotSettings"/> collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfPlotSettingsCollection.GetKeyForItem(WW.Cad.Model.Objects.DxfPlotSettings)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:WW.Cad.Model.Text.StringBasedLayoutedText">
            <summary>
            A DXF text based on a complete string.
            This is most useful for TTF fonts where there may be special cases like ligatures,
            but it's usually slower for rendering.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.StringBasedLayoutedText.#ctor(System.String,WW.Cad.Model.Text.IDxfFont,WW.Drawing.ArgbColor,System.Int16,WW.Math.Geometry.IShape2D,WW.Math.Matrix2D,WW.Math.Matrix2D,WW.Math.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="text">the text to display</param>
            <param name="font">the font used</param>
            <param name="color">the color</param>
            <param name="lineWeight">The line weight.</param>
            <param name="path">the path created from the text</param>
            <param name="charTransform">
            The transform applied to each character (after the <paramref name="canonicalizeTransform"/>).
            </param>
            <param name="canonicalizeTransform">
            The canonicalize transform applied to each character.
            </param>
            <param name="advance">the advance of the text</param>
        </member>
        <member name="M:WW.Cad.Model.Text.StringBasedLayoutedText.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)">
            <summary>
            Draw the text to the drawer.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="transformation">transformation used for drawing</param>
            <param name="extrusion">extrusion in z direction, usually <c>0.0</c></param>
            <returns>
            advance including <para>transformation</para>
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.Text">
            <summary>
            Get the text represented by this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.Font">
            <summary>
            Get the font used to draw this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.Color">
            <summary>
            Get the color of the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.LineWeight">
            <summary>
            Gets the line weight.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.SplitPaths">
            <summary>
            Get paths for each letter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.CanonicalPath">
            <summary>
            Get the canonical path used to draw this text.
            </summary>
            <remarks>
            See <see cref="P:WW.Cad.Model.Text.ILayoutedText.Filled"/> to decide whether the path is drawn filled.
            The canonical path is undistorted with size 1. Use the <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>
            to transform the path into the correct size and proportions. 
            Because even this path may have to be constructed, it's faster to use the <see cref="M:WW.Cad.Model.Text.StringBasedLayoutedText.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/> method
            if all what is wanted is to draw the path.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.TransformedPath">
            <summary>
            Get the path representing the text if draw unrotated at point <c>(0,0)</c>.
            </summary>
            <remarks>
            Note that this includes a transformation of the canonical path, so usually it is better
            to use <see cref="P:WW.Cad.Model.Text.ILayoutedText.CanonicalPath"/> and include the <see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/> in
            the transformations needed to place the text at the correct position. 
            Even better is to use the <see cref="M:WW.Cad.Model.Text.StringBasedLayoutedText.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/> method.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.BasicTransformation">
            <summary>
            Get the transformation used to transform the canonical path into the correct size and proportions.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.Filled">
            <summary>
            Get whether the path of this text has to be drawn filled.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.CanonicalAdvance">
            <summary>
            Get the canonical advance of this path.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.StringBasedLayoutedText.Advance">
            <summary>
            Get the advance used after this text is drawn.
            This includes the basic transformation (<see cref="P:WW.Cad.Model.Text.ILayoutedText.BasicTransformation"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.CanonicalGlyph">
            <summary>
            Basic implementation of a canonical glyph.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.CanonicalGlyph.#ctor(System.Char,WW.Math.Geometry.IShape2D,WW.Math.Vector2D,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="letter">letter represented by this glyph</param>
            <param name="path">canonical path representing this glyph</param>
            <param name="advance">canonical advance vector</param>
            <param name="filled">is this character filled?</param>
        </member>
        <member name="M:WW.Cad.Model.Text.CanonicalGlyph.#ctor(System.Char)">
            <summary>
            Constructor constructing a null glyph.
            </summary>
            <param name="letter"></param>
        </member>
        <member name="M:WW.Cad.Model.Text.CanonicalGlyph.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,WW.Drawing.ArgbColor,System.Int16,System.Double)">
            <summary>
            Draw this glyph.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="trafo">transformation used for drawing this glyph</param>
            <param name="color">color used to draw this glyph</param>
            <param name="lineWeight">The line weight.</param>
            <param name="extent">extent in z, usually <c>0</c></param>
        </member>
        <member name="M:WW.Cad.Model.Text.CanonicalGlyph.GetBounds">
            <summary>
            Gets or sets the bounds.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.CanonicalGlyph.Letter">
            <summary>
            The letter this glyph represents.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.CanonicalGlyph.Path">
            <summary>
            The canonical path of the letter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.CanonicalGlyph.Filled">
            <summary>
            Has this glyph to be drawn filled?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.CanonicalGlyph.IsValid">
            <summary>
            Does this glyph contain valid information?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.CanonicalGlyph.Advance">
            <summary>
            The canonical advance of the letter.
            </summary>
            <remarks>
            The advance is the distance on the baseline the insertion point is moved after this letter is drawn,
            defining the insertion point of the next letter. 
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Tables.TextDirection">
            <summary>
            Represents the text direction (left-to-right or right-to-left).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextDirection.LeftToRight">
            <summary>
            Display text left-to-right.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextDirection.RightToLeft">
            <summary>
            Display text right-to-left.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableRow2005">
            <summary>
            A table row for use in <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableRow2005.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableRow2005"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow2005.Height">
            <summary>
            Gets or sets the row height.
            The default value is 0.36.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow2005.Cells">
            <summary>
            Gets the cells.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow2005.Table">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/> associated with this row.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableRow2005.Index">
            <summary>
            Gets the row index of this row in the table's <see cref="P:WW.Cad.Model.Entities.DxfTable2005.Rows">Rows</see> collection.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCellLinkedData">
            <summary>
            Represents linked data for a <see cref="T:WW.Cad.Model.Entities.DxfTableCell">table cell</see>.
            </summary>
            <remarks>
            This class was introduced in AutoCAD 2008. Linked data is not yet supported.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellLinkedData.DataLink">
            <summary>
            Gets or sets the data link. Not yet supported.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellLinkedData.RowCount">
            <summary>
            Gets or sets the row count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellLinkedData.ColumnCount">
            <summary>
            Gets or sets the column count.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DuplicateRecordCloningFlag">
            <summary>
            The duplicate record cloning flag determines how duplicate entries are merged.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DuplicateRecordCloningFlag.NotApplicable">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DuplicateRecordCloningFlag.KeepExisting">
            <summary>
            Keep existing.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DuplicateRecordCloningFlag.UseClone">
            <summary>
            Use clone.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DuplicateRecordCloningFlag.XRefName">
            <summary>
            &lt;xref&gt;$0$&lt;name&gt;.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DuplicateRecordCloningFlag.Name">
            <summary>
            $0$&lt;name&gt;
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DuplicateRecordCloningFlag.UnmangleName">
            <summary>
            Unmangle name.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DrawingUnits">
            <summary>
            Drawing units.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Feet">
            <summary>
            Feet.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Meters">
            <summary>
            Meters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Microinches">
            <summary>
            Microinches.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Mils">
            <summary>
            Mils.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Angstroms">
            <summary>
            Angstroms.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Nanometers">
            <summary>
            Nanometers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Microns">
            <summary>
            Microns.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Decimeters">
            <summary>
            Decimeters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Dekameters">
            <summary>
            Dekameters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Hectometers">
            <summary>
            Hectometers.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Gigameters">
            <summary>
            Gigameters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.AstronomicalUnits">
            <summary>
            Astronomical units.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.LightYears">
            <summary>
            Light years.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DrawingUnits.Parsecs">
            <summary>
            Parsecs.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.TextEncodingUtil.IsMultiByteCodePage(WW.Cad.Model.DrawingCodePage)">
            <summary>
            Returns whether specified code page is a multi-byte code page.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfVisibilityState">
            <summary>
            Represents the visibility state.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfVisibilityState.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfVisibilityState.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfVisibilityState.SelectionSet1">
            <summary>
            Gets or sets the selection set 1.
            </summary>
            <remarks>
            List of all visible non dynamic block (grips, actions, parameters) entities in the current state.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfVisibilityState.SelectionSet2">
            <summary>
            Gets or sets the selection set 2.
            </summary>
            <remarks>
            List of all visible dynamic block (grips, actions, parameters) entities in the current state.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter">
            <summary>
            Represents the dynamic block rotation parameter.
            </summary>
            <remarks>
            Block reference can be rotated around start point by some angle.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.LabelOffset">
            <summary>
            Gets or sets the label offset. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.Angle">
            <summary>
            Gets or sets the angle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRotationParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction">
            <summary>
            Represents the dynamic block lookup action.
            </summary>
            <remarks>
            This class is a part of dynamic block custom properties support.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.NumberOfRows">
            <summary>
            Gets or sets the number of rows in the lookup table. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.NumberOfColumns">
            <summary>
            Gets or sets the number of columns in the lookup table. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.Text">
            <summary>
            Gets or sets the cell information of lookup table.
            </summary>
            <remarks>
            Size is NumberOfRows X NumberOfColumns.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.UnknownFlag">
            <summary>
            Unknown flag. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.Information">
            <summary>
            Gets or sets the information about lookup table columns.
            </summary>
            <remarks>
            Size is equal to NumberOfColumns.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter">
            <summary>
            Represents the dynamic block linear parameter.
            </summary>
            <remarks>
            Controls the length of segment between two points.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.LabelOffset">
            <summary>
            Gets or sets the label offset. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.Distance">
            <summary>
            Gets or sets the distance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLinearParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter">
            <summary>
            Represents the dynamic block base point parameter.
            </summary>
            <remarks>
            Base point parameter cannot be associated with actions.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter.BasePoint1">
            <summary>
            Gets or sets the base point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter.BasePoint2">
            <summary>
            Gets or sets the updated base point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockBasePointParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData">
            <summary>
            Common annotation data for <see cref="T:WW.Cad.Model.Entities.DxfDimension"/>
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.</returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Block">
            <summary>
            Gets or sets the block that is drawn.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.DefaultTextLocation">
            <summary>
            Gets or sets whether to use user defined text position
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.SuppressOutsideExtensions">
            <summary>
            Gets or sets the "suppress outside extensions dimension lines" flag 
            (corresponds to the DIMSOXD system variable).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.OverrideSuppressOutsideExtensions">
            <summary>
            Gets or sets whether <see cref="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.SuppressOutsideExtensions"/> is overridden
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.TextOutsideExtensions">
            <summary>
            Gets or sets whether to force the dimension line to be drawn between the extension lines even when the
            text and arrow heads are outside the extension lines (corresponds to the DIMTOFL system variable).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.OverrideTextOutsideExtensions">
            <summary>
            Gets or sets whether <see cref="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.TextOutsideExtensions"/> is overridden
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.TextInsideExtensions">
            <summary>
            Gets or sets the "text inside extensions" flag (corresponds to the DIMTIX system variable).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.OverrideTextInsideExtensions">
            <summary>
            Gets or sets whether <see cref="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.TextInsideExtensions"/> is overridden
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.FlipFirstArrow">
            <summary>
            Gets or sets the flip flag of the first arrowhead.
            </summary>
            <remarks>
            default is <see langword="false"/>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.FlipSecondArrow">
            <summary>
            Gets or sets the flip flag of the second arrowhead.
            </summary>
            <remarks>
            default is <see langword="false"/>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.TextLocation">
            <summary>
            Gets or sets the dimension text location in OCS.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.TextRotation">
            <summary>
            Gets or sets the dimension text rotation in radians.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.ArrowsTextFit">
            <summary>
            Gets or sets the fit type for dimension arrows and text if they don't fit between the extension lines
            (corresponds to DIMATFIT system variable).
            The default value is 
            <see cref="F:WW.Cad.Model.ArrowsTextFitType.MoveBoth">MoveBoth</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.OverrideArrowsTextFit">
            <summary>
            Gets or sets whether <see cref="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.ArrowsTextFit"/> is overridden
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.TextMovement">
            <summary>
            Gets or sets the dimension text movement rules (corresponds to the DIMTMOVE system variable).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.OverrideTextMovement">
            <summary>
            Gets or sets whether <see cref="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.TextMovement"/> is overridden
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Aligned">
            <summary>
            Annotation data for <see cref="T:WW.Cad.Model.Entities.DxfDimension.Aligned">aligned dimension</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Aligned.DimensionLineLocation">
            <summary>
            Gets or sets the dimension line location (in WCS).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Angular">
            <summary>
            Annotation data for <see cref="T:WW.Cad.Model.Entities.DxfDimension.Angular3Point">angular dimensions</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Angular.DimensionLineArcPoint">
            <summary>
            Gets or sets the definition point for angular dimensions (in WCS).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Diametric">
            <summary>
            Annotation data for <see cref="T:WW.Cad.Model.Entities.DxfDimension.Diametric">diametric dimension</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Diametric.ArcLineIntersectionPoint1">
            <summary>
            Gets or sets the the first point of the dimension line on the circle/arc (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Diametric.ArcLineIntersectionPoint2">
            <summary>
            Gets or sets the the point opposite to the 
            <see cref="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Diametric.ArcLineIntersectionPoint1">first point of the dimension line on the circle/arc</see> (in WCS).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Ordinate">
            <summary>
            Annotation data for <see cref="T:WW.Cad.Model.Entities.DxfDimension.Ordinate">ordinate dimension</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Ordinate.Origin">
            <summary>
            Gets or sets the feature position (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Ordinate.LeaderEndPoint">
            <summary>
            Gets or sets the leader end point (in WCS).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Radial">
            <summary>
            Annotation data for <see cref="T:WW.Cad.Model.Entities.DxfDimension.Radial">radial dimension</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfDimensionObjectContextData.Radial.ArcLineIntersectionPoint">
            <summary>
            Gets or sets the first point of the dimension line on the circle/arc (in WCS).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_CreateInteractor_WinFormsDrawable_NoCenterMessage">
            <summary>
              Looks up a localized string similar to No arc center was provided..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_CreateInteractor_WinFormsDrawable_NoStartAndEndPointIdenticalMessage">
            <summary>
              Looks up a localized string similar to The arc start and end point are identical..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_CreateInteractor_WinFormsDrawable_NoStartPointMessage">
            <summary>
              Looks up a localized string similar to No arc start point was provided..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_EndAngleControlPoint_Name">
            <summary>
              Looks up a localized string similar to end point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_EndPoint_Name">
            <summary>
              Looks up a localized string similar to end point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_MidPoint_Name">
            <summary>
              Looks up a localized string similar to mid point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_StartAngleControlPoint_Name">
            <summary>
              Looks up a localized string similar to start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_StartPoint_Name">
            <summary>
              Looks up a localized string similar to start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_TwoPointWithRadiusCreateInteractor_WinFormsDrawable_ArcNotInitializedMessage">
            <summary>
              Looks up a localized string similar to Arc could not be initialized, check that the radius is greater than or equal to half the distance between the start and end point. Also make sure an arc mid point hint is provided by the current mouse location as their are 4 possible arcs that go through a start and end point for a given radius..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_TwoPointWithRadiusCreateInteractor_WinFormsDrawable_IllegalRadiusMessage">
            <summary>
              Looks up a localized string similar to Illegal radius, check that the radius is greater than or equal to half the distance between the start and end point..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_TwoPointWithRadiusCreateInteractor_WinFormsDrawable_NoEndPointMessage">
            <summary>
              Looks up a localized string similar to No arc end point was provided..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_TwoPointWithRadiusCreateInteractor_WinFormsDrawable_NoMidPointHintMessage">
            <summary>
              Looks up a localized string similar to Make sure an arc mid point hint is provided by the current mouse location as their are 4 possible arcs that go through a start and end point for a given radius..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_TwoPointWithRadiusCreateInteractor_WinFormsDrawable_NoRadiusMessage">
            <summary>
              Looks up a localized string similar to No radius was provided..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfArc_TwoPointWithRadiusCreateInteractor_WinFormsDrawable_NoStartPointMessage">
            <summary>
              Looks up a localized string similar to No arc start point was provided..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfCircle_CenterControlPoint_Name">
            <summary>
              Looks up a localized string similar to center.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfCircle_ControlPoint1_Name">
            <summary>
              Looks up a localized string similar to point on circle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfCircle_CreateInteractor_WinFormsDrawable_NoCenterPointMessage">
            <summary>
              Looks up a localized string similar to No center point was provided..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfCircle_CreateInteractor_WinFormsDrawable_NoControlPoint1OrRadiusMessage">
            <summary>
              Looks up a localized string similar to No point on circle or radius was provided..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Aligned_DimensionLineLocationControlPoint_Name">
            <summary>
              Looks up a localized string similar to dimension line location.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Aligned_ExtensionLine1StartControlPoint_Name">
            <summary>
              Looks up a localized string similar to extension line 1 start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Aligned_ExtensionLine2StartControlPoint_Name">
            <summary>
              Looks up a localized string similar to extension line 2 start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular3Point_AngleVertexControlPoint_Name">
            <summary>
              Looks up a localized string similar to angle vertex.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular3Point_DimensionLineArcPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to dimension line arc point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular3Point_ExtensionLine1StartPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to extension line 1 start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular3Point_ExtensionLine2StartPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to extension line 2 start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular4Point_DimensionLineArcPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to dimension line arc point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular4Point_ExtensionLine1EndPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to extension line 1 end point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular4Point_ExtensionLine1StartPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to extension line 1 start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular4Point_ExtensionLine2EndPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to extension line 2 end point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Angular4Point_ExtensionLine2StartPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to extension line 2 start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Diametric_ArcLineIntersectionPoint1ControlPoint_Name">
            <summary>
              Looks up a localized string similar to arc line intersection point 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Diametric_ArcLineIntersectionPoint2ControlPoint_Name">
            <summary>
              Looks up a localized string similar to arc line intersection point 2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Ordinate_FeaturePositionControlPoint_Name">
            <summary>
              Looks up a localized string similar to feature position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Ordinate_LeaderEndPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to leader end point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Radial_ArcLineIntersectionPointControlPoint_Name">
            <summary>
              Looks up a localized string similar to arc line intersection point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfDimension_Radial_CenterControlPoint_Name">
            <summary>
              Looks up a localized string similar to center.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfEntity_DefaultCreateInteractor_UserHint_FixedControlPointCount">
            <summary>
              Looks up a localized string similar to Click to set the {0}..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfEntity_DefaultCreateInteractor_UserHint_VariableControlPointCount">
            <summary>
              Looks up a localized string similar to Click to add the next {0}. Right click to add the last {0}..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfEntity_EditInteractor_UserHint">
            <summary>
              Looks up a localized string similar to Click and drag a control point to move it..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfLine_EndControlPoint_Name">
            <summary>
              Looks up a localized string similar to end point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfLine_StartControlPoint_Name">
            <summary>
              Looks up a localized string similar to start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfLwPolyline_Vertex_ControlPoint_Name">
            <summary>
              Looks up a localized string similar to vertex.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfPoint_ControlPoint_Name">
            <summary>
              Looks up a localized string similar to point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfSpline_ControlPoint_Name">
            <summary>
              Looks up a localized string similar to control point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfText_AlignmentPoint1_Name">
            <summary>
              Looks up a localized string similar to alignment point 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfText_CreateInteractor_UserHint_Step_SetHeight">
            <summary>
              Looks up a localized string similar to Enter the text height..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfText_CreateInteractor_UserHint_Step_SetPosition">
            <summary>
              Looks up a localized string similar to Click to set the text position..
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Strings.DxfText_CreateInteractor_UserHint_Step_SetText">
            <summary>
              Looks up a localized string similar to Enter text..
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DefaultLightingType">
            <summary>
            Represents the default lighting type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DefaultLightingType.OneDistantLight">
            <summary>
            One distant light.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DefaultLightingType.TwoDistantLights">
            <summary>
            Two distant lights.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.StreamSection">
            <summary>
            Represents a section of a stream.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatTEdge">
            <summary>
            SAT tedge entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatEdge">
            <summary>
            SAT edge entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.startVertex">
            <summary>Pointer to start vertex.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.startParameter">
            <summary>Start parameter value.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.endVertex">
            <summary>Pointer to end vertex.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.endParameter">
            <summary>End parameter value.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.coedge">
            <summary>Coedge lying on edge.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.curve">
            <summary>Curve on which the edge lies (currently not a SatCurve to allow for references to unknown entities).</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.reversed">
            <summary>Direction of edge in respect to curve.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEdge.convexity">
            <summary>Convexity string.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEdge.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEdge.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEdge.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEdge.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEdge.StartVertex">
            <summary>
            Get the start vertex.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEdge.StartParameter">
            <summary>
            Get the start parameter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEdge.EndVertex">
            <summary>
            Get the end vertex.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEdge.EndParameter">
            <summary>
            Get the end parameter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEdge.Coedge">
            <summary>
            Get the coedge to which this edge belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEdge.Curve">
            <summary>
            Get the curve which this edge bounds.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEdge.Reversed">
            <summary>
            Is this edge reversed?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEdge.Convexity">
            <summary>
            Get the convexity string.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTEdge.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTEdge.tolerance">
            <summary>Maximum distance between the tcoedges of tedges.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTEdge.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTEdge.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTEdge.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineCloseType">
            <summary>
            B-spline surface close type
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineCloseType.BSplineCloseTypeEnumValues">
            <summary> B-spline curve or surface type strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineCloseType.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineCloseType.WriteDataTo(WW.Cad.Model.Acis.ISatWriter,WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineCloseType.BSplineCloseTypeEnum)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineCloseType.BSplineCloseTypeEnum">
            <summary>
            B-spline curve or surface type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatOffsetSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatOffsetSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatOffsetSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatOffsetSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatOffsetSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatHelixSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatHelixSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatHelixSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatHelixSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatHelixSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryDegenerate">
            <summary>
            SAT body geometry class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryDegenerate.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryDegenerate.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryDegenerate.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryDegenerate.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatPointCurve">
            <summary>
            SAT base class for blend support point curve primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatPointCurve.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatPointCurve.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.IO.Dwg.SectionPageLocator">
            <summary>
            A section page locator.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Dwg.SectionPageLocator.Index">
            <summary>
            Gets or sets the page index (numbered sequentially starting at 1, page index is unique per file).
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Dwg.DwgUtil.SectionMapCrcXorValues">
            <summary>
            Xor values for the section map crc, depending on the number of sections 
            (xor values for 3 to 6 sections).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgUtil.WriteAppInfoForCurrentApplicationVersion(WW.Cad.Model.AppInfo,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Write the app info that corresponds with the CadLib application version.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgUtil.BufferHasOnlyZeroes(System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            Returns whether the specified buffer has only zeroes.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgUtil.GetSectionMapCrcXorValue(System.Int32)">
            <summary>
            Get the xor value for the section map crc, depending on the number of sections 
            (for 3 to 6 sections).
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.FileHeaderCheckData">
            <summary>
            Represents the file header check data that is
            present at the end of the file header page at address 0x3d8.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.ByteStream.ReadFixedLengthString(System.Text.Encoding,System.Int32)">
            <summary>
            Reads the fixed length string (string ends when encountering first zero byte).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.FrameworkElementCollection">
            <summary>
            Represents a framework elements collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.FrameworkElementCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.FrameworkElementCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.ColorContextWithFixedColor">
            <summary>
            Color context with a fixed foreground color.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Polyline2D2N">
            <summary>
            Represents a 2D polyline primitive where each point is associated with a 2D normal vector.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline2D2N.#ctor(WW.Cad.Drawing.Polyline2D2N,WW.Math.Matrix4D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Polyline2D2N"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline2D2N.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline2D2N.Wrappee">
            <summary>
            Gets or sets the wrappee.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline2D2N.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.NodeCollection">
            <summary>
            A collection of <see cref="T:WW.Cad.Drawing.Node"/> objects.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.IGdiDrawable">
            <summary>
            Represents an interface for drawable objects for GDI.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.IGdiDrawable.Draw(System.Windows.Forms.PaintEventArgs,WW.Drawing.GraphicsHelper,WW.Actions.InteractionContext)">
            <summary>
            Draw this object.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.ObjectTypes">
            <summary>
            Object types (DXF names).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLeader">
            <summary>
            Represents the leader entity: a polyline ending in an arrow.
            </summary>
            <remarks>
            <para>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </para>
            <para>
            The arrow head (if enabled) is attached to the first vertex.
            The way the leader looks is affected by its <see cref="P:WW.Cad.Model.Entities.DxfLeader.DimensionStyle"/>.
            See also <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyleOverrides"/> for overriding settings
            of an existing <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/>.
            </para>
            </remarks>
            <example>
            An example of how to create and write a dxf file containing a leader.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class LeaderExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfLeader leader = new DxfLeader(model);
            leader.ArrowHeadEnabled = true;
            leader.Vertices.AddRange(
                 new Point3D[] {
                     new Point3D(1.5, 1.5, 0),
                     new Point3D(2, 2, 0),
                     new Point3D(4, 2.5, 0)
                 }
            );
            model.Entities.Add(leader);
            DxfWriter.Write("Leader Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLeader"/> class.
            </summary>
            <param name="model">
            The model, of which the <see cref="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle"/> is used for the dimension style.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.#ctor(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLeader"/> class.
            </summary>
            <param name="dimensionStyle">The dimension style.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified leader in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLeader.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.ArrowHeadEnabled">
            <summary>
            Gets or sets whether the arrow head is enabled.
            The default value is <see langword="true"/>.
            </summary>
            <remarks>
            See also <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.ArrowBlock">DxfDimensionStyle.ArrowBlock</see>. 
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.AssociatedAnnotation">
            <summary>
            Gets or sets the associate annotation.
            </summary>
            <remarks>
            Is either <see cref="T:WW.Cad.Model.Entities.DxfMText"/>, <see cref="T:WW.Cad.Model.Entities.DxfTolerance"/> or <see cref="T:WW.Cad.Model.Entities.DxfInsert"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.ByBlockColor">
            <summary>
            Gets or sets the by block color.
            The default value is <see cref="F:WW.Cad.Model.Colors.ByBlock"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.CreationType">
            <summary>
            Gets or sets the leader creation type.
            </summary>
            <remarks>
            The default is <see cref="F:WW.Cad.Model.Entities.LeaderCreationType.CreatedWithoutAnnotation"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.DimensionStyleOverrides">
            <summary>
            Gets the dimension style overrides.
            </summary>
            <remarks>
            The overrides override properties of <see cref="P:WW.Cad.Model.Entities.DxfLeader.DimensionStyle"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfLeader.DimensionStyle"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.DimensionStyle">
            <summary>
            Gets or sets the dimension style.
            </summary>
            <remarks>
            <para>
            Together with the <see cref="P:WW.Cad.Model.Entities.DxfLeader.DimensionStyleOverrides"/> the dimension style
            determines the style aspects of the dimension.
            </para>
            <para>
            The dimension style is shared and must be present in <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfLeader.DimensionStyleOverrides"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.HasHookLine">
            <summary>
            Gets or sets whether the leader has a hook line.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.HookLineDirection">
            <summary>
            Gets or sets the hook line direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.HorizontalDirection">
            <summary>
            Gets or sets the "horizontal" direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.LastVertexOffsetFromAnnotation">
            <summary>
            Gets or sets the offset of the last leader vertex from 
            the block reference insertion point.
            </summary>
            <remarks>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">release 14</see>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.LastVertexOffsetFromBlock">
            <summary>
            Gets or sets the offset of the last leader vertex 
            from the annotation placement point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.PathType">
            <summary>
            Gets or sets the path type (default value is <see cref="F:WW.Cad.Model.Entities.LeaderPathType.StraightLineSegments"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.TextAnnotationHeight">
            <summary>
            Gets or sets the text annotation height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.TextAnnotationWidth">
            <summary>
            Gets or sets the text annotation width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.Vertices">
            <summary>
            Gets or the vertices (defined in the WCS).
            The arrow head (if enabled) is attached to the first vertex.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.ZAxis">
            <summary>
            Gets or sets the z-axis ((0, 0, 1) by default).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLeader.IsAnnotative">
            <summary>
            Gets or sets a value indicating whether the entity is annotative.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.LeaderPathType">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfLeader"/> path type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LeaderPathType.StraightLineSegments">
            <summary>
            Straight line segments.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LeaderPathType.Spline">
            <summary>
            Spline.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.LeaderCreationType">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfLeader"/> creation type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LeaderCreationType.CreatedWithTextAnnotation">
            <summary>
            Created with text annotation.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LeaderCreationType.CreatedWithToleranceAnnotation">
            <summary>
            Created with tolerance annotation.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LeaderCreationType.CreatedWithBlockReferenceAnnotation">
            <summary>
            Created with block reference annotation.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.LeaderCreationType.CreatedWithoutAnnotation">
            <summary>
            Created without any annotation.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.HookLineDirection">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfLeader"/> hookline direction.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.HookLineDirection.Opposite">
            <summary>
            Hookline (or end of tangent for a splined leader) is the opposite
            direction from the horizontal vertex.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.HookLineDirection.Same">
            <summary>
            Hookline (or end of tangent for a splined leader) is the same
            direction as horizontal vertex.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfView">
            <summary>
            Represents a named 3D view.
            </summary>
            <remarks>
            <para>
            Properties <see cref="P:WW.Cad.Model.Tables.DxfView.Target"/>, <see cref="P:WW.Cad.Model.Tables.DxfView.Direction"/> and optionally
            the <see cref="P:WW.Cad.Model.Tables.DxfView.LensLength"/> (if <see cref="P:WW.Cad.Model.Tables.DxfView.PerspectiveMode"/> is <see langword="true"/>) 
            determine the transformation to the display coordinate system (DCS).
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Tables.DxfVPort"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfViewport"/>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param newName="name">
            The view newName may not contain spaces.
            </param>
            <exception cref="T:System.ArgumentException">Thrown when newName contains spaces.</exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the view.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.CompareTo(System.Object)">
            <summary>
            For sorting views by newName. See <see cref="T:System.IComparable"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.GetTransform">
            <summary>
            Calculates the transform for transforming the model to paper space.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.GetMappingTransform(WW.Math.Geometry.Rectangle2D,System.Boolean)">
            <summary>
            Get the projection transformation which uses the projection defined by this view and maps the result
            into a given rectangle.
            </summary>
            <remarks>
            This internally uses <see cref="M:WW.Cad.Model.ViewUtil.GetTransform(WW.Cad.Model.IViewDescription,WW.Math.Geometry.Rectangle2D,System.Boolean)"/> where more detailed information is provided.
            </remarks>
            <param name="targetRectangle">Target rectangle. If it does not have the aspect ratio of the view, the view is centered.</param>
            <param name="invertY">Invert the Y direction? This is necessary for target devices where Y points down like screens.</param>
            <returns>
            Transformation matrix which maps the view centered into the given rectangle. 
            The matrix will not be invertable for perspective views.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified view in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.Flags">
            <summary>
            Gets or sets the standard flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.Paperspace">
            <summary>
            Gets or sets whether the view is in paper space.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this view is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this view is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this view is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.BackClippingPlane">
            <summary>
            Gets or sets the back clip plane Z value.
            </summary>
            <remarks>
            <para>
            The back clip plane Z value is relative to the <see cref="P:WW.Cad.Model.Tables.DxfView.Target"/> point
            in the <see cref="P:WW.Cad.Model.Tables.DxfView.Direction">view direction</see>.
            </para>
            <para>
            Value is only effective when <see cref="P:WW.Cad.Model.Tables.DxfView.BackClippingActive"/> is <see langword="true"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.BackClippingActive"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.FrontClippingPlane"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.BackClippingActive">
            <summary>
            Gets or sets whether back clipping is active.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.ViewMode"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.BackClippingPlane"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.FrontClippingPlane">
            <summary>
            Gets or sets the front clip plane Z value.
            </summary>
            <remarks>
            <para>
            The front clip plane Z value is relative to the <see cref="P:WW.Cad.Model.Tables.DxfView.Target"/> point
            in the <see cref="P:WW.Cad.Model.Tables.DxfView.Direction">view direction</see>.
            </para>
            <para>
            Value is only effective when <see cref="P:WW.Cad.Model.Tables.DxfView.FrontClippingActive"/> is <see langword="true"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.FrontClippingActive"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.BackClippingPlane"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.FrontClippingActive">
            <summary>
            Gets or sets whether front clipping is active.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.FrontClippingPlane"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.ViewMode"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.Center">
            <summary>
            Gets or sets the view center in DCS (Display coordinate system).
            In reality the center point is a point in the WCS, but after translation by -<see cref="P:WW.Cad.Model.Tables.DxfView.Target"/>
            and 
            </summary>
            <remarks>
            The center translation gets applied after the -<see cref="P:WW.Cad.Model.Tables.DxfView.Target"/> translation and 
            the orientation transform (determined by the <see cref="P:WW.Cad.Model.Tables.DxfView.Direction"/> and <see cref="P:WW.Cad.Model.Tables.DxfView.TwistAngle"/>),
            just before the camera transform (see <see cref="P:WW.Cad.Model.Tables.DxfView.LensLength"/>).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.Direction">
            <summary>
            Gets or sets the view direction from <see cref="P:WW.Cad.Model.Tables.DxfView.Target"/> (in WCS).
            Is <see cref="F:WW.Math.Vector3D.ZAxis"/> by default.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.LensLength">
            <summary>
            Gets or sets the lens length.
            The default value is 50.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.Name">
            <summary>
            Gets or sets the newName.
            </summary>
            <remarks>
            <para>
            The newName must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the newName 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the newName should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.Tables.DxfView.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when newName contains spaces.</exception>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.PerspectiveMode">
            <summary>
            Gets or sets whether perspective mode is active.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfView.ViewMode"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.RenderMode">
            <summary>
            Gets or sets the render mode.
            The default value is <see cref="F:WW.Cad.Model.RenderMode.Optimized2D">RenderMode.Optimized2D</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.Size">
            <summary>
            Gets or sets the 2D size in the display coordinate system (DCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.Target">
            <summary>
            Gets or sets the view target point (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.TwistAngle">
            <summary>
            Gets or sets the twist angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.Ucs">
            <summary>
            Gets or sets the ucs.
            </summary>
            <remarks>
            UCS was added to <see cref="T:WW.Cad.Model.Tables.DxfView"/> in AutoCAD 2000 (release 15).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.UcsPerView">
            <summary>
            Gets or sets the ucs per view flag.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            If <see langword="true"/> this view stores its own <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> which will become the current
            UCS whenever the viewport is activated.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.UcsOrthographicType">
            <summary>
            Gets or sets the orthographic type of the associated <see cref="P:WW.Cad.Model.Tables.DxfView.Ucs"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.ViewMode">
            <summary>
            Gets or sets the view mode.
            The default value is <see cref="F:WW.Cad.Model.Tables.ViewMode.None">ViewMode.None</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.FollowUcs">
            <summary>
            Gets or sets a value indicating whether to enable UCS follow.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.ClipFrontNotAtEye">
            <summary>
            Gets or sets a value indicating whether to enable front clip not at eye.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfView.ViewDescription">
            <summary>
            Gets the unified view description of this view.
            </summary>
            <remarks>
            The returned object is backed up by this view, so any changes to this view will be reflected.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfView.ViewDescriptionWrapper">
            <summary>
            Helper class wrapping a view and providing the unified <see cref="T:WW.Cad.Model.IViewDescription"/> interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfView.ViewDescriptionWrapper.#ctor(WW.Cad.Model.Tables.DxfView)">
            <summary>
            Initializes a new instance of the <see cref="P:WW.Cad.Model.Tables.DxfView.ViewDescription"/> class.
            </summary>
            <param newName="view">The view.</param>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfSpline">
            <summary>
            Represents a (rational) spline entity.
            </summary>
            <remarks>
            <para>
            A spline is defined by its <see cref="P:WW.Cad.Model.Entities.DxfSpline.ControlPoints"/>, <see cref="P:WW.Cad.Model.Entities.DxfSpline.Degree"/>,
            <see cref="P:WW.Cad.Model.Entities.DxfSpline.Knots"/> and <see cref="P:WW.Cad.Model.Entities.DxfSpline.Weights"/>.
            </para>
            <para>
            A closed spline has just as many knots as an open spline (number of control points + power + 1).
            The closed spline is rendered just as the open spline but a closing curve is added.
            </para>
            <para>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </para>
            </remarks>
            <example>
            Below an example demonstrates how to create and write a DXF file containing a spline.
            <code lang="cs">
using System;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class SplineExample {
        public void DemonstrateCreateSpline() {
            DxfModel model = new DxfModel();

            {
                // Create a cubic spline with default knot values.
                DxfSpline spline = new DxfSpline();
                spline.Degree = 3;
                spline.ControlPoints.Add(new Point3D(3, 0, 0));
                spline.ControlPoints.Add(new Point3D(3, 1, 0));
                spline.ControlPoints.Add(new Point3D(4, 1, 0));
                spline.ControlPoints.Add(new Point3D(4, 0, 0));
                spline.Knots.AddRange(
                    BSplineD.CreateDefaultKnotValues(spline.Degree, spline.ControlPoints.Count, spline.Closed)
                );
                model.Entities.Add(spline);
            }

            {
                // Create a closed cubic spline with specific knot values.
                DxfSpline spline = new DxfSpline();
                spline.Degree = 3;
                spline.Closed = true;
                spline.Color = EntityColors.Blue;
                spline.ControlPoints.Add(new Point3D(-1, 0, 1));
                spline.ControlPoints.Add(new Point3D(-2, 2, 1));
                spline.ControlPoints.Add(new Point3D(-0.5, 2, 1));
                spline.ControlPoints.Add(new Point3D(0.5, 2, 1));
                spline.ControlPoints.Add(new Point3D(2, 2, 1));
                spline.ControlPoints.Add(new Point3D(1, 0, 1));
                spline.Knots.AddRange(new double[] { 0, 0, 0, 0, 0.4, 0.6, 1, 1, 1, 1 });
                model.Entities.Add(spline);
            }

            DwgWriter.Write("SplineExample.DemonstrateCreateSpline.dwg",  model);
            DxfWriter.Write("SplineExample.DemonstrateCreateSpline.dxf",  model);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfSpline.DefaultKnotTolerance">
            <summary>
            Default knot tolerance.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfSpline.DefaultControlPointTolerance">
            <summary>
            Default control point tolerance.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfSpline.DefaultFitTolerance">
            <summary>
            Default fit tolerance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfSpline"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the spline.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified spline in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates a create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">Visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.Get3DBSplineCurve(System.Int32)">
            <summary>
            Get 3d bspline of given power (3 for cubic, 2 for quadratic).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSpline.Get3DBSplineClosingCurve(WW.Math.Geometry.Polyline3D,WW.Cad.Base.BSplineD,System.Int32,WW.Math.Point3D[])">
            <summary>
            Get 3d bspline of given power (3 for cubic, 2 for quadratic).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.ControlPoints">
            <summary>
            Gets the control points in the world coordinate system (WCS).
            </summary>
            <remarks>
            <para>
            Don't forget to also create <see cref="P:WW.Cad.Model.Entities.DxfSpline.Knots"/>.
            </para>
            <para>
            Note that the <see cref="P:WW.Cad.Model.Entities.DxfSpline.ZAxis"/> has no effect on the rendering of the spline.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.ControlPointTolerance">
            <summary>
            Gets or sets the control point tolerance.
            </summary>
            <remarks>
            Default value is <see cref="F:WW.Cad.Model.Entities.DxfSpline.DefaultControlPointTolerance"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.Degree">
            <summary>
            Gets or sets the degree.
            Quadratic splines have degree 2, cubic splines have degree 3.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.EndTangent">
            <summary>
            Gets or sets the end tangent (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.FitPoints">
            <summary>
            Gets the fit points (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.Flags1">
            <summary>
            Gets or sets the <seealso cref="T:WW.Cad.Model.Entities.SplineFlags1"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.KnotParameterization">
            <summary>
            Gets or sets the knot parameter.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.FitTolerance">
            <summary>
            Gets or sets the fit tolerance.
            </summary>
            <remarks>
            Default value is <see cref="F:WW.Cad.Model.Entities.DxfSpline.DefaultFitTolerance"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
            <remarks>
            <para>
            See <see cref="P:WW.Cad.Model.Entities.DxfSpline.Closed"/> for usage of <see cref="F:WW.Cad.Model.Entities.SplineFlags.Closed"/>.
            </para>
            <para>
            See <see cref="P:WW.Cad.Model.Entities.DxfSpline.Rational"/> for usage of <see cref="F:WW.Cad.Model.Entities.SplineFlags.Rational"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.Closed">
            <summary>
            Gets or sets whether the spline is closed.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            <para>
            This gets or sets the <see cref="F:WW.Cad.Model.Entities.SplineFlags.Closed"/> in <see cref="P:WW.Cad.Model.Entities.DxfSpline.Flags"/>.
            </para>
            <para>
            A closed spline has just as many knots as an open spline (number of control points + power + 1).
            The closed spline is rendered just as the open spline but 
            a closing curve is added.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.Rational">
            <summary>
            Gets or sets whether the spline is rational.
            </summary>
            <remarks>
            <para>
            This gets or sets the <see cref="F:WW.Cad.Model.Entities.SplineFlags.Rational"/> in <see cref="P:WW.Cad.Model.Entities.DxfSpline.Flags"/>.
            </para>
            <para>
            For a rational splines the control points are weighted by its <see cref="P:WW.Cad.Model.Entities.DxfSpline.Weights"/>.
            When this flag is false the weights are ignored even if present when drawing the spline.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.IsPeriodic">
            <summary>
            Gets or sets a value indicating whether the spline is periodic.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.IsPlanar">
            <summary>
            Gets or sets a value indicating whether the spline is planar.
            The default value is <c>false</c>.
            When the spline is not planar, the value of <see cref="P:WW.Cad.Model.Entities.DxfSpline.ZAxis"/> is ignored.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfSpline.ZAxis"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.IsLinear">
            <summary>
            Gets or sets a value indicating whether the spline is linear.
            The default value is <c>false</c>.
            </summary>
            <remarks>
            A linear spline is also a planar spline.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfSpline.ZAxis"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfSpline.IsPlanar"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.Knots">
            <summary>
            Gets the knots.
            Use method <see cref="M:WW.Cad.Base.BSplineD.CreateDefaultKnotValues(System.Int32,System.Int32,System.Boolean)"/> to create default knot values.
            </summary>
            <remarks>
            When defining a spline the number of knots should be equal to the <see cref="P:WW.Cad.Model.Entities.DxfSpline.Degree"/>
            + number of <see cref="P:WW.Cad.Model.Entities.DxfSpline.ControlPoints"/> + 1 (also when the spline is closed).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.KnotTolerance">
            <summary>
            Gets or sets the knot tolerance.
            </summary>
            <remarks>
            Default value is <see cref="F:WW.Cad.Model.Entities.DxfSpline.DefaultKnotTolerance"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.StartTangent">
            <summary>
            Gets or sets the start tangent (in WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.Weights">
            <summary>
            Gets or sets the control point weights.
            </summary>
            <remarks>
            If the <see cref="P:WW.Cad.Model.Entities.DxfSpline.Rational"/> flag is set weights must be provided.
            The number of weights must then be the same as the number of control points.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.ZAxis">
            <summary>
            Gets or sets the z-axis.
            This value is ignored if the spline is not planar (see <see cref="P:WW.Cad.Model.Entities.DxfSpline.IsPlanar"/>).
            </summary>
            <remarks>
            The z-axis has no effect on the drawing of the splines, because all the control points are defined
            in world coordinates (WCS).
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfSpline.IsPlanar"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.ExpectedKnotCount">
            <summary>
            Gets the expected knot count (<see cref="P:WW.Cad.Model.Entities.DxfSpline.ControlPoints"/>.Count + <see cref="P:WW.Cad.Model.Entities.DxfSpline.Degree"/> + 1/&gt;).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.KnotsValid">
            <summary>
            Gets whether the knots are valid.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.WeightsValid">
            <summary>
            Gets whether the weights are valid.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSpline.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.SplineFlags1">
            <summary>
            Another spline flags enumeration.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags1.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags1.MethodFitPoints">
            <summary>
            Method fit points.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags1.CVFrameShow">
            <summary>
            CV frame show.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags1.IsClosed">
            <summary>
            Is closed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags1.UseKnotParameter">
            <summary>
            Use knot parameter.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.KnotParameterization">
            <summary>
            Knot parameterization.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.KnotParameterization.Chord">
            <summary>
            Chord.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.KnotParameterization.SquareRoot">
            <summary>
            Square root.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.KnotParameterization.Uniform">
            <summary>
            Uniform.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.KnotParameterization.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.BinaryGroupWriter">
            <summary>
            Description of BinaryGroupWriter.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.BinaryGroupWriter.#ctor(System.IO.BinaryWriter,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ValueDataType">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DxfValue">value</see> data type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.Int">
            <summary>
            A 32-bit integer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.Double">
            <summary>
            A double.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.Date">
            <summary>
            A date.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.Point2D">
            <summary>
            A 2D point.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.Point3D">
            <summary>
            A 3D point.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.ObjectHandle">
            <summary>
            An object handle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.Buffer">
            <summary>
            A buffer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.ResultBuffer">
            <summary>
            A result buffer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ValueDataType.General">
            <summary>
            General (supported from <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/> onwards.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfSolid">
            <summary>
            Solid entity, built from four <see cref="T:WW.Math.Vector3D"/> objects.
            </summary>
            <remarks>
            <para>
            The z-coordinate of all vertices should be zero.
            </para>
            <para>
            The fourth corner point may be the same as the third to let the solid effectively have three corners.
            Note that the third and fourth corner points are in opposite order.
            </para>
            <para>
            This class also represents the obsolete cad entity TRACE.
            </para>
            </remarks>
            <example>
            The example below demonstrates how to create and write a DXF file containing a solid.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class SolidExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            DxfSolid solid = new DxfSolid();
            solid.Color = EntityColors.LightGreen;
            // A solid must have exactly 4 vertexes (the last 2 vertexes may be identical).
            solid.Points.Add(new Point3D(2d, 1d, 01));
            solid.Points.Add(new Point3D(6d, 1d, 01));
            // The 3rd and 4th vertexes are swapped always.
            solid.Points.Add(new Point3D(4d, 5d, 01));
            solid.Points.Add(new Point3D(8d, 5d, 01));
            model.Entities.Add(solid);

            DxfWriter.Write("Solid Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the solid.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified solid in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSolid.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSolid.Points">
            <summary>
            Get all points (<see cref="T:WW.Math.Point3D"/>) of solid (must be four). The points are defined in the OCS.
            </summary>
            <remarks>
            The fourth corner point may be the same as the third to let the solid effectively have three corners.
            Note that the third and fourth corner points are in opposite order.
            </remarks>
            <example>
            Below an example demonstrates how to create and write a DXF file containing a solid.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class SolidExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            DxfSolid solid = new DxfSolid();
            solid.Color = EntityColors.LightGreen;
            // A solid must have exactly 4 vertexes (the last 2 vertexes may be identical).
            solid.Points.Add(new Point3D(2d, 1d, 01));
            solid.Points.Add(new Point3D(6d, 1d, 01));
            // The 3rd and 4th vertexes are swapped always.
            solid.Points.Add(new Point3D(4d, 5d, 01));
            solid.Points.Add(new Point3D(8d, 5d, 01));
            model.Entities.Add(solid);

            DxfWriter.Write("Solid Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSolid.ZAxis">
            <summary>
            Gets or sets the z-axis of the OCS (object coordinate system).
            This is also known as the extrusion direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSolid.Thickness">
            <summary>
            Gets or sets the extrusion thickness.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSolid.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSolid.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSolid.Transform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLayerCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> keyed collection (layer name can be used as indexer parameter).
            </summary>
            <remarks>
            The key is the case insensitive layer name.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLayerCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayerCollection.GetKeyForItem(WW.Cad.Model.Tables.DxfLayer)">
            <summary>
            Gets the key for specified layer.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfBlockCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlockCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfBlockCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfBlockCollection.GetKeyForItem(WW.Cad.Model.Tables.DxfBlock)">
            <summary>
            Gets the key for specified block.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ReferenceUtil">
            <summary>
            Fixes references.
            </summary>
            <remarks>
            When <see cref="P:WW.Cad.Model.CloneContext.CloneExact"/> is <c>true</c>, the indirectly cloned table records (e.g. text style), are not
            added to the target model's table, because they will be cloned as part of the table already, which will preserve the table record order.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.ReferenceUtil.GetBlock(WW.Cad.Model.CloneContext,WW.Cad.Model.Tables.DxfBlock,System.Boolean)">
            <summary>
            Gets the block (clone) from the specified block.
            </summary>
            <param name="cloneContext">The clone context.</param>
            <param name="from">The source block.</param>
            <param name="ownsBlock">if set to <c>true</c> the caller owns the block (usually true for entities that own an anonymous block).</param>
        </member>
        <member name="M:WW.Cad.Model.ReferenceUtil.DetermineUnusedName``1(WW.Cad.Model.KeyedDxfHandledObjectCollection{System.String,``0},System.String,System.Boolean)">
            <summary>
            Get a name for a table or block element.
            </summary>
            <typeparam name="T">generic type, usually some kind of DXF element</typeparam>
            <param name="collection">collection of keyed elements</param>
            <param name="name">name which has to be substituted</param>
            <param name="allowLongNames">are long key names allowed? (older AutoCAD versions restrict name length to 31 characters)</param>
            <returns>a yet unused name</returns>
        </member>
        <member name="T:WW.Cad.Model.Objects.PlotLayoutFlags">
            <summary>
            Plot layout flags.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfPlotSettings"/>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.PlotViewportBorders">
            <summary>
            Plot viewport borders.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.ShowPlotStyles">
            <summary>
            Show plot styles.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.PlotCentered">
            <summary>
            Plot centered.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.PlotHidden">
            <summary>
            Plot hidden.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.UseStandardScale">
            <summary>
            Use standard scale.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.PlotPlotStyles">
            <summary>
            Plot plot styles.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.ScaleLineweights">
            <summary>
            Scale line weights.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.PrintLineweights">
            <summary>
            Print line weights.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.DrawViewportsFirst">
            <summary>
            Draw viewports first.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.ModelType">
            <summary>
            model type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.UpdatePaper">
            <summary>
            Update paper.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.ZoomToPaperOnUpdate">
            <summary>
            Zoom to paper on update.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.Initializing">
            <summary>
            Initializing.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotLayoutFlags.PreviousPlotInit">
            <summary>
            Previous plot init.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.PlotPaperUnits">
            <summary>
            Plot paper units.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfPlotSettings"/>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotPaperUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotPaperUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotPaperUnits.Pixels">
            <summary>
            Pixels.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.PlotRotation">
            <summary>
            Plot rotation.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfPlotSettings"/>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotRotation.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotRotation.QuarterCounterClockwise">
            <summary>
            90 degrees counter clockwise.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotRotation.Half">
            <summary>
            180 degrees.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotRotation.QuarterClockwise">
            <summary>
            90 degrees clockwise.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.PlotType">
            <summary>
            Plot type.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfPlotSettings"/>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotType.LastScreenDisplay">
            <summary>
            Last screen display.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotType.DrawingExtents">
            <summary>
            Drawing extents.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotType.DrawingLimits">
            <summary>
            Drawing limits.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotType.SpecifiedByViewName">
            <summary>
            Specified by <see cref="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotViewName"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotType.SpecifiedByPlotWindowArea">
            <summary>
            Specified by plot window area
            (<see cref="P:WW.Cad.Model.Objects.DxfPlotSettings.PlotWindowArea"/>).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.PlotType.LayoutInformation">
            <summary>
            Layout information.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.ShadePlotResolution">
            <summary>
            Shade plot resolution level.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfPlotSettings"/>
        </member>
        <member name="F:WW.Cad.Model.Objects.ShadePlotResolution.Draft">
            <summary>
            Draft.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ShadePlotResolution.Preview">
            <summary>
            Preview.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ShadePlotResolution.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ShadePlotResolution.Presentation">
            <summary>
            Presentation.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ShadePlotResolution.Maximum">
            <summary>
            Maximum.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ShadePlotResolution.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfTableCellStyleCollection">
            <summary>
            A <see cref="T:WW.Cad.Model.Objects.DxfTableCellStyle"/> collection class.
            The collection key is the cell style's name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyleCollection.GetKeyForItem(WW.Cad.Model.Objects.DxfTableCellStyle)">
            <summary>
            Extracts the key from the specified cell style (the cell style name).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableCellStyleCollection.GetById(System.Int32)">
            <summary>
            Gets the table cell style by specified ID (see <see cref="P:WW.Cad.Model.Objects.DxfTableCellStyle.Id"/>.
            Returns <c>null</c> if not found.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.FractionFormat">
            <summary>
            Represents the fraction format when the linear unit format is set to architectural or fractional.
            </summary>
            <seealso cref="T:WW.Cad.Model.LinearUnitFormat"/>
        </member>
        <member name="F:WW.Cad.Model.FractionFormat.HorizontalStacking">
            <summary>
            Horizontal stacking.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FractionFormat.DiagonalStacking">
            <summary>
            Diagonal stacking.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FractionFormat.NotStacked">
            <summary>
            Not stacked.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.TextChunk">
            <summary>
            Small part of a text with constant settings.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextChunk.#ctor(WW.Cad.Model.Text.ILayoutedText,WW.Math.Matrix4D)">
            <summary>
            Constructor.
            </summary>
            <param name="text">text</param>
            <param name="transformation">transformation (size, slant, insertion point)</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextChunk.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)">
            <summary>
            Draw the text and possible linings to the given drawer.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="insertionTransformation">transformation to draw this chunk under</param>
            <param name="extrusion">extrusion in z, usually <c>0.0</c></param>
            <seealso cref="M:WW.Cad.Model.Text.TextChunk.DrawText(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Text.TextChunk.DrawLinings(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/>
        </member>
        <member name="M:WW.Cad.Model.Text.TextChunk.DrawText(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)">
            <summary>
            Draw only the text but no linings to the given drawer.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="insertionTransformation">transformation to draw this chunk under</param>
            <param name="extrusion">extrusion in z, usually <c>0.0</c></param>
            <seealso cref="M:WW.Cad.Model.Text.TextChunk.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Text.TextChunk.DrawLinings(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/>
        </member>
        <member name="M:WW.Cad.Model.Text.TextChunk.DrawLinings(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)">
            <summary>
            Draw only the linings to the given drawer.
            </summary>
            <param name="drawer">drawer to draw to</param>
            <param name="insertionTransformation">transformation to draw this chunk under</param>
            <param name="extrusion">extrusion in z, usually <c>0.0</c></param>
            <seealso cref="M:WW.Cad.Model.Text.TextChunk.Draw(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Text.TextChunk.DrawText(WW.Cad.Model.IPathDrawer,WW.Math.Matrix4D,System.Double)"/>
        </member>
        <member name="M:WW.Cad.Model.Text.TextChunk.AddLine(WW.Math.Point2D,WW.Math.Point2D)">
            <summary>
            Add a line to this text.
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextChunk.AddLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add a line to this text.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TextChunk.AddLining(WW.Math.Geometry.IShape2D)">
            <summary>
            Add a more complex lining to this text.
            </summary>
            <param name="lining">lining</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TextChunk.Transform(WW.Math.ITransformer4D)">
            <summary>
            Assumes the text is relatively small and doesn't deform non-linearly because
            of specified transformer.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextChunk.Text">
            <summary>
            Get the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextChunk.Position">
            <summary>
            Get the text's insert position in the entity CS.
            </summary>
            <remarks>The insert position defines the start of the baseline of the text</remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.TextChunk.Transformation">
            <summary>
            Get the transformation used to insert this text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextChunk.Font">
            <summary>
            Get the font of the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextChunk.Color">
            <summary>
            Get the color of the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TextChunk.Linings">
            <summary>
            Get additional linings.
            </summary>
            <remarks>
            Linings may be underlines, overlines or fraction lines.
            They are given in the coordinate system of the text, 
            therefore the <see cref="P:WW.Cad.Model.Text.TextChunk.Transformation"/> has to be applied.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.TextChunk.FontPath">
            <summary>
            The path as defined by the font.
            </summary>
            <remarks>This has to be transformed by the <see cref="P:WW.Cad.Model.Text.TextChunk.Transformation"/> to be correct.</remarks>
        </member>
        <member name="T:WW.Cad.Model.SecurityFlags">
            <summary>
            Represents the security flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SecurityFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SecurityFlags.EncryptData">
            <summary>
            Encrypt data.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SecurityFlags.EncryptProperties">
            <summary>
            Encrypt properties.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SecurityFlags.SignData">
            <summary>
            Sign data.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SecurityFlags.AddTimeStamp">
            <summary>
            Add time stamp.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLwPolyline">
            <summary>
            Represents a 2D or light weight poly line entity (LWPOLYLINE), built from 
            <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> objects.
            </summary>
            <remarks>
            <para>
            A light weight polyline consists of straight lines and arcs.
            The arcs are defined by the <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Bulge"/> property.
            </para>
            <para>
            The object coordinate system that affects all <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertices"/> is 
            defined by <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.ZAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Elevation"/>.
            </para>
            <para>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </para>
            </remarks>
            <example>
            An example of how to create and write a dxf file containing a 2D polyline.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class LwPolylineExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfLwPolyline p2d = new DxfLwPolyline();
            p2d.Color = EntityColors.LightBlue;
            p2d.Closed = true;
            p2d.Elevation = 1d;
            p2d.Vertices.AddRange(
                new DxfLwPolyline.Vertex[] {
                    new DxfLwPolyline.Vertex(-3d, 0d),
                    new DxfLwPolyline.Vertex(-4d, 2d),
                    new DxfLwPolyline.Vertex(-5d, 3d),
                    new DxfLwPolyline.Vertex(-4d, 0d),
                    new DxfLwPolyline.Vertex(-3.5d, -0.5d)
                }
            );
            model.Entities.Add(p2d);

            DxfWriter.Write("LwDxfPolyline Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.#ctor(WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.#ctor(System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.#ctor(WW.Cad.Model.Entities.EntityColor,System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.#ctor(WW.Math.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.ExplodeIntoLinesAndArcs">
            <summary>
            Explodes this polyline into a collection of LINE (<see cref="T:WW.Cad.Model.Entities.DxfLine"/>) and 
            ARC (<see cref="T:WW.Cad.Model.Entities.DxfArc"/>) entities.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.CreateCreateInteractor(WW.Actions.ITransaction)">
            <summary>
            Creates a create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.CreateEditInteractor">
            <summary>
            Creates an edit interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified lightweight polyline in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertices">
            <summary>
            Get all vertices (<see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/>) of poly line.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Closed">
            <summary>
            Gets or sets whether the polyline is closed.
            The default value is <c>false</c>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Flags"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Plinegen">
            <summary>
            Gets or sets whether the line type is applied on the polyline as a whole (<c>true</c>),
            or on each line segment separately (<c>false</c>).
            The default value is <c>false</c>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Flags"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Elevation">
            <summary>
            Get or sets the elevation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.ZAxis">
            <summary>
            z-axis of OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Thickness">
            <summary>
            Gets or sets the extrusion thickness.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.ConstantWidth">
            <summary>
            Zero if not used. Start/end width of <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> is then used.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Transform">
            <summary>
            Transform to get from the raw points to the final coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.InteractionControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Flags">
            <summary>
            Only <see cref="F:WW.Cad.Model.Entities.PolylineFlags.Closed"/> and <see cref="F:WW.Cad.Model.Entities.PolylineFlags.Plinegen"/>
            are applicable.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex">
            <summary>
            2D vertex with width that is part of a <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/>.
            </summary>
            <remarks>
            <para>
            It has additional attributes like 
            <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Bulge"/>, <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.StartWidth"/> and <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.EndWidth"/>.
            </para>
            <para>
            The <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Position"/> is in the object coordinate system, defined by the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/> 
            (<see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.ZAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfLwPolyline.Elevation"/>).
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfLwPolyline"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.#ctor(WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.#ctor(WW.Math.Point2D,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.#ctor(WW.Math.Point2D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="bulge">
            The bulge. <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> contains helper methods to calculate a bulge value:
            <see cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)"/> and <see cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)"/>.
            </param>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetArcCenterFromEndPointsAndBulge(WW.Math.Point2D,WW.Math.Point2D,System.Double)"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.#ctor(WW.Math.Point2D,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="startWidth">The start width.</param>
            <param name="endWidth">The end width.</param>
            <param name="bulge">
            The bulge. <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> contains helper methods to calculate a bulge value:
            <see cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)"/> and <see cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)"/>.
            </param>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetArcCenterFromEndPointsAndBulge(WW.Math.Point2D,WW.Math.Point2D,System.Double)"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this lightweight polyline vertex in the context of the specified target model.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.CopyFrom(WW.Cad.Model.Entities.DxfLwPolyline.Vertex,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified vertex in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.CopyFrom(WW.Cad.Model.Entities.DxfLwPolyline.Vertex)">
            <summary>
            Copies from specified vertex in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if equal to other <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.op_Equality(WW.Cad.Model.Entities.DxfLwPolyline.Vertex,WW.Cad.Model.Entities.DxfLwPolyline.Vertex)">
            <summary>
            Returns <see langword="true"/> if both arguments are equal.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.op_Inequality(WW.Cad.Model.Entities.DxfLwPolyline.Vertex,WW.Cad.Model.Entities.DxfLwPolyline.Vertex)">
            <summary>
            Returns <see langword="true"/> if both arguments are unequal.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.EndWidth">
            <summary>
            Gets or sets the end width of next line segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.StartWidth">
            <summary>
            Gets or sets the start width of next line segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Position">
            <summary>
            Gets or sets the coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.X">
            <summary>
            Gets or sets the x coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Y">
            <summary>
            Gets or sets the y coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Bulge">
            <summary>
            Gets or sets the bulge (optional; default is 0) for curve segment.
            A negative value indicates a clockwise arc, a positive value indicates a counter clockwise arc.
            </summary>
            <remarks>
            <para>
            The bulge is the tangent of one fourth the
            included angle for an arc segment, made negative if the arc goes
            clockwise from the start point to the endpoint. A bulge of 0 indicates a
            straight segment, and a bulge of 1 is a semicircle.
            </para>
            <para>
            The bulge. <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> contains helper methods to calculate a bulge value:
            <see cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)"/> and <see cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)"/>.
            </para>
            </remarks>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetArcCenterFromEndPointsAndBulge(WW.Math.Point2D,WW.Math.Point2D,System.Double)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Id">
            <summary>
            Gets or sets the vertex ID.
            </summary>
            <remarks>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.Vertex.Normal">
            <summary>
            Gets or sets the normal vertex.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.Vertex"/> collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfLwPolyline.Vertex})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.#ctor(System.Collections.Generic.IList{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.#ctor(WW.Math.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.Add(WW.Math.Point2D)">
            <summary>
            Adds the specified vertex.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.Add(System.Double,System.Double)">
            <summary>
            Adds a vertex with specified coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.AddRange(System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Adds the specified vertices.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.AddRange(WW.Math.Point2D[])">
            <summary>
            Adds the specified vertices.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.GetIVertex2D(System.Int32)">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.IVertex2D"/> object at the specified index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.WW#Cad#Actions#IControlPointCollection#Insert(System.Int32)">
            <summary>
            Creates and inserts a new control point at the specified index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.WW#Cad#Actions#IControlPointCollection#Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.VertexCollection.WW#Cad#Actions#IControlPointCollection#IsCountFixed">
            <summary>
            Gets a value indicating whether the control point count is fixed.
            If <c>true</c> then no control points can be added or removed.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLwPolyline.CreateInteractor">
            <summary>
            A create interactor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.CreateInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.CreateInteractor"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfLwPolyline.CreateInteractor.ControlPointTemplate">
            <summary>
            Gets the control point template that is used for e.g. polylines where any arbitrary number of control points can be added.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor">
            <summary>
            An interactor to create a polyline entity with a length (distance between the previous and current vertex) that can be entered in a text box.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor.#ctor(WW.Cad.Model.Entities.DxfEntity,WW.Actions.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor.OnMouseMoveProcessed(WW.Actions.InteractorMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMoveProcessed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor.CreateWinFormsDrawable(WW.Actions.InteractionContext,System.Windows.Forms.Control)">
            <summary>
            Creates a win forms drawables for this interactor.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor.Changed">
            <summary>
            Occurs when this object changed.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor.MouseMoveProcessed">
            <summary>
            Occurs when a mouse move event was processed.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfLwPolyline.CreateWithLengthInteractor.WinFormsDrawable">
            <summary>
            The view for <see cref="!:ScaleFromBasePointInteractor"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableColumn2005Collection">
            <summary>
            A <see cref="T:WW.Cad.Model.Entities.DxfTableColumn2005"/> collection class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfTableContent">
            <summary>
            Represents table content. For internal use only.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfFormattedTableData">
            <summary>
            Represents formatted table data. For internal use only.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfFormattedTableData.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfFormattedTableData.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents from specified object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFormattedTableData.CellStyleOverrides">
            <summary>
            Gets the cell style overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFormattedTableData.MergedCellRanges">
            <summary>
            Gets the merged cell ranges.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFormattedTableData.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfFormattedTableData.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfTableContent"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetCellStyle(System.Int32,System.Int32)">
            <summary>
            Gets the cell style (not the cell style overrides) for specified row and column index.
            Use value -1 to not specify a specific row/column.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetCellContent(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the cell content for specified row/column/cell content index.
            Returns <c>null</c> if the cell does not have contents.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetAutoScale(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the auto scale setting for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetCellAlignment(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the cell alignment for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetTextHeight(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the text height for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetTextStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the text style for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetContentColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the content color for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetValueFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the value format for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetRotation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the rotation setting for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetHorizontalMargin(System.Int32,System.Int32)">
            <summary>
            Gets the horizontal margin setting for specified row/column index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetVerticalMargin(System.Int32,System.Int32)">
            <summary>
            Gets the vertical margin setting for specified row/column index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetEffectiveBorderInsideHorizontal(System.Int32,System.Int32)">
            <summary>
            Gets the effective table inside horizontal border for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetEffectiveBorderInsideVertical(System.Int32,System.Int32)">
            <summary>
            Gets the effective table inside vertical border for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetEffectiveBorderTop(System.Int32,System.Int32)">
            <summary>
            Gets the effective table top border for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetEffectiveBorderRight(System.Int32,System.Int32)">
            <summary>
            Gets the effective table right border for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetEffectiveBorderBottom(System.Int32,System.Int32)">
            <summary>
            Gets the effective table bottom border for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetEffectiveBorderLeft(System.Int32,System.Int32)">
            <summary>
            Gets the effective table left border for specified row/column/cell content index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents from specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.InitFrom2005Table(WW.Cad.Model.Entities.DxfTable2005)">
            <summary>
            Initialize this object from specified AutoCAD 2005 table.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfTableContent.GetEffectiveBorder(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the effective table border for specified row/column/cell content index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableContent.TableStyle">
            <summary>
            Gets or sets the table style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableContent.SuppressTitle">
            <summary>
            Gets or sets a value indicating whether to suppress the title.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableContent.SuppressHeaderRow">
            <summary>
            Gets or sets a value indicating whether to suppress the header row.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableContent.FlowDirection">
            <summary>
            Gets or sets the flow direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableContent.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfTableContent.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCellContentCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContentCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContentCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfTableCellContent})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellContentCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.Add(WW.Cad.Model.DxfValueFormat,System.Int32)">
            <summary>
            Creates a new <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> instance with the specified format and value, and
            adds it to this collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.Add(WW.Cad.Model.DxfValueFormat,System.Double)">
            <summary>
            Creates a new <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> instance with the specified format and value, and
            adds it to this collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.Add(WW.Cad.Model.DxfValueFormat,WW.Math.Point2D)">
            <summary>
            Creates a new <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> instance with the specified format and value, and
            adds it to this collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.Add(WW.Cad.Model.DxfValueFormat,WW.Math.Point3D)">
            <summary>
            Creates a new <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> instance with the specified format and value, and
            adds it to this collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.Add(WW.Cad.Model.DxfValueFormat,System.String)">
            <summary>
            Creates a new <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> instance with the specified format and value, and
            adds it to this collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.Add(WW.Cad.Model.DxfValueFormat,System.DateTime)">
            <summary>
            Creates a new <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> instance with the specified format and value, and
            adds it to this collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellContentCollection.Add(WW.Cad.Model.DxfValueFormat,WW.Cad.Model.DxfHandledObject)">
            <summary>
            Creates a new <see cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/> instance with the specified format and value, and
            adds it to this collection.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.TableStyleOverrideFlags">
            <summary>
            Represents table style override flags as used in AutoCAD 2005 tables.
            No longer used since new table classes were introduced in AutoCAD 2008.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfTableCellRangeCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.DxfTableCellRange"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRangeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTableCellRangeCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRangeCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTableCellRangeCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRangeCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.DxfTableCellRange})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTableCellRangeCollection"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRangeCollection.FindMatch(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the matching cell range if present.
            Returns <c>null</c> if not found.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRangeCollection.FindFirst(System.Int32,System.Int32)">
            <summary>
            Finds the the first cell range that contains specified row/column index if present.
            Returns <c>null</c> if not found.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRangeCollection.AreInSameCellRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns if there is a cell range containing the two cells with specified row/column indexes.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfConnectionPoint">
            <summary>
            Represents the connection point.
            </summary>
            <remarks>
            Containes node Id and connection string.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfConnectionPoint.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>
            Cloned object.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfConnectionPoint.Clone(WW.Cad.Model.CloneContext,WW.Cad.Model.Objects.DynamicBlock.DxfConnectionPoint[])">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfConnectionPoint.ConnectionPointId">
            <summary>
            Gets or sets the connection point node Id.
            </summary>
            <remarks>
            Typically mode Id is a link to Grip point.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfConnectionPoint.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <remarks>
            examples "X", "Y", "UpdatedX", "UpdatedY", "XDelta", "YDelta" ...
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData">
            <summary>
            Represents the dynamic block representation data.
            </summary>
            <remarks>
            Object from extension dictionary of dynamic block insert with link to dynamic block.
            Dynamic block insert itself linked to block with current representation of dynamic block.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData.Version">
            <summary>
            Gets or sets the version of data. Default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData.DynamicBlock">
            <summary>
            Gets or sets the dynamic block.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockRepresentationData.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.FileHeader">
            <summary>
            Represents the data storage file header.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.FileSignature">
            <summary>
            Gets or sets the file signature.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.FileHeaderSize">
            <summary>
            Gets or sets the size of the file header.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.Unknown1">
            <summary>
            Unknown1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.Unknown2">
            <summary>
            Unknown2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.DataStorageRevision">
            <summary>
            Gets or sets the data storage revision.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.SegmentIndexOffset">
            <summary>
            Gets or sets the segment index offset.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.SegmentIndexUnknown">
            <summary>
            Gets or sets the segment index unknown.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.SegmentIndexEntryCount">
            <summary>
            Gets or sets the segment index entry count (for <see cref="T:WW.Cad.Model.DataStorage.FileSegment.SegmentIndex"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.SchemaIndexSegmentIndex">
            <summary>
            Gets or sets the segment index of the schema index segment (<see cref="T:WW.Cad.Model.DataStorage.FileSegment.SchemaIndex"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.DataIndexSegmentIndex">
            <summary>
            Gets or sets the segment index of the data index (<see cref="T:WW.Cad.Model.DataStorage.FileSegment.DataIndex"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.SearchSegmentIndex">
            <summary>
            Gets or sets the segment index of the search segment (<see cref="T:WW.Cad.Model.DataStorage.FileSegment.Search"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.PreviousSaveIndex">
            <summary>
            Gets or sets the index of the previous save.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.FileHeader.FileSize">
            <summary>
            Gets or sets the size of the file.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatVertexTemplate">
            <summary>
            SAT tolerant vertex entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatVertexTemplate.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatVertexTemplate.parametricTokenIds">
            <summary>Array of parametric token Ids.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatVertexTemplate.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatVertexTemplate.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatVertexTemplate.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatBody">
            <summary>
            SAT body entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatBody.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatBody.firstLump">
            <summary>Pointer to first lump.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatBody.firstShell">
            <summary>Pointer to first shell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatBody.firstWire">
            <summary>Pointer to first wire.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatBody.transform">
            <summary>Pointer to transformation.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatBody.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatBody.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatBody.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatBody.RegisterToFile(WW.Cad.Model.Acis.SatFile)">
            <summary>
            Register this entity to a SAT file.
            </summary>
            <remarks>
            Most entities are not registered directly to a SAT file.
            </remarks>
            <param name="satFile">SAT file to register to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatBody.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatBody.FirstLump">
            <summary>
            Get the first lump belonging to this body.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatBody.FirstShell">
            <summary>
            Get the first shell of this body.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatBody.FirstWire">
            <summary>
            Get the first wire of this body.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatBody.Transform">
            <summary>
            Get the transformation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatBody.Lumps">
            <summary>
            Get the lumps of this body.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhMaterialEntity">
            <summary>
            SAT Rh background entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhMaterialEntity.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhMaterialEntity.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhMaterialEntity.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.RH_Entities.SatRhMaterialEntity.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatTorusPrimitive">
            <summary>
            SAT torus primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatTorusPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatTorusPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatTorusPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatTorusPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetSurfaceIntCurPrimitive">
            <summary>
            SAT primitive.
            Defines an interpolated curve subtype which is offset from a curve lying on a surface
            along the surface normal.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetSurfaceIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetSurfaceIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetSurfaceIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatOffsetSurfaceIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatTransformLawData">
            <summary>
            SAT class for Transform Law data.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatTransformLawData.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatTransformLawData.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatTransformLawData.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatTransformLawData.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve">
            <summary>
            Curve approximation by straight line segments.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.points">
            <summary>The points of this curve.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.AddPoint(WW.Math.Point3D)">
            <summary>
            Add a point to this curve.
            </summary>
            <param name="point">point to add</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.AddPoints(WW.Math.Point3D[])">
            <summary>
            Add several points to this curve.
            </summary>
            <param name="addPoints">points to add</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.AddPoints(System.Collections.Generic.IEnumerable{WW.Math.Point3D})">
            <summary>
            Add several points to this curve.
            </summary>
            <param name="addPoints">points to add</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.AddPointsReversed(WW.Math.Point3D[])">
            <summary>
            Add a number of points in reversed order to this curve.
            </summary>
            <param name="addPoints">points to add</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.AddPointsReversed(System.Collections.Generic.IEnumerable{WW.Math.Point3D})">
            <summary>
            Add a number of points in reversed order to this curve.
            </summary>
            <param name="addPoints">points to add</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.AddPoints(System.Collections.Generic.IEnumerable{WW.Math.Point3D},System.Boolean)">
            <summary>
            Add a number of points to this curve.
            </summary>
            <param name="addPoints">points to add</param>
            <param name="reversed">reverse order?</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.Points">
            <summary>
            Get the points of this curve.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.Item(System.Int32)">
            <summary>
            Get the point at the given index.
            </summary>
            <param name="index">point index</param>
            <returns>point at given index</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve.Count">
            <summary>
            Get the number of points in this curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateAdvancedSplineAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateAdvancedSplineAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateAdvancedSplineAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateAdvancedSplineAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyeFMeshAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyeFMeshAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.IO.SupportedObjectDxfWriteFilter">
            <summary>
            This class returns for each type of entity/object whether writing to DXF is supported.
            </summary>
            <remarks>
            Currently this class is used for all DXF versions,
            but in the future this class may be sub classed for specific DXF versions.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.#ctor(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DwgWriter"/> class.
            </summary>
            <param name="stream">
            The stream to which the DWG file is written.
            The stream must support writing and seeking.
            </param>
            <param name="model">The model to write.</param>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.Write(System.IO.Stream,WW.Cad.Model.DxfModel)">
            <summary>
            Writes the specified model to the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.Write">
            <summary>
            Write the <see cref="T:WW.Cad.Model.DxfModel">model</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.InitSections">
            <summary>
            Puts all sections in the right order and number the sections.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.WriteMetaData">
            <summary>
            Writes the first 0x80 bytes of the file.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.WriteFileHeaderData(WW.Cad.IO.Dwg.ByteStream)">
            <summary>
            Writes 0x6c bytes of file header data, present at the beginning of the file as part
            of the file header, and at the end of the file.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.WriteSectionsMap">
            <summary>
            Writes the section map (for all data sections).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.WriteDataSectionToMainStream(WW.Cad.IO.Dwg.Dwg2007.LogicalSection)">
            <summary>
            Cuts the data section into pages, compresses each page and writes each page to the main stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.WriteDataSectionPageToMainStream(WW.Cad.IO.Dwg.Dwg2007.LogicalSection,System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            Writes a data section page with specified page index to main stream.
            </summary>
            <remarks>
            A page must start on a position dividable by 0x20. Padding bytes are filled with random bytes.
            The page header from R18 has disappeared.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.WritePage(WW.Cad.IO.Dwg.Dwg2007.SectionPage,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a page and pads it so the page size is a multiple of 0x20 bytes.
            Assigns the page's Id, StreamOffset and Length.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.RSEncode(System.Byte*,System.Byte*,System.Byte*,System.Int32,WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding)">
            <summary>
            Encode the data using Reed-Solomon.
            The parity bytes are written to a buffer, referenced by parityBufferPtr.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.RSEncodeInterleaved(System.Byte*,System.Byte*,System.Int32,WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding)">
            <summary>
            Encode the data using Reed-Solomon.
            The data is interleaved, with the interleaving space being the number of blocks n.
            The first block's bytes are written to position 0, n, 2 * n, 3 * n.
            The second block's bytes are written to position 1, n + 1, 2 * n + 1, 3 * n + 1.
            Etc.
            </summary>
            <remarks>
            Returns the RS block count.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgWriterR21.RSEncodeBlockInterleaved(System.Byte*,System.Byte*,System.Int32,WW.Cad.IO.Dwg.Dwg2007.ReedSolomonEncoding)">
            <summary>
            Encode a single block.
            The blockCount is used as the interleaving space.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfPolygonMeshInfo">
            <summary>
            Temporary data container until the exact type of polyline can be determined based on its Flags.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphicsFactory2Util">
            <summary>
            A utility class for creating drawables for a model or a layout using the <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory2"/> interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactory2Util.CreateDrawables(WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Creates the drawables for specified model.
            </summary>
            <param name="graphicsFactory">The graphics factory.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactory2Util.CreateDrawables(WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the drawables for a specified model.
            </summary>
            <param name="graphicsFactory">The graphics factory.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactory2Util.CreateDrawables(WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates drawables for given DXF model using given view ports.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="graphicsFactory">The graphics factory.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactory2Util.CreateDrawables(WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Cad.Drawing.GraphicsConfig,WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates drawables for given model using given view ports.
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="graphicsFactory">The graphics factory.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in model space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphics2Cache">
            <summary>
            A cache for wireframe graphics as created using interface <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory2"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.ICadDrawer">
            <summary>
            An interface for drawing CAD objects.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ICadDrawer.AddDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the drawables for a specified model.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
        </member>
        <member name="M:WW.Cad.Drawing.ICadDrawer.AddDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates drawables for given model using given view port.
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in model space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.ICadDrawer.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Updates the drawables for specified entity.
            </summary>
            <exception cref="T:System.Exception">thrown when the drawables are not updateable.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.ICadDrawer.EraseDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Erases the drawables for specified entity, 
            but the drawables can still be recreated later at the original position in the drawables using <seealso cref="M:WW.Cad.Drawing.ICadDrawer.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
            <exception cref="T:System.Exception">thrown when the drawables are not updateable.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.ICadDrawer.RemoveDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Removes the drawables for specified entity.
            </summary>
            <exception cref="T:System.Exception">thrown when the drawables are not updateable.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.WireframeGraphics2Cache"/> class.
            </summary>
            <param name="supportsText">
            if set to <c>true</c> the cache supports text. If not then text is approximated as a number of curves.
            </param>
            <param name="areDrawablesUpdateable">if set to <c>true</c> the drawables are updateable.</param>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.CreateDrawables(WW.Cad.Model.DxfModel)">
            <summary>
            Creates the WPF framework elements for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.CreateDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Creates the WPF framework elements for specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the WPF framework elements for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.AddDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the WPF framework elements for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.CreateDrawables(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout)">
            <summary>
            Creates framework elements for given DXF model using specified layout (see property <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>).
            </summary>
            <remarks>
            <para>
            The old framework elements are cleared before creating the new ones.
            </para>
            <para>
            The entities in model space are transformed to paper space according to 
            the <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see> in specified layout.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.CreateDrawables(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates framework elements for given DXF model using given view port (see property <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>).
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates framework elements for given dxf model using given view port (see property <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>).
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in model space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.AddDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates framework elements for given dxf model using given view port (see property <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>).
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in model space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Updates the drawables for specified entity.
            </summary>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.EraseDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Erases the drawables for specified entity, 
            but the drawables can still be recreated later at the original position in the <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables"/> using <seealso cref="M:WW.Cad.Drawing.WireframeGraphics2Cache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.RemoveDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Removes the drawables for specified entity.
            </summary>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.WireframeGraphics2Cache.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.GetDrawables(WW.Cad.Drawing.RenderedEntityInfo)">
            <summary>
            Gets the drawables for specified rendered entity info.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.GetUpdateEntityDrawablesHelper(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Gets a <see cref="T:WW.Cad.Drawing.WireframeGraphics2Cache.UpdateEntityDrawablesHelper"/> for specified entity.
            Returns <c>null</c> if not present.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.SuspendChangeNotification">
            <summary>
            Suspends the change notification.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.ResumeChangeNotification">
            <summary>
            Resumes the change notification.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.Draw(WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw all drawables onto the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.RemoveEntityDrawablesInfo(WW.Cad.Drawing.WireframeGraphics2Cache.EntityDrawablesInfo)">
            <summary>
            Recursively removes the specified EntityDrawablesInfo instance and all its children from 
            entityToEntityDrawablesInfoList.
            </summary>
        </member>
        <member name="E:WW.Cad.Drawing.WireframeGraphics2Cache.Changed">
            <summary>
            Occurs when the cache contents changed.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphics2Cache.Config">
            <summary>
            Gets or sets the graphics configuration determining
            various aspects of the rendering process.
            The default value is <see cref="F:WW.Cad.Drawing.GraphicsConfig.WhiteBackgroundCorrectForBackColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphics2Cache.Drawables">
            <summary>
            Gets the drawables.
            </summary>
            <remarks>
            This contains an hierarchy of drawable objects.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphics2Cache.AreDrawablesUpdateable">
            <summary>
            Gets a value indicating whether the drawables are updateable.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphics2Cache.SupportsText">
            <summary>
            Gets a value indicating whether this instance supports text.
            If <c>false</c> then text whill be converted to collection of shapes.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.GraphicsFactory.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Need to mark begin/end of insert in case part of the inserts child drawables are updated,
            e.g. attributes are updated using <see cref="M:WW.Cad.Drawing.WireframeGraphicsCache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            That way the first and last drawable (especially the last) of the insert remain the same, otherwise
            the last drawable might get removed, and then the inserts reference to the last drawable is invalid.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.GraphicsFactory.EndInsert">
            <summary>
            Need to mark begin/end of insert in case part of the inserts child drawables are updated,
            e.g. attributes are updated using <see cref="M:WW.Cad.Drawing.WireframeGraphicsCache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphics2Cache.EntityDrawablesInfo">
            <summary>
            This object is only used if entity drawables need to be updateable.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphics2Cache.EntityDrawablesInfo.Children">
            <summary>
            Gets the children. Need to know children in case a INSERT's block is updated, e.g. entities are removed from it.
            When the INSERT's drawables are updated the EntityDrawablesInfo for removed entities need to be removed as well.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphics2Cache.EntityDrawable">
            <summary>
            This is a container for entity drawables, making it easier to replace them when the
            entity changes.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.IWireframeDrawable2">
            <summary>
            An interface for a class that can draw itself onto a <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory2"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.IWireframeDrawable2.Draw(WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draws this object onto specified graphics factory.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphics2Cache.EntityGeometry">
            <summary>
            This is a container for entity geometry with the same color/forText/fill/stroke properties.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphics2Cache.UpdateEntityDrawablesHelper">
            <summary>
            Represents a helper class for updating derived graphics like in GDIGraphics3D for a single entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphics2Cache.UpdateEntityDrawablesHelper.Draw(WW.Cad.Drawing.DrawContext,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draws the entity in a specific entity chain, based on specified draw context and graphics factory.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.ViewportTransformer">
            <summary>
            Transforms points from model space to paper space and also does viewport clipping.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.#ctor(WW.Cad.Model.Entities.DxfViewport,WW.Math.Matrix4D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.Transform(WW.Math.Point3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.Transform(WW.Math.Geometry.Segment3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.Transform(WW.Math.Geometry.Polyline3D)">
            <summary>
            See <see cref="T:WW.Cad.Drawing.ILinearTransformer"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.Transform(WW.Math.Geometry.IShape4D)">
            <summary>
            Transforms and clips a generic shape.
            </summary>
            <param name="shape">
            Generic shape to transform. It is expected that this shape is a temporary object, 
            which may be changed by this method.
            </param>
            <returns>Transformed and possibly clipped result shape.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.SetPreTransform(WW.Math.Matrix4D)">
            <summary>
            Applies given transform (pre) before all other transforms.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.TryIsInside(WW.Math.Bounds3D)">
            <summary>
            Check a given volume for its clipping.
            </summary>
            <remarks>
            This method may not be exact, but provides a good means for optimization.
            </remarks>
            <param name="bounds">Volume bounds.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.IsInside(WW.Math.Geometry.IShape4D)">
            <summary>
            Check a shape how it is clipped.
            </summary>
            <remarks>
            This is performing the whole clipping process without performing the actual clipping,
            so in most cases this is useless and it is much better to use the <see cref="M:WW.Cad.Drawing.IClippingTransformer.Transform(WW.Math.Geometry.IShape4D)"/>
            method directly. But in some circumstances like outputting text as text this method is useful
            to check whether a given text is clipped.
            </remarks>
            <param name="shape">Shape to check for clipping, possibly changed during the check.</param>
            <returns>The result of the checking.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.ViewportTransformer.Clone">
            <summary>
            Clones the transformer.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ViewportTransformer.Matrix">
            <summary>
            Gets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ViewportTransformer.Matrix3D">
            <summary>
            Gets the 3x3 matrix for transforming a line segment before line type is applied to it.
            Line type is applied in the world coordinate system (for model space), or in paper space,
            but the perspective transformation component is omitted from this matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ViewportTransformer.LineTypeScaler">
            <summary>
            Gets the line type scaler.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Triangle">
            <summary>
            Represents a triangle primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Triangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Triangle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Triangle.#ctor(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Triangle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Triangle.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Triangle.V0">
            <summary>
            Gets or sets vertex 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Triangle.V1">
            <summary>
            Gets or sets vertex 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Triangle.V2">
            <summary>
            Gets or sets vertex 2.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.GraphicElement2">
            <summary>
            Represents a graphic element extending <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1"/> and
            adding line type, line type scale and polyline generation properties.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.GraphicElement1">
            <summary>
            Represents a graphic element consisting of a geometry and a color.
            </summary>
            <seealso cref="T:WW.Cad.Drawing.Surface.GraphicElement1"/>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.IGraphicElement">
            <summary>
            Represents a graphic element interface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.IGraphicElement.Accept(WW.Cad.Drawing.Surface.IGraphicElementVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1.#ctor(WW.Drawing.ArgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1.#ctor(WW.Cad.Drawing.Surface.Geometry,WW.Drawing.ArgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1.Matches(WW.Drawing.ArgbColor)">
            <summary>
            Matcheses the specified color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1.Accept(WW.Cad.Drawing.Surface.IGraphicElementVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElement1.Geometry">
            <summary>
            Gets the geometry.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElement1.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement2"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement2.#ctor(WW.Drawing.ArgbColor,WW.Cad.Model.Tables.DxfLineType,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement2"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement2.#ctor(WW.Cad.Drawing.Surface.Geometry,WW.Drawing.ArgbColor,WW.Cad.Model.Tables.DxfLineType,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement2"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement2.Matches(WW.Drawing.ArgbColor,WW.Cad.Model.Tables.DxfLineType,System.Double,System.Boolean)">
            <summary>
            Returns whether this graphic element matches the specified parameters.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement2.Accept(WW.Cad.Drawing.Surface.IGraphicElementVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElement2.LineType">
            <summary>
            Gets or sets the line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElement2.LineTypeScale">
            <summary>
            Gets or sets the line type scale.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElement2.Plinegen">
            <summary>
            Gets or sets whether the line type is applied on the polyline as a whole (<c>true</c>),
            or on each line segment separately (<c>false</c>).
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.DrawUtil">
            <summary>
            Represents a drawing utility class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.CreateMeasureGraphics(System.Drawing.Image)">
            <summary>
            Creates a graphics object from specified (dummy) image just for measurements.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawPolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Drawing.ArgbColor,System.Boolean,System.Boolean,System.Boolean,WW.Math.Geometry.Polyline4D)">
            <summary>
            Draws specified polylines as separate paths.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawPathAsMultipleGeometries(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Drawing.ArgbColor,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D})">
            <summary>
            Draws specified polylines as separate paths.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawPathAsOneGeometry(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,WW.Drawing.ArgbColor,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D})">
            <summary>
            Draws specified polylines as one path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawPolylines(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D})">
            <summary>
            Draws given polylines.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.Extrude(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Boolean,WW.Math.Vector3D)">
            <summary>
            Extrude polyline which may be a polyline or the border of a surface.
            </summary>
            <remarks>
            First the polyline is extruded, and then transformation 
            using transformer in given context is applied.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.Extrude(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Math.Geometry.Polyline3D,System.Boolean,WW.Math.Vector3D)">
            <summary>
            Extrude polyline which may be a polyline or a polygon border.
            </summary>
            <remarks>
            First the polyline is extruded, and then transformation 
            using transformer in given context is applied.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.ExtrudePolylines(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Boolean,WW.Math.Matrix4D,WW.Math.Vector3D,System.Double)">
            <summary>
            Extrude polyline.
            </summary>
            <remarks>
            First the polyline is extruded, and then transformation 
            using transformer in given context is applied.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.ExtrudePolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Cad.Drawing.Polyline2D2N,System.Boolean,WW.Math.Matrix4D,WW.Math.Vector3D,System.Double)">
            <summary>
            Extrude wide polyline.
            </summary>
            <remarks>
            First the polyline is extruded, and then transformation 
            using transformer in given context is applied.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.ExtrudeWidePolylines(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Boolean,WW.Math.Matrix4D,WW.Math.Vector3D,System.Double)">
            <summary>
            Extrude wide polyline.
            </summary>
            <remarks>
            First the polyline is extruded, and then transformation 
            using transformer in given context is applied.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.ExtrudeWidePolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Cad.Drawing.Polyline2D2N,WW.Cad.Drawing.Polyline2D2N,System.Boolean,WW.Math.Matrix4D,WW.Math.Vector3D,System.Double)">
            <summary>
            Extrude wide polyline.
            </summary>
            <remarks>
            First the polyline is extruded, and then transformation 
            using transformer in given context is applied.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawWidePolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},System.Collections.Generic.IList{WW.Cad.Drawing.Polyline2D2N},WW.Math.Matrix4D,WW.Math.Vector3D,System.Boolean)">
            <summary>
            Draw wide polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawWidePolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Cad.Drawing.Polyline2D2N,WW.Cad.Drawing.Polyline2D2N,WW.Math.Matrix4D,WW.Math.Vector3D,System.Boolean)">
            <summary>
            Draw wide polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawWidePolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Geometry,System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},System.Collections.Generic.IList{WW.Math.Geometry.Polyline2D},WW.Math.Matrix4D,WW.Math.Vector3D,System.Boolean)">
            <summary>
            Draw wide polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawWidePolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Geometry,WW.Math.Geometry.Polyline2D,WW.Math.Geometry.Polyline2D,WW.Math.Matrix4D,WW.Math.Vector3D,System.Boolean)">
            <summary>
            Draw wide polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawPolylines(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D})">
            <summary>
            Draws given polylines as lines or surfaces.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawPolylines(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Boolean)">
            <summary>
            Draws given polylines as lines or surfaces.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawPolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Math.Geometry.Polyline3D,System.Boolean)">
            <summary>
            Draws given polyline as lines or surface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawSurface(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Math.Geometry.Polyline3D,System.Collections.Generic.List{System.Boolean})">
            <summary>
            Draws given polyline as lines or surface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawSurface(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,System.Collections.Generic.List{WW.Math.Point3D},System.Collections.Generic.List{System.Boolean})">
            <summary>
            Draws given polyline as lines or surface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawSurface(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory,WW.Math.Geometry.Polyline4D,System.Collections.Generic.List{System.Boolean})">
            <summary>
            Draws a surface with given polyline as boundary.
            </summary>
            <remarks>
            Boundary must be convex.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.Extrude(WW.Cad.Drawing.Surface.Geometry,System.Collections.Generic.IList{WW.Math.Geometry.Polyline3D},System.Boolean,WW.Math.Vector3D)">
            <summary>
            Extrude polyline which may be a polyline or the border of a surface.
            </summary>
            <remarks>
            First the polyline is extruded, and then transformation 
            using transformer in given context is applied.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.Extrude(WW.Cad.Drawing.Surface.Geometry,WW.Math.Geometry.Polyline3D,System.Boolean,WW.Math.Vector3D)">
            <summary>
            Extrude polyline which may be a polyline or a polygon border.
            </summary>
            <remarks>
            First the polyline is extruded, and then transformation 
            using transformer in given context is applied.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawPolyline(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Geometry,WW.Math.Geometry.Polyline3D,System.Boolean)">
            <summary>
            Draws given polyline as lines or surface.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawSurface(WW.Cad.Drawing.Surface.Geometry,System.Collections.Generic.IList{WW.Math.Point3D})">
            <summary>
            Draws a surface with given polygon as boundary.
            </summary>
            <remarks>
            Boundary must be convex (? is this still true?).
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawShapes(WW.Cad.Model.IPathDrawer,System.Collections.Generic.IEnumerable{WW.Math.Geometry.IShape4D},WW.Drawing.ArgbColor,System.Int16)">
            <summary>
            Draw a list of 4D shapes to a path drawer.
            </summary>
            <param name="pathDrawer">The path drawer.</param>
            <param name="shapes">The list of shapes.</param>
            <param name="plotColor">The color used for drawing.</param>
            <param name="lineWeight">The line weight used for drawing.</param>
        </member>
        <member name="M:WW.Cad.Drawing.DrawUtil.DrawShapes(WW.Cad.Model.IPathDrawer,System.Collections.Generic.IEnumerable{WW.Math.Geometry.FlatShape4D},WW.Drawing.ArgbColor,System.Int16,System.Double)">
            <summary>
            Draw a list of flat 4D shapes to a path drawer.
            </summary>
            <remarks>
            It is silently assumed that the shapes are not belonging to texts.
            </remarks>
            <param name="pathDrawer">The path drawer.</param>
            <param name="shapes">The list of shapes.</param>
            <param name="plotColor">The color used for drawing.</param>
            <param name="lineWeight">The line weight used for drawing.</param>
            <param name="extrusion">Extrusion of shapes.</param>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.GDIGraphics3D">
            <summary>
            Represents a class to draw 3D graphics onto a 2D plane using GDI <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <remarks>
            <para>
            Usage:
            <list type="number">
              <item>
                <description>
                  Create intermediate drawable objects (points/lines/polylines) 
                  using <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel)"/>.
              </description>
              </item>
              <item>
                <description>
                  Get <see cref="T:WW.Math.Bounds3D">bounding box</see> using method <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.BoundingBox(WW.Math.Bounds3D)"/>.
                </description>
              </item>
              <item>
                <description>
                  Calculate the scale transform needed to fit the drawing into the display rectangle using
                  <see cref="M:WW.Cad.Base.DxfUtil.GetScaleTransform(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)"/>. 
                  Set the result with the <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.To2DTransform"/> property.
                </description>
              </item>
              <item>
                <description>
                  Draw intermediate drawable objects using 
                  <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/>.
                </description>
              </item>
            </list>
            This intermediate representation is needed to speed up drawing when interacting with 
            the graphics (e.g. rotating, panning, zooming).
            </para>
            <para>
            2D rendering of <see cref="T:WW.Cad.Model.Entities.DxfRasterImage"/> and <see cref="T:WW.Cad.Model.Entities.DxfImage"/> is supported, but not 3D.
            To disable drawing of image entities set property 
            <see cref="P:WW.Cad.Drawing.GraphicsConfig.DrawImages">GraphicsConfig.DrawImages</see> to <c>false</c>.
            </para>
            </remarks>
            <example>
            An example of how to read and view a DXF file.
            <code lang="cs">
using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfViewExample {
    /// &lt;summary&gt;
    /// A basic DXF viewer example.
    /// &lt;/summary&gt;
    public partial class DxfViewExample : Form {
        private DxfModel model;
        private GDIGraphics3D gdiGraphics3D;
        private Bounds3D bounds;
        private Matrix4D modelTransform = Matrix4D.Identity;
        
        public DxfViewExample(string filename)
        {
            //
            // The InitializeComponent() call is required for Windows Forms designer support.
            //
            InitializeComponent();

            // To prevent flicker.
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            SetStyle(ControlStyles.DoubleBuffer, true);
            SetStyle(ControlStyles.UserPaint, true);
            
            BackColor = System.Drawing.Color.Black;

            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                MessageBox.Show("Error occurred: " + e.Message);
                Environment.Exit(1);
            }

            gdiGraphics3D = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
            gdiGraphics3D.CreateDrawables(model);

            // Uncomment for rotation example.
//            modelTransform = Transformation4D.RotateX(-30d * Math.PI / 180d) *
//                Transformation4D.RotateZ(150d * Math.PI / 180d);
            bounds = new Bounds3D();
            gdiGraphics3D.BoundingBox(bounds, modelTransform);
            CalculateTo2DTransform();
        }
        
        private void CalculateTo2DTransform() {
            if (bounds != null) {
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    bounds.Center,
                    new Point3D(0d, ClientSize.Height, 0d),
                    new Point3D(ClientSize.Width, 0d, 0d),
                    new Point3D(ClientSize.Width / 2, ClientSize.Height / 2, 0d)
                );
                gdiGraphics3D.To2DTransform = to2DTransform * modelTransform;
            }
        }
        
        protected override void OnResize(EventArgs e) {
            base.OnResize(e);
            CalculateTo2DTransform();
            Invalidate();
        }
        
        protected override void OnPaint(PaintEventArgs e) {
            e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            gdiGraphics3D.Draw(e.Graphics, ClientRectangle);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.#ctor">
            <summary>
            Initalizes a new instance of the <see cref="T:WW.Cad.Drawing.GDI.GDIGraphics3D"/> class with
            <see cref="F:WW.Cad.Drawing.GraphicsConfig.BlackBackgroundCorrectForBackColor">GraphicsConfig.BlackBackgroundCorrectForBackColor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.#ctor(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Initalizes a new instance of the <see cref="T:WW.Cad.Drawing.GDI.GDIGraphics3D"/> class.
            </summary>
            <param name="config">
            The graphics configuration.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.#ctor(WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D)">
            <summary>
            Initalizes a new instance of the <see cref="T:WW.Cad.Drawing.GDI.GDIGraphics3D"/> class.
            </summary>
            <param name="config">
            The graphics configuration.
            </param>
            <param name="to2DTransform">
            The transform applied to the intermediate graphics for presenting to the screen.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear">
            <summary>
            Clears all drawables.
            </summary>
            <remarks>
            Clears all drawables, including the <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.Nodes"/>.
            </remarks>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel)"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate">
            <summary>
            Enables the updating of drawables.
            </summary>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Updates the drawables for specified entity.
            First call <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate"/> before drawable creation for this to work.
            </summary>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate"/>
            <seealso cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.UpdateDrawables(WW.Cad.Drawing.RenderedEntityInfo,System.Action,System.Action{WW.Cad.Drawing.IWireframeGraphicsFactory})">
            <summary>
            Updates the drawables for specified entity.
            First call <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate"/> before drawable creation for this to work.
            </summary>
            <param name="renderedEntityInfo">The rendered entity info.</param>
            <param name="updateDrawables">The update drawables.</param>
            <param name="graphicsFactoryWrapper">
            The graphics factory wrapper method (optional). 
            This can be used to e.g. change the color of the entity when drawing for highlighting when the mouse hovers over the entity.
            Use class <see cref="T:WW.Cad.Drawing.WireframeGraphicsFactoryColorChanger"/> to do this.
            </param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate"/>
            <seealso cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity,System.Action{WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory},System.Func{WW.Cad.Drawing.IWireframeGraphicsFactory,WW.Cad.Drawing.IWireframeGraphicsFactory})">
            <summary>
            Updates the drawables for specified entity.
            First call <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate"/> before drawable creation for this to work.
            </summary>
            <param name="entity">The entity to update.</param>
            <param name="updateDrawables">The update drawables method. See <see cref="M:WW.Cad.Drawing.WireframeGraphicsCache.GetUpdateEntityDrawablesHelper(WW.Cad.Model.Entities.DxfEntity)"/>.</param>
            <param name="graphicsFactoryWrapper">
            The graphics factory wrapper method (optional). 
            This can be used to e.g. change the color of the entity when drawing for highlighting when the mouse hovers over the entity.
            Use class <see cref="T:WW.Cad.Drawing.WireframeGraphicsFactoryColorChanger"/> to do this.
            </param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate"/>
            <seealso cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.RemoveDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Removes the drawables for specified entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel)">
            <summary>
            Create drawable objects for given model from entities in model space.
            </summary>
            <remarks>
            <para>
            Old drawables are cleared before creating the new ones.
            </para>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and can later be drawn to <see cref="T:System.Drawing.Graphics"/>
            using the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.AddDrawables(WW.Cad.Model.DxfModel)">
            <summary>
            Create drawable objects for given model from entities in model space.
            </summary>
            <remarks>
            <para>
            Old drawables are not cleared before creating the new ones.
            </para>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and can later be drawn to <see cref="T:System.Drawing.Graphics"/>
            using the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Create drawable objects for given model from entities in model space.
            </summary>
            <remarks>
            <para>
            Old drawables are cleared before creating the new ones.
            </para>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and can later be drawn to <see cref="T:System.Drawing.Graphics"/>
            using the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.AddDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Create drawable objects for given model from entities in model space.
            </summary>
            <remarks>
            <para>
            Old drawables are not cleared before creating the new ones.
            </para>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and can later be drawn to <see cref="T:System.Drawing.Graphics"/>
            using the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Create drawable objects for specified entities in model space.
            </summary>
            <remarks>
            <para>
            Old drawables are cleared before creating the new ones.
            </para>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and can later be drawn to <see cref="T:System.Drawing.Graphics"/>
            using the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.AddDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Create drawable objects for specified entities in model space.
            </summary>
            <remarks>
            <para>
            Old drawables are not cleared before creating the new ones.
            </para>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            <para>
            These drawable objects are stored and can later be drawn to <see cref="T:System.Drawing.Graphics"/>
            using the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Create drawable objects for given model using given view port.
            </summary>
            <remarks>
            <para>
            Old drawables are cleared before creating the new ones.
            </para>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            <para>
            These drawable objects are stored and can later be drawn to <see cref="T:System.Drawing.Graphics"/>
            using the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.AddDrawables(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Create drawable objects for given model using given view port.
            </summary>
            <remarks>
            <para>
            Old drawables are not cleared before creating the new ones.
            </para>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            <para>
            These drawable objects are stored and can later be drawn to <see cref="T:System.Drawing.Graphics"/>
            using the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clear"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the drawables that were created with the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel)"/> method.
            </summary>
            <param name="graphics">
            The graphics object to draw on to.
            </param>
            <param name="drawingBounds">
            The drawing bounds (needed to clip infinite size entities <see cref="T:WW.Cad.Model.Entities.DxfRay"/> and <see cref="T:WW.Cad.Model.Entities.DxfXLine"/>).
            When drawing on a control e.g. Control.ClientRectangle could be used.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,WW.Math.Matrix4D)">
            <summary>
            Draw the drawables that were created with the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel)"/> method.
            </summary>
            <remarks>
            This overload allows for overriding of the internally used to 2d transformation.
            </remarks>
            <param name="graphics">
            The graphics object to draw on to.
            </param>
            <param name="drawingBounds">
            The drawing bounds (needed to clip infinite size entities <see cref="T:WW.Cad.Model.Entities.DxfRay"/> and <see cref="T:WW.Cad.Model.Entities.DxfXLine"/>).
            When drawing on a control e.g. Control.ClientRectangle could be used.
            </param>
            <param name="transform">
            The transform to apply to the drawables.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,WW.Math.Matrix4D,System.Drawing.Color)">
            <summary>
            Draw the drawables that were created with the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel)"/> method.
            </summary>
            <remarks>
            This overload allows for overriding of the internally used 
            2d transformation and color context.
            </remarks>
            <param name="graphics">
            The graphics object to draw on to.
            </param>
            <param name="drawingBounds">
            The drawing bounds (needed to clip infinite size entities <see cref="T:WW.Cad.Model.Entities.DxfRay"/> and <see cref="T:WW.Cad.Model.Entities.DxfXLine"/>).
            When drawing on a control e.g. Control.ClientRectangle could be used.
            </param>
            <param name="transform">
            The transform to apply to the drawables.
            </param>
            <param name="backColor">
            The background color to correct colors when they are the same as the background color.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Draw(System.Drawing.Graphics,WW.Drawing.Rasterizer2D,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draw the drawables that were created with the <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateDrawables(WW.Cad.Model.DxfModel)"/> method
            using the specified graphics and fast rasterizer.
            The fast rasterizer is used where possible, and otherwise falls back to the graphics object.
            </summary>
            <remarks>
            This overload allows for overriding of the internally used 
            2d transformation and color context.
            </remarks>
            <param name="graphics">
            The graphics object to draw on to.
            </param>
            <param name="drawingBounds">
            The drawing bounds (needed to clip infinite size entities <see cref="T:WW.Cad.Model.Entities.DxfRay"/> and <see cref="T:WW.Cad.Model.Entities.DxfXLine"/>).
            When drawing on a control e.g. Control.ClientRectangle could be used.
            </param>
            <param name="backColor">
            The background color to correct colors when they are the same as the background color.
            </param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.CreateGraphicsFactory">
            <summary>
            Creates a graphics factory that can be used for creating the drawables in this 
            graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculates the 3D bounding box of the graphics,
            with the given transform applied to it.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.BoundingBox(WW.Math.Bounds3D)">
            <summary>
            Calculates the 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.TransformDrawables(WW.Math.ITransformer4D)">
            <summary>
            Transforms all drawables using specified transformer.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.Clone">
            <summary>
            Clone object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.RemoveEntityDrawablesInfo(WW.Cad.Drawing.GDI.GDIGraphics3D.EntityDrawablesInfo)">
            <summary>
            Recursively removes the specified EntityDrawablesInfo instance and all its children from 
            entityToEntityDrawablesInfoList.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.OnTransformChanged">
            <summary>
            Raises the <see cref="E:WW.Cad.Drawing.GDI.GDIGraphics3D.TransformChanged"/> event.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.To2DTransform">
            <summary>
            Gets or sets the final to 2D transformation.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.Config">
            <summary>
            Gets or sets the graphics configuration determining
            various aspects of the rendering process.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.NonTextPenWidth">
            <summary>
            Gets or sets the non-text pen width (default value is 1).
            </summary>
            <remarks>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight"/> is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.TextSmoothingMode">
            <summary>
            Gets or sets the text smoothing mode. The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.DrawTextOnTop">
            <summary>
            Gets or sets a value indicating whether always to draw text on top.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.TextPenWidth">
            <summary>
            Gets or sets the text pen width (default value is 1).
            </summary>
            <remarks>
            This value is only used if <see cref="P:WW.Cad.Drawing.GraphicsConfig.DisplayLineWeight"/> is set to <c>false</c>.
            Otherwise the normal line weight of the entity is used.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.AreDrawablesUpdateable">
            <summary>
            Gets a value indicating whether the drawables are updateable.
            Call <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate"/> to enable updating of drawables.
            </summary>
            <seealso cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EnableDrawablesUpdate"/>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.Transform">
            <summary>
            Gets or sets the <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.To2DTransform"/>.
            This property is the same as property <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.To2DTransform"/>,
            to satisfy the <see cref="T:WW.Cad.Drawing.ITransformationProvider"/> interface.
            </summary>
        </member>
        <member name="E:WW.Cad.Drawing.GDI.GDIGraphics3D.TransformChanged">
            <summary>
            Raised when the <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.Transform"/> changed.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsConfig">
            <summary>
            Gets or sets the graphics configuration determining
            various aspects of the rendering process.
            </summary>
            <remarks>
            Identical to property <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.Config"/>, implemented
            as part of <see cref="!:IGraphics3D"/> interface.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.Nodes">
            <summary>
            Gets the nodes that are typically shown as boxes.
            </summary>
            <seealso cref="P:WW.Cad.Drawing.GraphicsConfig.NodeSize">GraphicsConfig.NodeSize</seealso>
            <seealso cref="P:WW.Cad.Drawing.GraphicsConfig.NodeColor">GraphicsConfig.NodeColor</seealso>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.EntityDrawablesInfo.Matches(WW.Cad.Drawing.RenderedEntityInfo)">
            <summary>
            Returns whether this entity drawables info matches the specified rendered entity info by comparing the entity and parent entities.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.EntityDrawablesInfo.Children">
            <summary>
            Gets the children. Need to know children in case a INSERT's block is updated, e.g. entities are removed from it.
            When the INSERT's drawables are updated the EntityDrawablesInfo for removed entities need to be removed as well.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Begin graphics creation for specified entity.
            End creation with <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.EndEntity"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.EndEntity">
            <summary>
            End graphics creation that was started with <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.BeginEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Need to mark begin/end of insert in case part of the inserts child drawables are updated,
            e.g. attributes are updated using <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.EndInsert">
            <summary>
            Need to mark begin/end of insert in case part of the inserts child drawables are updated,
            e.g. attributes are updated using <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreateDot(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D)">
            <summary>
            Create a colored dot.
            </summary>
            <param name="entity">The entity creating the dot.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the dot is created for text.</param>
            <param name="position">the position</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreateLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Create a colored line segment.
            </summary>
            <param name="entity">The entity creating the line segment.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the line segment is created for text.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreateRay(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored ray (infinite line in one direction).
            </summary>
            <param name="entity">The entity creating the ray.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="segment">The line segment, first point must be the starting point,
            the second point goes towards infinity.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreateXLine(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D)">
            <summary>
            Create a colored DxfXLine (infinite line in both direction).
            </summary>
            <param name="entity">The entity creating the xline.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="startPoint">Starting point (for bounding box calculation).</param>
            <param name="segment">The line segment, both points approach infinity.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of dots, lines and polylines.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreatePathAsOne(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)">
            <summary>
            Create a path of lines and polylines.
            Similar to <see cref="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreatePath(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,System.Collections.Generic.IList{WW.Math.Geometry.Polyline4D},System.Boolean,System.Boolean)"/> but in GDI graphics
            this matches drawing using <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="entity">The entity creating the path.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the path is created for text.</param>
            <param name="polylines">The path polylines to draw.</param>
            <param name="fill">Specifies whether the path should be filled.</param>
            <param name="correctForBackgroundColor">if set to <c>true</c> correct for the background color.</param>
            <remarks>
            This is particularly useful when drawing text where e.g. the letter O consists
            of two polygons and the space between them is filled.
            Note that dots can not be drawn with the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreateShape(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor,System.Boolean,WW.Math.Geometry.IShape4D)">
            <summary>
            Create a shape from a 4D shape.
            </summary>
            <param name="entity">The entity creating the shape.</param>
            <param name="drawContext">The drawing context.</param>
            <param name="color">The color.</param>
            <param name="forText">Specifies whether the shape is created for text.</param>
            <param name="shape">The shape to draw.</param>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreateText(WW.Cad.Model.Entities.DxfText,WW.Cad.Drawing.DrawContext.Wireframe,WW.Drawing.ArgbColor)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreateMText(WW.Cad.Model.Entities.DxfMText,WW.Cad.Drawing.DrawContext.Wireframe)">
            <summary>
            Creates graphics for the specified text (call only if <see cref="P:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.SupportsText"/> returns <c>true</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.CreateImage(WW.Cad.Model.Entities.DxfRasterImage,WW.Cad.Drawing.DrawContext.Wireframe,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D)">
            <summary>
            Creates graphics for the specified image.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.IsLarge(WW.Math.Vector4D)">
            <summary>
            Returns whether the vector is large (for diagnostics).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.GDI.GDIGraphics3D.GraphicsFactory.SupportsText">
            <summary>
            Gets a value indicating whether the object supports text (returns <c>true</c>).
            </summary>
            <remarks>
            When <see cref="P:WW.Cad.Drawing.GraphicsConfig.TryDrawingTextAsText"/> is set to <c>true</c>,
            then true type text is drawn using method <see cref="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)"/>.
            This makes text look better, but has the limitation that true 3D transformations are not handled.
            </remarks>
        </member>
        <member name="T:WW.Cad.Base.DxfIndexedColor">
            <summary>
            Cad color definitions.
            DXF versions older than <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/> (AutoCAD 2004) only support 255 colors.
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/> supports 24 bit color and transparancy.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.DefaultColorIndex">
            <summary>
            The DXF default color index.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MinimalColorIndex">
            <summary>
            The minimal valid color index.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MaximalColorIndex">
            <summary>
            The maximal valid color index.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorNumberByBlock">
            <summary>
            Color number for ACI ByBlock.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorNumberByLayer">
            <summary>
            Color number for ACI ByLayer.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorNumberNone">
            <summary>
            Color number for unknown ACI.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MinStandardColorIndex">
            <summary>
            The start index of the standard colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MaxStandardColorIndex">
            <summary>
            The end index of the standard color´s interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MinCircleColorIndex">
            <summary>
            The start index of the circle colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MaxCircleColorIndex">
            <summary>
            The end index of the circle colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorCircleRingCount">
            <summary>
            The number of color circles.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorCircleRingLength">
            <summary>
            The length of a single color circle.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MinGrayColorIndex">
            <summary>
            The start index of the gray colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MaxGrayColorIndex">
            <summary>
            The end index of the gray colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMinCompDarkDarkDark">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkDarkDark"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMaxCompDarkDarkDark">
            <summary>
            The maximal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkDarkDark"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMinCompDarkDarkMedium">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkDarkMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMaxCompDarkDarkMedium">
            <summary>
            The maximal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkDarkMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMinCompDarkLightMedium">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkLightMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMaxCompDarkLightMedium">
            <summary>
            The maximal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkLightMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMinCompLightLightMedium">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetLightLightMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMaxCompLightLightMedium">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">minimal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetLightLightMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMinCompLightLightLight">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">minimal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetLightLightLight"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadMaxCompLightLightLight">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">minimal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Base.DxfIndexedColor.ColorSetLightLightLight"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.MaxAcadComponentDeviation">
            <summary>
            Maximal color component deviation which makes AutoCAD correct a color.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadComponentCorrection">
            <summary>
            Color component correction used by AutoCAD when colors overlap.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorCircleRedOffset">
            <summary>
            Red offset into spokes.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorCircleGreenOffset">
            <summary>
            Green offset into spokes.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorCircleBlueOffset">
            <summary>
            Blue offset into spokes.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkDarkDark">
            <summary>
            Color set type for very dark backgrounds-
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkDarkMedium">
            <summary>
            Color set type for quite dark backgrounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorSetDarkLightMedium">
            <summary>
             Color set type for slightly dark backgrounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorSetLightLightMedium">
            <summary>
            Color set type for slightly light backgrounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorSetLightLightLight">
            <summary>
            Color set type for very light backgrounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorCircleFactor">
            <summary>
            Color circle spoke color values.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.Color">
            <summary>
            Cad color definitions (index range is 0 - 255).
            </summary>
            <remarks>
            Obsolete: the indexed color values are depending on a given background color,
            so use <see cref="M:WW.Cad.Base.DxfIndexedColor.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)"/> instead.
            </remarks>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.DefaultColor">
            <summary>
            The default color if no other is given.
            </summary>
            <remarks>
            Obsolete: there is no fixed ARGB value for the <see cref="F:WW.Cad.Base.DxfIndexedColor.DefaultColorIndex">default color index</see>,
            to get the default color create a <see cref="!:DxfIndexColor">indexed color set</see> and use the array operator
            to get the color value for that index.
            </remarks>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.DarkDarkDarkBackgroundColors">
            <summary>
            Indexed colors for a dark dark dark background
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.DarkDarkMediumBackgroundColors">
            <summary>
            Indexed colors for a dark dark medium background
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.DarkLightMediumBackgroundColors">
            <summary>
            Indexed colors for a dark light medium background
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.LightLightMediumBackgroundColors">
            <summary>
            Indexed colors for a light light medium background
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.LightLightLightBackgroundColors">
            <summary>
            Indexed colors for a light light light background.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.CadlibClassicIndexedColors">
            <summary>
            The indexed colors CadLib used in former versions, without background color correction.
            </summary>
            <remarks>
            Obsolete: use <see cref="F:WW.Cad.Base.DxfIndexedColor.AcadClassicIndexedColors"/>, <see cref="F:WW.Cad.Base.DxfIndexedColor.AcadBlackBackgroundIndexedColors"/>, 
                      <see cref="F:WW.Cad.Base.DxfIndexedColor.AcadWhiteBackgroundIndexedColors"/> or the <see cref="M:WW.Cad.Base.DxfIndexedColor.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)"/> method
                      to create a color set for a given background color which includes AutoCAD-like color correction.
            </remarks>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadClassicIndexedColors">
            <summary>
            The classic AutoCAD color set for indexed colors.
            </summary>
            <remarks>
            This is the color set AutoCAD was using when its background color was restricted to black.
            </remarks>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadBlackBackgroundIndexedColors">
            <summary>
            The AutoCAD color set it is using for black or very dark backgrounds.
            </summary>
            <remarks>
            This is the same as <see cref="F:WW.Cad.Base.DxfIndexedColor.AcadClassicIndexedColors"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.AcadWhiteBackgroundIndexedColors">
            <summary>
            The AutoCAD color set it is using for white background.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.colors">
            <summary>
            The colors in this set.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.#ctor(WW.Drawing.ArgbColor[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfIndexedColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper method: create ARGB color.
            </summary>
            <param name="r">Red.</param>
            <param name="g">Green.</param>
            <param name="b">Blue.</param>
            <returns>ARGB color.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetBestMatchingIndex(WW.Drawing.ArgbColor)">
            <summary>
            Get the best matching color index for the given ARGB color.
            </summary>
            <param name="color">ARGB color (alpha is ignored)</param>
            <returns>Best match color index.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetColorIndex(WW.Drawing.ArgbColor)">
            <summary>
            Get cad color index for given color, using the <see cref="F:WW.Cad.Base.DxfIndexedColor.AcadClassicIndexedColors">classic indexed color set</see>.
            </summary>
            <remarks>
            Obsolete: there is no fix indexed color set, instead the color of an indexed color depends on the background.
            Instead use a color set for a given background (either <see cref="F:WW.Cad.Base.DxfIndexedColor.AcadBlackBackgroundIndexedColors"/>, 
            <see cref="F:WW.Cad.Base.DxfIndexedColor.AcadWhiteBackgroundIndexedColors"/> or create one with <see cref="M:WW.Cad.Base.DxfIndexedColor.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)"/>, and 
            use the <see cref="M:WW.Cad.Base.DxfIndexedColor.GetBestMatchingIndex(WW.Drawing.ArgbColor)"/> method.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WW.Cad.Base.DxfIndexedColor.GetColorIndex(WW.Cad.Base.DxfIndexedColor,WW.Drawing.ArgbColor)" -->
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetColorIndex(WW.Drawing.ArgbColor,System.Int32@)">
            <summary>
            Get cad color index for given color.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetColorIndex(WW.Cad.Base.DxfIndexedColor,WW.Drawing.ArgbColor,System.Int32@)">
            <summary>
            Get color index which provides the best match for a given color set.
            </summary>
            <remarks>
            Obsolete: there is no one color set, the real color set depends on the background color.
            To handle this 
            </remarks>
            <param name="indexedColors">Indexed colors.</param>
            <param name="color">Color to look up.</param>
            <param name="colorDifference">Squared Euclidian color difference output</param>
            <returns>Best match.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetColorIndex(WW.Drawing.ArgbColor[],WW.Drawing.ArgbColor,System.Int32@)">
            <summary>
            Get color index which provides the best match for a given color set.
            </summary>
            <remarks>
            Obsolete: there is no one color set, the real color set depends on the background color.
            To handle this 
            </remarks>
            <param name="indexedColors">Indexed colors, at least of length 256</param>
            <param name="color">Color to look up.</param>
            <param name="colorDifference">Squared Euclidian color difference output</param>
            <returns>Best match.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetColorNumber(WW.Cad.Model.Color)">
            <summary>
            Gets the color nr as stored in a dxf file.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetEntityColor(System.Int16)">
            <summary>
            Gets the entity color.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)">
            <summary>
            Get the color set for a given background color.
            </summary>
            <param name="backgroundColor"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetObsoleteCorrectedCadlibColorSet(WW.Drawing.ArgbColor)">
            <summary>
            Create the colors like old CadLib, but apply background color correction directly.
            </summary>
            <remarks>
            Obsolete: the classic CadLib colors are incorrect, use <see cref="M:WW.Cad.Base.DxfIndexedColor.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)"/> instead.
            </remarks>
            <param name="backgroundColor">Background color.</param>
            <returns>Color set which avoids the background color.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetAcadBasicColorSet(WW.Drawing.ArgbColor)">
            <summary>
            Get the basic AutoCAD-like color set, but don't do local correction.
            </summary>
            <param name="backgroundColor">Background color.</param>
            <returns>One of five basic color sets AutoCAD is using.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetAcadBasicColorSetType(WW.Drawing.ArgbColor)">
            <summary>
            Get the basic Acad color set type depending on a given background color.
            </summary>
            <remarks>
            To avoid overlapping colors some values in the basic sets might be shifted,
            depending on the background color.
            </remarks>
            <param name="backgroundColor">Background color.</param>
            <returns>Basic color set type.</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.MakeAcadColors(WW.Drawing.ArgbColor)">
            <summary>
            Create the colors like AutoCAD.
            </summary>
            <param name="backgroundColor">Background color.</param>
            <returns>An array of 257 colors, but indexes 0 and 256 should not be used</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.MakeAcadColors(WW.Cad.Base.DxfIndexedColor.ColorSetType)">
            <summary>
            Create the colors.
            </summary>
            <param name="colorSetType">Color set type.</param>
            <returns>An array of 257 colors, but indexes 0 and 256 should not be used</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.ApplyAcadCorrection(WW.Drawing.ArgbColor[],WW.Drawing.ArgbColor)">
            <summary>
            Go over the colors and apply a correction when an ACI color and the background color
            are considered too near according to AutoCAD.
            </summary>
            <param name="colors">Indexed color set.</param>
            <param name="backgroundColor">background color.</param>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.GetAcadCorrectedColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a corrected color for a standard color value.
            </summary>
            <param name="rgb">Standard color value.</param>
            <param name="backgroundRgb">Background color.</param>
            <param name="mask">Background color max mask.</param>
            <returns>Adapted color value</returns>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.Round(System.Double)">
            <summary>
            Internally used rounding from the basic double representation to the internal ARGB color representation.
            </summary>
            <param name="v">Color component value.</param>
            <returns>Rounded color compoenent value.</returns>
        </member>
        <member name="P:WW.Cad.Base.DxfIndexedColor.Item(System.Int32)">
            <summary>
            Get the ARGB color for a given color index.
            </summary>
            <param name="aci">Color index.</param>
            <returns>The ARGB color for the given index.</returns>
        </member>
        <member name="T:WW.Cad.Base.DxfIndexedColor.StandardColorType">
            <summary>
            Color type for the standard colors (ACI 1 to 9).
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.StandardColorType.DarkBackground">
            <summary>
            Dark background (max color component less than or equals to 0x80).
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.StandardColorType.LightBackground">
            <summary>
            Light background (max color component more than or euqlas 0x81).
            </summary>
        </member>
        <member name="T:WW.Cad.Base.DxfIndexedColor.CircleColorType">
            <summary>
            Color type for circle colors (ACI 10 to 249). 
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.CircleColorType.DarkBackground">
            <summary>
            Dark background (max color component less than or equals to 0x1f).
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.CircleColorType.LightBackground">
            <summary>
            Light background (max color component more than or euqlas 0x20).
            </summary>
        </member>
        <member name="T:WW.Cad.Base.DxfIndexedColor.GrayColorType">
            <summary>
            Color type for gray colors (ACI 250 to 255). 
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.GrayColorType.DarkBackground">
            <summary>
            Dark background (max color component less than or equals to 0x80).
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.GrayColorType.MediumBackground">
            <summary>
            Medium background.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.GrayColorType.LightBackground">
            <summary>
            Light background (max color component more than or euqlas 0x81).
            </summary>
        </member>
        <member name="T:WW.Cad.Base.DxfIndexedColor.ColorSetType">
            <summary>
            Color type for the whole color set, combined from the color types of the various parts.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorSetType.standardColorType">
            <summary>
            Color type of the standard colors (ACI 1 to 9).
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorSetType.circleColorType">
            <summary>
            Color type of the circle colors (ACI 10 to 249).
            </summary>
        </member>
        <member name="F:WW.Cad.Base.DxfIndexedColor.ColorSetType.grayColorType">
            <summary>
            Color type of the gray colors (ACI 250 to 255).
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfIndexedColor.ColorSetType.#ctor(WW.Cad.Base.DxfIndexedColor.StandardColorType,WW.Cad.Base.DxfIndexedColor.CircleColorType,WW.Cad.Base.DxfIndexedColor.GrayColorType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfIndexedColor.ColorSetType"/> struct.
            </summary>
            <param name="standardColorType">Type of the standard colors.</param>
            <param name="circleColorType">Type of the circle colors.</param>
            <param name="grayColorType">Type of the gray colors.</param>
        </member>
        <member name="T:WW.Cad.Base.SplineCurve3D">
            <summary>
            Class representing a (possibly rational) spline curve in 3D.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.#ctor(System.Int32,System.Double[],WW.Math.Point3D[])">
            <summary>
            Constructor.
            </summary>
            <remarks>
            This creates a non-rational spline curve.
            </remarks>
            <param name="degree">degree of curve</param>
            <param name="knots">knot vector</param>
            <param name="controlPoints">control points</param>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.#ctor(System.Int32,System.Double[],WW.Math.Point3D[],System.Double[])">
            <summary>
            Constructor.
            </summary>
            <param name="degree">degree of curve</param>
            <param name="knots">knot vector</param>
            <param name="controlPoints">control points</param>
            <param name="weights">weights of control points. Length must be at least the same as <paramref name="controlPoints"/></param>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.#ctor(System.Int32,System.Double[],WW.Math.Vector4D[])">
            <summary>
            Constructor.
            </summary>
            <param name="degree">degree of curve</param>
            <param name="knots">knot vector</param>
            <param name="controlPoints">control points with weights</param>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.CreateFitPoints(System.Double,System.Double)">
            <summary>
            Create fit points with a maximum deviation from the spline.
            </summary>
            <param name="fitTolerance">Maximum deviation in model space.</param>
            <param name="knotTolerance">Minimal difference in paramter space</param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.InsertFitPoints(System.Double,System.Double,System.Int32,WW.Cad.Base.SplineCurve3D.LinkedPoint,System.Double[])">
            <summary>
            Internally used method to insert extra fit points between two already defined
            fit points as long as a given tolerance is not met.
            </summary>
            <remarks>
            It assumes that we are always between two distinct knots (allowing the span parameter).
            </remarks>
            <param name="tolerance2">squared fit tolerance</param>
            <param name="knotTolerance">tolerance in knot vector space</param>
            <param name="span">current span</param>
            <param name="lp">left side of fit splice (right side is lp.next)</param>
            <param name="N">temporary internally reused array of size <c>degree+1</c></param>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.CalcPoint(System.Double,System.Double[])">
            <summary>
            Calculate a point on the spline.
            </summary>
            <param name="u">parameter value</param>
            <param name="N">temporary internally reused array of size <c>degree+1</c></param>
            <returns>point</returns>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.CalcPoint(System.Int32,System.Double,System.Double[])">
            <summary>
            Calculate a point on the spline.
            </summary>
            <param name="span">span of <paramref name="u"/></param>
            <param name="u">parameter value</param>
            <param name="N">temporary internally reused array of size <c>degree+1</c></param>
            <returns>point</returns>
        </member>
        <member name="P:WW.Cad.Base.SplineCurve3D.ControlPoints">
            <summary>
            Return control points array
            </summary>
        </member>
        <member name="P:WW.Cad.Base.SplineCurve3D.Weights">
            <summary>
            Return Weights array
            </summary>
        </member>
        <member name="P:WW.Cad.Base.SplineCurve3D.IsValid">
            <summary>
            Is this curve definition valid?
            </summary>
        </member>
        <member name="P:WW.Cad.Base.SplineCurve3D.ControlPolygonBounds">
            <summary>
            Get the bounds of the control polygon.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.SplineCurve3D.KnotInfo">
            <summary>
            Get the knot info.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.SplineCurve3D.LinkedPoint">
            <summary>Simple class to create temporary linked list for insertion of fit points.</summary>
        </member>
        <member name="F:WW.Cad.Base.SplineCurve3D.LinkedPoint.next">
            <summary>Following list element.</summary>
        </member>
        <member name="F:WW.Cad.Base.SplineCurve3D.LinkedPoint.Point">
            <summary>The point.</summary>
        </member>
        <member name="F:WW.Cad.Base.SplineCurve3D.LinkedPoint.UValue">
            <summary>The paramter.</summary>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.LinkedPoint.#ctor(System.Double,WW.Math.Point3D)">
            <summary>
            Constructor.
            </summary>
            <param name="uValue">u value</param>
            <param name="point">point for that value</param>
        </member>
        <member name="M:WW.Cad.Base.SplineCurve3D.LinkedPoint.InsertAfter(WW.Cad.Base.SplineCurve3D.LinkedPoint)">
            <summary>
            Insert a linked point after this one into the list.
            </summary>
            <param name="lp">point to insert</param>
        </member>
        <member name="P:WW.Cad.Base.SplineCurve3D.LinkedPoint.Next">
            <summary>
            Get the next point.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.SplineCurve3D.LinkedPoint.Points">
            <summary>
            Get all points in the list beginning with this one.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl">
            <summary>
            A control for editing a <see cref="T:WW.Math.Point2D"/> using text boxes.
            </summary>
        </member>
        <member name="F:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.SetPoint(WW.Math.Point2D,WW.Actions.InteractionContext)">
            <summary>
            Sets the point.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.OnPointChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:PointChanged"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Closed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.PointChanged">
            <summary>
            Occurs when the <see cref="P:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.Point"/> changed.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.Closed">
            <summary>
            Occurs when closed by either pressing enter or escape.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.Point">
            <summary>
            Gets the point.
            Call <see cref="M:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.SetPoint(WW.Math.Point2D,WW.Actions.InteractionContext)"/> to set the point.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Windows.Forms.Point2DTextBoxesControl.DialogResult">
            <summary>
            Gets the dialog result.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.DxfMessage">
            <summary>
            Represents a message in the form of a <see cref="T:WW.Cad.Base.DxfStatus"/> and 
            <see cref="P:WW.Cad.Base.DxfMessage.Severity"/> pertaining to zero or more named parameter objects.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfMessage.#ctor(WW.Cad.Base.DxfStatus,WW.Cad.Base.Severity)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfMessage"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfMessage.#ctor(WW.Cad.Base.DxfStatus,WW.Cad.Base.Severity,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Base.DxfMessage"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.DxfMessage.ToString">
            <summary>
            Returns the string representation.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.DxfMessage.Parameters">
            <summary>
            Gets the named parameters to which the status pertains.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.DxfMessage.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.DxfMessage.Severity">
            <summary>
            Gets the severity.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.PaperSizes">
            <summary>
            Represents a utility class to convert <see cref="T:System.Drawing.Printing.PaperKind"/> to <see cref="T:System.Drawing.Printing.PaperSize"/>.
            </summary>
            <remarks>
            When exporting to PDF a paper size can be set, but no printer settings are
            involved, so this class is helpful in that case.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.PaperSizes.GetPaperSize(System.Drawing.Printing.PaperKind)">
            <summary>
            Converts <see cref="T:System.Drawing.Printing.PaperKind"/> to <see cref="T:System.Drawing.Printing.PaperSize"/>.
            </summary>
            <remarks>
            When exporting to PDF a paper size can be set, but no printer settings are
            involved, so this class is helpful in that case.
            </remarks>
            <returns>null when no conversion was possible.</returns>
        </member>
        <member name="T:WW.Cad.Model.Tables.TextGenerationFlags">
            <summary>
            Text generation flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextGenerationFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextGenerationFlags.Backwards">
            <summary>
            Text is backward (mirrored in Position).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextGenerationFlags.UpsideDown">
            <summary>
            Text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfVPortCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPortCollection.GetActiveVPort">
            <summary>
            Gets the active <see cref="T:WW.Cad.Model.Tables.DxfVPort"/>. If not present, returns <c>null</c>.
            The active viewport is the first viewport with name "*Active" (<see cref="F:WW.Cad.Model.Tables.DxfVPort.ActiveVPortName"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPortCollection.TryGetValue(System.String,WW.Cad.Model.Tables.DxfVPort@)">
            <summary>
            Tries to the get the vport with specified name (if the name is not empty).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfVPortCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a vport with the specified name (if the name is not empty).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfVPortCollection.Item(System.String)">
            <summary>
            Gets the first vport with the specified name (if the name is not empty).
            Returns <c>null</c> if not found.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.JoinStyle">
            <summary>
            Represents line joint settings.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.JoinStyle.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.JoinStyle.Round">
            <summary>
            Round.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.JoinStyle.Angle">
            <summary>
            Angle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.JoinStyle.Flat">
            <summary>
            Flat.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfHeader">
            <summary>
            Represents the drawing's header containing the system variables.
            </summary>
            <remarks>
            <para>
            The header is part of a <see cref="T:WW.Cad.Model.DxfModel"/> object and contains properties that may apply to a drawing,
            although most properties just define internal settings which mostly influence future behavior.
            </para>
            <para>
            Not all properties are supported in all version, see the property documentation for supported version information.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfHeader.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfHeader"/> class.
            </summary>
            <param name="model">The CAD model object that this header is part of.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfHeader.GetDrawingCodePage(System.String)">
            <summary>
            Get drawing code page for given code page string (system variable DWGCODEPAGE).
            </summary>
            <remarks>
            Comparison is done case insensitive.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfHeader.GetDrawingCodePageString(WW.Cad.Model.DrawingCodePage)">
            <summary>
            Get drawing code page for given code page string (system variable DWGCODEPAGE).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHeader.CopyFrom(WW.Cad.Model.DxfHeader,WW.Cad.Model.CloneContext)">
            <summary>
            Initialize this header from a template.
            </summary>
            <param name="templateHeader">template header to initialize from</param>
            <param name="cloneContext">clone context</param>
        </member>
        <member name="M:WW.Cad.Model.DxfHeader.SetUnknownVariable(System.String,System.Collections.Generic.List{WW.Cad.IO.Group})">
            <summary>
            Set a variable.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHeader.SetUnknownVariable(System.String,WW.Cad.IO.Group)">
            <summary>
            Set a variable.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHeader.GetUnknownVariable(System.String)">
            <summary>
            Get a variable (value).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfHeader.GetUnknownVariables">
            <summary>
            Get all variables.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AcadVersionString">
            <summary>
            Gets or sets the autocad version string.
            This value represents system variable ACADVER.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AcadMaintenanceVersion">
            <summary>
            Gets or sets the maintenance version.
            This value represents system variable ACADMAINTVER.
            </summary>
            <remarks>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/>, not available in earlier versions.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AngleBase">
            <summary>
            Gets or sets the angle base [radians], range: 0 - 2 * pi.
            The default value is 0.
            This value represents system variable ANGBASE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AngularDirection">
            <summary>
            Gets or sets the angular direction.
            The default value is <see cref="F:WW.Cad.Model.AngularDirection.ClockWise">ClockWise</see>.
            This value represents system variable ANGDIR. 
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AngularUnit">
            <summary>
            Gets or sets the angular unit.
            The default value is <see cref="F:WW.Cad.Model.AngularUnit.DecimalDegrees">DecimalDegrees</see>.
            This value represents system variable AUNITS.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AngularUnitPrecision">
            <summary>
            Gets or sets the angular unit precision.
            The default value is 0.
            This value represents system variable AUPREC.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ChamferDistance1">
            <summary>
            Gets or sets the first chamfer distance.
            The default value is 0.5.
            This value represents system variable CHAMFERA.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ChamferDistance2">
            <summary>
            Gets or sets the second chamfer distance.
            The default value is 0.5.
            This value represents system variable CHAMFERB.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ChamferLength">
            <summary>
            Gets or sets the chamfer length.
            The default value is 0.
            This value represents system variable CHAMFERC.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ChamferAngle">
            <summary>
            Gets or sets the chamfer angle [radians], range: 0 - 2 * pi.
            The default value is 0.
            This value represents system variable CHAMFERD.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CreateDateTime">
            <summary>
            Gets or sets the create date time (local).
            This value represents system variable TDCREATE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CreateEllipseAsPolyline">
            <summary>
            Gets or sets a value indicating whether to create ellipse as polyline.
            The default value is <c>false</c>.
            This value represents system variable PELLIPSE (DWG only, not present in DXF files).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CreateUtcDateTime">
            <summary>
            Gets or sets the create date time (UTC).
            This value represents system variable TDUCREATE, introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentEntityColor">
            <summary>
            Gets or sets the color of the current entity.
            The default value is <see cref="!:Colors.Black"/>.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentEntityLineType">
            <summary>
            Gets or sets the type of the current entity line.
            The default line type is the BYLAYER line type (<see cref="P:WW.Cad.Model.DxfModel.ByLayerLineType"/>).
            This value represents system variable CELTYPE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentMultilineJustification">
            <summary>
            Gets or sets the current multiline justification.
            The default value is <see cref="T:VerticalAlignment.Top"/>.
            This value represents system variable CMLJUST.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentMultilineStyle">
            <summary>
            Gets or sets the current multiline style.
            The default multiline style is the STANDARD one.
            This value represents system variable CMLSTYLE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentTextStyle">
            <summary>
            Gets or sets the current text style.
            This value represents system variable TEXTSTYLE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentEntityLinetypeScale">
            <summary>
            Gets or sets the current entity linetype scale.
            The default value is 1.
            This value represents system variable CELTSCALE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentEntityLineWeight">
            <summary>
            Gets or sets the current entity line weight.
            The default value is <see cref="F:WW.Cad.Model.LineWeight.ByLayer"/>.
            This value represents system variable CELWEIGHT.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentEntityPlotStyleType">
            <summary>
            Gets or sets the type of the current entity plot style.
            The default value is ByLayer.
            This value represents system variable CEPSNTYPE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentMultilineScale">
            <summary>
            Gets or sets the current multiline scale.
            The default value is 1.
            This value represents system variable CMLSCALE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.DimensionAssociativity">
            <summary>
            Gets or sets the dimension associativity.
            The default value is
            <see cref="F:WW.Cad.Model.DimensionAssociativity.NonAssociative">non associative</see>.
            This value represents the system variable DIMASSOC.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.DisplaySilhouetteCurves">
            <summary>
            Gets or sets a value indicating whether to display silhouette curves of body objects in 
            Wireframe mode.
            The default value is <c>false</c>.
            This value represents system variable DISPSILH.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AcadVersion">
            <summary>
            Gets or sets the AutoCAD version (variable $ACADVER).
            </summary>
            <remarks>
            <para>
            Setting this variable greatly influcences the content of the written file (DXF or DWG) 
            and the available features. 
            </para>
            <para>
            Available in all supported versions.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.Elevation">
            <summary>
            Gets or sets the elevation.
            The default value is 0.
            This value represents system variable ELEVATION.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.EndCaps">
            <summary>
            Gets or sets the end caps.
            The default value is <see cref="F:WW.Cad.Model.EndCaps.None">EndCaps.None</see>.
            This value represents system variable ENDCAPS.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.EntitySortingFlags">
            <summary>
            Gets or sets the enabled sorting modes.
            The default value is <see cref="F:WW.Cad.Model.ObjectSortingFlags.AllSortingMethods"/>.
            This value represents system variable SORTENTS.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ExtendedNames">
            <summary>
            Gets or sets a value indicating whether extended names are used.
            This value represents system variable EXTNAMES.
            </summary>
            <remarks>
            <list type="table">
                <item>
                    <term><c>false</c></term>
                    <description>Release 14 compatibility. Limits names to 31 characters
                        in length. Names can include the letters A to Z, the numerals
                        0 to 9, and the special characters dollar sign ($), underscore
                        (_), and hyphen (-).
                    </description>
                </item>
                <item>
                    <term><c>true</c></term>
                    <description>AutoCAD 2000. Names can be up to 255 characters in
                        length, and can include the letters A to Z, the numerals 0
                        to 9, spaces, and any special characters not used for other
                        purposes by Microsoft Windows and AutoCAD
                    </description>
                </item>
            </list>
            </remarks>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.FacetResolution">
            <summary>
            Gets or sets the facet resolution.
            The default value is 0.5.
            This value represents system variable FACETRES.
            </summary>
            <remarks>Not written to DXF, available in all supported DWG versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.FilletRadius">
            <summary>
            Gets or sets the fillet radius.
            The default value is 0.
            This value represents system variable FILLETRAD.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.FingerPrintGuid">
            <summary>
            Gets or sets the finger print GUID.
            Set at creation time, uniquely identifies a particular drawing.
            This value represents system variable FINGERPRINTGUID.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.HaloGapPercentage">
            <summary>
            Gets or sets the gap to be displayed where an object is hidden by another object; 
            the value is specified as a percent of one unit and is independent of the zoom level. 
            A haloed line is shortened at the point where it is hidden when HIDE or the Hidden option of SHADEMODE is used.
            This value represents system variable HALOGAP.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.IndexCreationFlags">
            <summary>
            Gets or sets whether layer and spatial indexes are created and saved in drawing files.
            Currently setting this variable has no influence.
            This value represents system variable INDEXCTL.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.InterfereColor">
            <summary>
            Gets or sets the color of the "interference objects" created during the interfere command.
            The default value is <see cref="P:System.Drawing.Color.Red"/>.
            The value represents system variable INTERFERECOLOR.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.InterfereObjectStyle">
            <summary>
            Gets or sets the object style for interference objects.
            The value returned/expected is a VISUALSTYLE from the objects section.
            This value represents system variable INTERFEREOBJVS.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.InterfereViewportStyle">
            <summary>
            Gets or sets the view style for viewport during interference checking.
            The value returned/expected is a VISUALSTYLE from the objects section.
            This value represents system variable INTERFEREVPVS.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf21"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.IntersectionColor">
            <summary>
            Gets or sets the entity color of intersection polylines.
            The default value is <see cref="F:WW.Cad.Model.Color.None"/> (i.e. the BYENTITY color).
            This value represents system variable INTERSECTIONCOLOR.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.IntersectionDisplay">
            <summary>
            Gets or sets the display of intersection polylines.
            Default is <c>false</c>.
            This value represents system variable INTERSECTIONDISPLAY.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ObscuredColor">
            <summary>
            Gets or sets the entity color of obscured lines.
            The default value is <see cref="F:WW.Cad.Model.Color.None"/> (i.e. the BYENTITY color).
            This value represents system variable OBSCOLOR.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ObscuredLineType">
            <summary>
            Gets or sets the line type of obscured lines.
            The default value is <see cref="F:WW.Cad.Model.SimpleLineType.Off"/>, i.e. no obscured lines are displayed.
            This value represents system variable OBSLTYPE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ProjectName">
            <summary>
            Gets or sets the project name.
            The project name is used when an external reference or image is not found on its original path. 
            The project name points to a section in the registry that can contain one or more search paths 
            for each project name defined. 
            The default value is the empty string (i.e. no project name).
            This value represents system variable PROJECTNAME.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ProxyGraphics">
            <summary>
            Gets or sets whether to save proxy object images.
            The default is <c>true</c>.
            This value represents system variable PROXYGRAPHICS.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.InsUnits">
            <summary>
            Gets or sets the drawing-units value for automatic scaling of blocks, images, or xrefs inserted or attached to a drawing.
            The default value is <see cref="F:WW.Cad.Model.DrawingUnits.Inches">Inches</see>.
            This value represents system variable INSUNITS.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.LinearUnitFormat">
            <summary>
            Gets or sets the linear unit format.
            The default value is <see cref="F:WW.Cad.Model.LinearUnitFormat.Decimal">Decimal</see>.
            This value represents system variable LUNIT.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.LinearUnitPrecision">
            <summary>
            Gets or sets the linear unit precision.
            The default value is 4.
            This value represents system variable LUPREC.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.LineTypeScale">
            <summary>
            Gets or sets the line type scale.
            The default value is 1.
            This value represents system variable LTSCALE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ShowSplineControlPoints">
            <summary>
            Gets or sets whether to show spline control points.
            The default value is <c>false</c>.
            This value represents system variable SPLFRAME.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.NumberOfSplineSegments">
            <summary>
            Gets or sets the number of spline segments for spline approximation.
            The default value is 8.
            This value represents system variable SPLINESEGS.
            </summary>
            <remarks>
            When the value is greater than zero then a spline is approximated by
            straight line segments.
            If it's smaller than zero then it's approximated by arcs.
            </remarks>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.DrawingCodePageString">
            <summary>
            Gets or sets the drawing code page string (variable $DWGCODEPAGE).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.DrawingCodePage">
            <summary>
            Gets or sets the drawing code page (variable $DWGCODEPAGE).
            The default value is <see cref="!:DrawingCodePage.Ansi1252"/>.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.Handling">
            <summary>
            Gets or sets whether objects have a handle or not (variable $HANDLING).
            </summary>
            <remarks>
            Available in all supported versions,
            but from <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/> (AC1012) onward, handles are no longer optional.
            <seealso cref="P:WW.Cad.Model.DxfHeader.HandleSeed"/>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.HandleSeed">
            <summary>
            Gets or sets the handle seed used for DXF entities and blocks (variable $HANDSEED).
            </summary>
            <remarks>
            Available in all supported versions,
            but from <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/> (AC1012) onward, handles are no longer optional.
            <seealso cref="P:WW.Cad.Model.DxfHeader.Handling"/> 
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.HandleSeedString">
            <summary>
            Gets or sets the drawing code page string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AttributeVisibility">
            <summary>
            Gets or sets the <see cref="T:WW.Cad.Model.Entities.DxfAttribute">DxfAttribute</see> or 
            <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> visibility (variable $ATTMODE).
            The default value is <see cref="F:WW.Cad.Model.AttributeVisibility.Normal">Normal</see>.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ShowModelSpace">
            <summary>
            Gets or sets whether to show model space (as opposed to paper space) (variable $TILEMODE).
            The default value is <see langword="true"/>.
            </summary>
            <remarks>
            <para>
            When showing model space, entities in paper space are invisible.
            </para>
            <para>
            When showing paper space, entities in model space are first transformed to paper space
            as specified by a <see cref="T:WW.Cad.Model.Entities.DxfViewport">view port</see>. 
            Entities in paper space are not transformed.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.PaperSpace"/>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.FillMode">
            <summary>
            Gets or sets whether to to fill wide polylines etc. when its z-axis
            is either (0, 0, 1) or (0, 0, -1). Also applies to hatches (<see cref="T:WW.Cad.Model.Entities.DxfHatch"/>) and solids (<see cref="T:WW.Cad.Model.Entities.DxfSolid"/>).
            The default value is <c>true</c>.
            This value represents system variable FILLMODE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceLineTypeScaling">
            <summary>
            Gets or sets the paper space line type scaling.
            The default value is <see cref="F:WW.Cad.Model.PaperSpaceLineTypeScaling.Normal">Normal</see>.
            This value represents system variable PSLTSCALE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceLimitsChecking">
            <summary>
            Gets or sets a value indicating whether limits are checked in paper space (variable $PLIMCHECK).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.DisplayLineWeight">
            <summary>
            Gets or sets a value indicating whether to display line weight for model space (variable $LWDISPLAY).
            </summary>
            <remarks>
            <para>
            Default value is <see langword="true"/>.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
            <seealso cref="!:DxfEnity.LineWeight"/>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.DimensionStyleOverrides">
            <summary>
            Gets the dimension style overrides.
            </summary>
            <remarks>
            <para>The overrides override properties of <see cref="P:WW.Cad.Model.DxfHeader.DimensionStyle"/>.</para>
            <para>Please note that not all dimension style properties are available in all versions.</para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.DxfHeader.DimensionStyle"/>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.DimensionStyle">
            <summary>
            Gets or sets the current dimension style (variable $DIMSTYLE).
            </summary>
            <remarks>
            <para>
            Together with the <see cref="P:WW.Cad.Model.DxfHeader.DimensionStyleOverrides"/> the dimension style
            determines the style aspects of dimensions.
            </para>
            <para>
            The dimension style is shared and must be present in <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/>.
            </para>
            <para>Please note that not all dimension style properties are available in all versions.</para>
            </remarks>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.MeasurementUnits">
            <summary>
            Gets or sets the measurement units (variable $MEASUREMENT).
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ExtMin">
            <summary>
            Gets or sets the drawing extents bottom left corner (in WCS) (variable $EXTMIN).
            The default value is (1e20, 1e20, 1e20).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ExtMax">
            <summary>
            Gets or sets the drawing extents top right corner (in WCS) (variable $EXTMAX).
            The default value is (-1e20, -1e20, -1e20).
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.InsertionBase">
            <summary>
            Gets or sets the insertion base point (in WCS) (variable $INSBASE).
            </summary>
            <remarks>
            <para>
            When inserting this drawing in another drawing, the 
            insertion base point defines where this drawing is inserted.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AssociatedDimensions">
            <summary>
            Gets or sets a value indicating whether associated dimensions are turned on or off.
            The default value is <c>true</c>.
            This value represents system variable DIMASO.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UpdateDimensionsWhileDragging">
            <summary>
            Gets or sets a value indicating whether to update dimensions while dragging. 
            The default value is <c>true</c>.
            This value represents system variable DIMSHO.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentLayer">
            <summary>
            Gets or sets the current layer.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.JoinStyle">
            <summary>
            Gets or sets the join style.
            The default value is <see cref="F:WW.Cad.Model.JoinStyle.None">JoinStyle.None</see>.
            This value represents system variable JOINSTYLE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.LimitCheckingOn">
            <summary>
            Gets or sets a value indicating whether limit checking is on.
            The default value is <c>false</c>.
            This value represents system variable LIMCHECK.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.LimitsMax">
            <summary>
            Gets or sets the XY drawing limits upper-right corner (in WCS).
            The default value is (12, 9).
            This value represents system variable LIMMAX.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.LimitsMin">
            <summary>
            Gets or sets the XY drawing limits lower-left corner (in WCS).
            The default value is (0, 0).
            This value represents system variable LIMMIN.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.MaxViewportCount">
            <summary>
            Gets or sets the maximum number of viewport you can open at any given time.
            The default value is 48.
            This value represents system variable MAXACTVP.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.MenuFileName">
            <summary>
            Gets or sets the name of the menu file.
            The default value is ".".
            This value represents system variable MENU.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.MirrorText">
            <summary>
            Gets or sets a value indicating whether to mirror text when text is modified by the MIRROR command.
            The default vaule is <c>true</c>.
            This value represents system variable MIRRTEXT.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.OrthoMode">
            <summary>
            Gets or sets a value indicating whether ortho mode is on.
            The default value is <c>false</c>.
            This value represents system variable ORTHOMODE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceElevation">
            <summary>
            Gets or sets the paper space elevation.
            The default value is 0.
            This value represents system variable PELEVATION.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceExtMax">
            <summary>
            Gets or sets the paper space extents maximum.
            The default value is (0, 0, 0).
            This value represents system variable PEXTMAX.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceExtMin">
            <summary>
            Gets or sets the paper space extents minimum.
            The default value is (0, 0, 0).
            This value represents system variable PEXTMIN.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceInsertionBase">
            <summary>
            Gets or sets the paper space insertion base point.
            The default value is (0, 0, 0).
            This value represents system variable PINSBASE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceLimitsMax">
            <summary>
            Gets or sets the paper space limits max.
            The default value is (0, 0).
            This value represents system variable PLIMMAX.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceLimitsMin">
            <summary>
            Gets or sets the paper space limits min.
            The default value is (0, 0).
            This value represents system variable PLIMMIN.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceUcs">
            <summary>
            Gets or sets the paper space UCS.
            This value represents header variables $PUCS*.
            </summary>
            <remarks>Not all UCS properties are supported in all versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PaperSpaceUcsBase">
            <summary>
            Gets or sets the paper space UCS base.
            This value represents header variables $PUCBASE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PlotStyleMode">
            <summary>
            Gets or sets the plot style mode
            indicating whether the current drawing is in a Color-Dependent or Named Plot Style mode.
            The default value is <see cref="F:WW.Cad.Model.PlotStyleMode.Named">PlotStyleMode.Named</see>.
            This value represents system variable PSTYLEMODE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PointDisplayMode">
            <summary>
            Gets or sets the point display mode.
            The default value is <see cref="T:PointDisplayMode.Point"/>.
            This value represents system variable PDMODE.
            </summary>
            <remarks>
            <para>
            This property does not affect points on the DEFPOINTS layer.
            This layer contains points that are part of objects like dimensions.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PointDisplaySize">
            <summary>
            Gets or sets the point display size.
            The default value is 0.
            This value represents system variable PDSIZE.
            </summary>
            <remarks>
            <para>
            The default value (0) specifies a point size 5% of the screen size. 
            A value greater than 0 specifies the absolute size, and a value less than 0 specifies a percentage size.
            </para>
            <para>
            CadLib only supports rendering the absolute sizes, for values equal or less than 0, a point is drawn.
            </para>
            <para>
            This property does not affect points on the DEFPOINTS layer.
            This layer contains points that are part of objects like dimensions.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PolylineLineTypeGeneration">
            <summary>
            Gets or sets the polyline line type generation.
            The default value is <see cref="T:PolylineLineTypeGeneration.Continuous"/>.
            This value represents system variable PLINEGEN.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.PolylineWidthDefault">
            <summary>
            Gets or sets the default polyline width.
            The default value is 0.
            This value represents system variable PLINEWID.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.QuickTextMode">
            <summary>
            Gets or sets a value indicating whether quick text mode is on.
            The default value is <c>false</c>.
            This value represents system variable QTEXTMODE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.RegenerationMode">
            <summary>
            Gets or sets a value indicating whether regeneration mode is on.
            The default value is <c>true</c>.
            This value represents system variable REGENMODE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.RetainXRefDependentVisibilitySettings">
            <summary>
            Gets or sets a value indicating whether to retain cross-reference dependent visibility settings.
            The default value is <c>true</c>.
            This value represents system variable VISRETAIN.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ShadeDiffuseToAmbientPercentage">
            <summary>
            Gets or sets the ratio of diffuse reflective to ambient percentage.
            The default value is 70.
            This value represents system variable SHADEDIF.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ShadeEdge">
            <summary>
            Gets or sets how to shade edges.
            The default value is 
            <see cref="F:WW.Cad.Model.ShadeEdge.FacesInEntityColorEdgesInBlack">FacesInEntityColorEdgesInBlack</see>.
            This value represents system variable SHADEDGE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ShadowMode">
            <summary>
            Gets or sets the shadow mode for new 3D objects.
            The default value is
            <see cref="F:WW.Cad.Model.ShadowMode.CastsAndReceives">CastsAndReceives</see>.
            This value represents the system variable CSHADOW.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ShadowPlaneLocation">
            <summary>
            Gets or sets the location of the shadow plane (a Z axis ordinate).
            The default value is <c>0.0</c>.
            This value represents the system variable SHADOWPLANELOCATION.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SketchIncrement">
            <summary>
            Gets or sets the sketch increment (used for the FREEHAND command).
            The default value is 0.1000.
            This value represents system variable SKETCHINC.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SketchPolylines">
            <summary>
            Gets or sets a value indicating whether to sketch polylines (<c>true</c>) or sketch lines (<c>false</c>).
            The default value is <c>false</c>.
            This value represents system variable SKPOLY.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SpatialIndexMaxTreeDepth">
            <summary>
            Gets or sets the spatial index maximum tree depth.
            The default value is 3020.
            This value represents system variable TREEDEPTH.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SplineType">
            <summary>
            Gets or sets the spline type.
            The default value is <see cref="F:WW.Cad.Model.Entities.SplineType.CubicBSpline">CubicBSpline</see>.
            This value represents system variable SPLINETYPE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.StackedTextAlignment">
            <summary>
            Gets or sets the stacked text alignment.
            The default value is <see cref="F:WW.Cad.Model.VerticalAlignment.Middle"/>.
            This value represents system variable TSTACKALIGN (not present IN DXF).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.StackedTextSizePercentage">
            <summary>
            Gets or sets the stacked text size as a percentage of the current text height.
            The default value is 70.
            This value represents system variable TSTACKSIZE (not present IN DXF).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SurfaceDensityU">
            <summary>
            Gets or sets the surface density (for PEDIT Smooth) in M direction.
            The default value is 6.
            This value represents system variable SURFU.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SurfaceDensityV">
            <summary>
            Gets or sets the surface density (for PEDIT Smooth) in N direction.
            The default value is 6.
            This value represents system variable SURFV.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SurfaceIsolineCount">
            <summary>
            Gets or sets the surface isolines count on entities.
            The default value is 4.
            This value represents system variable ISOLINES.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SurfaceMeshTabulationCount1">
            <summary>
            Gets or sets the number of mesh tabulations count in the first direction.
            The default value is 6.
            This value represents system variable SURFTAB1.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SurfaceMeshTabulationCount2">
            <summary>
            Gets or sets the number of mesh tabulations count in the second direction.
            The default value is 6.
            This value represents system variable SURFTAB2.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SurfaceType">
            <summary>
            Gets or sets the surface type (for PEDIT Smooth).
            The default value is 6.
            This value represents system variable SURFTYPE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.TextQuality">
            <summary>
            Gets or sets the text quality (0 to 100).
            The default value is 50.
            This value represents system variable TEXTQLTY.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.TextHeightDefault">
            <summary>
            Gets or sets the text height default.
            The default value is 0.2.
            This value represents system variable TEXTSIZE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ThicknessDefault">
            <summary>
            Gets or sets the thickness default.
            The default value is 0.
            This value represents system variable THICKNESS.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.TraceWidthDefault">
            <summary>
            Gets or sets the trace width default.
            The default value is 0.0500.
            This value represents system variable TRACEWID.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.Ucs">
            <summary>
            Gets or sets the model space UCS.
            This value represents header variables $UCS*.
            </summary>
            <remarks>Not all UCS properties are supported in all versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UcsBase">
            <summary>
            Gets or sets the UCS base.
            This value represents header variables $UCSBASE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UnitMode">
            <summary>
            Gets or sets the unit mode.
            Low bit set = Display fractions, feet-and-inches, and surveyor's angles in input format.
            The default value is 0.
            This value represents system variable UNITMODE.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf12"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UpdateDateTime">
            <summary>
            Gets or sets the update date time (local).
            This value represents system variable TDUPDATE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UpdateUtcDateTime">
            <summary>
            Gets or sets the update date time (UTC).
            This value represents system variable TDUUPDATE, introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserElapsedTimeSpan">
            <summary>
            Gets or sets the user elapsed time span.
            This value represents system variable TDUSRTIMER.
            </summary>
            <remarks>
            <para>
            When read from file, this value is capped to be within the 
            <see cref="F:System.TimeSpan.MinValue"/> and <see cref="F:System.TimeSpan.MaxValue"/>.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserShort1">
            <summary>
            Gets or sets the user short value 1.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERI1.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserShort2">
            <summary>
            Gets or sets the user short value 2.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERI2.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserShort3">
            <summary>
            Gets or sets the user short value 3.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERI3.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserShort4">
            <summary>
            Gets or sets the user short value 4.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERI4.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserShort5">
            <summary>
            Gets or sets the user short value 5.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERI5.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserDouble1">
            <summary>
            Gets or sets the user double value 1.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERR1.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserDouble2">
            <summary>
            Gets or sets the user double value 2.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERR2.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserDouble3">
            <summary>
            Gets or sets the user double value 3.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERR3.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserDouble4">
            <summary>
            Gets or sets the user double value 4.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERR4.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserDouble5">
            <summary>
            Gets or sets the user double value 5.
            This value is intended for use by third-party developers.
            The default value is 0.
            This value represents system variable USERR5.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.UserTimer">
            <summary>
            Gets or sets whether the user timer is running.
            The default value is <b>true</b>.
            This value represents system variable USRTIMER.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.VersionGuid">
            <summary>
            Gets or sets the version GUID.
            Uniquely identifies a particular version of a drawing. Updated when the drawing is modified.
            This value represents system variable VERSIONGUID.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ViewportDefaultViewScaleFactor">
            <summary>
            Gets or sets the viewport default view scale factor.
            The default value is 0.
            This value represents system variable PSVPSCALE.
            </summary>
            <remarks>
            <para>
            0 = Scaled to fit, &gt; 0 = Scale factor.
            </para>
            <para>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.WorldView">
            <summary>
            Gets or sets a value indicating whether to set UCS to WCS during DVIEW/VPOINT.
            The default value is <c>true</c>.
            This value represents system variable WORLDVIEW.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.XEdit">
            <summary>
            Gets or sets a value indicating whether the current drawing can be edited inplace
            when being referenced by another drawing.
            The default value is <c>false</c>.
            This value represents system variable XEDIT.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.RequiredVersions">
            <summary>
            This value represents system variable REQUIREDVERSIONS.
            The default value is 0.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ExternalReferenceClippingBoundaryType">
            <summary>
            Gets or sets the line type to display external reference (XREF) clipping boundaries.
            The default value is <see cref="F:WW.Cad.Model.SimpleLineType.Solid"/>.
            This value represents the system variable XCLIPFRAME.
            </summary>
            <remarks>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/> as bool (<see cref="F:WW.Cad.Model.SimpleLineType.Off"/> is <c>false</c>, all other <c>true</c>), 
            switched to complete support of all values in <see cref="F:WW.Cad.Model.DxfVersion.Dxf24"/>, not available in earlier versions.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.ObjectSnapMode">
            <summary>
            Gets or sets the object snap mode.
            The default value is <see cref="F:WW.Cad.Model.ObjectSnapMode.None"/>.
            This value represents the system variable OSMODE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SnapAngle">
            <summary>
            Gets or sets the snap angle [radians].
            The default value is 0.0.
            This value represents the system variable SNAPANGLE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SnapStyle">
            <summary>
            Gets or sets the snap style.
            The default value is <see cref="F:WW.Cad.Model.SnapStyle.Standard"/>.
            This value represents the system variale SNAPSTYLE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SnapType">
            <summary>
            Gets or sets the snap type.
            The default value is <see cref="F:WW.Cad.Model.SnapType.Grid"/>.
            This value represents the system variable SNAPISOPAIR.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SnapSpacing">
            <summary>
            Gets or sets the snap spacing.
            The default value is (1.0,1.0).
            This value represents the system variable SNAPUNIT.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SnapBase">
            <summary>
            Gets or sets the snap base point.
            The default value is (0.0,0.0).
            This value represents the system variable SNAPBASE.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.SnapMode">
            <summary>
            Gets or sets whether basic snap mode is switched on.
            The default value is <c>false</c>.
            This value represents the system variable SNAPMODE.
            </summary>
            <remarks>
            <para>
            Basic snapping is done either to a grid or polar, depending on <see cref="P:WW.Cad.Model.DxfHeader.SnapType"/>.
            There is also snapping to objects, which is defined by <see cref="P:WW.Cad.Model.DxfHeader.ObjectSnapMode"/>
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.CurrentAnnotationScale">
            <summary>
            The current <see cref="T:WW.Cad.Model.Objects.Annotations.DxfScale">annotation scale</see>.
            </summary>
            <remarks>
            (CANNOSCALE dictionary variable)
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AnnotationsAlwaysVisible">
            <summary>
            A value indicating whether the annotative objects are always visible.
            The default value is <c>true</c>.
            </summary>
            <remarks>
            When this variable is <c>false</c>, annotative texts, etc., will be visible 
            only if they support the <see cref="P:WW.Cad.Model.DxfHeader.CurrentAnnotationScale">current annotation scale</see>. 
            When it is on (the default), annotative objects behave as if the current annotation 
            scale is the default scale for these objects.
            (ANNOALLVISIBLE dictionary variable)
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfHeader.AnnotativeDrawing">
            <summary>
            A value indicating whether this drawing will be treated as annotative block, when inserted in another drawing.
            Default is <c>false</c>.
            </summary>
            <remarks>
            (ANNOTATIVEDWG dictionary variable)
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.AttributeVisibility">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfAttribute">DxfAttribute</see> and 
            <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/> visibility.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AttributeVisibility.None">
            <summary>
            No attributes are visible.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AttributeVisibility.Normal">
            <summary>
            Visibility is determined by attribute itself.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AttributeVisibility.All">
            <summary>
            All attributes are visible.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfVertex2D">
            <summary>
            A 2D vertex in a <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DBase"/> object.
            </summary>
            <remarks>
            <para>
            DxfVertex2D's most defining properties are its
            <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.Position"/>, <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.Bulge"/>, <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.StartWidth"/>, <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.EndWidth"/> and
            <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.TangentDirection">curve fit tangent direction</see>.
            </para>
            <para>
            The <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.Position"/> is in the object coordinate system, defined by the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DBase"/> 
            (<see cref="P:WW.Cad.Model.Entities.DxfPolyline2DBase.ZAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DBase.Elevation"/>).
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfVertex"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> class with the specified coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.#ctor(WW.Math.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> class with the specified vertex.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.TransformMeInOcs(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)">
            <summary>
            Calculates the <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.Bulge"/> from the arc segment's included angle.
            </summary>
            <param name="angle">The angle in radians.</param>
            <seealso cref="P:WW.Cad.Model.Entities.DxfVertex2D.Bulge"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)">
            <summary>
            Calculates the <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.Bulge"/> from the arc segment's 
            center and end points.
            </summary>
            <param name="center">The arc center.</param>
            <param name="arcStart">The arc start point.</param>
            <param name="arcEnd">The arc end point.</param>
            <param name="clockWise">if set to <c>true</c> then the arc segment is clock wise.</param>
            <seealso cref="P:WW.Cad.Model.Entities.DxfVertex2D.Bulge"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.GetArcCenterFromEndPointsAndBulge(WW.Math.Point2D,WW.Math.Point2D,System.Double)">
            <summary>
            Gets the arc center from specified end points and bulge.
            </summary>
            <param name="arcStart">The arc start point.</param>
            <param name="arcEnd">The arc end point.</param>
            <param name="bulge">
            The bulge is the tangent of one fourth the
            included angle for an arc segment, made negative if the arc goes
            clockwise from the start point to the endpoint. A bulge of 0 indicates a
            straight segment, and a bulge of 1 is a semicircle.
            </param>
            <seealso cref="P:WW.Cad.Model.Entities.DxfVertex2D.Bulge"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified 2D vertext in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.ToString">
            <summary>
            Returns the string representation of the vertex position.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2D.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.Bulge">
            <summary>
            Gets or sets the bulge (optional; default is 0) for curve segment. 
            A negative value indicates a clockwise arc, a positive value indicates a counter clockwise arc.
            </summary>
            <remarks>
            <para>
            The bulge is the tangent of one fourth the
            included angle for an arc segment, made negative if the arc goes
            clockwise from the start point to the endpoint. A bulge of 0 indicates a
            straight segment, and a bulge of 1 is a semicircle.
            </para>
            <para>
            See also helper methods <see cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)"/> and
            <see cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)"/> to get bulge values from 
            arc center and end points or from the arc's included angle.
            </para>
            </remarks>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromEndPoints(WW.Math.Point2D,WW.Math.Point2D,WW.Math.Point2D,System.Boolean)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetBulgeFromIncludedAngle(System.Double)"/>
            <seealso cref="M:WW.Cad.Model.Entities.DxfVertex2D.GetArcCenterFromEndPointsAndBulge(WW.Math.Point2D,WW.Math.Point2D,System.Double)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.EndWidth">
            <summary>
            Gets or sets the end width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <remarks>
            The position is in the object coordinate system, defined by the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.StartWidth">
            <summary>
            Gets or sets the start width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.HasTangent">
            <summary>
            Gets or sets whether the vertex has a <see cref="P:WW.Cad.Model.Entities.DxfVertex2D.TangentDirection"/>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfVertex2D.TangentDirection"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.IsCurveFitVertex">
            <summary>
            Gets or sets whether the vertex is created by curve-fitting.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.IsSplineControlPoint">
            <summary>
            Gets or sets a value indicating whether this instance is a spline control point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.Is3DPolygonMeshVertex">
            <summary>
            Gets or sets a value indicating whether this instance is a 3D polygon mesh vertex.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.IsPolyfaceMeshVertex">
            <summary>
            Gets or sets a value indicating whether this instance is a polyface mesh vertex.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.IsFace">
            <summary>
            Gets or sets a value indicating whether this instance is a polyface mesh face.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.TangentDirection">
            <summary>
            Gets or sets the tangent direction (radians).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfVertex2D.HasTangent"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.X">
            <summary>
            Gets or sets the x coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.Y">
            <summary>
            Gets or sets the y coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.VertexId">
            <summary>
            Gets or sets the vertex ID.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex2D.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolyline2DSpline">
            <summary>
            A spline curve subtype of the 2D poly line (POLYLINE) entity, built from <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> objects.
            </summary>
            <remarks>
            <para>
            The spline can be of degree 2 (quadratic) or 3 (cubic), see property <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.SplineType">SplineType</see>.
            </para>
            <para>
            The spline is defined by the <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/> and its degree (<see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.SplineType">SplineType</see>).
            </para>
            <para>
            The <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ApproximationPoints"/> are derived from the control points and are required
            for rendering by programs that itself don't calculate the spline curve from the control points 
            (see method <see cref="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.RecalculateApproximationPoints(System.Int32)"/>).
            </para>
            <para>
            The object coordinate system that affects all <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/> and <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ApproximationPoints"/>
            is defined by properties <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DBase.ZAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DBase.Elevation"/>.
            </para>
            </remarks>
            <example>
            An example of how to create and write a dxf file containing DxfPolyline2DSpline objects.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace Examples {
    public class Polyline2DSplineExample {
        public void Demonstrate()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            // 2D spline.
            DxfPolyline2DSpline polyline2 = new DxfPolyline2DSpline(SplineType.CubicBSpline);
            polyline2.ControlPoints.AddRange(
                new DxfVertex2D[] {
                    new DxfVertex2D(0, -4),
                    new DxfVertex2D(0, -3),
                    new DxfVertex2D(1, -3),
                    new DxfVertex2D(1, -4)
                }
            );
            model.Entities.Add(polyline2);
    
            DxfWriter.Write("WriteDxfPolyline3DTest-R14.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfVertex2D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfSpline"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.#ctor(WW.Cad.Model.Entities.SplineType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/> class.
            </summary>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.#ctor(WW.Cad.Model.Entities.SplineType,WW.Cad.Model.Entities.DxfVertex2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.#ctor(WW.Cad.Model.Entities.DxfVertex2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/> class.
            </summary>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/>.</param>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.#ctor(WW.Cad.Model.Entities.SplineType,WW.Math.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.#ctor(WW.Math.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/>.</param>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.#ctor(WW.Cad.Model.Entities.SplineType,System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2DSpline"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.#ctor(System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolyline2D"/> class.
            </summary>
            <param name="controlPoints">The control points to add to <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/>.</param>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.RecalculateApproximationPoints(System.Int32)">
            <summary>
            Fills the <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ApproximationPoints"/> based on the <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/> and given 
            <paramref name="noOfSplineLineParts"/>.
            </summary>
            <remarks>
            This method can be called explicitly to create the approximation points.
            If there are no approximation points then they will be created when writing the spline to file
            using <see cref="P:WW.Cad.Model.DxfHeader.NumberOfSplineSegments"/>.
            </remarks>
            <param name="noOfSplineLineParts">
            Number of line parts by which to approximate the spline.
            </param>
            <seealso cref="P:WW.Cad.Model.DxfHeader.NumberOfSplineSegments"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified 2D spline in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.GetPolyline2D(WW.Cad.Model.Entities.DxfVertex2DCollection)">
            <summary>
            Convert given vertices to a polyline, disregarding the widths.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.GetPolyline2DE(WW.Cad.Model.Entities.DxfVertex2DCollection,System.Boolean)">
            <summary>
            Convert given vertices to a polyline, disregarding the widths.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.GetPolyline2D2N(WW.Cad.Model.Entities.DxfVertex2DCollection,System.Boolean)">
            <summary>
            Convert given vertices to a polyline with normals, disregarding the widths.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.GetPolyline2D2WN(WW.Cad.Model.Entities.DxfVertex2DCollection,System.Boolean)">
            <summary>
            Convert given vertices to a polyline with normals, including the widths.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.Get2DBSplineCurve2DE(System.Int32,System.Int32)">
            <summary>
            Get 2d bspline of given power (3 for cubic, 2 for quadratic).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.Get2DBSplineCurve2D2N(System.Int32,System.Int32)">
            <summary>
            Get 2d bspline of given power (3 for cubic, 2 for quadratic).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.Get2DBSplineCurve2D2WN(System.Int32,System.Int32)">
            <summary>
            Get 2d bspline of given power (3 for cubic, 2 for quadratic).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints">
            <summary>
            Gets the spline control points (<see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/>) of the spline poly line.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ApproximationPoints">
            <summary>
            Get the spline approximation points (<see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/>) of the spline poly line.
            </summary>
            <remarks>
            These vertices are derived from <see cref="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.ControlPoints"/> by method
            <see cref="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.RecalculateApproximationPoints(System.Int32)"/>.
            The approximation points are required
            for rendering by programs that itself don't calculate the spline curve from the control points.
            </remarks>
            <seealso cref="M:WW.Cad.Model.Entities.DxfPolyline2DSpline.RecalculateApproximationPoints(System.Int32)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolyline2DSpline.SplineType">
            <summary>
            Gets or sets the spline type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPatternStore">
            <summary>
            Static container for <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> objects.
            </summary>
            <remarks>
            This class stores pattern file contents in memory.
            Note that no pattern files are supplied with CadLib, but free .pat files can be found on the internet.
            AutoCAD stores its predefined patterns in <b>Acad.pat</b>.
            </remarks>
            <example>
            Below is an example of how to read a pattern file and applying one of its patterns to a hatch.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;

namespace Examples {
    public class PatternReaderExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            DxfPatternStore.Add(PatternReader.ReadPatterns("Acad.pat"));

            DxfHatch hatch = new DxfHatch();
            hatch.Pattern = DxfPatternStore.GetPatternWithName("BRSTONE");
            DxfHatch.BoundaryPath boundaryPath = new DxfHatch.BoundaryPath();
            boundaryPath.Type = BoundaryPathType.Polyline;
            hatch.BoundaryPaths.Add(boundaryPath);
            boundaryPath.PolylineData =
                new DxfHatch.BoundaryPath.Polyline(
                    new DxfHatch.BoundaryPath.Polyline.Vertex[] {
                        new DxfHatch.BoundaryPath.Polyline.Vertex(-0.5, -40.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(-0.5, -2.5),
                        new DxfHatch.BoundaryPath.Polyline.Vertex(40.5, -2.5)
                    }
                );
            boundaryPath.PolylineData.Closed = true;
            model.Entities.Add(hatch);
    
            DxfWriter.Write("Hatch Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.IO.PatternReader"/>
            <seealso cref="T:WW.Cad.IO.PatternWriter"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPatternStore.Add(WW.Cad.Model.Entities.DxfPattern)">
            <summary>
            Adds a <see cref="T:WW.Cad.Model.Entities.DxfPattern"/>.
            </summary>
            <remarks>
            If an entry already existed for the pattern name it is replaced.
            </remarks>
            <param name="pattern">The pattern to add, must have a name.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPatternStore.Add(WW.Cad.Model.Entities.DxfPattern[])">
            <summary>
            Adds given <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> objects.
            </summary>
            <remarks>
            If an entry already existed for the pattern name it is replaced.
            </remarks>
            <param name="patterns">The patterns to add, each pattern must have a name.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPatternStore.GetPatternWithName(System.String)">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.DxfPattern"/> with given name.
            </summary>
            <param name="name">The pattern name.</param>
            <returns>
            The found pattern or <b>null</b> if not present.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPatternStore.GetPatterns">
            <summary>
            Gets all stored patterns.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPatternStore.Clear">
            <summary>
            Clears all patterns from the pattern store.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfBlockEnd">
            <summary>
            Represents the end of a entity block.
            Only used by AutoCAD internally.
            </summary>
            <seealso cref="T:WW.Cad.Model.Tables.DxfBlock"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBlockEnd.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBlockEnd.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBlockEnd.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">Visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBlockEnd.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfBlockEnd.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfBlockEnd.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfClass">
            <summary>
            Represents a DXF class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.#ctor(WW.Cad.Model.DxfClass)">
            <summary>
            Copy constructor.
            </summary>
            <param name="fromClass">class to copy</param>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetEffectiveProxyFlags(WW.Cad.Model.DxfVersion)">
            <summary>
            Gets the effective proxy flags.
            </summary>
            <remarks>
            For versions later than <see cref="F:WW.Cad.Model.DxfVersion.Dxf13"/> the
            <see cref="F:WW.Cad.Model.ProxyFlags.R13FormatProxy">ProxyFlags.R13FormatProxy</see> flag is not written to file.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetColorClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the COLOR class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetIdBufferClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the IDBUFFER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetRasterVariablesClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the RASTERVARIABLES class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetImageDefClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the IMAGEDEF class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetImageDefReactorClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the IMAGEDEF_REACTOR class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetImageClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the IMAGE class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetWipeoutClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the WIPEOUT class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetIDBlockReferenceClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the IDBlockReference class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetMaterialClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the MATERIAL class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetVisualStyleClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the VISUALSTYLE class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetTableClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the TABLE class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetTableStyleClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the TABLESTYLE class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetScaleClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the SCALE class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetMLeaderStyleClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the MLEADERSTYLE class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetCellStyleMapClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the CELLSTYLEMAP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetPlaceHolderClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the ACDBPLACEHOLDER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetLayoutClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the LAYOUT class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetXRecordClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the XRECORD class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetDictionaryVariableClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the DICTIONARYVAR class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetDictionaryWithDefaultClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the ACDBDICTIONARYWDFLT class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockPointParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKPOINTPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockAlignmentGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKALIGNMENTGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockFlipGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKFLIPGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockRepresentationDataClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the ACDB_BLOCKREPRESENTATION_DATA class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockPurgePreventerClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the ACDB_DYNAMICBLOCKPURGEPREVENTER_VERSION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockLinearGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKLINEARGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockLookupGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKLOOKUPGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockPolarGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKPOLARGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockPropertiesTableGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKPROPERTIESTABLEGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockRotationGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKROTATIONGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockVisibilityGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKVISIBILITYGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockXYGripClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKXYGRIP class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockGripExpressionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKGRIPEXPRESSION class (creates one if not present).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WW.Cad.Model.DxfClass.GetDynamicBlockProxyNodeClass(WW.Cad.Model.DxfClassCollection)" -->
        <member name="M:WW.Cad.Model.DxfClass.GetBlockPolarParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKPOLARPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockRotationParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKROTATIONPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockScaleActionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKSCALEACTION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockLookupActionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKLOOKUPACTION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockArrayActionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKARRAYACTION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockPolarStretchActionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKPOLARSTRETCHACTION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockStretchActionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKSTRETCHACTION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockMoveActionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKMOVEACTION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockFlipActionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKFLIPACTION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockRotateActionClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKROTATEACTION class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockXYParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKXYPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockLinearParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKLINEARPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockFlipParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKFLIPPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockAlignmentParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKALIGNMENTPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockBasePointParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKBASEPOINTPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockLookUpParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKLOOKUPPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockVisibilityParameterClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKVISIBILITYPARAMETER class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetBlockPropertiesTableClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the BLOCKPROPERTIESTABLE class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.GetEvaluationGraphClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the ACAD_EVALUATION_GRAPH class (creates one if not present).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.CopyFrom(WW.Cad.Model.DxfClass)">
            <summary>
            Copies all fields from specified class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClass.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.ClassNumber">
            <summary>
            Gets or sets the class number.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.DwgVersion">
            <summary>
            Gets or sets the DWG version.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.MaintenanceVersion">
            <summary>
            Gets or sets the maintenance version.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.ProxyFlags">
            <summary>
            Gets or sets the proxy flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.ApplicationName">
            <summary>
            Gets or sets the name of the application.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.CPlusPlusClassName">
            <summary>
            Gets or sets the name of the C++ class.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.DxfName">
            <summary>
            Gets or sets the class DXF name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.WasAZombie">
            <summary>
            Gets or sets a value indicating whether the class was a zombie.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfClass.ItemClassId">
            <summary>
            Gets or sets the item class id.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.TableBorderPropertyFlags">
            <summary>
            Represents property flags for <see cref="T:WW.Cad.Model.Objects.DxfTableBorder"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableBorderPropertyFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableBorderPropertyFlags.BorderType">
            <summary>
            Border type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableBorderPropertyFlags.LineWeight">
            <summary>
            Line weight.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableBorderPropertyFlags.LineType">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableBorderPropertyFlags.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableBorderPropertyFlags.Visibility">
            <summary>
            Visibility.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableBorderPropertyFlags.DoubleLineSpacing">
            <summary>
            Double line spacing.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableBorderPropertyFlags.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.EntityColors">
            <summary>
            Represents a collection of well known indexed entity colors (ACI).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.ByLayer">
            <summary>
            By layer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.ByBlock">
            <summary>
            By block.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Default">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Yellow">
            <summary>
            Yellow.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Green">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Cyan">
            <summary>
            Cyan.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Purple">
            <summary>
            Purple.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.DarkGray">
            <summary>
            Dark gray.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Gray">
            <summary>
            Gray.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.LightGray">
            <summary>
            Light gray.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Orange">
            <summary>
            Orange.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.DarkOrange">
            <summary>
            Dark orange.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.DarkRed">
            <summary>
            Dark red.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.LightBlue">
            <summary>
            Light blue.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.DarkBlue">
            <summary>
            Dark blue.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Pink">
            <summary>
            Pink.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Brown">
            <summary>
            Brown.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Maroon">
            <summary>
            Maroon.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Violet">
            <summary>
            Violet.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.GreenYellow">
            <summary>
            Green yellow.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Indigo">
            <summary>
            Indigo.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.LightGreen">
            <summary>
            Light green.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.DarkGreen">
            <summary>
            Dark green.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.EntityColors.Magenta">
            <summary>
            Magenta: #FF00FF (color index 6).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableBreakHeight">
            <summary>
            Represents the height at which a table break occurs.
            See also <see cref="T:WW.Cad.Model.Entities.DxfTableBreakData"/>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableBreakData"/>.
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableBreakHeight.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableBreakHeight.CopyFrom(WW.Cad.Model.Entities.DxfTableBreakHeight)">
            <summary>
            Copies the contents from specified instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakHeight.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakHeight.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakHeight.Flags">
            <summary>
            Gets or sets the flags (meaning unknown).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.AppInfo">
            <summary>
            Represents the CadLib application info (to identify this component in written DWG files).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ObjectSnapMode">
            <summary>
            Object snap mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.None">
            <summary>
            Switch off all snapping modes.
            </summary>
            <remarks>
            To switch off without forgetting all values see <see cref="F:WW.Cad.Model.ObjectSnapMode.SwitchedOff"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.EndPoint">
            <summary>
            Snap to end point of lines, arcs, and to polyline vertices .
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.MidPoint">
            <summary>
            Snap to mid point of lines, arcs, and polyline segments.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Center">
            <summary>
            Snap to center of circles, arcs. and polyline arc segments.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Node">
            <summary>
            Snap to the center of point objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Quadrant">
            <summary>
            Snap to circle quadrant points at 0°, 90°, 180°, and 270°.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Intersection">
            <summary>
            Snap to intersections of any two drawing objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Insertion">
            <summary>
            Snap to insertion points of blocks, texts, and images.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Perpendicular">
            <summary>
            Snap to points which form a perpendicular with the selected object. 
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Tangent">
            <summary>
            Snap to tangent points.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Nearest">
            <summary>
            Snap to the nearest point on a drawing object.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.ClearsAllObjectSnaps">
            <summary>
            Clears all object snaps.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.ApparentIntersection">
            <summary>
            Snap to intersections in the current view.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Extension">
            <summary>
            Snap to imaginary extensions of lines.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.Parallel">
            <summary>
            Used to draw parallel lines.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.AllModes">
            <summary>
            Use this to switch on all snapping modes.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSnapMode.SwitchedOff">
            <summary>
            Use this to temporarily switch off snapping.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPurgePreventer">
            <summary>
            Represents the dynamic block purge preventer.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPurgePreventer.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPurgePreventer.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPurgePreventer.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPurgePreventer.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPurgePreventer.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYGrip">
            <summary>
            Represents the dynamic block XY grip.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYGrip.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockXYGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupGrip">
            <summary>
            Represents the dynamic block lookup grip.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupGrip.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockLookupGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfWipeoutVariables">
            <summary>
            Represents settings for displaying <see cref="T:WW.Cad.Model.Entities.DxfWipeout"/> objects.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfWipeoutVariables.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfWipeoutVariables.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfWipeoutVariables.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfWipeoutVariables.GetClass(WW.Cad.Model.DxfClassCollection)">
            <summary>
            Gets the class (creates one if not present).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfWipeoutVariables.DisplayFrame">
            <summary>
            Gets or sets whether to display the frame.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfWipeoutVariables.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfWipeoutVariables.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.Font">
            <summary>
            Gets the font (height is normalized to 100).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.Family">
            <summary>
            Gets the font family.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.Style">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.Height">
            <summary>
            Gets the font height (corresponds to the font's em height).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.Ascent">
            <summary>
            Gets the actual windows font ascent, 
            which is different from the specified <see cref="P:WW.Cad.Model.IFontInfo.CadAscent"/>.
            </summary>
            <seealso cref="P:WW.Cad.Model.IFontInfo.CadAscent"/>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.CadAscent">
            <summary>
            Gets the CAD ascent (as specified in the CAD drawing), 
            which is different from the actual windows font <see cref="P:WW.Cad.Model.IFontInfo.Ascent"/>.
            </summary>
            <seealso cref="P:WW.Cad.Model.IFontInfo.Ascent"/>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.Descent">
            <summary>
            Gets the descent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.InternalLeading">
            <summary>
            Gets the internal leading.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.ExternalLeading">
            <summary>
            Gets the external leading.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.AverageCharacterWidth">
            <summary>
            Gets the average width of the character.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.MaximumCharacterWidth">
            <summary>
            Gets the maximum width of the character.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.Weight">
            <summary>
            Gets the weight.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.Overhang">
            <summary>
            Gets the overhang.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.DigitizedAspectX">
            <summary>
            Gets the digitized aspect X.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.IFontInfo.DigitizedAspectY">
            <summary>
            Gets the digitized aspect Y.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.ConsolidatingEntityVisitor">
            <summary>
            Entity visitor which is bringing together all visited entities in a single method.
            </summary>
            <remarks>
            <para>
            For nearly all visited entities the <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> method is called.
            </para>
            <para>
            For all classes extending <see cref="T:WW.Cad.Model.Entities.DxfDimension"/> the <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)"/>
            method is called, which just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/>. 
            </para>
            <para>
            For all entities extending <see cref="T:WW.Cad.Model.Entities.DxfPolylineBase"/> the <see cref="!:VisitPolyline"/>
            method is called, which just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/>.
            </para>
            <para>
            For all entities extending <see cref="T:WW.Cad.Model.Entities.DxfModelerGeometry"/> the 
            <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitModelerGeometry(WW.Cad.Model.Entities.DxfModelerGeometry)"/> method is called, which just
            calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/>.
            </para>
            <para>
            For all entities which insert a block into the model 
            the <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertingEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Tables.DxfBlock)"/> method is called,
            which just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the inserting
            entity.
            </para>
            <para>
            For all entities extending <see cref="T:WW.Cad.Model.Entities.DxfInsertBase"/> the
            <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertBase(WW.Cad.Model.Entities.DxfInsertBase)"/> method is called, which calls
            <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertingEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Tables.DxfBlock)"/> (see above).
            </para>
            <para>
            For all entities extending <see cref="T:WW.Cad.Model.Entities.DxfVertex"/> the 
            <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitVertex(WW.Cad.Model.Entities.DxfVertex)"/> method is called, which does nothing 
            at all because scenarios where vertexes are interesting 
            are very rare. Furthermore to visit any vertex entities
            it would be necessary to override the various methods
            visiting entities extending <see cref="T:WW.Cad.Model.Entities.DxfPolylineBase"/> 
            and iterate over the vertexes of the visited entities.
            </para>
            <para>
            The <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntities(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity})"/> method makes it easy to 
            visit a collection of entities, eg from 
            <see cref="P:WW.Cad.Model.DxfModel.Entities"/> or from 
            <see cref="P:WW.Cad.Model.Tables.DxfBlock.Entities"/>.
            </para>
            <para>
            Without overriding methods this class is completely useless,
            as you can also iterate directly over an entity collection.
            Usage szenarios are eg extracting all entities which 
            are on a given layer, which only requires small adaptions,
            as this basic implementation does not step into blocks.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Visits an entity.
            </summary>
            <remarks>
            Do whatever you want with 
            </remarks>
            <param name="entity">The visited entity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)">
            <summary>
            Visits an dimension based entity.
            </summary>
            <remarks>
            This allows to handle dimensions in a similar way.
            This basic implementation just calls 
            <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertingEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Tables.DxfBlock)"/>
            with the dimension and its block.
            </remarks>
            <param name="dimension">The dimension entity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitModelerGeometry(WW.Cad.Model.Entities.DxfModelerGeometry)">
            <summary>
            Visits a modeler geometry based entity.
            </summary>
            <remarks>
            This allows to handle ACIS based entities in a similar way.
            This basic implementation just calls 
            <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/>.
            </remarks>
            <param name="geometry">The entity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertBase(WW.Cad.Model.Entities.DxfInsertBase)">
            <summary>
            Visits an insert based entity.
            </summary>
            <remarks>
            This allows to handle all entities inserting user-defined blocks
            in a similar way. This basic implemetation just calls 
            <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertingEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Tables.DxfBlock)"/> with the entity and its block,
            and it calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntities(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity})"/> with the 
            <see cref="P:WW.Cad.Model.Entities.DxfInsertBase.Attributes"/> collection.
            </remarks>
            <param name="insert">The insert.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertingEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Tables.DxfBlock)">
            <summary>
            Visits an entity which inserts a block.
            </summary>
            <remarks>
            In this implementation this is called for entities inserting user-defined blocks
            (via <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertBase(WW.Cad.Model.Entities.DxfInsertBase)"/>) and entities inserting automatically 
            generated blocks (directly). This base implementation ignores the
            <paramref name="insertedBlock"/> parameter and just calls 
            <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the <paramref name="entity"/>.
            </remarks>
            <param name="entity">The entity.</param>
            <param name="insertedBlock">The inserted block, possibly <c>null</c>.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitVertex(WW.Cad.Model.Entities.DxfVertex)">
            <summary>
            Visits a vertex base entity.
            </summary>
            <remarks>
            <para>
            Vertexes are no stand-alone entities, the are parts of 
            <see cref="T:WW.Cad.Model.Entities.DxfPolylineBase"/> based entities. So handling them 
            does not make sense in most scenarios. Therefore 
            this base implementation does nothing at all. 
            </para>
            <para>
            Furthermore in this standard implementation this method will never be called
            because the Visit() methods for entities extending 
            <see cref="T:WW.Cad.Model.Entities.DxfPolylineBase"/> will not forward this visitor
            to their vertexes. So if you want to make use of this 
            method you'll have to override all these methods.
            </para>
            </remarks>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntities(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity})">
            <summary>
            Visits all entities in the given collection.
            </summary>
            <remarks>
            This just applies the visitor pattern to all entities
            using this class as the visitor.
            </remarks>
            <param name="entities">The entities to be visited.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.Dxf3DFace)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.Dxf3DSolid)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitModelerGeometry(WW.Cad.Model.Entities.DxfModelerGeometry)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfArc)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfAttribute)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfAttributeDefinition)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfCircle)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Aligned)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)"/> for the dimension.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Angular3Point)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)"/> for the dimension.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Angular4Point)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)"/> for the dimension.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Diametric)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)"/> for the dimension.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Linear)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)"/> for the dimension.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Ordinate)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)"/> for the dimension.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfDimension.Radial)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitDimension(WW.Cad.Model.Entities.DxfDimension)"/> for the dimension.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfEllipse)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfHatch)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfImage)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfProxyEntity)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfWipeout)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertBase(WW.Cad.Model.Entities.DxfInsertBase)"/> for the insert.
            </summary>
            <remarks>
            This base method ignores the insert's <see cref="P:WW.Cad.Model.Entities.DxfInsertBase.Attributes"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.InventorDrawing.DxfIDBlockReference)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertBase(WW.Cad.Model.Entities.DxfInsertBase)"/> for the insert.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLeader)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLine)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfLwPolyline)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMeshFace)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMLine)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfMText)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPoint)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyfaceMesh)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
            <remarks>
            Does not take care of vertexes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolygonMesh)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
            <remarks>
            Does not take care of vertexes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolygonSplineMesh)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
            <remarks>
            Does not take care of vertexes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline2D)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
            <remarks>
            Does not take care of vertexes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline2DSpline)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
            <remarks>
            Does not take care of vertexes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline3D)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
            <remarks>
            Does not take care of vertexes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfPolyline3DSpline)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
            <remarks>
            Does not take care of vertexes.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfRay)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfShape)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfRegion)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitModelerGeometry(WW.Cad.Model.Entities.DxfModelerGeometry)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfBody)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitModelerGeometry(WW.Cad.Model.Entities.DxfModelerGeometry)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSequenceEnd)">
            <summary>
            Does nothing at all.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSolid)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfSpline)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfTable)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitInsertingEntity(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.Tables.DxfBlock)"/> for the table and its block.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfText)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfTolerance)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfVertex2D)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitVertex(WW.Cad.Model.Entities.DxfVertex)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfVertex3D)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitVertex(WW.Cad.Model.Entities.DxfVertex)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfViewport)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfXLine)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.Visit(WW.Cad.Model.Entities.DxfOle)">
            <summary>
            Just calls <see cref="M:WW.Cad.Model.Entities.ConsolidatingEntityVisitor.VisitEntity(WW.Cad.Model.Entities.DxfEntity)"/> for the entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatPCurve">
            <summary>
            SAT class for parameter space curve entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatPCurve.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPCurve.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPCurve.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPCurve.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTaperSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTaperSplineSurfacePrimitive.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTaperSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTaperSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatTaperSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatPipeSplineSurfacePrimitive">
            <summary>
            SAT sub pipe spline surface primitives. A surface that is the envelope of a fixed-radius
            circle centered on a point on a given curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatPipeSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatPipeSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatPipeSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatPipeSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryCircular">
            <summary>
            SAT body geometry class.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryCircular.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryCircular.SurfaceTypeEnumValues">
            <summary> SurfaceType strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryCircular.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryCircular.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryCircular.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BodyGeometry.SatBodyGeometryCircular.SurfaceType">
            <summary>
            Extended flag.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendVblendAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendVblendAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendVblendAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendVblendAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.BSI.SatBSIAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.BSI.SatBSIAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.BSI.SatBSIEntityIDAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.BSI.SatBSIEntityIDAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.BSI.SatBSIEntityIDAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.BSI.SatBSIEntityIDAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.BasicSabWriter">
            <summary>
            Basic implementation of a SAT writer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabWriter.resolver">
            <summary>Wrapped entity resolver.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabWriter.subResolver">
            <summary>Wrapped sub-entity resolver.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabWriter.version">
            <summary>Version number.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabWriter.stream">
            <summary>Stream stores SAT binary data</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.#ctor(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,System.IO.MemoryStream)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="version">file version</param>
            <param name="stream">binary stream</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.CreateSubtypeWriter(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,System.IO.MemoryStream)">
            <summary>
            Create a reader for a sub part.
            </summary>
            <param name="entityResolver">entity reaolver</param>
            <param name="fileFormatVersion">file format version</param>
            <param name="inputStream">binary stream</param>
            <returns>sub type reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteOptionalSequenceNumber(System.Int32)">
            <summary>
            Write an optional sequence number.
            </summary>
            <param name="defaultNumber">There is no sequence number in SAB format.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteHeader(WW.Cad.Model.Acis.SatHeader)">
            <summary>
            Write a header section.
            </summary>
            <param name="header">Header to fill</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WritePosition(WW.Math.Point3D)">
            <summary>
            Write the next position.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteVector(WW.Math.Vector3D)">
            <summary>
            Write the next vector.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteInt(System.Int32)">
            <summary>
            Write the next integer value. 32 bits.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteIndex(System.Int32)">
            <summary>
            Write the next index value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteIndex(WW.Cad.Model.Acis.SatEntities.SatEntity)">
            <summary>
            Write the next index value.
            </summary>
            <remarks>
            entity can be null
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteDouble(System.Double)">
            <summary>
            Write the next double value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteSubtypeStartMarker">
            <summary>
            Write the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteSubtypeEndMarker">
            <summary>
            Write the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteString(System.String)">
            <summary>
            Write the next string value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteLogical(WW.Cad.Model.Acis.ILogical)">
            <summary>
            Write the next logical string value.
            </summary>
            <param name="values">Possible logical values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteEnum(System.String[],System.Int32[],System.Int32)">
            <summary>
            Write the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <param name="indexes">Possible enum index values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteEnum(System.String[],System.Int32)">
            <summary>
            Write the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteKeyword(System.String)">
            <summary>
            Write the next keyword.
            </summary>
            <remarks>
            This may eg be an entity name.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteEndOfRecord">
            <summary>
            Write the end-of-record marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteEndOfLine">
            <summary>
            Write the end-of-line marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.WriteRest(System.Collections.Generic.List{WW.Cad.Model.Acis.SatEntities.UnknownDataElementBase},System.Boolean)">
            <summary>
            Write unknown entity data.
            </summary>
            <param name="unknownData">store for unknow data.</param>
            <param name="comesFromSat">true if source is SAT format.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.GetSubTypeWriter">
            <summary>
            Get a sub type definition reader.
            </summary>
            <returns>sub type definition reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.RegisterEntityBinder(System.Int32,WW.Cad.Model.Acis.BindEntity)">
            <summary>
            Register an entity binder.
            </summary>
            <remarks>
            The binder is never called if the index is less than <c>0</c>,
            it is called immediately if the index can be resolved to an entity,
            and it may be called later as soon as an entity with the given index
            is registered. 
            </remarks>
            <param name="index">index for which binder is called</param>
            <param name="binder">binder to be called for the given index</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.SubEntity(System.Int32)">
            <summary>
            Get a sub-entity for a given index.
            </summary>
            <param name="index">sub-entity index</param>
            <returns>
            sub-entity or <c>null</c> if the index is less than <c>0</c>
            or the sub-entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.SubEntityIndex(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Get a sub-entity index for a given sub entity.
            </summary>
            <param name="subEntity">sub-entity</param>
            <returns>
            sub-entity index or -1 if sub-entity was not indexed
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabWriter.RegisterNextSubEntity(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Register a sub-entity.
            </summary>
            <param name="subEntity">subEntity to registration</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSabWriter.FileFormatVersion">
            <summary>
            Get the version of the file format.
            </summary>
            <returns>file format version</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSabWriter.Item(System.Int32)">
            <summary>
            Get an entity for a given index.
            </summary>
            <param name="index">entity index</param>
            <returns>
            entity or <c>null</c> if the index is less than <c>0</c>
            or the entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSabWriter.SAT">
            <summary>
            Get the string with data stream in SAT format.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.BasicSabReader">
            <summary>
            Basic implementation of a SAT reader.
            </summary>
            <remarks>
            This reader is fit for versions until <see cref="F:WW.Cad.Model.Acis.SatConstants.DollarVersion"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabReader.SequencePrefix">
            <summary>Prefix for sequence numbers.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabReader.resolver">
            <summary>Wrapped entity resolver.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabReader.subResolver">
            <summary>Wrapped sub-entity resolver.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabReader.version">
            <summary>Version number.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabReader.stream">
            <summary>Stream stores SAT binary data</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.BasicSabReader.textStream">
            <summary>Auxiliry stream to support SAT pieces in SAB format.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.#ctor(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,System.IO.MemoryStream)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="version">file version</param>
            <param name="stream">binary stream</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.CreateTextReader(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,System.IO.MemoryStream)">
            <summary>
            Internal method to create sat sub stream
            </summary>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="version">file version</param>
            <param name="stream">binary stream</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.EnterToTextMode">
            <summary>
            Enter to SAT piece reading mode
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.LeaveTextMode">
            <summary>
            Leave from SAT piece reading mode
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.IsInTextMode">
            <summary>
            Flag of SAT piece reading mode
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.CreateSubtypeReader(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,System.IO.MemoryStream)">
            <summary>
            Create a reader for a sub part.
            </summary>
            <param name="entityResolver">entity reaolver</param>
            <param name="fileFormatVersion">file format version</param>
            <param name="inputStream">binary stream</param>
            <returns>sub type reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadOptionalSequenceNumber(System.Int32)">
            <summary>
            Read an optional sequence number.
            </summary>
            <param name="defaultNumber">There is no sequence number in SAB format.</param>
            <returns>sequence number</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadHeader(WW.Cad.Model.Acis.SatHeader)">
            <summary>
            Read a header section.
            </summary>
            <param name="header">Header to fill</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadPosition">
            <summary>
            Read the next position.
            </summary>
            <returns>filled position</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadVector">
            <summary>
            Read the next vector.
            </summary>
            <returns>filled vector</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadInt">
            <summary>
            Read the next integer value. 32 bits.
            </summary>
            <returns>integer value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadIndex">
            <summary>
            Read the next index value.
            </summary>
            <returns>index value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadDouble">
            <summary>
            Read the next double value.
            </summary>
            <returns>double value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadSubtypeStartMarker">
            <summary>
            Read the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadSubtypeEndMarker">
            <summary>
            Read the next subtype marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadString">
            <summary>
            Read the next string value.
            </summary>
            <returns>string value</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadLogical(WW.Cad.Model.Acis.ILogical)">
            <summary>
            Read the next logical string value.
            </summary>
            <param name="values">Possible logical values.</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadEnum(System.String[],System.Int32[])">
            <summary>
            Read the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <param name="indexes">Possible enum index values.</param>
            <returns>selected enum index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadEnum(System.String[])">
            <summary>
            Read the next enum string value.
            </summary>
            <param name="values">Possible enum values.</param>
            <returns>selected enum index</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadKeyword">
            <summary>
            Read the next keyword.
            </summary>
            <remarks>
            This may eg be an entity name.
            </remarks>
            <returns>keyword or <c>null</c></returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadRest(System.Collections.Generic.List{WW.Cad.Model.Acis.SatEntities.UnknownDataElementBase}@)">
            <summary>
            Read everything until the end-of-record marker.
            </summary>
            <param name="unknownData">store for unknow data.</param>
            <returns>true if source is SAT format</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.ReadEndOfRecord(System.Boolean)">
            <summary>
            Read the end-of-record marker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.GetSubTypeReader">
            <summary>
            Get a sub type definition reader.
            </summary>
            <returns>sub type definition reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.RegisterEntityBinder(System.Int32,WW.Cad.Model.Acis.BindEntity)">
            <summary>
            Register an entity binder.
            </summary>
            <remarks>
            The binder is never called if the index is less than <c>0</c>,
            it is called immediately if the index can be resolved to an entity,
            and it may be called later as soon as an entity with the given index
            is registered. 
            </remarks>
            <param name="index">index for which binder is called</param>
            <param name="binder">binder to be called for the given index</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.SubEntity(System.Int32)">
            <summary>
            Get a sub-entity for a given index.
            </summary>
            <param name="index">sub-entity index</param>
            <returns>
            sub-entity or <c>null</c> if the index is less than <c>0</c>
            or the sub-entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.RegisterNextSubEntity(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Register a sub-entity.
            </summary>
            <param name="subEntity">subEntity to registration</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.BasicSabReader.SubEntityIndex(WW.Cad.Model.Acis.SatEntities.SatSubEntity)">
            <summary>
            Get a sub-entity index for a given sub entity.
            </summary>
            <param name="subEntity">sub-entity</param>
            <returns>
            sub-entity index or -1 if sub-entity was not indexed
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSabReader.FileFormatVersion">
            <summary>
            Get the version of the file format.
            </summary>
            <returns>file format version</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.BasicSabReader.Item(System.Int32)">
            <summary>
            Get an entity for a given index.
            </summary>
            <param name="index">entity index</param>
            <returns>
            entity or <c>null</c> if the index is less than <c>0</c>
            or the entity index cannot (yet) be resolved
            </returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.BasicSabReader.DataType">
            <summary>Ids of field types in SAB format.</summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.AtSatReader">
            <summary>
            SAT reader expecting an @ prefix for strings.
            </summary>
            <remarks>
            This reader is fit for versions new than <see cref="F:WW.Cad.Model.Acis.SatConstants.AtVersion"/>
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Acis.AtSatReader.StringPrefix">
            <summary>Prefix used for strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.AtSatReader.#ctor(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,WW.Cad.Model.Acis.BasicSatReader.ReadMarker)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">entity resolver</param>
            <param name="subResolver">sub-entity resolver</param>
            <param name="version">file version</param>
            <param name="marker">read marker</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.AtSatReader.CreateSubtypeReader(WW.Cad.Model.Acis.ISatEntityResolver,WW.Cad.Model.Acis.ISatSubEntityResolver,System.Int32,WW.Cad.Model.Acis.BasicSatReader.ReadMarker)">
            <summary>
            Create a reader for a sub part.
            </summary>
            <param name="entityResolver">entity resolver</param>
            <param name="subEntityResolver">sub-entity resolver</param>
            <param name="fileFormatVersion">file format version</param>
            <param name="subReadMarker">read marker for sub part</param>
            <returns>sub type reader</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.AtSatReader.ReadString">
            <summary>
            Read the next string value.
            </summary>
            <returns>string value</returns>
        </member>
        <member name="T:WW.Cad.IO.Dwg.SupportedObjectDwgWriteFilter">
            <summary>
            This class returns for each type of entity/object whether writing to DWG is supported.
            </summary>
            <remarks>
            Currently this class is used for all DWG versions,
            but in the future this class may be sub classed for specific DWG versions.
            </remarks>
        </member>
        <member name="T:WW.Cad.IO.Dwg.StreamWithCrc32">
            <summary>
            Represents a stream that calculates a 32-bit CRC as bytes are written to it.
            </summary>
            <remarks>
            32-bit CRC's are used from R18 onwards.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.StreamWithCrc32.SimulateReadByte(System.Byte)">
            <summary>
            Simulates reading specified byte (to update the crc).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgCodepage.GetDrawingCodePage(System.Int32)">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.DrawingCodePage"/> for specified DWG code page number.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgCodepage.GetEncodingForDwgCodePage(System.Int32)">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.DrawingCodePage"/> for specified DWG code page number.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgCodepage.GetDwgCodePage(WW.Cad.Model.DrawingCodePage)">
            <summary>
            Gets the DWG code page number for specified <see cref="T:WW.Cad.Model.DrawingCodePage"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.FileHeader">
            <summary>
            Represents a R21 file header.
            </summary>
            <remarks>
            The data is present in the file header at the beginning, and is
            repeated at the end of the file.
            </remarks>
        </member>
        <member name="P:WW.Cad.IO.Dwg.Dwg2007.FileHeader.Header2Offset">
            <summary>
            Gets or sets the header 2 offset.
            The header 2 is a repetition of the file header data at the end of the file.
            </summary>
            <remarks>
            Offset is relative to the start of page map 1.
            </remarks>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.Compressor">
            <summary>
            DWG 2007 uses a variation on the LZ77 compression algorithm.
            </summary>
            <remarks>
            Hashing is used to speed up for data lookups, so no sliding window is used.
            Note that because of this optimization not necessarily
            the longest match is found (favors speed over compression).
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.Compressor.WriteCompressedOpcode(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Writes a compressed opcode.
            Leaves the last three bits empty, which may be used for the next literal opcode.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.Compressor.WriteByte(System.Byte)">
            <summary>
            Delayed writing of a byte to the target stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2004.Decompressor.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            The second version of Dwg specification way.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfViewportEntityHeaderControlBuilder">
            <summary>
            Similar to DxfTableControlBuilder, but cannot use that class
            because viewport entity header objects don't necessarily have a name.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Builders.DxfBlockRecordTableBuilder.Dwg.EntryCount">
            <summary>
            Gets or sets the entry count (Doesn't count *MODEL_SPACE and *PAPER_SPACE).
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfFieldBuilder">
            <summary>
            Builder for <see ref="DxfField"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Builders.DxfFieldBuilder.ResolveReferences(WW.Cad.IO.ModelBuilder)">
            <summary>
            Resolves the references.
            </summary>
            <remarks>
            Override must call the base method.
            </remarks>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphicsCache">
            <summary>
            A cache for wireframe graphics as created using interface <see cref="T:WW.Cad.Drawing.IWireframeGraphicsFactory"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.WireframeGraphics2Cache"/> class.
            </summary>
            <param name="supportsText">
            if set to <c>true</c> the cache supports text. If not then text is approximated as a number of curves.
            </param>
            <param name="areDrawablesUpdateable">if set to <c>true</c> the drawables are updateable.</param>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel)">
            <summary>
            Creates the WPF drawables for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Creates the WPF drawables for specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>.
            </summary>
            <param name="model">The model to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the WPF drawables for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.AddDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Creates the WPF drawables for a specified model.
            The result is put in property <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>.
            </summary>
            <param name="model">The model of which the entities are part.</param>
            <param name="entities">The entities to draw.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout)">
            <summary>
            Creates drawables for given DXF model using specified layout (see property <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>).
            </summary>
            <remarks>
            <para>
            The old drawables are cleared before creating the new ones.
            </para>
            <para>
            The entities in model space are transformed to paper space according to 
            the <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see> in specified layout.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates drawables for given DXF model using given view port (see property <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>).
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.CreateDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates drawables for given model using given view port (see property <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>).
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in model space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.AddDrawables(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},System.Collections.Generic.IList{WW.Cad.Model.Entities.DxfEntity},WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Creates drawables for given model using given view port (see property <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>).
            </summary>
            <remarks>
            <para>
            The entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model of which the entities are part.</param>
            <param name="modelSpaceEntities">The entities in model space to draw.</param>
            <param name="paperSpaceEntities">The entities in model space to draw.</param>
            <param name="layout">The layout containing the paper space entities.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            If this parameter is null, then all viewports of the specified layout are used.
            </param>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Updates the drawables for specified entity.
            </summary>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.EraseDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Erases the drawables for specified entity, 
            but the drawables can still be recreated later at the original position in the <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables"/> using <seealso cref="M:WW.Cad.Drawing.WireframeGraphicsCache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.RemoveDrawables(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Removes the drawables for specified entity.
            </summary>
            <seealso cref="P:WW.Cad.Drawing.WireframeGraphicsCache.AreDrawablesUpdateable"/>
            <exception cref="T:System.Exception">thrown when <see cref="P:WW.Cad.Drawing.WireframeGraphicsCache.AreDrawablesUpdateable"/> is <c>false</c>.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.GetDrawables(WW.Cad.Drawing.RenderedEntityInfo)">
            <summary>
            Gets the drawables for specified rendered entity info.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.GetUpdateEntityDrawablesHelper(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Gets a <see cref="T:WW.Cad.Drawing.WireframeGraphicsCache.UpdateEntityDrawablesHelper"/> for specified entity.
            Returns <c>null</c> if not present.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.SuspendChangeNotification">
            <summary>
            Suspends the change notification.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.ResumeChangeNotification">
            <summary>
            Resumes the change notification.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.Draw(WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw all drawables onto the specified graphics factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.RemoveEntityDrawablesInfo(WW.Cad.Drawing.WireframeGraphicsCache.EntityDrawablesInfo)">
            <summary>
            Recursively removes the specified EntityDrawablesInfo instance and all its children from 
            entityToEntityDrawablesInfoList.
            </summary>
        </member>
        <member name="E:WW.Cad.Drawing.WireframeGraphicsCache.Changed">
            <summary>
            Occurs when the cache contents changed.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsCache.Config">
            <summary>
            Gets or sets the graphics configuration determining
            various aspects of the rendering process.
            The default value is <see cref="F:WW.Cad.Drawing.GraphicsConfig.WhiteBackgroundCorrectForBackColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsCache.Drawables">
            <summary>
            Gets the drawables.
            </summary>
            <remarks>
            This contains an hierarchy of drawable objects.
            </remarks>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsCache.AreDrawablesUpdateable">
            <summary>
            Gets a value indicating whether the drawables are updateable.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsCache.SupportsText">
            <summary>
            Gets a value indicating whether this instance supports text.
            If <c>false</c> then text whill be converted to collection of shapes.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.GraphicsFactory.BeginInsert(WW.Cad.Model.Entities.DxfInsert)">
            <summary>
            Need to mark begin/end of insert in case part of the inserts child drawables are updated,
            e.g. attributes are updated using <see cref="M:WW.Cad.Drawing.WireframeGraphicsCache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            That way the first and last drawable (especially the last) of the insert remain the same, otherwise
            the last drawable might get removed, and then the inserts reference to the last drawable is invalid.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.GraphicsFactory.EndInsert">
            <summary>
            Need to mark begin/end of insert in case part of the inserts child drawables are updated,
            e.g. attributes are updated using <see cref="M:WW.Cad.Drawing.WireframeGraphicsCache.UpdateDrawables(WW.Cad.Model.Entities.DxfEntity)"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphicsCache.EntityDrawablesInfo">
            <summary>
            This object is only used if entity drawables need to be updateable.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsCache.EntityDrawablesInfo.Children">
            <summary>
            Gets the children. Need to know children in case a INSERT's block is updated, e.g. entities are removed from it.
            When the INSERT's drawables are updated the EntityDrawablesInfo for removed entities need to be removed as well.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphicsCache.EntityDrawable">
            <summary>
            This is a container for entity drawables, making it easier to replace them when the
            entity changes.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphicsCache.UpdateEntityDrawablesHelper">
            <summary>
            Represents a helper class for updating derived graphics like in GDIGraphics3D for a single entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsCache.UpdateEntityDrawablesHelper.Draw(WW.Cad.Drawing.DrawContext,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draws the entity in a specific entity chain, based on specified draw context and graphics factory.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.ITransformationProvider">
            <summary>
            Interface for objects that provide a transformation matrix.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.ITransformationProvider.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="E:WW.Cad.Drawing.ITransformationProvider.TransformChanged">
            <summary>
            Raised when the <see cref="P:WW.Cad.Drawing.ITransformationProvider.Transform"/> changed.
            </summary>
        </member>
        <member name="F:WW.Cad.DebugUtil.DontWriteTableStyles">
            <summary>
            Should be false. True only for debugging the DWG format.
            </summary>
        </member>
        <member name="F:WW.Cad.DebugUtil.MimicOda">
            <summary>
            Should be false.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.NativeAccessUtil">
            <summary>
            Helper methods for access to the underlying native system.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.NativeAccessUtil.DeleteObject(System.IntPtr)">
            <summary>
            Release the memory occupied from an pointer returned from the underlying system.
            </summary>
            <remarks>
            Should be used in a finally clause or during Dispose for longer living objects.
            Access to the object after a call to this method is evil!
            </remarks>
            <param name="hObject">object which shall be released</param>
            <returns><c>true</c> if the delete worked, otherwise <c>false</c></returns>
        </member>
        <member name="T:WW.Cad.Base.AlignedBounds2D">
            <summary>
            Flat bounds, but in 3D space.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfXLine">
            <summary>
            The XLine entity is a line with starting point and direction, extending to infinity on both ends.
            </summary>
            <remarks>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </remarks>
            <example>
            An example of how to create and write a dxf file containing an XLine.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    
    public class XLineExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            Vector3D direction = new Vector3D(1, 1, 0);
            direction.Normalize();
            DxfXLine xline = new DxfXLine(new Point3D(1.5, 0.2, 0), direction);
            xline.Color = EntityColors.Green;
            model.Entities.Add(xline);
    
            DxfWriter.Write("XLine Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfXLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.#ctor(WW.Math.Point3D,WW.Math.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfXLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfXLine.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified XLine object in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfXLine.Direction">
            <summary>
            Gets or sets the direction (unit length vector).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfXLine.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfXLine.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfXLine.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.NamespaceDoc">
            <summary>
            This namespace contains the model class representing DXF tables.
            The tables are contained in <see cref="T:WW.Cad.Model.DxfModel"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColoredPointPath">
            <summary>
            Path containing a colored point.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredPointPath.#ctor(WW.Math.Vector4D,WW.Drawing.ArgbColor,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredPointPath.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredPointPath.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredPointPath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfVariable">
            <summary>
            <see cref="T:WW.Cad.Model.DxfHeader"/> variable.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfVariable.#ctor(System.String,System.Collections.Generic.List{WW.Cad.IO.Group})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfVariable.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfVariable.ValueGroups">
            <summary>
            Gets or sets the value groups.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLayer">
            <summary>
            Layer "containing" <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> objects.
            </summary>
            <remarks>
            <para>
            An entity is assigned to a layer by setting its <see cref="P:WW.Cad.Model.Entities.DxfEntity.Layer">Layer</see> property.
            The layer must be part of the <see cref="P:WW.Cad.Model.DxfModel.Layers"/> collection.
            </para>
            <para>
            A layer can be enabled or disabled (see property <see cref="P:WW.Cad.Model.Tables.DxfLayer.Enabled"/>). 
            When disabled the entities in that layer are not shown.
            </para>
            <para>
            Similarly to this a layer can be frozen or thawed (see property <see cref="P:WW.Cad.Model.Tables.DxfLayer.Frozen"/>).
            Its function is almost identical to enabling/disabling,
            see a more elaborate AutoCAD manual for the differences 
            (or e.g. <see href="http://www.cadtutor.net/acad/acadr14/obj-prop/obj-prop.html"/>).
            Further more a layer can be frozen in a <see cref="T:WW.Cad.Model.Entities.DxfViewport">viewport</see> by
            adding the layer to <see cref="P:WW.Cad.Model.Entities.DxfViewport.FrozenLayers"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.Layer"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.Layers"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.FrozenLayers"/>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLayer.LayerNameZero">
            <summary>
            The name of the zero layer.
            </summary>
            <remarks>
            Use the <see cref="P:WW.Cad.Model.DxfModel.ZeroLayer"/> to get the zero layer.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLayer.LayerNameDefinitionPoints">
            <summary>
            The name of the definition points layer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLayer.CaseInsensitiveNameComparer">
            <summary>
            A case insensitive name comparer.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the layer.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified layer in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.CompareTo(System.Object)">
            <summary>
            For sorting (by name).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.ToString">
            <summary>
            String representation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLayer.GetEffectiveLayer(WW.Cad.Model.Tables.DxfLayer)">
            <summary>
            Gets the effective layer.
            </summary>
            <remarks>
            Entities may inheret their real layer from their insertion hierarchy depending on
            their actual layer. Call this method for their actual layer defined
            by <see cref="P:WW.Cad.Model.Entities.DxfEntity.Layer"/> with the layer defined by their insertion hierarchy.
            </remarks>
            <param name="insertLayer">The layer from the insertion hierarchy.</param>
            <returns>The effective layer.</returns>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.Name">
            <summary>
            Gets or sets the layer name.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.Tables.DxfLayer.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.Flags">
            <summary>
            Gets or sets the layer flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.Frozen">
            <summary>
            Gets or sets whether the layer is frozen.
            </summary>
            <remarks>
            <para>
            If a layer is frozen, then entities in this layer are not displayed.
            A layer can also be frozen in the context of a <see cref="T:WW.Cad.Model.Entities.DxfViewport">viewport</see>.
            In this case a frozen layer is not shown in that viewport 
            (add the layer to <see cref="P:WW.Cad.Model.Entities.DxfViewport.FrozenLayers"/> to achieve this).
            </para>
            <para>
            Similarly to this a layer can be enabled or disabled (see property <see cref="P:WW.Cad.Model.Tables.DxfLayer.Enabled"/>).
            Its function is almost identical to freezing/thawing,
            see a more elaborate AutoCAD manual for the differences 
            (or e.g. <see href="http://www.cadtutor.net/acad/acadr14/obj-prop/obj-prop.html"/>).
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLayer.Flags"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.FrozenLayers"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLayer.Enabled"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.FrozenInNewViewport">
            <summary>
            Gets or sets a value indicating whether the layer is by default frozen in new viewports.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.Locked">
            <summary>
            Gets or sets a value indicating whether this layer is locked.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this layer is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this layer is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this layer is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.Enabled">
            <summary>
            Is layer enabled?
            </summary>
            <remarks>
            <para>
            When the layer is not enabled, then entities in this layer are not displayed.
            If the layer is enabled, entities in this layer are displayed unless the layer is also frozen.
            </para>
            <para>
            Similarly to this a layer can be frozen or thawed (see property <see cref="P:WW.Cad.Model.Tables.DxfLayer.Frozen"/>).
            Its function is almost identical to enabling/disabling,
            see a more elaborate AutoCAD manual for the differences 
            (or e.g. <see href="http://www.cadtutor.net/acad/acadr14/obj-prop/obj-prop.html"/>).
            Further more a layer can be frozen in a <see cref="T:WW.Cad.Model.Entities.DxfViewport">viewport</see> by
            adding the layer to <see cref="P:WW.Cad.Model.Entities.DxfViewport.FrozenLayers"/>.
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLayer.Frozen"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.Color">
            <summary>
            Gets or sets the layer color.
            The default value is <see cref="F:WW.Cad.Model.Colors.White"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.Transparency">
            <summary>
            Gets or sets the transparency. 
            The default value is <see cref="F:WW.Cad.Model.Transparency.Opaque"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.LineType">
            <summary>
            Gets or sets the line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.IsZeroLayer">
            <summary>
            Gets whether this is the zero layer.
            </summary>
            <remarks>
            Use the <see cref="P:WW.Cad.Model.DxfModel.ZeroLayer"/> to get the zero layer.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.LineWeight">
            <summary>
            Gets or sets the line weight.
            The default value is <see cref="F:WW.Cad.Model.LineWeight.Standard">LineWeight.Standard</see>.
            </summary>
            <remarks>
            <para>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>value</term>
            <description>meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WW.Cad.Model.LineWeight.Standard"/></term>
            <description>Standard</description>
            </item>
            <item>
            <term><see cref="F:WW.Cad.Model.LineWeight.ByLayer"/></term>
            <description>By layer</description>
            </item>
            <item>
            <term><see cref="F:WW.Cad.Model.LineWeight.ByBlock"/></term>
            <description>By block</description>
            </item>
            <item>
            <term>0-211</term>
            <description>an integer representing 100th of mm</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLayer.PlotEnabled">
            <summary>
            Gets or sets whether to plot this layer (default is <c>true</c>).
            </summary>
            <remarks>
            <para>
            This property was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>.
            </para>
            <para>
            This flag is <c>false</c> for the definition points layer (DEFPOINTS).
            </para>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.DxfModel">
            <summary>
            CAD model containing a CAD drawing (<see cref="T:WW.Cad.Model.Entities.DxfEntity"/> objects, <see cref="T:WW.Cad.Model.DxfHeader"/> and tables).
            </summary>
            <remarks>
            <para>
            A CAD model contains <see cref="T:WW.Cad.Model.Entities.DxfEntity">entities</see>, which are either in model or paper space.
            When they are in model space, they are present in the model's <see cref="P:WW.Cad.Model.DxfModel.Entities"/> collection.
            If they are in paper space, they are part of the <see cref="P:WW.Cad.Model.Objects.DxfLayout.Entities">DxfLayout.Entities</see> 
            of the (paper space) layout on which they are displayed.
            </para>
            <para>
            Entities can be grouped in <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> objects 
            (see property <see cref="P:WW.Cad.Model.Tables.DxfBlock.Entities">DxfBlock.Entities</see>), which can be referenced
            by zero or more <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> entities.
            </para>
            <para>
            Use <see cref="T:WW.Cad.IO.DxfReader"/>/<see cref="T:WW.Cad.IO.DwgReader"/> for reading into a CAD model object.
            </para>
            <para>
            Use <see cref="T:WW.Cad.IO.DxfWriter"/>/<see cref="T:WW.Cad.IO.DwgWriter"/> for writing a CAD model object.
            </para>
            </remarks>
            <example>
            An example of how to create and write a dxf file.
            <code lang="cs">
using System;
using System.IO;

using WW.Cad.Base;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace DxfWriteTest {
    class DxfWriteTest {
        /// &lt;summary&gt;
        /// Example of how to create a line, circle, text.
        /// &lt;/summary&gt;
        private static void SimpleWriteTestR12() {
            DxfModel model = new DxfModel(DxfVersion.Dxf12);

            // Line.
            DxfLine line1 = new DxfLine(new Point3D(-20d, -4d, 3d), new Point3D(-11d, -3.9d, 3d));
            model.Entities.Add(line1);

            // Circle.
            DxfCircle circle = new DxfCircle(new Point3D(-20d, -4d, 3d), 9d);
            circle.Color = EntityColors.Green;
            model.Entities.Add(circle);
            
            // Invisible blue circle.
            DxfCircle circle2 = new DxfCircle(new Point3D(3d, -4d, 3d), 4d);
            circle2.Color = EntityColors.Blue;
            circle2.Visible = false;
            model.Entities.Add(circle2);
            
            // Extruded circle with line type.
            DxfLineType lineType = 
                new DxfLineType(
                    "SpecialLineType", 
                    "description", 
                    new double[] {0.5d, -0.3d, 0, -0.3d}
                );
            model.LineTypes.Add(lineType);
            DxfCircle circle3 = new DxfCircle(new Point3D(0d, -4d, 3d), 9d);
            circle3.Color = EntityColors.Red;
            circle3.LineType = lineType;
            circle3.Thickness = 0.4;
            model.Entities.Add(circle3);

            // Arc.
            DxfArc arc = new DxfArc(new Point3D(20d, -4d, 3d), 9d, Math.PI * 0.2d, Math.PI * 1.7d);
            arc.Color = EntityColors.Blue;
            model.Entities.Add(arc);

            // Text.
            model.Entities.Add(new DxfText("Text", new Point3D(0d, 14d, 0d), 1d));
            
            // Extruded text.
            DxfText text2 = new DxfText("Extruded text", new Point3D(0d, 12d, 0d), 1d);
            text2.Thickness = 0.4d;
            model.Entities.Add(text2);
            
            // Text with custom text style.
            DxfTextStyle textStyle = new DxfTextStyle("MYSTYLE", "arial.ttf");
            model.TextStyles.Add(textStyle);
            DxfText text3 = new DxfText("Text in Arial font", new Point3D(0d, 10d, 0d), 1d);
            text3.Thickness = 0.4d;
            text3.Style = textStyle;
            model.Entities.Add(text3);

            DxfWriter.Write("Test-R12-ascii.dxf", model, false);
            DxfWriter.Write("Test-R12-bin.dxf", model, true);
        }

        public static void Main(string[] args) {
            try {
                SimpleWriteTestR12();
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Objects.DxfLayout"/>
            <seealso cref="T:WW.Cad.Model.Tables.DxfBlock"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfInsert"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfEntity"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfModel"/> class.
            </summary>
            <remarks>
            Creates by default a <see cref="F:WW.Cad.Model.DxfVersion.Dxf21">release 24</see> DXF model.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.#ctor(WW.Cad.Model.DxfVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfModel"/> class.
            </summary>
            <param name="dxfVersion">The DXF version.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.#ctor(WW.Cad.Model.DxfVersion,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfModel"/> class.
            </summary>
            <param name="dxfVersion"></param>
            <param name="createDefaultObjects">
            Option to create default objects.
            When reading a cad file this is turned off to prevent object handle clashes
            with the default objects.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Deep copy constructor.
            </summary>
            <param name="templateModel">model to copy</param>
            <remarks>
            <para>
            This copies the <paramref name="templateModel"/>. 
            </para>
            <para>
            Depending on the purpose of the copy it is possible that there are some differences necessary,
            which have to be set explicitly on the newly created model. 
            In the header there are two GUIDs that may want to get new values:
            <see cref="P:WW.Cad.Model.DxfHeader.FingerPrintGuid"/> holds a unique id for a file, and 
            <see cref="P:WW.Cad.Model.DxfHeader.VersionGuid"/> holds a unique id for the file's version.
            Depending on the enviroment also some of the times and time spans in the header may want fixing,
            although most environments just ignore them: <see cref="P:WW.Cad.Model.DxfHeader.CreateDateTime"/>, 
            <see cref="P:WW.Cad.Model.DxfHeader.CreateUtcDateTime"/>, <see cref="P:WW.Cad.Model.DxfHeader.UpdateDateTime"/>,
            <see cref="P:WW.Cad.Model.DxfHeader.UpdateUtcDateTime"/>, <see cref="!:DxfHeader.EditingTimeSpan"/>,
            and <see cref="P:WW.Cad.Model.DxfHeader.UserElapsedTimeSpan"/>.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.UpdateOleItemCounter(System.UInt32)">
            <summary>
            Update the globlal ole item counter.
            </summary>
            <remarks>DxfOle items must have unique per database item ID. The method mostly used during loading.</remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.UniqueOleItemCounter">
            <summary>
            Return unique value of ole item counter for the new Ole.
            </summary>
            <remarks>DxfOle items must have unique per database item ID. Mostly used during creation and clonning.</remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetLayerWithName(System.String)">
            <summary>
            Get <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> with given name.
            </summary>
            <remarks>
            Returns <c>null</c> if it does not exist.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetLayer(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Get the layer of given entity.
            If <see cref="P:WW.Cad.Model.Entities.DxfEntity.Layer"/> returns <c>null</c> then the zero layer is returned.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetBlockWithName(System.String)">
            <summary>
            Get <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> with given name.
            </summary>
            <returns><see langword="null"/> when no block with given name present.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetTextStyleWithName(System.String)">
            <summary>
            Get <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/> with given name.
            </summary>
            <returns><see langword="null"/> when no text style with given name present.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetUcsWithName(System.String)">
            <summary>
            Get <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> with given name.
            </summary>
            <returns><see langword="null"/> when no UCS with given name present.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetViewWithName(System.String)">
            <summary>
            Get <see cref="T:WW.Cad.Model.Tables.DxfView"/> with given name.
            </summary>
            <returns><see langword="null"/> when no view with given name present.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetLineTypeWithName(System.String)">
            <summary>
            Get <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> with given name.
            </summary>
            <returns><see langword="null"/> when no line type with given name present.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetDimensionStyleWithName(System.String)">
            <summary>
            Get <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/> with given name.
            </summary>
            <returns><see langword="null"/> when no dimension style with given name present.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.CreateDefaultObjects(System.Boolean)">
            <summary>
            Creates several default objects (like the STANDARD text style) if they are not present yet.
            </summary>
            <param name="useFixedHandles">
            Usually set to <see langword="false"/> to prevent handle clashes
            when creating default objects when there are already
            other objects present.
            </param>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the model as a wire frame using specified draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Draw(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the model as a wire frame using specified draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Draw(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the model as surfaces using specified draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Draw(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the model as surfaces using specified draw context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Import(WW.Cad.Model.Entities.DxfEntity,WW.Cad.Model.ReferenceResolutionType)">
            <summary>
            Imports (clones) an entity from another model.
            </summary>
            <remarks>
            Makes a clone of given entity in the context of this model.
            Line type references and such are relinked to line types 
            in this model.
            The clone is not added to the model's <see cref="P:WW.Cad.Model.DxfModel.Entities"/>.
            </remarks>
            <param name="entity">The entity to import.</param>
            <param name="referenceResolutionType">
            specifies whether to ignore missing references to e.g. a line type.
            </param>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is <c>false</c>.)
            </exception>
            <returns>Returns the cloned entity in the context of this model.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Validate(WW.Cad.Base.DxfMessage[]@)">
            <summary>
            Validate the model.
            </summary>
            <remarks>
            Is used by <see cref="T:WW.Cad.IO.DxfWriter">DxfWriter</see> to check if model is valid
            before starting to write.
            </remarks>
            <param name="messages">Result messages.</param>
            <returns>true if valid.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.SetHandles">
            <summary>
            Assign handles to all objects with zero handles.
            </summary>
            <seealso cref="M:WW.Cad.Model.DxfModel.ExecuteForChildren(WW.Cad.Model.Action)"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.ResetHandles"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.CheckAndSetHandles"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.CheckAndSetHandles">
            <summary>
            Assign handles to all objects with zero handles,
            and check for duplicates on already set handles.
            </summary>
            <remarks>
            If this method returns without exception, handles can be assumed 
            in clean state. If this method throws an exception, this is usually
            the result of incorrect combining of elements from different DxfModels.
            As a workaround you can call <see cref="M:WW.Cad.Model.DxfModel.ResetHandles"/>, but after an 
            incorrect combination there may be other problems waiting.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">if there are duplicate handles</exception>
            <seealso cref="M:WW.Cad.Model.DxfModel.SetHandles"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.ExecuteForChildren(WW.Cad.Model.Action)"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.ResetHandles"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.ResetHandles">
            <summary>
            Resets all object handles to zero, with the exception of objects that need
            to have a fixed handle.
            </summary>
            <seealso cref="M:WW.Cad.Model.DxfModel.SetHandles"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.ExecuteForChildren(WW.Cad.Model.Action)"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.CheckAndSetHandles"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.SetFixedHandles">
            <summary>
            Set all fixed handles.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.SetHandle(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Sets the handled for specified handled object.
            The handle will also be set for the object's child objects.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Repair(System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Attempts to repair this object if is invalid and if it's possible to repair it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.ExecuteForChildren(WW.Cad.Model.Action)">
            <summary>
            Executes the specified action for all of this model's child objects
            (entities, table records, objects).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.LoadExternalReferences">
            <summary>
            Loads the <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences">external references</see>
            by iterating over all blocks that have an <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference">external reference</see>.
            </summary>
            <remarks>
            This loads the external references using the directory of the file's path
            as a search directory. If no file path is set, it uses the current directory.
            The loading is recursive.
            All loaded external references are stored in property <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/> after loading.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.LoadExternalReferences(System.Collections.Generic.IList{WW.Cad.Model.Tables.DxfBlock}@)">
            <summary>
            Loads the <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences">external references</see>
            by iterating over all blocks that have an <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference">external reference</see>.
            </summary>
            <remarks>
            This loads the external references using the directory of the file's path
            as a search directory. If no file path is set, it uses the current directory.
            The loading is recursive.
            All loaded external references are stored in property <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/> after loading.
            </remarks>
            <param name="missingReferences">
            A list of blocks with an external reference that could not be resolved.
            </param>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.LoadExternalReferences(System.String)">
            <summary>
            Loads the <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences">external references</see>
            by iterating over all blocks that have an <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference">external reference</see>.
            </summary>
            <remarks>
            The loading is recursive.
            All loaded external references are stored in property <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/> after loading.
            </remarks>
            <param name="searchDirectory">
            The search directory that is used if the file cannot be found in the original location.
            If <c>null</c> then the current directory is used.
            </param>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.LoadExternalReferences(System.String,System.Collections.Generic.IList{WW.Cad.Model.Tables.DxfBlock}@)">
            <summary>
            Loads the <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences">external references</see>
            by iterating over all blocks that have an <see cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference">external reference</see>.
            </summary>
            <remarks>
            All loaded external references are stored in property <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/> after loading.
            The loading is recursive.
            </remarks>
            <param name="searchDirectory">
            The search directory that is used if the file cannot be found in the original location.
            If <c>null</c> then the current directory is used.
            </param>
            <param name="missingReferences">
            A list of blocks with an external reference that could not be resolved.
            </param>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>
            <seealso cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.LoadExternalReferences(WW.Cad.Model.Tables.DxfBlock.GetExternalReferenceDelegate,System.Collections.Generic.IList{WW.Cad.Model.Tables.DxfBlock}@)">
            <summary>
            Loads the <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences">external references</see>.
            </summary>
            <param name="customResolveExternalReference">A delegate to resolve external references.</param>
            <param name="missingReferences">A list of blocks with an external reference that could not be resolved.</param>
            <remarks>
            All loaded external references are stored in property <see cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/> after loading.
            The loading is recursive.
            </remarks>
            <seealso cref="P:WW.Cad.Model.DxfModel.ExternalReferences"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            Not supported for this object.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.CopyFrom(WW.Cad.Model.DxfModel,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents from specified model.
            </summary>
            <remarks>
            <para>
            Does not copy the dictionary root and all objects (objects that derive from <see cref="T:WW.Cad.Model.Objects.DxfObject"/>.
            Layouts are the only objects that are copied.
            If this model already has a model layout, then the entities from the source model's model layout
            are cloned into this model's model layout.
            Paper space layouts are renamed if necessary to Layout&lt;n&gt;.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.UpdateLayoutBlockRecords">
            <summary>
            Updates the associations between block records and layouts.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetShxFile(System.String)">
            <summary>
            Get shx file with given file name.
            </summary>
            <remarks>
            The file is searched in the SHX file search folders, the directory of this model and the
            assembly directory.
            </remarks>
            <returns>SHX file or <c>null</c> if the file is not found or isn't readable</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.AddBlock(WW.Cad.Model.Tables.DxfBlock,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Adds the block. Renames anonymous block if necessary.
            </summary>
            <param name="block">The block.</param>
            <param name="messages">The messages (optional, rename actions will be reported in this collection).</param>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.ClearHandle(WW.Cad.Model.DxfHandledObject)">
            <summary>
            Clears the handle for specified handled object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetNextAnonymousBlockUNumber">
            <summary>
            *U... = anonymous block name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetNextAnonymousBlockENumber">
            <summary>
            *E... = anonymous non-uniformly scaled block name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetNextAnonymousBlockXNumber">
            <summary>
            *X... = anonymous hatches.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetNextAnonymousBlockANumber">
            <summary>
            *A... = anonymous groups.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.GetNextAnonymousBlockNamelessNumber">
            <summary>
            Get next number for nameless anonymous groups.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.AddShxLookupDirectories(System.String[])">
            <summary>
            Add directories where SHX files are searched.
            </summary>
            <remarks>
            The new directories will only have influence on newly created models.
            Independent from this setting the directory of the file and
            the directory of the executable will always be searched.
            </remarks>
            <param name="directories">Directories to add to search path</param>
            <seealso cref="M:WW.Cad.Model.DxfModel.ClearShxLookupDirectories"/>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.ClearShxLookupDirectories">
            <summary>
            Clear all directories where SHX files are searched.
            </summary>
            <remarks>
            The new setting will only have influence on newly created models.
            The directory of the file and the directory of the executable will always be searched.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.Clone">
            <summary>
            Creates a deep copy of this model.
            </summary>
            <returns>
            New model which is an independent copy of this model.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Reference">
            <summary>
            Gets the reference.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.OwnerObjectSoftReference">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Filename">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Header">
            <summary>
            Gets the header.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.SummaryInfo">
            <summary>
            Gets the summary info.
            Supported from version <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/> onwards.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.SecurityFlags">
            <summary>
            Gets or sets the security flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.NumberOfSaves">
            <summary>
            Gets or sets the number of saves (the default value is 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.AppIds">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfAppId"/> keyed collection (application id name is the key).
            </summary>
            <remarks>
            Adding an application id with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Layers">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> keyed collection.
            </summary>
            <remarks>
            Adding a layer with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.LineTypes">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> keyed collection.
            </summary>
            <remarks>
            Adding a line type with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.UcsCollection">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> keyed collection.
            </summary>
            <remarks>
            Adding a ucs with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Views">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfView"/> keyed collection.
            </summary>
            <remarks>
            Adding a view with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.VPorts">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfVPort"/> objects.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ViewportEntityHeaders">
            <summary>
            Gets the viewport entity headers.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Colors">
            <summary>
            Gets the collection of named colors.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfColor"/>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.FieldList">
            <summary>
            Gets the field list.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Groups">
            <summary>
            Gets the entity <see cref="T:WW.Cad.Model.Objects.DxfGroup">group</see> keyed collection.
            </summary>
            <remarks>
            Adding a <see cref="T:WW.Cad.Model.Objects.DxfGroup"/> with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Scales">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Objects.Annotations.DxfScale">scales</see> keyed collection.
            </summary>
            <value>
            The scales.
            </value>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.MLineStyles">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> keyed collection.
            </summary>
            <remarks>
            Adding a <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.PlotSettingsCollection">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Objects.DxfPlotSettings"/> collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Layouts">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Objects.DxfLayout"/> collection.
            </summary>
            <seealso cref="P:WW.Cad.Model.DxfModel.ActiveLayout"/>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ModelLayout">
            <summary>
            Gets the model layout containing all model space entities.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ActiveLayout">
            <summary>
            Gets or sets the active paper space layout.
            </summary>
            <remarks>
            When a model space layout should be active, <see cref="P:WW.Cad.Model.DxfHeader.ShowModelSpace"/> must be set to <c>true</c>.
            When a paper space layout should be active, <see cref="P:WW.Cad.Model.DxfHeader.ShowModelSpace"/> must be set to <c>false</c>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.DxfModel.Layouts"/>
            <seealso cref="P:WW.Cad.Model.DxfHeader.ShowModelSpace"/>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Images">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Objects.DxfImageDef"/> collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.TableStyles">
            <summary>
            Gets the table styles (the collection key is the table style's description).
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableStyle"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTable"/>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ContinuousLineType">
            <summary>
            Gets the continous line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ByBlockLineType">
            <summary>
            Gets the by block line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ByLayerLineType">
            <summary>
            Gets the by layer line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.DefaultMLineStyle">
            <summary>
            Gets the default <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/>.
            </summary>
            <remarks>
            The default has two <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle.Element">elements</see>, one at offset -0.5, one at 0.5.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ZeroLayer">
            <summary>
            Get the zero layer (which has name "0").
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Classes">
            <summary>
            Gets the DXF classes.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Entities">
            <summary>
            Gets <see cref="T:WW.Cad.Model.Entities.DxfEntity"/> objects that are in model space.
            </summary>
            <remarks>
            <para>
            Entities that are in paper space are part of the <see cref="T:WW.Cad.Model.Objects.DxfLayout"/> on
            which they are shown. See <see cref="P:WW.Cad.Model.Objects.DxfLayout.Entities">DxfLayout.Entities</see>.
            </para>
            <para>
            Entities can also be part of a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> 
            (see <see cref="P:WW.Cad.Model.Tables.DxfBlock.Entities">DxfBlock.Entities</see>).
            Blocks can be found in the <see cref="P:WW.Cad.Model.DxfModel.Blocks"/> property.
            A block can be referenced by zero or more <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> entities 
            (an insert itself can be either in model or paper space).
            </para>
            </remarks>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Entities"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.Entities"/>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.Blocks">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> keyed collection (the block name can be used as the indexer parameter).
            </summary>
            <remarks>
            Adding a block with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.AnonymousBlocks">
            <summary>
            Gets the anonymous blocks.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.TextStyles">
            <summary>
            Gets <see cref="T:WW.Cad.Model.Tables.DxfTextStyle"/> keyed collection (the text style name can be used as the indexer parameter).
            </summary>
            <remarks>
            Adding a text style with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.DefaultTextStyle">
            <summary>
            The default text style with name <see cref="F:WW.Cad.Model.Tables.DxfTextStyle.DefaultTextStyleName"/>, 
            which uses the txt.shx font.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.DefaultDimensionStyle">
            <summary>
            Gets or sets the current <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.CurrentDimensionStyle">
            <summary>
            Gets or sets the current <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/>.
            Note that this dimension style must be present in the
            <see cref="P:WW.Cad.Model.DxfModel.DimensionStyles"/> collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.DefaultTableStyle">
            <summary>
            Gets the default table style.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfTableStyle"/>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.DictionaryRoot">
            <summary>
            Gets the named object <see cref="T:WW.Cad.Model.Objects.DxfDictionary">dictionary</see> root node.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.DimensionStyles">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/> keyed collection.
            </summary>
            <remarks>
            Adding a dimension style with a name that is already present results in an <see cref="T:System.ArgumentException"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.UnsupportedObjects">
            <summary>
            Gets the unsupported objects that were encountered while reading
            a DXF or DWG file.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ExternalReferences">
            <summary>
            Gets the external references (needed for external <see cref="T:WW.Cad.Model.Tables.DxfBlock">blocks</see>).
            This collection is filled when loading external references.
            Call <see cref="M:WW.Cad.Model.DxfModel.LoadExternalReferences"/> to load the external references.
            </summary>
            <seealso cref="M:WW.Cad.Model.DxfModel.LoadExternalReferences"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalReference"/>
            <seealso cref="P:WW.Cad.Model.Tables.DxfBlock.ExternalModel"/>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.FileDependencies">
            <summary>
            Gets the file dependencies (for e.g image, font and external reference files).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.ShxLookupDirectories">
            <summary>
            Gets the SHX lookup directries defined for this file.
            </summary>
            <remarks>
            This only provides readonly access to the directories, 
            usually to allow loading a SHX file outside of the internal 
            implementation (see <see cref="M:WW.Cad.Model.Entities.ShxFile.GetShxFile(System.String,System.String[])"/>). 
            The result of this property depends on the file location of this model.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.GlobalShxLookupDirectories">
            <summary>
            Get the additional directories where SHX fonts are searched.
            </summary>
            <remarks>
            Independent from the returned list the directory of the DXF/DWG file and
            the directory of the executable will always be searched.
            </remarks>
            <seealso cref="M:WW.Cad.Model.DxfModel.AddShxLookupDirectories(System.String[])"/>
            <seealso cref="M:WW.Cad.Model.DxfModel.ClearShxLookupDirectories"/>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.FallbackShxFont">
            <summary>
            Get/set the fallback SHX font to be used when a font referenced in the file is not available.
            </summary>
            <remarks>
            <para>
            A font defined here should be available in the directory of the DXF/DWG file, the directory 
            of the executable or somewhere in the global SHX lookup directories, compare 
            <see cref="P:WW.Cad.Model.DxfModel.GlobalShxLookupDirectories"/>.
            </para>
            <para>
            If this is set to <c>null</c> there is no fallback SHX font.
            </para>
            <para>
            Font lookup is done in the following order:
            </para>
            <list type="number">
            <item>A SHX font with the given name is searched in the SHX lookup directories.</item>
            <item>If no SHX font is found, a TTF font which resolves to the given name is loaded.</item>
            <item>
            If no TTF is found, the <see cref="P:WW.Cad.Model.DxfModel.FallbackShxFont">fallback SHX font</see> is searched in 
            the SHX lookup directories. This step is skipped if the fallback SHX font is <c>null</c>.
            </item>
            <item>
            If step 3 has no results, the <see cref="P:WW.Cad.Model.DxfModel.FallbackTrueTypeFont">fallback TTF</see> is loaded.
            This step is skipped if the fallback TTF is <c>null</c>.
            </item>
            <item>
            If that also fails Arial TTF is used.
            </item>
            <item>
            If even that fails, the system fallback font is used.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.FallbackTrueTypeFont">
            <summary>
            Get/set the fallback True Type font to be used when a font referenced in the file is not available.
            </summary>
            <remarks>
            <para>
            If this is set to <c>null</c> there is no fallback True Type font.
            </para>
            <para>
            Font lookup is done in the following order:
            </para>
            <list type="number">
            <item>A SHX font with the given name is searched in the SHX lookup directories.</item>
            <item>If no SHX font is found, a TTF font which resolves to the given name is loaded.</item>
            <item>
            If no TTF is found, the <see cref="P:WW.Cad.Model.DxfModel.FallbackShxFont">fallback SHX font</see> is searched in 
            the SHX lookup directories. This step is skipped if the fallback SHX font is <c>null</c>.
            </item>
            <item>
            If step 3 has no results, the <see cref="P:WW.Cad.Model.DxfModel.FallbackTrueTypeFont">fallback TTF</see> is loaded.
            This step is skipped if the fallback TTF is <c>null</c>.
            </item>
            <item>
            If that also fails Arial TTF is used.
            </item>
            <item>
            If even that fails, the system fallback font is used.
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.DxfModel.HandleChecker">
            <summary>
            Class usable for a call to <see cref="M:WW.Cad.Model.DxfModel.ExecuteForChildren(WW.Cad.Model.Action)"/> 
            which does check on duplicate handles and calculates the maximum handle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfModel.HandleChecker.knownObjects">
            <summary>
            The model for access to next free handle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfModel.HandleChecker.maxHandle">
            <summary>
            The maximum handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.HandleChecker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfModel.HandleChecker.RegisterHandle(WW.Cad.Model.DxfHandledObject)">
            <summary>
            This method checks for duplicate handles
            </summary>
            <param name="handledObject"></param>
        </member>
        <member name="P:WW.Cad.Model.DxfModel.HandleChecker.MaxHandle">
            <summary>
            Get the maximum encountered handle.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.TextVerticalAlignment">
            <summary>
            Vertical alignment for text.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextVerticalAlignment.Baseline">
            <summary>
            Aligned to base line.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextVerticalAlignment.Bottom">
            <summary>
            Aligned to bottom.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextVerticalAlignment.Middle">
            <summary>
            Aligned to middle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TextVerticalAlignment.Top">
            <summary>
            Aligned to top.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.SummaryInfo">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.DxfModel"/>'s summary info.
            </summary>
            <remarks>
            Please note that not all properties are supported for every version. See the property comments for more information.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.SummaryInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.SummaryInfo.#ctor(WW.Cad.Model.SummaryInfo)">
            <summary>
            Copy constructor.
            </summary>
            <param name="from">summary info to copy from</param>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.Keywords">
            <summary>
            Gets or sets the keywords.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.LastSavedBy">
            <summary>
            Gets or sets who saved the drawing last.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.RevisionNumber">
            <summary>
            Gets or sets the revision number.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.HyperLinkBase">
            <summary>
            Gets or sets the hyper link base.
            Represents the path for all relative hyperlinks in the drawing. 
            If null, the drawing path is used.
            This value represents system variable HYPERLINKBASE.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.TotalEditingTime">
            <summary>
            Gets or sets the time span the user spent editing the drawing.
            This value represents system variable TDINDWG.
            </summary>
            <remarks>
            <para>
            When read from file, this value is capped to be within the 
            <see cref="F:System.TimeSpan.MinValue"/> and <see cref="F:System.TimeSpan.MaxValue"/>.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.CreationDateTime">
            <summary>
            Gets or sets the creation date time.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.ModifiedDateTime">
            <summary>
            Gets or sets the modified date time.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.Properties">
            <summary>
            Gets the properties.
            The property names are normally unique, but they don't have to be.
            </summary>
            <remarks>Introduced in <see cref="!:DxfVersion.R15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="T:WW.Cad.Model.SummaryInfo.Property">
            <summary>
            Represents a property consisting of a name and value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.SummaryInfo.Property.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.SummaryInfo.Property"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.SummaryInfo.Property.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.SummaryInfo.Property"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.SummaryInfo.Property.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.Property.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.SummaryInfo.Property.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.ShadowMode">
            <summary>
            Shadow mode for new 3D objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadowMode.CastsAndReceives">
            <summary>
            Casts and receives shadows.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadowMode.CastsOnly">
            <summary>
            Casts shadows.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadowMode.ReceivesOnly">
            <summary>
            Receives shadows.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadowMode.Ignores">
            <summary>
            Ignores shadows.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfGroupCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.DxfGroup"/> keyed collection (the group name can be used as indexer parameter).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfGroupCollection.GetKeyForItem(WW.Cad.Model.Objects.DxfGroup)">
            <summary>
            Gets the key for specified group.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfVertex3D">
            <summary>
            Represents a 3D vertex in a <see cref="T:WW.Cad.Model.Entities.DxfPolyline3DBase"/> object.
            </summary>
            <remarks>
            <para>
            The <see cref="P:WW.Cad.Model.Entities.DxfVertex3D.Position"/> is in the world coordinate system.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> class with the specified coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.#ctor(WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/> class with the specified vertex.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified 3D vertext in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.ToString">
            <summary>
            Returns the string representation of the vertex position.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex3D.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex3D.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <remarks>
            The position is in the world coordinate system.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex3D.X">
            <summary>
            Gets or sets the x coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex3D.Y">
            <summary>
            Gets or sets the y coordinate.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfVertex3D.Z">
            <summary>
            Gets or sets the z coordinate.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCellStyleOverrides">
            <summary>
            Represents <see cref="T:WW.Cad.Model.Objects.DxfTableCellStyle">table cell style</see> overrides.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.CopyFrom(WW.Cad.Model.Entities.DxfTableCellStyleOverrides,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents from specified object to this object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.TextStyle">
            <summary>
            Gets or sets the text style.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="!:GetEffectiveTextStyle"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.TextHeight">
            <summary>
            Gets or sets the height of the text.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="!:GetEffectiveTextHeight"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.CellAlignment">
            <summary>
            Gets or sets the cell alignment.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="!:GetEffectiveCellAlignment"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.ContentColor">
            <summary>
            Gets or sets the content color.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="!:GetEffectiveContentColor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.BackColor">
            <summary>
            Gets or sets the background color.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.IsBackColorEnabled"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.IsBackColorEnabled">
            <summary>
            Gets or sets a value indicating whether the background color is enabled.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.BackColor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.CellFormat">
            <summary>
            Gets or sets the cell format.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.BorderTop">
            <summary>
            Gets or sets the top border overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.BorderRight">
            <summary>
            Gets or sets the right border overrides.
            </summary>
            <remarks>
            Only used for the right most cells, other cells use the left border of the cell to the right.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.BorderBottom">
            <summary>
            Gets or sets the bottom border overrides.
            </summary>
            <remarks>
            Only used for the bottom cells, other cells use the top border of the cell below.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCellStyleOverrides.BorderLeft">
            <summary>
            Gets or sets the left border overrides.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfClassCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.DxfClass"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClassCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClassCollection.#ctor(System.Int32)">
            <summary>
            Constructor allowing to set a capacity.
            </summary>
            <param name="capacity">initial capacity</param>
        </member>
        <member name="M:WW.Cad.Model.DxfClassCollection.GetClassWithClassNumber(System.Int16)">
            <summary>
            Gets the class object for specified class number (or object type).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClassCollection.GetClassWithCPlusPlusName(System.String)">
            <summary>
            Gets the class object for specifed C++ name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClassCollection.ContainsCPlusPlusName(System.String)">
            <summary>
            Determines whether this collection contains a class with the specified C++ name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClassCollection.GetClassWithDxfName(System.String)">
            <summary>
            Gets the class object for specifed DXF name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfClassCollection.ContainsDxfName(System.String)">
            <summary>
            Determines whether this collection contains a class with the specified DXF name.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.TableBreakOptionFlags">
            <summary>
            Represents option flags for <see cref="T:WW.Cad.Model.Entities.DxfTableBreakData"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakOptionFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakOptionFlags.EnableBreaks">
            <summary>
            Enable breaks.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakOptionFlags.RepeatTopLabels">
            <summary>
            Repeat top labels.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakOptionFlags.RepeatBottomLabels">
            <summary>
            Repeat bottom labels.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakOptionFlags.AllowManualPositions">
            <summary>
            Allow manual positions.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableBreakOptionFlags.AllowManualHeights">
            <summary>
            Allow manual heights.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Color">
            <summary>
            Represents a color.
            A color has a <see cref="P:WW.Cad.Model.Color.ColorType">color type</see> and optional color value (index, RGB).
            The difference with class <see cref="T:WW.Cad.Model.Entities.EntityColor"/> is that this class has an optional color book name and name.
            See also <see cref="T:WW.Cad.Model.Colors"/> for a number of standard colors.
            </summary>
            <remarks>
            Use one of the following to get a color:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:WW.Cad.Model.Color.ByLayer"/>, <see cref="F:WW.Cad.Model.Color.ByBlock"/> or <see cref="F:WW.Cad.Model.Color.None"/>.
            </description>
            </item>
            <item>
            <description>
            Create an ACI color from a color index value. ACI stands for AutoCAD Color Index. 
            See method <see cref="M:WW.Cad.Model.Color.CreateFromColorIndex(WW.Cad.Model.ColorType,System.Int16)"/>.
            A number of often used ACI colors can be found in class <see cref="T:WW.Cad.Model.Colors"/>.
            </description>
            </item>
            <item>
            <description>
            Create an RGB color using method <see cref="M:WW.Cad.Model.Color.CreateFromRgb(System.Int32)"/> or one of its overloads.
            Optionally a color book name and name can be specified.
            </description>
            </item>
            </list>
            </remarks>
            <example>
            Below is an example of how to create a dimension, assign different colors to the several dimension style properties, 
            and extract their ARGB color values.
            <code lang="cs">
using System;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class ColorExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            DxfDimension dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle) {
                DimensionLineLocation = new Point3D(0, 0.2, 0),
                ExtensionLine1StartPoint = new Point3D(0, 0, 0),
                ExtensionLine2StartPoint = new Point3D(2, 0, 0)
            };
            // The "by layer" color depends on the layer color the entity is on (default is the ZERO layer).
            dimension.DimensionStyleOverrides.DimensionLineColor = Colors.ByLayer;
            // This is one of the ACI colors. ACI stands for AutoCAD Color Index
            dimension.DimensionStyleOverrides.ExtensionLineColor = Colors.Green;
            // This is an RGB color.
            dimension.DimensionStyleOverrides.TextColor = Color.CreateFromRgb(0xff, 0xa0, 0xa0);
            model.Entities.Add(dimension);

            foreach (
                Color color in new [] {
                    dimension.DimensionStyleOverrides.DimensionLineColor, 
                    dimension.DimensionStyleOverrides.ExtensionLineColor, 
                    dimension.DimensionStyleOverrides.TextColor
                }
            ) {
                // To get the ARGB value of a color, a specific color set must be provided which
                // is used to lookup ACI colors (ACI stands for AutoCAD Color Index).
                // There are several types of colors, of which ACI colors is one.
                //
                // For more details see types:
                // WW.Cad.Model.Color,
                // WW.Cad.Model.Entities.EntityColor,
                // WW.Cad.Model.ColorType
                int argb = color.ToArgb(DxfIndexedColorSet.AcadClassicIndexedColors);
                Console.WriteLine("Argb: {0}", argb);
            }
        }
    }
}
    </code>
            </example>
            <seealso cref="P:WW.Cad.Model.Color.ColorType"/>
            <seealso cref="T:WW.Cad.Model.Colors"/>
        </member>
        <member name="F:WW.Cad.Model.Color.ByLayer">
            <summary>
            Represents the by layer color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Color.ByBlock">
            <summary>
            Represents the by block color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Color.None">
            <summary>
            Represents no color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromColorIndex(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromColorIndex(WW.Cad.Model.ColorType,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromRgb(System.Byte,System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromRgb(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromRgb(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromRgb(WW.Cad.Model.ColorType,System.Byte,System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromRgb(WW.Cad.Model.ColorType,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromRgb(WW.Cad.Model.ColorType,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFromRgb(WW.Cad.Model.ColorType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Color"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFrom(WW.Drawing.ArgbColor)">
            <summary>
            Creates a color from a <see cref="T:System.Drawing.Color"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.CreateFrom(WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Creates a color from a <see cref="T:WW.Cad.Model.Entities.EntityColor"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.ToSystemDrawingColor">
            <summary>
            Converts this color to a <see cref="T:System.Drawing.Color"/>.
            For colors BYLAYER and BYBLOCK the color <see cref="P:System.Drawing.Color.Black"/> is returned.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.op_Implicit(System.Drawing.Color)~WW.Cad.Model.Color">
            <summary>
            Implicit cast from System.Drawing.Color.
            </summary>
            <param name="color">System.Drawing color</param>
            <returns>ARGB color</returns>
        </member>
        <member name="M:WW.Cad.Model.Color.ToArgbColor(WW.Cad.Model.DxfIndexedColorSet)">
            <summary>
            Get an ARGB color value from this color.
            </summary>
            <param name="indexedColors">Indexed color mapping.</param>
            <returns>ARGB color value.</returns>
        </member>
        <member name="M:WW.Cad.Model.Color.ToArgbColor(WW.Cad.Model.DxfIndexedColorSet,System.Byte)">
            <summary>
            Get an ARGB color value from this color.
            </summary>
            <param name="indexedColors">Indexed color mapping.</param>
            <returns>ARGB color value.</returns>
        </member>
        <member name="M:WW.Cad.Model.Color.ToArgbColor">
            <summary>
            Get an ARGB color value from this color.
            </summary>
            <remarks>
            Obsolete: there is no one fix color set for indexed colors, use 
            <see cref="M:WW.Cad.Model.Color.ToArgbColor(WW.Cad.Model.DxfIndexedColorSet)"/> instead.
            </remarks>
            <returns>ARGB color value.</returns>
        </member>
        <member name="M:WW.Cad.Model.Color.ToSystemDrawingColor(WW.Cad.Model.DxfIndexedColorSet,System.Byte)">
            <summary>
            Converts this color with specified alpha value to a <see cref="T:System.Drawing.Color"/>.
            For colors BYLAYER and BYBLOCK the color <see cref="P:System.Drawing.Color.Black"/> is returned, 
            with specified alpha value applied to it.
            </summary>
            <param name="indexedColors">Indexed color mapping.</param>
            <param name="alpha">Alpha value</param>
        </member>
        <member name="M:WW.Cad.Model.Color.ToSystemDrawingColor(System.Byte)">
            <summary>
            Converts this color with specified alpha value to a <see cref="T:System.Drawing.Color"/>.
            For colors BYLAYER and BYBLOCK the color <see cref="P:System.Drawing.Color.Black"/> is returned, 
            with specified alpha value applied to it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.ToArgb(WW.Cad.Model.DxfIndexedColorSet)">
            <summary>
            Converts this color to an Argb value (A = 255).
            For colors BYLAYER and BYBLOCK the value 0xff000000 is returned (represents black).
            </summary>
            <param name="indexedColors">Indexed color mapping.</param>
        </member>
        <member name="M:WW.Cad.Model.Color.ToArgb">
            <summary>
            Converts this color to an Argb value (A = 255).
            For colors BYLAYER and BYBLOCK the value 0xff000000 is returned (represents black).
            </summary>
            <remarks>
            Obsolete: there is no one fix color mapping for indexed colors, use
            <see cref="M:WW.Cad.Model.Color.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/> instead.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Color.ToArgb(WW.Cad.Model.DxfIndexedColorSet,System.Byte)">
            <summary>
            Converts this color with specified alpha value to an Argb value.
            For colors BYLAYER and BYBLOCK the value corresponding to the color black is returned, 
            with specified alpha value applied to it.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.ToArgb(System.Byte)">
            <summary>
            Converts this color with specified alpha value to an Argb value.
            For colors BYLAYER and BYBLOCK the value corresponding to the color black is returned, 
            with specified alpha value applied to it.
            </summary>
            <remarks>
            Obsolete: there is no one fix color mapping for indexed colors, use
            <see cref="M:WW.Cad.Model.Color.ToArgb(WW.Cad.Model.DxfIndexedColorSet,System.Byte)"/> instead.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.TryParse(System.String,WW.Cad.Model.Color@)">
            <summary>
            Tries to parse the specified string.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Color.op_Equality(WW.Cad.Model.Color,WW.Cad.Model.Color)">
            <summary>
            Determines whether to specified <see cref="T:WW.Cad.Model.Color"/> objects have the same value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.op_Inequality(WW.Cad.Model.Color,WW.Cad.Model.Color)">
            <summary>
            Determines whether to specified <see cref="T:WW.Cad.Model.Color"/> objects have different values.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.Equals(WW.Cad.Model.Color)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Color.ColorType">
            <summary>
            Gets the type of the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Color.R">
            <summary>
            Gets the red component in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            To get the effective ARGB value of this color that also works for indexed colors, call method <see cref="M:WW.Cad.Model.Color.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Color.G">
            <summary>
            Gets the green component in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            To get the effective ARGB value of this color that also works for indexed colors, call method <see cref="M:WW.Cad.Model.Color.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Color.B">
            <summary>
            Gets the blue component in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            To get the effective ARGB value of this color that also works for indexed colors, call method <see cref="M:WW.Cad.Model.Color.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Color.ColorIndex">
            <summary>
            Gets the ACI color index in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColorIndex"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Color.Rgb">
            <summary>
            Gets the RGB value of this color in case its color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            To get the effective ARGB value of this color that also works for indexed colors, call method <see cref="M:WW.Cad.Model.Color.ToArgb(WW.Cad.Model.DxfIndexedColorSet)"/>.
            </summary>
            <example>
            Below is an example of how to create a dimension, assign different colors to the several dimension style properties, 
            and extract their ARGB color values.
            <code lang="cs">
using System;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class ColorExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            DxfDimension dimension = new DxfDimension.Aligned(model.CurrentDimensionStyle) {
                DimensionLineLocation = new Point3D(0, 0.2, 0),
                ExtensionLine1StartPoint = new Point3D(0, 0, 0),
                ExtensionLine2StartPoint = new Point3D(2, 0, 0)
            };
            // The "by layer" color depends on the layer color the entity is on (default is the ZERO layer).
            dimension.DimensionStyleOverrides.DimensionLineColor = Colors.ByLayer;
            // This is one of the ACI colors. ACI stands for AutoCAD Color Index
            dimension.DimensionStyleOverrides.ExtensionLineColor = Colors.Green;
            // This is an RGB color.
            dimension.DimensionStyleOverrides.TextColor = Color.CreateFromRgb(0xff, 0xa0, 0xa0);
            model.Entities.Add(dimension);

            foreach (
                Color color in new [] {
                    dimension.DimensionStyleOverrides.DimensionLineColor, 
                    dimension.DimensionStyleOverrides.ExtensionLineColor, 
                    dimension.DimensionStyleOverrides.TextColor
                }
            ) {
                // To get the ARGB value of a color, a specific color set must be provided which
                // is used to lookup ACI colors (ACI stands for AutoCAD Color Index).
                // There are several types of colors, of which ACI colors is one.
                //
                // For more details see types:
                // WW.Cad.Model.Color,
                // WW.Cad.Model.Entities.EntityColor,
                // WW.Cad.Model.ColorType
                int argb = color.ToArgb(DxfIndexedColorSet.AcadClassicIndexedColors);
                Console.WriteLine("Argb: {0}", argb);
            }
        }
    }
}
    </code>
            </example>
        </member>
        <member name="P:WW.Cad.Model.Color.Name">
            <summary>
            Gets the name.
            This only has a value if color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Color.ColorBookName">
            <summary>
            Gets the name of the color book.
            This only has a value if color type is <see cref="F:WW.Cad.Model.ColorType.ByColor"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Color.TypeConverter">
            <summary>
            Type converter from <see cref="T:WW.Cad.Model.Color"/> to <see cref="T:System.String"/> and vice versa.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Color.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:WW.Cad.Model.Color.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:WW.Cad.Model.Color.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:WW.Cad.Model.Color.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:WW.Cad.Model.Color.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
        </member>
        <member name="M:WW.Cad.Model.Color.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null. </param>
        </member>
        <member name="F:WW.Cad.Model.Color.TypeConverter.StandardColors">
            <summary>
            The standard colors.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Color.UITypeEditor">
            <summary>
            A UI type editor for the <see cref="T:WW.Cad.Model.Color"/> struct.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction">
            <summary>
            Represents the dynamic block scale action.
            </summary>
            <remarks>
            Action makes scaling of linked Dxf entities.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction.ScaleType">
            <summary>
            Gets or sets the scale type.  Default value is ScaleTypeXY.XY.
            </summary>
            <remarks>
            Field used only if action linked with XY parameter. If value is X, it means 
            that only X direction changing of parameter will define the scale.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction.ActionConnections">
            <summary>
            Gets or sets the connections for scale action.
            </summary>
            <remarks>
            Connections to linked Parameter (Scale, XScale, YScale values).
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockScaleAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction">
            <summary>
            Represents the dynamic block polar stretch action.
            </summary>
            <remarks>
            Supported moving, rotation and stretching of the block geometry.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.ActionConnections">
            <summary>
            Gets or sets the connections for polar stretch action.
            </summary>
            <remarks>
            BaseXDelta, BaseYDelta, Base, End, UpdatedBase, UpdatedEnd parameters.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.Frame">
            <summary>
            Gets or sets the frame points.
            </summary>
            <remarks>
            Frame to define area for stretching.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.RotateSelection">
            <summary>
            Gets or sets the rotate selection.
            </summary>
            <remarks>
            DXF entities to only rotate.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchEntities">
            <summary>
            Gets or sets the stretch entity array.
            </summary>
            <remarks>
            DXF entities to stretch.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchNodes">
            <summary>
            Gets or sets the stretch node array.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchEntity.Clone(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchEntity,WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchEntity.Clone(WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchEntity[],WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object array.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchNode.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchNode.Clone(WW.Cad.Model.CloneContext,WW.Cad.Model.Objects.DynamicBlock.DxfBlockPolarStretchAction.StretchNode[])">
            <summary>
            Clones this object array.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGripExpression">
            <summary>
            Represents the dynamic block grip expression.
            </summary>
            <remarks>
            Block grip expression typically is a link between grip point and parameter.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGripExpression.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGripExpression.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGripExpression.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGripExpression.ActionConnection">
            <summary>
            Gets or sets the connections for tre block grip expression.
            </summary>
            <remarks>
            Connection to Paramenter.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGripExpression.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockGripExpression.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter">
            <summary>
            Represents the dynamic block flip parameter.
            </summary>
            <remarks>
            Object can be flipped around some reflection line.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.LabelPosition">
            <summary>
            Gets or sets the label position point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.NotFlippedState">
            <summary>
            Gets or sets the non flipped state text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.FlippedState">
            <summary>
            Gets or sets the flipped state text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <remarks>
            Typically links to flip grip point.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockFlipParameter.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentGrip">
            <summary>
            Represents the dynamic block alignment grip.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentGrip.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentGrip.Alignment">
            <summary>
            Gets or sets the alignment vector.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockAlignmentGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfSortEntsTable">
            <summary>
            Represents an object that determines the entity drawing order for a <see cref="T:WW.Cad.Model.Tables.DxfBlock">block</see>.
            </summary>
            <remarks>
            <para>
            When drawing according to a <see cref="T:WW.Cad.Model.Objects.DxfSortEntsTable"/>, entities are sorted by their handle.
            In case a sort handle is defined for an entity, then that sort handle is used for sorting,
            otherwise the entity's own handle is used for sorting.
            </para>
            <para>
            The SortEntsTable is stored in a block's <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> extension dictionary, 
            at entry named <see cref="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadSortEnts"/>.
            </para>
            <para>
            The SortEnts object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">release 14</see>.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSortEntsTable.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSortEntsTable.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSortEntsTable.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfSortEntsTable.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSortEntsTable.OwnerBlock">
            <summary>
            Gets or sets the owner block, which is also the layout's owner block.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSortEntsTable.EntitySortWrappers">
            <summary>
            Gets the entity sort wrappers.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSortEntsTable.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfSortEntsTable.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfMTextObjectContextData">
            <summary>
            Multiline text (<see cref="T:WW.Cad.Model.Entities.DxfMText"/>) annotation (scale specific) data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfMTextObjectContextData.AttachmentPoint">
            <summary>
            Gets or sets the text attachment point type.
            Default is AttachmentPoint.TopLeft
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfMTextObjectContextData.XDirection">
            <summary>
            Gets or sets the X direction of the text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfMTextObjectContextData.Location">
            <summary>
            Gets or sets the text location.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfMTextObjectContextData.ReferenceSize">
            <summary>
            Gets or sets the reference rectangle of the text. (Used for word wrapping)
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfMTextObjectContextData.Size">
            <summary>
            Gets or sets the text size.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.FillStyle">
            <summary>
            Fill style enumeration.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.Solid">
            <summary>
            Solid filling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.Checkerboard">
            <summary>
            Checkerboard filling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.Crosshatch">
            <summary>
            Crosshatch filling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.Diamonds">
            <summary>
            Diamond shape filling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.HorizontalBars">
            <summary>
            Horizontal bars filling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.SlantLeft">
            <summary>
            45° left slanted  bars filling: \\\\
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.SlantRight">
            <summary>
            45° right slanted bars filling: ////
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.SquareDots">
            <summary>
            Square dots filling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.VerticalBars">
            <summary>
            Vertical bars filling.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.FillStyle.Object">
            <summary>
            Take style from object.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfBody">
            <summary>
            Represents an ACIS based entity used to represent 3D data.
            See the <see cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/> class for 3D ACIS data.
            </summary>
            <remarks>
            Rendering of body is not supported.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBody.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBody.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="!:Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfBody.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.Dxf3DSolid">
            <summary>
            Represents an ACIS based entity used to represent 3D data. 
            See the <see cref="T:WW.Cad.Model.Entities.DxfRegion"/> class for 2D ACIS data.
            </summary>
            <remarks>
            Programmatic creation of ACIS entities is currently very limited.
            Rendering 3D solids is not yet supported.
            </remarks>
            <example>
            Below an example is shown of how to create a sphere.
            <code lang="cs">
    using System;

    using WW.Cad.IO;
    using WW.Cad.Model;
    using WW.Cad.Model.Entities;
    using WW.Cad.Model.Tables;
    using WW.Math;

    namespace Examples {
        public class LineExample {
            public void Demonstrate() {
                DxfModel model = new DxfModel(DxfVersion.Dxf14);

                Dxf3DSolid newSphere = Dxf3DSolid.CreateSphere(5);
                model.Entities.Add(newSphere);

                DxfWriter.Write("Sphere Example.dxf", model, false);
            }
        }
    }
  </code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfRegion"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.Dxf3DSolid.historyID">
            <summary>3DSolid may have history of changes.</summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DSolid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DSolid.CreateSphere(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/> class. Create sphere.
            </summary>
            <example>
            Below an example is shown of how to create a sphere.
            <code lang="cs">
    using System;

    using WW.Cad.IO;
    using WW.Cad.Model;
    using WW.Cad.Model.Entities;
    using WW.Cad.Model.Tables;
    using WW.Math;

    namespace Examples {
        public class LineExample {
            public void Demonstrate() {
                DxfModel model = new DxfModel(DxfVersion.Dxf14);

                Dxf3DSolid newSphere = Dxf3DSolid.CreateSphere(5);
                model.Entities.Add(newSphere);

                DxfWriter.Write("Sphere Example.dxf", model, false);
            }
        }
    }
  </code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DSolid.CreateBox(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DSolid"/> class. Create box.
            </summary>
            <example>
            Below an example is shown of how to create a line.
            <code lang="cs">
    using System;

    using WW.Cad.IO;
    using WW.Cad.Model;
    using WW.Cad.Model.Entities;
    using WW.Cad.Model.Tables;
    using WW.Math;

    namespace Examples {
        public class LineExample {
            public void Demonstrate() {
                DxfModel model = new DxfModel(DxfVersion.Dxf14);

                Dxf3DSolid newBox = Dxf3DSolid.CreateBox(10,20,30);
                model.Entities.Add(newBox);

                DxfWriter.Write("Box Example.dxf", model, false);
            }
        }
    }
  </code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DSolid.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="!:Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DSolid.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:IEntityVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DSolid.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified entity in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DSolid.HistoryId">
            <summary>
            Gets or sets the history ID.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DSolid.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DSolid.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.SchemaProperty">
            <summary>
            Represents a schema property, which is basically a name/value pair.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.NameIndex">
            <summary>
            Gets or sets the name index into the name array.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.CustomTypeSize">
            <summary>
            Gets or sets the custom type size.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.TypeSize">
            <summary>
            Gets or sets the type size.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.Unknown1">
            <summary>
            Unknown1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.Unknown2">
            <summary>
            Unknown2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.PropertyValues">
            <summary>
            Gets the property values.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.SchemaProperty.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfGradientColor">
            <summary>
            Represents a gradient color for <see cref="T:WW.Cad.Model.Entities.DxfColorGradient"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfGradientColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfGradientColor"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfGradientColor.#ctor(System.Double,WW.Cad.Model.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfGradientColor"/> class.
            </summary>
            <param name="value">The value is expected to be in the range 0-1.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfGradientColor.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfGradientColor.CopyFrom(WW.Cad.Model.Entities.DxfGradientColor)">
            <summary>
            Copies all properties from specified gradient color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfGradientColor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfGradientColor.Value">
            <summary>
            Gets or sets the gradient value.
            The value is expected to be in the range 0-1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfGradientColor.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatHeader.DateFormat">
            <summary> Format for date extraction.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatHeader.DefaultMmPerUnit">
            <summary>Default value for mm per unit.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatHeader.DefaultAbsoluteResolution">
            <summary>Default value for absolute resolution.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatHeader.DefaultNormalResolution">
            <summary>Default value for normal resolution.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatHeader.date">
            <summary>Date.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatHeader.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="version">SAT version</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatHeader.SetDate(System.String)">
            <summary>
            Set the date from a string.
            </summary>
            <param name="dateString">date string in the format it appears in the file</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.Version">
            <summary>Get/set the file version.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.NumberOfRecords">
            <summary>Get/set the number of records.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.EntityCount">
            <summary>Get/set the entity count.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.HistorySaved">
            <summary>Get/set the history saved flag.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.Product">
            <summary>Get/set the product string.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.AcisVersion">
            <summary>Get/set the ACIS version string.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.Date">
            <summary>Get/set the save date.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.MmPerUnit">
            <summary>Get/set the mm per unit scaling.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.AbsoluteResolution">
            <summary>Get/set the absolute resolutíon.</summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatHeader.NormalResolution">
            <summary>Get/set the normal resolution.</summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatSphere">
            <summary>
            SAT sphere entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSphere.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSphere.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSphere.CreateSurfacePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of surface primitive.
            </summary>
            <returns>newly created surface primitive</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatSphere.SpherePrimitive">
            <summary>
            Get the underlying sphere primitive.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatLump">
            <summary>
            SAT lump entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatLump.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatLump.nextLump">
            <summary>Pointer to next lump.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatLump.firstShell">
            <summary>Pointer to first shell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatLump.body">
            <summary>Pointer to body containing lump.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLump.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLump.#ctor(WW.Cad.Model.Acis.SatEntities.SatBody,WW.Cad.Model.Acis.SatEntities.SatShell)">
            <summary>
            Constructor.
            </summary>
            <param name="body">enclosing body of lump</param>
            <param name="shell">first shell of lump</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLump.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLump.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLump.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatLump.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLump.Next">
            <summary>
            Get the next entity of the same type if this entity is a member in a list.
            </summary>
            <remarks>
            Returns <c>null</c> if this entity is not in a list or if it is the last member of the list
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLump.NextLump">
            <summary>
            Get the next lump in the list of lumps to which this lump belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLump.FirstShell">
            <summary>
            Get the first shell belonging to this lump.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLump.Body">
            <summary>
            Get the body to which this lump belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatLump.Shells">
            <summary>
            Get the list of shells belonging to this lump.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatFace">
            <summary>
            SAT face entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.nextFace">
            <summary>Pointer to next face.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.firstLoop">
            <summary>Pointer to first loop.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.shell">
            <summary>Pointer to surrounding shell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.subshell">
            <summary>Pointer to surrounding subshell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.surface">
            <summary>Pointer to surface on which face lies (currently not a SatSurface to allow for references to unknown entities).</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.faceNormalReversed">
            <summary>Is the face normal reversed?</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.doubleSided">
            <summary>Is the face double-sided?</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatFace.doubleSidedIn">
            <summary>Double sided face containment.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatFace.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatFace.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatFace.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatFace.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.Next">
            <summary>
            Get the next entity of the same type if this entity is a member in a list.
            </summary>
            <remarks>
            Returns <c>null</c> if this entity is not in a list or if it is the last member of the list
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.NextFace">
            <summary>
            Get the next face.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.FirstLoop">
            <summary>
            Get the first loop.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.Shell">
            <summary>
            Get the surrounding shell to which this face belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.Subshell">
            <summary>
            Get the surrounding subshell to which this face belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.Surface">
            <summary>
            Get the underlying surface to which this face belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.FaceNormalReversed">
            <summary>
            Is the normal of this face reversed?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.DoubleSided">
            <summary>
            Is this face double-sided?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.DoubleSidedIn">
            <summary>
            Is this face double side in?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatFace.Loops">
            <summary>
            Get the loops belonging to this face.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatEllipse">
            <summary>
            SAT ellipse entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatEllipse.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEllipse.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatEllipse.CreateCurvePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of curve primitive.
            </summary>
            <returns>newly created and initialized curve primitive</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatEllipse.EllipsePrimitive">
            <summary>
            Get the ellipse primitive.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatDegenerate">
            <summary>
            SAT straight entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatDegenerate.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatDegenerate.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatDegenerate.CreateCurvePrimitive">
            <summary>
            This method should be overwritten in extending classes to create the correct kind of curve primitive.
            </summary>
            <returns>newly created and initialized curve primitive</returns>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplineSurface3DPrimitive">
            <summary>
            SAT spline surface in model coordinates primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplineSurface3DPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the basic curve data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSplineSurface3DPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the basic curve data to its stored format.
            </summary>
            <param name="writer">writer to write to</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">on format errors</exception>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubsetIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubsetIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubsetIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubsetIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubsetIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatSubsetIntCurPrimitive.ExtensionType">
            <summary>
            Curve extension type enum definition
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatNullPCurvePrimitive">
            <summary>
            SAT base class for pcurve primitives.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatNullPCurvePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatNullPCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.ParameterSpaceCurves.SatNullPCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstBlendAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstBlendAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTIDAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTIDAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTIDAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTIDAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTDisplayAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTDisplayAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTDisplayAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.ST.SatSTDisplayAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealCoedgeGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealCoedgeGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealCoedgeGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealCoedgeGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNamePositionAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNamePositionAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNamePositionAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNamePositionAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgStreamUtil.WriteModularShort(System.IO.Stream,System.UInt32)">
            <summary>
            Only used for object sizes.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.DwgStreamUtil.ReadUInt64FromModularChars(System.IO.Stream)">
            <summary>
            Modular char, but sign bits are ignored (char being a 1-byte char).
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Dwg.DwgAuxiliaryHeaderWriter">
            <summary>
            The auxiliary header contains mostly redundant information.
            </summary>
            <remarks>
            The auxiliary header was introduced in R15.
            </remarks>
        </member>
        <member name="T:WW.Cad.IO.Dwg.Dwg2007.RandomEncoding">
            <summary>
            The random encoding encodes 10-bit values into 64-bit values, where remaining bits are filled with random values.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.RandomEncoding.Encode(System.UInt32)">
            <summary>
            For specified 32-bit value encodes the least significant 10 bits into a 64-bit value.
            The other bits are random.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.RandomEncoding.Decode(System.UInt64)">
            <summary>
            Decodes specified 64-bit value into a 32-bit value (10 bits used).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.DwgUtilR21.GetPagePaddingSize(System.UInt64)">
            <summary>
            The page size must be a multiple of <see cref="F:WW.Cad.IO.Dwg.Dwg2007.DwgUtilR21.PageAlignSize"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.ByteStreamR21.WriteAnsiString(System.String)">
            <summary>
            Null terminated.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2007.ByteStreamR21.WriteAnsiString32(System.String)">
            <summary>
            Not null terminated.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Dwg.Dwg2004.DwgUtilR18.SectionPageMapSectionPageType">
            <summary>
            The pages map contains all section pages.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Dwg.Dwg2004.DwgUtilR18.SectionMapSectionPageType">
            <summary>
            The sections map contains all sections and their pages.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.Dwg2004.DwgUtilR18.GetPagePaddingSize(System.Int32)">
            <summary>
            The page size must be a multiple of <see cref="F:WW.Cad.IO.Dwg.Dwg2004.DwgUtilR18.PageAlignSize"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfTableRowBuilder">
            <summary>
            Represents a table row builder for the title/header/data rows.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.PolygonMesh">
            <summary>
            Represents a polygon mesh primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.PolygonMesh.#ctor(WW.Math.Point3D[0:,0:],System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.PolygonMesh"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.PolygonMesh.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.PolygonMesh.Mesh">
            <summary>
            Gets or sets the mesh points.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.PolygonMesh.ClosedInMDirection">
            <summary>
            Gets or sets a value indicating whether the mesh is closed in the M direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.PolygonMesh.ClosedInNDirection">
            <summary>
            Gets or sets a value indicating whether the mesh is closed in the N direction.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.NullGraphicElement">
            <summary>
            A null graphic element.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.Surface.NullGraphicElement.Instance">
            <summary>
            The null graphic element instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.NullGraphicElement.Accept(WW.Cad.Drawing.Surface.IGraphicElementVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.GraphicElementInsert">
            <summary>
            Represents a graphic element insert.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementInsert.Matches(WW.Cad.Model.Tables.DxfLayer,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Determines whether this graphic element insert matches
            specified by block/by layer attributes.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementInsert.Accept(WW.Cad.Drawing.Surface.IGraphicElementVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementInsert.UnclippedBlock">
            <summary>
            Gets or sets the unclipped block.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementInsert.AttributeBlock">
            <summary>
            Gets or sets the attribute block.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementInsert.InsertCells">
            <summary>
            Gets or sets the insert cells (index is row, column, often just has 1 row/column).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementInsert.AttributeBlockCells">
            <summary>
            Gets or sets the attribute block cells (index is row, column, often just has 1 row/column).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.GraphicElementInsert.InsertCell">
            <summary>
            Represents an insert's cell at a certain row and column.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementInsert.InsertCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElementInsert.InsertCell"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementInsert.InsertCell.#ctor(WW.Math.Matrix4D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElementInsert.InsertCell"/> class.
            </summary>
            <param name="transform">The transform.</param>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementInsert.InsertCell.ClippedBlock">
            <summary>
            Gets or sets the clipped block.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementInsert.InsertCell.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColorContext">
            <summary>
            Color context without a background color.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.HatchOverflowHandling">
            <summary>
            How to handle hatch overflows.
            </summary>
            <remarks>
            Hatch overflows might occur if there are too many repeat counts of the hatch pattern.
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.HatchOverflowHandling.Discard">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.HatchOverflowHandling.SolidFill">
            <summary>
            Do a solid fill of the hatch area instead.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.HatchOverflowHandling.DrawBoundary">
            <summary>
            Draw the boundary of the hatch instead.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile">
            <summary>
            CTB file.
            </summary>
            <remarks>
            CTB (Color TaBle) files contain plot settings, which are referred by an entity's color index.
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.FileHeader">
            <summary>
            Standard file header.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.EndOfContent">
            <summary>
            Marker for last line.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.PenNumberAutomatic">
            <summary>
            Pen number indicating automatic pen assignment.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineWeightIndexByObject">
            <summary>
            Line weight index indicating to take object's line weight.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.InvalidIndex">
            <summary>
            Index indicating invalid.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.MagicNumberByObject">
            <summary>
            Magic number used as indicator that the object's color is to be used.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.OpenMark">
            <summary>
            The mark of an opening group.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.CloseMark">
            <summary>
            The mark of a closing group.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.DefaultLineWeights">
            <summary>
            Default lineweights in millimeters.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.ByObjectColor">
            <summary>
            Special value used for object colors.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.CtbFile"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.CtbFile"/> class.
            </summary>
            <param name="filename">The path of the CTB file from which this object is filled.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ReadFrom(System.String)">
            <summary>
            Read the content of a CTB file.
            </summary>
            <remarks>
            This overwrites all previous settings.
            </remarks>
            <param name="filename">Path to CTB file.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ReadFrom(System.IO.Stream)">
            <summary>
            Read the content of a CTB file from a stream.
            </summary>
            <remarks>
            This overwrites all previous settings.
            </remarks>
            <param name="stream">Stream to read from.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.WriteTo(System.String)">
            <summary>
            Write this object into a CTB file.
            </summary>
            <remarks>
            An existing file will be overwritten without warning.
            </remarks>
            <param name="filename">Path of CTB file.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.WriteTo(System.IO.Stream)">
            <summary>
            Write this object in CTB format into a stream.
            </summary>
            <remarks>
            This will internally call <see cref="M:WW.Cad.Drawing.CtbFile.SortLineWeights"/>.
            </remarks>
            <param name="stream">Stream to write to.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.SortLineWeights">
            <summary>
            Sorts the line weights.
            </summary>
            <remarks>
            The line weights are sorted by number. 
            Sorting the weights might change line weight indexes in <see cref="T:WW.Cad.Drawing.CtbFile.ColorEntry"/> objects.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.GetLineWeight(System.Int32)">
            <summary>
            Get a line weight with a given index.
            </summary>
            <param name="index">
            Line weight index, minimal index is <c>1</c>,
            maximal index is <see cref="P:WW.Cad.Drawing.CtbFile.LineWeightCount"/>.
            This index is not associated with the color index!
            </param>
            <returns>The line weight in millimeter.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.SetLineWeight(System.Int32,System.Double)">
            <summary>
            Set a line weight for a given index.
            </summary>
            <param name="index">
            Line weight index, minimal index is <c>1</c>,
            maximal index is <see cref="P:WW.Cad.Drawing.CtbFile.LineWeightCount"/>
            </param>
            <param name="lineWeight">The line weight, a non-negative size in millimeters.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.GetEntry(System.Int32)">
            <summary>
            Get the color entry with a given index.
            </summary>
            <param name="colorIndex">Color index between <c>1</c> and <c>255</c>.</param>
            <returns>A color entry. Changes to this entry will be saved to the file.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ParseContent(System.String)">
            <summary>
            Parses the content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.WriteContent(WW.Cad.Drawing.CtbFile.LineWriter)">
            <summary>
            Writes the content.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.CalcAdler32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the Adler32 checksum of an byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="pos">The pos to start with.</param>
            <param name="length">The length.</param>
            <returns>Adler32 checksum.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.IgnoreLine(System.String)">
            <summary>
            Ignore a line?
            </summary>
            <param name="line">Line to check.</param>
            <returns><c>true</c> if line is ignored</returns>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ParseAciTable(System.String[],System.Int32@)">
            <summary>
            Parses the aci table.
            </summary>
            <param name="lines">The lines.</param>
            <param name="l">The current line number.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ParsePlotStyles(System.String[],System.Int32@)">
            <summary>
            Parses the plot styles.
            </summary>
            <param name="lines">The lines.</param>
            <param name="l">The current line number.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ParseLineWeights(System.String[],System.Int32@)">
            <summary>
            Parses the line weights.
            </summary>
            <param name="lines">The lines.</param>
            <param name="l">The current line number.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ExpectIndex(System.Int32,System.String,System.Int32)">
            <summary>
            Expects an index, and throws an exception if index is wrong.
            </summary>
            <param name="expected">The expected index.</param>
            <param name="key">The index key.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ExpectClose(WW.Cad.Drawing.CtbFile.IToken,System.Int32)">
            <summary>
            Expects a close token, and throws an exception otherwise.
            </summary>
            <param name="token">The token.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ParseLine(System.String[],System.Int32@)">
            <summary>
            Parses a line into a token.
            </summary>
            <param name="lines">The lines.</param>
            <param name="l">The current line (updated).</param>
            <returns>A token created from the line.</returns>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.FindSep(System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Finds a separator in a line.
            </summary>
            <param name="str">The list of possible separators.</param>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.WriteUInt(System.IO.Stream,System.UInt32)">
            <summary>
            Write an unsigned int with 4 bytes to the stream.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ReadUInt(System.IO.Stream)">
            <summary>
            Read an unsigned int with 4 bytes from the stream.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Unsigned int value.</returns>
            <exception cref="T:System.IO.IOException">On read errors.</exception>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ReadByte(System.IO.Stream)">
            <summary>
            Read an unsigned byte from the stream.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Unsigned byte value.</returns>
            <exception cref="T:System.IO.IOException">On read errors, especially unexpected end of file.</exception>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.LineWeightCount">
            <summary>
            Get the number of line weights definied in the file.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.DisplayUnit">
            <summary>
            Display unit.
            </summary>
            <remarks>
            This only influences the display of line widths.
            </remarks>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.DisplayUnit.Millimeter">
            <summary>
            Display unit: mm 
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.DisplayUnit.Inch">
            <summary>
            Display unit: inch
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.ColorPolicy">
            <summary>
            Color policy flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.ColorPolicy.Dithering">
            <summary>
            Enable dithering.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.ColorPolicy.Grayscale">
            <summary>
            Enable gray scale.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.ColorPolicy.YetUnknown">
            <summary>
            Purpose of this flag is yet unknown.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.SimpleLineType">
            <summary>
            Simple line types.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.LineCapStyle">
            <summary>
            Cap styles.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineCapStyle.Butt">
            <summary>
            Flat end.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineCapStyle.Square">
            <summary>
            Square end.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineCapStyle.Round">
            <summary>
            Round end.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineCapStyle.Diamond">
            <summary>
            Triangular end.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineCapStyle.ByObject">
            <summary>
            Use object's/entity's definition.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.LineJoinStyle">
            <summary>
            Line joins.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineJoinStyle.Miter">
            <summary>
            Miter joing.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineJoinStyle.Bevel">
            <summary>
            Bevel join.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineJoinStyle.Round">
            <summary>
            Round join.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineJoinStyle.Diamond">
            <summary>
            Triangular join.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.LineJoinStyle.ByObject">
            <summary>
            Use object's/entity's definition.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.CtbColor">
            <summary>
            Color as saved in CTB.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.CtbColor.#ctor(WW.Drawing.ArgbColor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.CtbFile.CtbColor"/> struct.
            </summary>
            <param name="color">The color.</param>
            <param name="indexed">if set to <c>true</c> the color is indexed.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.CtbColor.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.CtbFile.CtbColor"/> struct.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.CtbColor.RgbColor">
            <summary>
            Gets the RGB color.
            </summary>
            <value>The RGB color.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.CtbColor.UseObjectColor">
            <summary>
            Gets a value indicating whether to use the object's color.
            </summary>
            <value><c>true</c> to use the object's color; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.CtbColor.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.ColorEntry">
            <summary>
            One entry in the color table.
            </summary>
            <remarks>
            This defines the plotstyle settings for a given color index.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ColorEntry.#ctor(WW.Cad.Drawing.CtbFile,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.CtbFile.ColorEntry"/> class.
            </summary>
            <param name="parent">The CTB file of this entry.</param>
            <param name="index">The index of this entry.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ColorEntry.ParseFrom(System.String[],System.Int32@)">
            <summary>
            Parse the color entry from an array of lines.
            </summary>
            <param name="lines">Lines.</param>
            <param name="l">Currently active line, changed during read.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.ColorEntry.WriteTo(WW.Cad.Drawing.CtbFile.LineWriter)">
            <summary>
            Writes the color entry to a file.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.LocalizedName">
            <summary>
            Gets or sets the localized name.
            </summary>
            <value>The localized name.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <remarks>
            Alpha is ignored on setting.
            Internally CTB differs between the <see cref="P:WW.Cad.Drawing.CtbFile.ColorEntry.RgbColor">exact color</see> and a <see cref="P:WW.Cad.Drawing.CtbFile.ColorEntry.IndexedColor">best-match indexed color</see>.
            </remarks>
            <value>The color, with <see cref="F:WW.Drawing.ArgbColor.Empty"/> used for indicating to keep the object's color.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.IndexedColor">
            <summary>
            Gets the indexed color.
            </summary>
            <remarks>The indexed color is a best match color.</remarks>
            <value>Best match indexed color or <see cref="F:WW.Drawing.ArgbColor.Empty"/> for using the object's color.</value>
            <seealso cref="P:WW.Cad.Drawing.CtbFile.ColorEntry.Color"/>
            <seealso cref="P:WW.Cad.Drawing.CtbFile.ColorEntry.RgbColor"/>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.RgbColor">
            <summary>
            Gets the exact RGB color.
            </summary>
            <value>Exact RGB value or <see cref="F:WW.Drawing.ArgbColor.Empty"/> for using the object's color.</value>
            <seealso cref="P:WW.Cad.Drawing.CtbFile.ColorEntry.Color"/>
            <seealso cref="P:WW.Cad.Drawing.CtbFile.ColorEntry.IndexedColor"/>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.ColorPolicySetting">
            <summary>
            Gets or sets the color policy setting.
            </summary>
            <value>The color policy setting.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.PhysicalPenNumber">
            <summary>
            Gets or sets the physical pen number.
            </summary>
            <value>The physical pen number, from <c>0</c> to <c>32</c>, <c>0</c> indicating to use the object's value.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.VirtualPenNumber">
            <summary>
            Gets or sets the virtual pen number.
            </summary>
            <value>The virtual pen number, from <c>0</c> to <c>255</c>, <c>0</c> indicating to use the object's value.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.Screening">
            <summary>
            Gets or sets the screening.
            </summary>
            <value>The screening, from <c>0</c> (invisible) to <c>100</c> (normal).</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.LinePatternSize">
            <summary>
            Gets or sets the size of the line pattern.
            </summary>
            <value>The size of the line pattern, between <c>0.1</c> and <c>10.0</c>.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.LineType">
            <summary>
            Gets or sets the type of the line.
            </summary>
            <value>The type of the line.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.IsAdaptiveLineType">
            <summary>
            Gets or sets a value indicating to using adaptive line types.
            </summary>
            <value>
            	<c>true</c> to use adaptive line type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.LineWeightIndex">
            <summary>
            Gets or sets the index of the line weight.
            </summary>
            <remarks>
            The index maps into the line weight table of the CTB file.
            You should prefer to use <see cref="P:WW.Cad.Drawing.CtbFile.ColorEntry.LineWeight"/> because the index may 
            vary during the life time of this object, eg when the line weights are sorted.
            </remarks>
            <value>The index of the line weight (the first entry has index <c>1</c>), or a <see cref="F:WW.Cad.Drawing.CtbFile.LineWeightIndexByObject"/> indicating the objects line weight.</value>
            <seealso cref="P:WW.Cad.Drawing.CtbFile.ColorEntry.LineWeight"/>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.LineWeight">
            <summary>
            Gets or sets the line weight.
            </summary>
            <remarks>Setting an undefined line weight will throw an exception.</remarks>
            <value>Line weight or <c>null</c> to use object's line weight.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.FillStyle">
            <summary>
            Gets or sets the fill style.
            </summary>
            <value>The fill style.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.CapStyle">
            <summary>
            Gets or sets the cap style.
            </summary>
            <value>The cap style.</value>
        </member>
        <member name="P:WW.Cad.Drawing.CtbFile.ColorEntry.JoinStyle">
            <summary>
            Gets or sets the join style.
            </summary>
            <value>The join style.</value>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.TokenType">
            <summary>
            The token types.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.TokenType.Value">
            <summary>
            Value, both <see cref="P:WW.Cad.Drawing.CtbFile.IToken.Key"/> and <see cref="P:WW.Cad.Drawing.CtbFile.IToken.Value"/> are defined.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.TokenType.Open">
            <summary>
            Group opening, only <see cref="P:WW.Cad.Drawing.CtbFile.IToken.Key"/> is defined.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.CtbFile.TokenType.Close">
            <summary>
            Group closing, neither key nor value is defined.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CtbFile.LineWriter">
            <summary>
            Line writer class helping with CTB content output.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.LineWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.CtbFile.LineWriter"/> class.
            </summary>
            <param name="stream">The stream to which the content is written.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.LineWriter.WriteLine(System.Object[])">
            <summary>
            Write a line with various items.
            </summary>
            <remarks>
            This is the low-level write method to be used by tokens.
            It writes the indent, all items (directly concatenated)
            and a linefeed.
            </remarks>
            <param name="items">Items to write.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.LineWriter.OpenGroup(System.String)">
            <summary>
            Write an open group line.
            </summary>
            <param name="name">Group name.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.LineWriter.CloseGroup">
            <summary>
            Write a close group line.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.LineWriter.Write(WW.Cad.Drawing.CtbFile.IToken)">
            <summary>
            Write a token.
            </summary>
            <param name="token">Token to write.</param>
        </member>
        <member name="M:WW.Cad.Drawing.CtbFile.LineWriter.Write(System.String)">
            <summary>
            Write a string.
            </summary>
            <param name="str"></param>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfMLine">
            <summary>
            The MLine entity represents multiple parallel lines.
            </summary>
            <remarks>
            <para>
            The MLine entity represents multiple line <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segments"/> (see class <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment"/>).
            Each line segment can contain one or more parallel elements (see <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.Elements"/>).
            </para>
            <para>
            An MLine references an <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> object defining
            the number, spacing, and appearance of the parallel lines.
            </para>
            <para>
            Set the <see cref="P:WW.Cad.Model.Entities.DxfMLine.Flags"/> to <see cref="F:WW.Cad.Model.Entities.MLineFlags.HasAtLeastOneVertex"/> when creating an mline.
            </para>
            <para>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </para>
            <para>
            Unlike most entities, the <see cref="P:WW.Cad.Model.Entities.DxfMLine.ZAxis">z-axis</see> does not affect the rendering of the MLine.
            </para>
            </remarks>
            <example>
            Below an example is shown of how to create an MLine.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    // This example creates an mline consisting of 4 segments 
    // (meaning 3 sections between the segments).
    public class MLineExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfMLine mline = new DxfMLine(model);
            mline.Flags |= MLineFlags.HasAtLeastOneVertex;
            mline.StartPoint = new Point3D(1d, 2d, 0d);

            // Some helper vectors for setting the miter vectors.
            Vector3D topRight = new Vector3D(1, 1, 0);
            topRight.Normalize();
            Vector3D topLeft = new Vector3D(-1, 1, 0);
            topLeft.Normalize();

            mline.Segments.Add(
                new DxfMLine.Segment(
                    new Point3D(1d, 2d, 0d), 
                    Vector3D.XAxis, 
                    Vector3D.YAxis,
                    new DxfMLine.Segment.Element[] { 
                        new DxfMLine.Segment.Element(new double[] { -1, 0 }, null),
                        new DxfMLine.Segment.Element(new double[] { 0.5, 0 }, null)
                    }
                )
            );
            mline.Segments.Add(
                new DxfMLine.Segment(
                    new Point3D(5d, 2d, 0d), 
                    Vector3D.YAxis, 
                    topLeft,
                    new DxfMLine.Segment.Element[] { 
                        new DxfMLine.Segment.Element(new double[] { -System.Math.Sqrt(2), 0 }, null),
                        new DxfMLine.Segment.Element(new double[] { 0.5 * System.Math.Sqrt(2), 0 }, null)
                    }
                )
            );
            mline.Segments.Add(
                new DxfMLine.Segment(
                    new Point3D(5d, 5d, 0d), 
                    Vector3D.YAxis, 
                    -topRight,
                    new DxfMLine.Segment.Element[] { 
                        new DxfMLine.Segment.Element(new double[] { -System.Math.Sqrt(2), 0 }, null),
                        new DxfMLine.Segment.Element(new double[] { 0.5 * System.Math.Sqrt(2), 0 }, null)
                    }
                )
            );
            mline.Segments.Add(
                new DxfMLine.Segment(
                    new Point3D(1d, 5d, 0d), 
                    -Vector3D.XAxis, 
                    -topLeft,
                    new DxfMLine.Segment.Element[] { 
                        new DxfMLine.Segment.Element(new double[] { -System.Math.Sqrt(2), 0 }, null),
                        new DxfMLine.Segment.Element(new double[] { 0.5 * System.Math.Sqrt(2), 0 }, null)
                    }
                )
            );
            model.Entities.Add(mline);

            DxfWriter.Write("MLine Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfMLine.Segment"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMLine"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified multi line in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Alignment">
            <summary>
            Gets or sets the alignment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Closed">
            <summary>
            Gets or sets whether the mline is closed.
            When closed a closing line segment is drawn from the last segment element's last start point to 
            the start point of the first segment element.
            </summary>
            <remarks>
            Sets the <see cref="F:WW.Cad.Model.Entities.MLineFlags.Closed"/> on <see cref="P:WW.Cad.Model.Entities.DxfMLine.Flags"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.SuppressStartCaps">
            <summary>
            Gets or sets whether to suppress start caps.
            </summary>
            <remarks>
            Sets the <see cref="F:WW.Cad.Model.Entities.MLineFlags.SuppressStartCaps"/> on <see cref="P:WW.Cad.Model.Entities.DxfMLine.Flags"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfMLine.SuppressEndCaps"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.SuppressEndCaps">
            <summary>
            Gets or sets whether to suppress end caps.
            </summary>
            <remarks>
            Sets the <see cref="F:WW.Cad.Model.Entities.MLineFlags.SuppressEndCaps"/> on <see cref="P:WW.Cad.Model.Entities.DxfMLine.Flags"/>.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfMLine.SuppressStartCaps"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.ScaleFactor">
            <summary>
            Gets or sets the scale factor. The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.StartPoint">
            <summary>
            Gets or sets the start point (defined in the WCS).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.ZAxis">
            <summary>
            Gets or sets the z-axis.
            </summary>
            <remarks>
            The default value is (0, 0, 1).
            The z-axis value is ignored by the MLINE entity.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Segments">
            <summary>
            Gets the segments.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfMLine.Segment">
            <summary>
            An <see cref="T:WW.Cad.Model.Entities.DxfMLine"/> segment.
            </summary>
            <remarks>
            An <see cref="T:WW.Cad.Model.Entities.DxfMLine"/> segment is a wide line segment that starts at <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.Position"/> and
            consists of parallel <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.Elements"/>. 
            The <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.Direction"/> defines the segment direction,
            while the <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.MiterDirection"/> defines the relative placement of the elements.
            </remarks>
            <example>
            Example of how to create an MLine.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    // This example creates an mline consisting of 4 segments 
    // (meaning 3 sections between the segments).
    public class MLineExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
            
            DxfMLine mline = new DxfMLine(model);
            mline.Flags |= MLineFlags.HasAtLeastOneVertex;
            mline.StartPoint = new Point3D(1d, 2d, 0d);

            // Some helper vectors for setting the miter vectors.
            Vector3D topRight = new Vector3D(1, 1, 0);
            topRight.Normalize();
            Vector3D topLeft = new Vector3D(-1, 1, 0);
            topLeft.Normalize();

            mline.Segments.Add(
                new DxfMLine.Segment(
                    new Point3D(1d, 2d, 0d), 
                    Vector3D.XAxis, 
                    Vector3D.YAxis,
                    new DxfMLine.Segment.Element[] { 
                        new DxfMLine.Segment.Element(new double[] { -1, 0 }, null),
                        new DxfMLine.Segment.Element(new double[] { 0.5, 0 }, null)
                    }
                )
            );
            mline.Segments.Add(
                new DxfMLine.Segment(
                    new Point3D(5d, 2d, 0d), 
                    Vector3D.YAxis, 
                    topLeft,
                    new DxfMLine.Segment.Element[] { 
                        new DxfMLine.Segment.Element(new double[] { -System.Math.Sqrt(2), 0 }, null),
                        new DxfMLine.Segment.Element(new double[] { 0.5 * System.Math.Sqrt(2), 0 }, null)
                    }
                )
            );
            mline.Segments.Add(
                new DxfMLine.Segment(
                    new Point3D(5d, 5d, 0d), 
                    Vector3D.YAxis, 
                    -topRight,
                    new DxfMLine.Segment.Element[] { 
                        new DxfMLine.Segment.Element(new double[] { -System.Math.Sqrt(2), 0 }, null),
                        new DxfMLine.Segment.Element(new double[] { 0.5 * System.Math.Sqrt(2), 0 }, null)
                    }
                )
            );
            mline.Segments.Add(
                new DxfMLine.Segment(
                    new Point3D(1d, 5d, 0d), 
                    -Vector3D.XAxis, 
                    -topLeft,
                    new DxfMLine.Segment.Element[] { 
                        new DxfMLine.Segment.Element(new double[] { -System.Math.Sqrt(2), 0 }, null),
                        new DxfMLine.Segment.Element(new double[] { 0.5 * System.Math.Sqrt(2), 0 }, null)
                    }
                )
            );
            model.Entities.Add(mline);

            DxfWriter.Write("MLine Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfMLine"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.#ctor(WW.Math.Point3D,WW.Math.Vector3D,WW.Math.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.#ctor(WW.Math.Point3D,WW.Math.Vector3D,WW.Math.Vector3D,WW.Cad.Model.Entities.DxfMLine.Segment.Element[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.TransformMe(WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transforms this segment.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.CopyFrom(WW.Cad.Model.Entities.DxfMLine.Segment,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified segment in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Segment.Direction">
            <summary>
            Gets or sets direction vertex of segment starting at this position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Segment.MiterDirection">
            <summary>
            Gets or sets the miter direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Segment.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Segment.Elements">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment.Element">elements</see>.
            </summary>
            <remarks>
            Each <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment.Element"/> object corresponds to a 
            <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle.Element"/> in the <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> that
            is associated with the <see cref="T:WW.Cad.Model.Entities.DxfMLine"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfMLine.Segment.Element">
            <summary>
            An element of an <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment"/>.
            </summary>
            <remarks>
            Each <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment.Element"/> object corresponds to a 
            <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle.Element"/> in the <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> that
            is associated with the <see cref="T:WW.Cad.Model.Entities.DxfMLine"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.Element.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment.Element"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.Element.#ctor(System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfMLine.Segment.Element"/> class.
            </summary>
            <param name="parameters">
            See <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.Element.Parameters"/>. May be null.
            </param>
            <param name="areaFillParameters">
            See <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.Element.AreaFillParameters"/>. May be null.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.Element.TransformMe(System.Double,WW.Actions.CommandGroup)">
            <summary>
            Transforms me.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.Element.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfMLine.Segment.Element.CopyFrom(WW.Cad.Model.Entities.DxfMLine.Segment.Element,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified element in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Segment.Element.Parameters">
            <summary>
            Gets the element parameters.
            </summary>
            <remarks>
            The list may contain zero or more items. The first 
            value is the distance from the segment vertex along the miter line to the
            point where the line element's path intersects the miter line. The next
            value is the distance along the line element's path from the
            point defined by the first value to the actual start of the line element. The
            next is the distance from the start of the line element to the first break (or
            cut) in the line element. The successive values continue to list
            the start and stop points of the line element in this segment of the mline.
            Linetypes do not affect these value.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfMLine.Segment.Element.AreaFillParameters">
            <summary>
            Gets the area fill parameters.
            </summary>
            <remarks>
            Similar to <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.Element.Parameters"/>, 
            it describes the parameterization of the fill area for this
            mline segment. The values are interpreted identically to the 
            <see cref="P:WW.Cad.Model.Entities.DxfMLine.Segment.Element.Parameters"/>
            and when taken as a whole for all line elements in the mline segment, they
            define the boundary of the fill area for the mline segment.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.MLineAlignment">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfMLine"/> alignment.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.MLineAlignment.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.MLineAlignment.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.MLineAlignment.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.MLineFlags">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfMLine"/> flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.MLineFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.MLineFlags.HasAtLeastOneVertex">
            <summary>
            Has at least one vertex.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.MLineFlags.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.MLineFlags.SuppressStartCaps">
            <summary>
            Suppress start caps.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.MLineFlags.SuppressEndCaps">
            <summary>
            Suppress end caps.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.ViewportStatusFlags">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> status flags.
            </summary>
            <remarks>
            These status flags were introduced in dxf 15 (autocad 2000) as
            a replacement for <see cref="T:WW.Cad.Model.Tables.ViewMode"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.PerspectiveMode">
            <summary>
            Enables perspective mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.ClipFront">
            <summary>
            Enables front clipping.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.ClipBack">
            <summary>
            Enables back clipping.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.FollowUcs">
            <summary>
            Enables UCS follow.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.ClipFrontNotAtEye">
            <summary>
            Enables front clip not at eye.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.UcsIconVisible">
            <summary>
            Enables UCS icon visibility.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.UcsIconAtOrigin">
            <summary>
            Enables UCS icon at origin.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.FastZoom">
            <summary>
            Enables fast zoom.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.SnapMode">
            <summary>
            Enables snap mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.GridMode">
            <summary>
            Enables grid mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.IsometricSnapStyle">
            <summary>
            Enables isometric snap style.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.HidePlot">
            <summary>
            Enables hide plot mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.KIsoPairTop">
            <summary>
            If set and <see cref="F:WW.Cad.Model.Entities.ViewportStatusFlags.KIsoPairRight"/> is not set, then
            isopair top is enabled. 
            If both KIsoPairTop and KIsoPairRight are set,
            then isopair left is enabled.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.KIsoPairRight">
            <summary>
            If set and <see cref="F:WW.Cad.Model.Entities.ViewportStatusFlags.KIsoPairTop"/> is not set, then
            isopair right is enabled.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.LockViewPortZoom">
            <summary>
            Enables viewport zoom locking.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.Reserved">
            <summary>
            Currently always enabled.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.NonRectangularClip">
            <summary>
            Enables non-rectangular clipping.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.DisableViewPort">
            <summary>
            Turns the viewport off.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.DisplayGridBeyondLimits">
            <summary>
            Determines whether to display the grid beyond the limits.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.GridAdaptive">
            <summary>
            Is the grid adaptive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.GridSubdivisionsAllowed">
            <summary>
            Are grid subdivisions allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.ViewportStatusFlags.GridFollowUcs">
            <summary>
            Is follow dynamic UCS enabled for the grid.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.SplineFlags">
            <summary>
            Spline flags used by <see cref="T:WW.Cad.Model.Entities.DxfSpline"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags.Periodic">
            <summary>
            Periodic.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags.Rational">
            <summary>
            Rational.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags.Planar">
            <summary>
            Planar.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.SplineFlags.Linear">
            <summary>
            Linear (planar flag is also set).
            </summary>
        </member>
        <member name="T:WW.Cad.Base.NamespaceDoc">
            <summary>
            Collection of mainly low level base classes.
            The <see cref="T:WW.Cad.Base.Log"/> class is used in <see cref="T:WW.Cad.Model.DxfModel"/>.
            Access this log to find out more about the status of the read model.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Constants">
            <summary>
            Internal cad constants.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfInsert">
            <summary>
            The insert entity inserts a reference to a <see cref="T:WW.Cad.Model.Tables.DxfBlock"/>.
            </summary>
            <remarks>
            An insert can have multiple <see cref="T:WW.Cad.Model.Entities.DxfAttribute"/> objects attached to it.
            Only the attribute position is affected. Its position is affected by the inserts row/column translation,
            rotation and z-axis, but not by <see cref="P:WW.Cad.Model.Entities.DxfInsertBase.ScaleFactor">ScaleFactor</see>.
            </remarks>
            <example>
            An example of how to create and write a dxf file containing inserts.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class InsertExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);

            // Create block.
            DxfBlock block = new DxfBlock("TEST_BLOCK");
            model.Blocks.Add(block);
            block.Entities.Add(new DxfCircle(EntityColors.Blue, Point3D.Zero, 2d));
            block.Entities.Add(new DxfLine(EntityColors.Red, Point3D.Zero, new Point3D(-1, 2, 1)));
            block.Entities.Add(new DxfLine(EntityColors.Green, Point3D.Zero, new Point3D(2, 0, 1)));

            // Insert block at 3 positions.
            model.Entities.Add(new DxfInsert(block, new Point3D(1, 0, 0)));
            model.Entities.Add(new DxfInsert(block, new Point3D(3, 1, 0)));
            model.Entities.Add(new DxfInsert(block, new Point3D(2, -3, 0)));

            DxfWriter.Write("Insert Example.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfAttribute"/>
            <seealso cref="T:WW.Cad.Model.Tables.DxfBlock"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.#ctor(WW.Cad.Model.Tables.DxfBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.#ctor(WW.Cad.Model.Tables.DxfBlock,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified insert in the context of specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.AddAttribute(WW.Cad.Model.Entities.DxfAttributeDefinition,System.String)">
            <summary>
            Adds an attribute which is constructed from an <see cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/>
            and correctly transformed to reflect the current transformation settings.
            </summary>
            <param name="attdef">The attribute definition. It has to be attached to a model.</param>
            <param name="text">The text for the attribute.</param>
            <returns>The newly added attribute.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.PrepareForWrite(WW.Cad.IO.WriteContext)">
            <summary>
            Prepares for write (called after all objects received a handle).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.DrawInternal(WW.Cad.Model.Entities.DxfInsert.IDrawHandler,System.Boolean)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.HandleSpatialFiltering(WW.Math.Matrix4D,WW.Cad.Model.Entities.DxfInsert.IDrawHandler)">
            <summary>
            See whether spatial filtering is applied.
            </summary>
            <param name="blockEntityInsertionTransform">The insertion transformation of the block, not including the block's base translation</param>
            <param name="drawHandler">Draw Handler.</param>
            <returns>If <see cref="F:WW.Cad.Model.Entities.DxfInsert.SpatialFiltering.FilterPushed"/> is returned, a filter is pushed to the draw handler, which needs to be popped after drawing happened.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfInsert.CreateContextData(WW.Cad.Model.Objects.Annotations.DxfScale)">
            <summary>
            Creates the context data corresponding to the given scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>Specific DxfAnnotationScaleObjectContextData descendant</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.ColumnCount">
            <summary>
            Gets or sets the number of columns.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.ColumnSpacing">
            <summary>
            Gets or sets the column spacing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.RowCount">
            <summary>
            Gets or sets the number of rows.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.RowSpacing">
            <summary>
            Gets or sets the row spacing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.BasicBlockInsertionTransformation">
            <summary>
            Get the basic transformation with which a block is inserted.
            If this is a multiple insertion (<see cref="P:WW.Cad.Model.Entities.DxfInsert.IsMultipleInsertion"/>, 
            use <see cref="P:WW.Cad.Model.Entities.DxfInsert.BlockInsertionTransformations"/> to get all insertion 
            transformations.
            </summary>
            <remarks>
            Please keep in mind that a block may define a translation by itself, 
            which has to be used for the complete transformation which is 
            applied to each entity in the block.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.BlockInsertionTransformations">
            <summary>
            Get the multiple transformations defined by this insertion.
            This returns the transformations used for the block, with the row as the first and the 
            column as the second index. For the attributes associated with this insert use 
            <see cref="P:WW.Cad.Model.Entities.DxfInsert.AttributeInsertionTransformations"/>.
            </summary>
            <remarks>
            <para>
            This takes care of possible multiple insertions (see <see cref="P:WW.Cad.Model.Entities.DxfInsert.IsMultipleInsertion"/>).
            </para>
            <para>
            Please keep in mind that a block may define a translation by itself, 
            which has to be used for the complete transformation which is 
            applied to each entity in the block.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.AttributeInsertionTransformations">
            <summary>
            Get the insertion transformations to be applied to the attributes associated with this insertion.
            </summary>
            <remarks>
            If this is not a multiple insertion, you can use the <see cref="P:WW.Cad.Model.Entities.DxfInsertBase.Attributes">Attributes</see> 
            just as they are.
            Otherwise you'll have to use the transformations provided by this property in order to insert them
            correctly multiple times.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.IsMultipleInsertion">
            <summary>
            Is the insertion a multiple insertion inserting the block more than once?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.SpatialFilter">
            <summary>
            Get/set a possible spatial filter attached to this insert.
            </summary>
            <returns>Spatial filter or <c>null</c> if no spatial filter is attached to this insert.</returns>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.IsAnnotative">
            <summary>
            Gets or sets a value indicating whether the entity is annotative.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfInsert.SpatialFiltering">
            <summary>
            Result of handling spatial filtering.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfInsert.SpatialFiltering.ClippedAway">
            <summary>
            There is a filter, but the complete inserted block is clipped away by the filter.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfInsert.SpatialFiltering.NoFilter">
            <summary>
            There is no filter.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfInsert.SpatialFiltering.FilterNoClip">
            <summary>
            There is a filter, but it does not clip away anything.
            This often happens when stupid AutoCAD users want to add a frame around an item.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfInsert.SpatialFiltering.FilterPushed">
            <summary>
            There is a filter, and it pushed a <see cref="T:WW.Cad.Drawing.IClippingTransformer"/> to the draw context,
            so a <see cref="M:WW.Cad.Drawing.DrawContext.PopClipper"/> call is necessary.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfInsert.IDrawHandler">
            <summary>
            Interface used for abstracting the rendering implementations.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfInsert.IDrawHandler.InsertCellDrawContext">
            <summary>
            Get the local draw context valid for drawing items.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfDimensionStyleCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/> keyed collection (dimension style name can be used as indexer parameter).
            </summary>
            <remarks>
            The key is the case insensitive dimension style name.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyleCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfDimensionStyleCollection.GetKeyForItem(WW.Cad.Model.Tables.DxfDimensionStyle)">
            <summary>
            Gets the key for specified dimensionStyle.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.SnapStyle">
            <summary>
            Represents snap style.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SnapStyle.Standard">
            <summary>
            Standard snap style.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.SnapStyle.Isometric">
            <summary>
            Isometric snap style.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.LinearUnitFormat">
            <summary>Units for all decimal numbers except angular.</summary>
        </member>
        <member name="F:WW.Cad.Model.LinearUnitFormat.Scientific">
            <summary>Scientific (e.g. 1.247e+01).</summary>
        </member>
        <member name="F:WW.Cad.Model.LinearUnitFormat.Decimal">
            <summary>
            Decimal (e.g. 12.47).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LinearUnitFormat.Engineering">
            <summary>
            Engineering: shows lengths in feet and decimal inches (e.g. 1' 9.57"). 
            Drawing units are interpreted as inches.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LinearUnitFormat.Architectural">
            <summary>
            Architectural: shows lengths in feet and fractional inches (e.g. 2' 7 3/16").
            Drawing units are interpreted as inches.
            The presentation of the fraction part is determined by <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.FractionFormat"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LinearUnitFormat.Fractional">
            <summary>
            Fractional (e.g. 3/8).
            The presentation of the fraction part is determined by <see cref="P:WW.Cad.Model.Tables.DxfDimensionStyle.FractionFormat"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.LinearUnitFormat.WindowsDesktop">
            <summary>Windows desktop.</summary>
        </member>
        <member name="T:WW.Cad.Model.Text.ParagraphTextBlock">
            <summary>
            Paragraph text blocks, containing lines.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.ParagraphTextBlock.NoTabulators">
            <summary>
            Value indicating no explicite tabulators are set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.ParagraphTextBlock.StandardTextBreaker">
            <summary>
            Standard text breaker.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.#ctor(WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat,System.Double,WW.Cad.Model.Entities.LineSpacingStyle,WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="paragraphFormat">The paragraph format.</param>
            <param name="lineSpacingFactor">The line spacing factor.</param>
            <param name="lineSpacingStyle">The line spacing style.</param>
            <param name="settings">basic settings for paragraph</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.AddLine(WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Add a line to the paragraph.
            </summary>
            <param name="lineSettings">settings for line</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.AddTabulator(WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Add a tabulator to the paragraph.
            </summary>
            <param name="tabSettings">settings</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.AddText(System.String,WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Add some text to the current line.
            </summary>
            <param name="text">text to add</param>
            <param name="textSettings">settings used for the added text</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.AddBlock(WW.Cad.Model.Text.ITextBlock)">
            <summary>
            Add a text block to the current line.
            </summary>
            <param name="block">text block to add</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.GetBounds(WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounding box of this text block.
            </summary>
            <param name="whiteSpaceHandling">how to handle white space when calculating the bounds</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.Layout(WW.Math.Vector2D@,System.Double,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Lay out this block.
            </summary>
            <param name="baselinePos">current baseline position, advanced after layout</param>
            <param name="height">height of the surrounding text block</param>
            <param name="whiteSpaceHandlingFlags">The white space handling flags.</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.BreakLineBefore(System.Double,WW.Cad.Model.Text.ITextBreaker)">
            <summary>
            Break this text block before the given width.
            </summary>
            <param name="width">width before which to break the text</param>
            <param name="breaker">provider of text breaks</param>
            <returns>
            	<list type="table">
            		<item>
            			<term>an array with two elements</term>
            			<description>
                            if it was possible to break this text block into two parts
                            with the first one smaller than <c>width</c> (the first inherets the offset of this block,
                            while the seconds block's offset is unset)
                        </description>
            		</item>
            		<item>
            			<term>an array with one element</term>
            			<description>if this text block already is smaller than <c>width</c></description>
            		</item>
            		<item>
            			<term>an empty array</term>
            			<description>
                            if the text block is wider than width but it is not possible to find
                            a break position (see also <see cref="P:WW.Cad.Model.Text.ITextBlock.Breakable"/>) at all
                        </description>
            		</item>
            	</list>
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.GetPositionOf(System.Char,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the baseline start position of the first occurence of the given char.
            </summary>
            <param name="ch">char to look for in block</param>
            <returns>the position or <c>null</c> if no position was found</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.CollectTextChunks(System.Collections.Generic.ICollection{WW.Cad.Model.Text.TextChunk},WW.Math.Matrix4D,System.Int16)">
            <summary>
            Collect the text chunks.
            </summary>
            <param name="collector">collector where to add the chunks</param>
            <param name="insertionTrafo">insertion transformation</param>
            <param name="lineWeight">The line weight.</param>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.TextBreaker">
            <summary>
            Get/set the text breaker.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.Format">
            <summary>
            Get/set the paragraph format. 
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.Offset">
            <summary>
            Gets or sets the relative position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.Settings">
            <summary>
            Gets or sets the text block settings.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.Breakable">
            <summary>
            Is it possible to break this text?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphAlignment">
            <summary>
            The possible horizontal alignments of a paragraph.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphAlignment.AlignCenter">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphAlignment.AlignLeft">
            <summary>
            Left aligned.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphAlignment.AlignRight">
            <summary>
            Right aligned.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphAlignment.AlignBlock">
            <summary>
            Block aligned (space added between words).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphAlignment.AlignDistributed">
            <summary>
            Distributed aligned (space added between letters).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat">
            <summary>
            Paragraph format settings.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.#ctor(System.Double,WW.Cad.Model.Text.ParagraphTextBlock.ParagraphAlignment)">
            <summary>
            Constructor.
            </summary>
            <param name="paragraphWidth">paragraph width</param>
            <param name="alignment">paragraph alignment</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.#ctor(System.Double,WW.Cad.Model.Entities.AttachmentPoint)">
            <summary>
            Constructor.
            </summary>
            <param name="paragraphWidth">Width of the paragraph.</param>
            <param name="attachmentPoint">The attachment point.</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.#ctor(WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat)">
            <summary>
            Copy constructor.
            </summary>
            <param name="format">format to clone</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.#ctor(WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat,System.String,System.Double)">
            <summary>
            Construct a paragraph format from a \p paragraph format string.
            </summary>
            <param name="previousFormat">format of previous paragraph</param>
            <param name="definition">definition string</param>
            <param name="fontHeight">current font height</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.AddTabulator(WW.Cad.Model.Text.TabulatorStop.TabulatorType,System.String,System.Double)">
            <summary>
            Add a non-decimal tabulator.
            </summary>
            <param name="type">tabulator type</param>
            <param name="position">tabulator position in string form</param>
            <param name="scaling">scaling to be applied to position</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.AddTabulator(WW.Cad.Model.Text.TabulatorStop.TabulatorType,System.String,System.Double,System.Char)">
            <summary>
            Add a non-decimal tabulator.
            </summary>
            <param name="type">tabulator type</param>
            <param name="position">tabulator position in string form</param>
            <param name="scaling">scaling to be applied to position</param>
            <param name="decimalChar">decimal character</param>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.Alignment">
            <summary>
            Get the alignment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.ParagraphWidth">
            <summary>
            Get the paragarph width.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.Tabulators">
            <summary>
            Get the tabulators.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.LeftIndent">
            <summary>
            General left indentation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.LeftIndentFirst">
            <summary>
            Additional indentation for first line.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.RightIndent">
            <summary>
            Right indentation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.BeforeSpace">
            <summary>
            Space before paragraph.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ParagraphTextBlock.ParagraphFormat.AfterSpace">
            <summary>
            Space after paragraph.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.TextBlockVerticalAlignment">
            <summary>
            Vertical alignment.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlockVerticalAlignment.Bottom">
            <summary>
            Aligned to bottom.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlockVerticalAlignment.Middle">
            <summary>
            Aligned to middle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TextBlockVerticalAlignment.Top">
            <summary>
            Aligned to top.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfViewportEntityHeaderCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Tables.DxfViewportEntityHeader"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfViewportEntityHeaderCollection.Update(WW.Cad.Model.DxfModel)">
            <summary>
            Update the viewport entity headers.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfViewportEntityHeaderCollection.TryGetValue(System.String,WW.Cad.Model.Tables.DxfViewportEntityHeader@)">
            <summary>
            Tries to the get the item with specified name (if the name is not empty).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfViewportEntityHeaderCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a item with the specified name (if the name is not empty).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfViewportEntityHeaderCollection.Item(System.String)">
            <summary>
            Gets the first item with the specified name (if the name is not empty).
            Returns <c>null</c> if not found.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.Internal.DxfCellGeometry">
            <summary>
            Represents a cell geometry (for internal use only).
            </summary>
            <remarks>
            <para>
            This class is used internally only, this class is not intended to be created/modified by the user.
            </para>
            <para>
            This class was introduced in AutoCAD 2008.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.Internal.DxfCellGeometry.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.Internal.DxfCellGeometry.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Objects.Internal.DxfCellGeometry)">
            <summary>
            Copies the contents from specified object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellGeometry.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellGeometry.WidthWithGap">
            <summary>
            Gets or sets the width with gap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellGeometry.HeightWithGap">
            <summary>
            Gets or sets the height with gap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellGeometry.Obj">
            <summary>
            Gets or sets the object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Internal.DxfCellGeometry.CellGeometryDataCollection">
            <summary>
            Gets the cell geometry data collection.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCell2005Collection">
            <summary>
            Represents a collection of cells in a <see cref="T:WW.Cad.Model.Entities.DxfTableRow2005"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableAttribute">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Entities.DxfTable"/> attribute.
            </summary>
            <remarks>
            Each attribute definition must be defined in the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> that is associated with the table cell's content.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableCellContent"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfAttributeDefinition"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableAttribute.AttributeDefinition">
            <summary>
            Gets or sets the attribute definition.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableAttribute.Value">
            <summary>
            Gets or sets the string value.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCell2005">
            <summary>
            A <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/> cell.
            </summary>
            <example>
            This example shows how create a table, merge cells and create a custom table style.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class TableExample {
        public void CreateTableExample() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTableStyle tableStyle = new DxfTableStyle("Double bordered");
            tableStyle.DataCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.DataCellStyle.SetAllBordersColor(Colors.Green);
            tableStyle.TitleCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.ContentColor = Colors.Blue;
            model.TableStyles.Add(tableStyle);

            DxfTable table = new DxfTable(tableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 3;

            foreach (DxfTableColumn column in table.Columns) {
                column.Width = 8d;
            }

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");
            table.Rows[1].Cells[0].Contents.Add(new DxfValueFormat.String(), "Column 1 Header");
            table.Rows[1].Cells[1].Contents.Add(new DxfValueFormat.String(), "Column 2 Header");
            table.Rows[1].Cells[2].Contents.Add(new DxfValueFormat.String(), "Column 3 Header");
            table.Rows[2].Cells[0].Contents.Add(new DxfValueFormat.String(), "Text");
            table.Rows[2].Cells[0].CellStyleOverrides.ContentColor = Colors.Red;
            table.Rows[4].Cells[0].Contents.Add(DxfValueFormat.Date.CreateRegionalLongDateTime(), DateTime.Now);
            table.Rows[5].Cells[0].Contents.Add(new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal), 123.45d);

            // Merge the title row cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(0, 0, 0, 2));
            // This demonstrates a merged cell block of 3 by 2 cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(2, 0, 3, 2));

            model.Entities.Add(table);

            DxfWriter.Write("Table Example.dxf", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell2005.GetEffectiveTextHeight(WW.Cad.Model.Objects.DxfTableCellStyle)">
            <summary>
            Gets the effective text height.
            If this cell overrides the text height, the override value is returned, otherwise the cell style's value.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTableCell2005.TextHeight"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell2005.GetEffectiveTextStyle(WW.Cad.Model.Objects.DxfTableCellStyle)">
            <summary>
            Gets the effective text style.
            If this cell overrides the text style, the override value is returned, otherwise the cell style's value.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTableCell2005.TextStyle"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell2005.GetEffectiveContentColor(WW.Cad.Model.Objects.DxfTableCellStyle)">
            <summary>
            Gets the effective content color.
            If this cell overrides the content color, the override value is returned, otherwise the cell style's value.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTableCell2005.ContentColor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell2005.GetEffectiveCellAlignment(WW.Cad.Model.Objects.DxfTableCellStyle)">
            <summary>
            Gets the effective cell alignment.
            If this cell overrides the content color source, the override value is returned, otherwise the cell style's value.
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTableCell2005.CellAlignment"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell2005.HasValue(System.Boolean)">
            <summary>
            Return whether this cell has a value.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCell2005.GetFilteredOverrideFlags(System.Int32,System.Int16,System.Int16)">
            <summary>
            Filter the override flags.
            For each edge that isn't part of a cell's edges or is virtual, the override flags are cleared.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.AutoFit">
            <summary>
            Gets or sets a value indicating whether the auto fit option is set.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.MergedCellCountHorizontal">
            <summary>
            Gets or sets the number of horizontally merged cells.
            The default value is 1.
            </summary>
            <remarks>
            Set this value only for the left most cell of the merged cell block.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.MergedCellCountVertical">
            <summary>
            Gets or sets the number of vertically merged cells.
            The default value is 1.
            </summary>
            <remarks>
            Set this value only for the top most cell of the merged cell block.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.Rotation">
            <summary>
            Gets or sets the rotation (in radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.BlockOrField">
            <summary>
            Gets or sets the block or field.
            Note that in case of a block the block must also be part of the <see cref="P:WW.Cad.Model.DxfModel.Blocks"/> collection.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.BlockScale">
            <summary>
            Gets or sets the block scale.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.TextStyle">
            <summary>
            Gets or sets the text style.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfTableCell2005.GetEffectiveTextStyle(WW.Cad.Model.Objects.DxfTableCellStyle)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.TextHeight">
            <summary>
            Gets or sets the height of the text.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfTableCell2005.GetEffectiveTextHeight(WW.Cad.Model.Objects.DxfTableCellStyle)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.CellAlignment">
            <summary>
            Gets or sets the cell alignment.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfTableCell2005.GetEffectiveCellAlignment(WW.Cad.Model.Objects.DxfTableCellStyle)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.ContentColor">
            <summary>
            Gets or sets the content color.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="M:WW.Cad.Model.Entities.DxfTableCell2005.GetEffectiveContentColor(WW.Cad.Model.Objects.DxfTableCellStyle)"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.BackColor">
            <summary>
            Gets or sets the background color.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTableCell2005.IsBackColorEnabled"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.IsBackColorEnabled">
            <summary>
            Gets or sets a value indicating whether the background color is enabled.
            Leave <c>null</c> to not override the value from the table style (see <see cref="P:WW.Cad.Model.Entities.DxfTable2005.TableStyle"/>).
            </summary>
            <seealso cref="P:WW.Cad.Model.Entities.DxfTableCell2005.BackColor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.BorderTop">
            <summary>
            Gets or sets the top border overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.BorderRight">
            <summary>
            Gets or sets the right border overrides.
            </summary>
            <remarks>
            Only used for the right most cells, other cells use the left border of the cell to the right.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.BorderBottom">
            <summary>
            Gets or sets the bottom border overrides.
            </summary>
            <remarks>
            Only used for the bottom cells, other cells use the top border of the cell below.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.BorderLeft">
            <summary>
            Gets or sets the left border overrides.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.ExtendedFlags">
            <summary>
            Gets or sets the extended flags (meaning unknown).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.Table">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.DxfTable2005"/> associated with this cell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.Row">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.DxfTableRow2005"/> associated with this cell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableCell2005.Index">
            <summary>
            Gets the cell index of this cell in the <see cref="P:WW.Cad.Model.Entities.DxfTableRow2005.Cells"/> collection.
            The cell index is equal to the column index.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.TableCellType2005.Text">
            <summary>
            Before R21 only text, but from R21 onwards DxfValue.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfSequenceEnd">
            <summary>
            Represents the end of sequence entity.
            Used by AutoCAD internally.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSequenceEnd.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSequenceEnd.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfSequenceEnd.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSequenceEnd.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfSequenceEnd.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.CellStringFormat">
            <summary>
            Represents the string format for a table cell.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellStringFormat.None">
            <summary>
            Apply no formatting to the string.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellStringFormat.UpperCase">
            <summary>
            Make the string all upper case.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellStringFormat.LowerCase">
            <summary>
            Make the string all lower case.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellStringFormat.FirstCapital">
            <summary>
            Make the first letter of the string upper case.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellStringFormat.TitleCase">
            <summary>
            Make the first letter of each word upper case.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.AngularUnit">
            <summary>Angular unit.</summary>
        </member>
        <member name="F:WW.Cad.Model.AngularUnit.DecimalDegrees">
            <summary>Decimal degrees.</summary>
        </member>
        <member name="F:WW.Cad.Model.AngularUnit.DegreesMinutesSeconds">
            <summary>Degrees/minutes/seconds.</summary>
        </member>
        <member name="F:WW.Cad.Model.AngularUnit.Gradians">
            <summary>Gradians.</summary>
        </member>
        <member name="F:WW.Cad.Model.AngularUnit.Radians">
            <summary>Radians.</summary>
        </member>
        <member name="F:WW.Cad.Model.AngularUnit.SurveyorsUnits">
            <summary>Surveyors units.</summary>
        </member>
        <member name="T:WW.Cad.Model.AngularDirection">
            <summary>
            Represents angular direction: clockwise or counter clockwise.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AngularDirection.CounterClockWise">
            <summary>
            Counter clockwise.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.AngularDirection.ClockWise">
            <summary>
            Clockwise.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.OverrideLineWeightPlotStyle">
            <summary>
            Implementation of a plot style allowing to set all parameters directly.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.OverrideLineWeightPlotStyle.#ctor(System.Int16,WW.Cad.Model.Entities.IPlotPropertyOwner,WW.Cad.Drawing.DrawContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.OverrideLineWeightPlotStyle"/> class.
            </summary>
            <param name="lineWeight">The new line weight, already evaluated (not <see cref="!:LineWeight.ByBlock"/> or <see cref="!:lineWeight.ByLayer"/>.</param>
            <param name="plotPropertyOwner">The plot property owner, usually an entity.</param>
            <param name="drawContext">Its draw context.</param>
        </member>
        <member name="P:WW.Cad.Model.OverrideLineWeightPlotStyle.LineWeight">
            <summary>
            Get the line weight.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableGrip">
            <summary>
            Represents the dynamic block properties table grip.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableGrip.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableGrip.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableGrip.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableGrip.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTableGrip.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable">
            <summary>
            Represents the dynamic block properties table parameter.
            </summary>
            <remarks>
            Only single table per block.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.ColumnInformation">
            <summary>
            Gets or sets the column definition for table.
            </summary>
            <remarks>
            Size is equal to the count of columns in table.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.DataNodeId">
            <summary>
            Gets or sets the node id for Data columns.
            </summary>
            <remarks>
            In fact part of Data. Each column may have associated node id.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.Data">
            <summary>
            Gets or sets the table data.
            </summary>
            <remarks>
            Data[i][j]. i number of comumns, j number of rows.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.TableName">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.DescriptionString">
            <summary>
            Gets or sets the description of table.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.Unknown1">
            <summary>
            Gets or sets the unknow 1. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.PropertiesCanBeModifiedIndividually">
            <summary>
            Specifies whether the properties added to the grid control can be modified individually for a block reference. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.UnknownFlag2">
            <summary>
            Gets or sets the unknow flag 2. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.UnknownFlag3">
            <summary>
            Gets or sets the unknow flag 3. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockPropertiesTable.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.InventorDrawing.DxfIDBlockReference">
            <summary>
            Represents an ACIDBLOCKREFERENCE entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity for WPF.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified ole in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.IsDrawingBlock(WW.Cad.Drawing.DrawContext)">
            <summary>
            Check whether the block is drawn in the given context.
            </summary>
            <param name="context">The draw context.</param>
            <returns><c>true</c>: draw the block; <c>false</c>: skip drawing</returns>
        </member>
        <member name="P:WW.Cad.Model.InventorDrawing.DxfIDBlockReference.Viewport">
            <summary>
            Gets or sets the associated viewport.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfWipeout">
            <summary>
            Represents a wipeout.
            The wipeout entity fills the polygon defined by the BoundaryVertices using the background color.
            </summary>
            <remarks>
            <para>
            Call <see cref="M:WW.Cad.Model.Entities.DxfWipeout.SetWipeoutPolygon(System.Collections.Generic.IList{WW.Math.Point2D})"/> to set the wipeouts boundary polygon.
            This is a helper method to set the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.InsertionPoint"/>, <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis"/>, 
            <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.BoundaryVertices"/> 
            according to the specified polygon.
            </para>
            <para>
            The constructor sets the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.Size"/> to (1, 1), <see cref="T:WW.Cad.Model.Entities.ImageDisplayFlags"/> to
            <c>ImageDisplayFlags.ShowImage | ImageDisplayFlags.ShowUnalignedImage | ImageDisplayFlags.UseClippingBoundary</c>
            and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.ClippingEnabled"/> to <c>true</c>. Leave this values as is.
            </para>
            <para>
            This class was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>
            </para>
            </remarks>
            <example>
            Below is an example of how to create a wipeout to erase part of a drawing.
            <code lang="cs">
using System;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class WipeoutExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();
            
            model.Entities.Add(new DxfLine(EntityColors.Red, new Point2D(0, 5), new Point2D(10, -5)));
            model.Entities.Add(new DxfLine(EntityColors.Red, new Point2D(0, -5), new Point2D(10, 5)));
            model.Entities.Add(new DxfLine(EntityColors.Red, new Point2D(0, 0), new Point2D(10, 0)));
            model.Entities.Add(new DxfLine(EntityColors.Red, new Point2D(5, 5), new Point2D(5, -5)));

            // Use the wipeout entity to erase a part of the lines.
            // The wipeout entity fills the polygon defined by the BoundaryVertices using the background color.
            DxfWipeout wipeout = new DxfWipeout();
            wipeout.SetWipeoutPolygon(new [] {
                new Point2D(4d, 1d), 
                new Point2D(4d, -1d), 
                new Point2D(6d, -1d), 
                new Point2D(6d, 1d) 
            });
            model.Entities.Add(wipeout);

            // Do not display wipeout frames.
            DxfWipeoutVariables wipeoutVariables =
                model.DictionaryRoot.Entries.GetFirstValue("ACAD_WIPEOUT_VARS") as DxfWipeoutVariables;
            if (wipeoutVariables == null) {
                wipeoutVariables = new DxfWipeoutVariables();
                model.DictionaryRoot.Entries.Add(new DxfDictionaryEntry("ACAD_WIPEOUT_VARS", wipeoutVariables));
            }
            wipeoutVariables.DisplayFrame = false;

            DxfWriter.Write("WipeoutExample.dxf", model);
            DwgWriter.Write("WipeoutExample.dwg", model);
        }
    }
}
    </code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfWipeout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfWipeout"/> class.
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.Size"/> to (1, 1), <see cref="T:WW.Cad.Model.Entities.ImageDisplayFlags"/> to
            <c>ImageDisplayFlags.ShowImage | ImageDisplayFlags.ShowUnalignedImage | ImageDisplayFlags.UseClippingBoundary</c>
            and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.ClippingEnabled"/> to <c>true</c>. Leave this values as is.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfWipeout.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfWipeout.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfWipeout.SetWipeoutPolygon(System.Collections.Generic.IList{WW.Math.Point2D})">
            <summary>
            This is a helper method to set the <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.InsertionPoint"/>, <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.XAxis"/>, 
            <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.YAxis"/> and <see cref="P:WW.Cad.Model.Entities.DxfRasterImage.BoundaryVertices"/> according to
            the specified polygon.
            </summary>
            <example>
            Below is an example of how to create a wipeout to erase part of a drawing.
            <code lang="cs">
using System;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class WipeoutExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();
            
            model.Entities.Add(new DxfLine(EntityColors.Red, new Point2D(0, 5), new Point2D(10, -5)));
            model.Entities.Add(new DxfLine(EntityColors.Red, new Point2D(0, -5), new Point2D(10, 5)));
            model.Entities.Add(new DxfLine(EntityColors.Red, new Point2D(0, 0), new Point2D(10, 0)));
            model.Entities.Add(new DxfLine(EntityColors.Red, new Point2D(5, 5), new Point2D(5, -5)));

            // Use the wipeout entity to erase a part of the lines.
            // The wipeout entity fills the polygon defined by the BoundaryVertices using the background color.
            DxfWipeout wipeout = new DxfWipeout();
            wipeout.SetWipeoutPolygon(new [] {
                new Point2D(4d, 1d), 
                new Point2D(4d, -1d), 
                new Point2D(6d, -1d), 
                new Point2D(6d, 1d) 
            });
            model.Entities.Add(wipeout);

            // Do not display wipeout frames.
            DxfWipeoutVariables wipeoutVariables =
                model.DictionaryRoot.Entries.GetFirstValue("ACAD_WIPEOUT_VARS") as DxfWipeoutVariables;
            if (wipeoutVariables == null) {
                wipeoutVariables = new DxfWipeoutVariables();
                model.DictionaryRoot.Entries.Add(new DxfDictionaryEntry("ACAD_WIPEOUT_VARS", wipeoutVariables));
            }
            wipeoutVariables.DisplayFrame = false;

            DxfWriter.Write("WipeoutExample.dxf", model);
            DwgWriter.Write("WipeoutExample.dwg", model);
        }
    }
}
    </code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfWipeout.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfWipeout.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfWipeout.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfWipeout.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfWipeout.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfWipeout.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfIndexedColorSet">
            <summary>
            Cad color definitions.
            DXF versions older than <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/> (AutoCAD 2004) only support 255 colors.
            <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/> supports 24 bit color and transparancy.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.ColorNumberByBlock">
            <summary>
            Color number for ACI ByBlock.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.ColorNumberByLayer">
            <summary>
            Color number for ACI ByLayer.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.ColorNumberNone">
            <summary>
            Color number for unknown ACI.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.MinStandardColorIndex">
            <summary>
            The start index of the standard colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.MaxStandardColorIndex">
            <summary>
            The end index of the standard color´s interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.MinCircleColorIndex">
            <summary>
            The start index of the circle colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.MaxCircleColorIndex">
            <summary>
            The end index of the circle colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.MinGrayColorIndex">
            <summary>
            The start index of the gray colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.MaxGrayColorIndex">
            <summary>
            The end index of the gray colors interval.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMinCompDarkDarkDark">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkDarkDark"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMaxCompDarkDarkDark">
            <summary>
            The maximal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkDarkDark"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMinCompDarkDarkMedium">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkDarkMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMaxCompDarkDarkMedium">
            <summary>
            The maximal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkDarkMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMinCompDarkLightMedium">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkLightMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMaxCompDarkLightMedium">
            <summary>
            The maximal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkLightMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMinCompLightLightMedium">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">maximal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetLightLightMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMaxCompLightLightMedium">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">minimal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetLightLightMedium"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMinCompLightLightLight">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">minimal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetLightLightLight"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadMaxCompLightLightLight">
            <summary>
            The minimal <see cref="!:ArgbColor.MaxColorComponent">minimal color component</see> which makes AutoCAD
            use the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetLightLightLight"/> color set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.MaxAcadComponentDeviation">
            <summary>
            Maximal color component deviation which makes AutoCAD correct a color.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadComponentCorrection">
            <summary>
            Color component correction used by AutoCAD when colors overlap.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.CadlibClassicIndexedColors">
            <summary>
            The indexed colors CadLib used in former versions, without background color correction.
            </summary>
            <remarks>
            Obsolete: use <see cref="F:WW.Cad.Model.DxfIndexedColorSet.AcadClassicIndexedColors"/>, <see cref="F:WW.Cad.Model.DxfIndexedColorSet.AcadBlackBackgroundIndexedColors"/>, 
                      <see cref="F:WW.Cad.Model.DxfIndexedColorSet.AcadWhiteBackgroundIndexedColors"/> or the <see cref="M:WW.Cad.Model.DxfIndexedColorSet.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)"/> method
                      to create a color set for a given background color which includes AutoCAD-like color correction.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadClassicIndexedColors">
            <summary>
            The classic AutoCAD color set for indexed colors.
            </summary>
            <remarks>
            This is the color set AutoCAD was using when its background color was restricted to black.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadBlackBackgroundIndexedColors">
            <summary>
            The AutoCAD color set it is using for black or very dark backgrounds.
            </summary>
            <remarks>
            This is the same as <see cref="F:WW.Cad.Model.DxfIndexedColorSet.AcadClassicIndexedColors"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.AcadWhiteBackgroundIndexedColors">
            <summary>
            The AutoCAD color set it is using for white background.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkDarkDark">
            <summary>
            Color set type for very dark backgrounds-
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkDarkMedium">
            <summary>
            Color set type for quite dark backgrounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetDarkLightMedium">
            <summary>
             Color set type for slightly dark backgrounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetLightLightMedium">
            <summary>
            Color set type for slightly light backgrounds.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfIndexedColorSet.ColorSetLightLightLight">
            <summary>
            Color set type for very light backgrounds.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.#ctor(WW.Drawing.ArgbColor[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfIndexedColorSet"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)">
            <summary>
            Get the color set for a given background color.
            </summary>
            <param name="backgroundColor"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetObsoleteCorrectedCadlibColorSet(WW.Drawing.ArgbColor)">
            <summary>
            Create the colors like old CadLib, but apply background color correction directly.
            </summary>
            <remarks>
            Obsolete: the classic CadLib colors are incorrect, use <see cref="M:WW.Cad.Model.DxfIndexedColorSet.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)"/> instead.
            </remarks>
            <param name="backgroundColor">Background color.</param>
            <returns>Color set which avoids the background color.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetColorIndex(WW.Drawing.ArgbColor)">
            <summary>
            Get cad color index for given color, using the <see cref="F:WW.Cad.Model.DxfIndexedColorSet.AcadClassicIndexedColors">classic indexed color set</see>.
            </summary>
            <remarks>
            Obsolete: there is no fix indexed color set, instead the color of an indexed color depends on the background.
            Instead use a color set for a given background (either <see cref="F:WW.Cad.Model.DxfIndexedColorSet.AcadBlackBackgroundIndexedColors"/>, 
            <see cref="F:WW.Cad.Model.DxfIndexedColorSet.AcadWhiteBackgroundIndexedColors"/> or create one with <see cref="M:WW.Cad.Model.DxfIndexedColorSet.GetAcadIndexedColorSet(WW.Drawing.ArgbColor)"/>, and 
            use the <see cref="!:GetBestMatchingIndex"/> method.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WW.Cad.Model.DxfIndexedColorSet.GetColorIndex(WW.Cad.Base.DxfIndexedColor,WW.Drawing.ArgbColor)" -->
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetColorIndex(WW.Drawing.ArgbColor,System.Int32@)">
            <summary>
            Get cad color index for given color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetColorIndex(WW.Cad.Model.DxfIndexedColorSet,WW.Drawing.ArgbColor,System.Int32@)">
            <summary>
            Get color index which provides the best match for a given color set.
            </summary>
            <remarks>
            Obsolete: there is no one color set, the real color set depends on the background color.
            To handle this 
            </remarks>
            <param name="indexedColors">Indexed colors.</param>
            <param name="color">Color to look up.</param>
            <param name="colorDifference">Squared Euclidian color difference output</param>
            <returns>Best match.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetColorIndex(WW.Drawing.ArgbColor[],WW.Drawing.ArgbColor,System.Int32@)">
            <summary>
            Get color index which provides the best match for a given color set.
            </summary>
            <remarks>
            Obsolete: there is no one color set, the real color set depends on the background color.
            To handle this 
            </remarks>
            <param name="indexedColors">Indexed colors, at least of length 256</param>
            <param name="color">Color to look up.</param>
            <param name="colorDifference">Squared Euclidian color difference output</param>
            <returns>Best match.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetColorNumber(WW.Cad.Model.Color)">
            <summary>
            Gets the color nr as stored in a dxf file.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetEntityColor(System.Int16)">
            <summary>
            Gets the entity color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetAcadBasicColorSet(WW.Drawing.ArgbColor)">
            <summary>
            Get the basic AutoCAD-like color set, but don't do local correction.
            </summary>
            <param name="backgroundColor">Background color.</param>
            <returns>One of five basic color sets AutoCAD is using.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.GetAcadBasicColorSetType(WW.Drawing.ArgbColor)">
            <summary>
            Get the basic Acad color set type depending on a given background color.
            </summary>
            <remarks>
            To avoid overlapping colors some values in the basic sets might be shifted,
            depending on the background color.
            </remarks>
            <param name="backgroundColor">Background color.</param>
            <returns>Basic color set type.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfIndexedColorSet.MakeAcadColors(WW.Drawing.ArgbColor)">
            <summary>
            Create the colors like AutoCAD.
            </summary>
            <param name="backgroundColor">Background color.</param>
            <returns>An array of 257 colors, but indexes 0 and 256 should not be used</returns>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.SchemaItem">
            <summary>
            Represents a schema item.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.DxfRecord">
            <summary>
            Represents a data storage record.
            This object is only used in DXF files.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.DxfRecord.SchemaIndex">
            <summary>
            Gets or sets the schema index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DataStorage.DxfRecord.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfColorGradient">
            <summary>
            Represents a color gradient for a <see cref="T:WW.Cad.Model.Entities.DxfHatch">hatch</see>.
            Note that by default this instance is not <see cref="P:WW.Cad.Model.Entities.DxfColorGradient.Enabled"/>.
            Color gradients are supported from version <see cref="F:WW.Cad.Model.DxfVersion.Dxf18"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.DxfColorGradient.Empty">
            <summary>
            An empty color gradient that should be readonly, present only for facilitating writing a null color gradient to file.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfColorGradient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfColorGradient"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfColorGradient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfColorGradient"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfColorGradient.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfColorGradient.CopyFrom(WW.Cad.Model.Entities.DxfColorGradient)">
            <summary>
            Copies all properties from specified color gradient.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfColorGradient.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfColorGradient.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfColorGradient.Enabled">
            <summary>
            Gets or sets a value indicating whether this color gradient is enabled.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfColorGradient.Reserved1">
            <summary>
            Gets or sets the reserved 1 property.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfColorGradient.Angle">
            <summary>
            Gets or sets the angle (radians).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfColorGradient.Shift">
            <summary>
            Gets or sets the shift.
            A gradient has two gradient definitions, shifted and unshifted,
            this defines the blend factor.
            Value 0.0 = unshifted only, 1.0 = shifted only.        
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfColorGradient.IsSingleColorGradient">
            <summary>
            Gets or sets a value indicating whether this instance is a single color gradient.
            If <c>false</c> this is a two color gradient.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:WW.Cad.Model.Entities.DxfColorGradient.ColorTint" -->
        <member name="P:WW.Cad.Model.Entities.DxfColorGradient.GradientColors">
            <summary>
            Gets the gradient colors.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatTVertex">
            <summary>
            SAT tolerant vertex entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatVertex">
            <summary>
            SAT vertex entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatVertex.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatVertex.edge">
            <summary>Pointer to egde which uses vertex.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatVertex.point">
            <summary>Pointer to point with vertex location.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatVertex.vertexType">
            <summary>Vertex type.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatVertex.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatVertex.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatVertex.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatVertex.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatVertex.Edge">
            <summary>
            Get an edge to which this vertex belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatVertex.Point">
            <summary>
            Get the point of this vertex.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatVertex.VertexType">
            <summary>
            Get extra integer (purpose unknown).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTVertex.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTVertex.tolerance">
            <summary>Tolerance distance between tvertex and coedges.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTVertex.tolerance1">
            <summary>Some tolerance distance.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTVertex.tolerance2">
            <summary>Some tolerance distance.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTVertex.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTVertex.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTVertex.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatSubshell">
            <summary>
            SAT subshell entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSubshell.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSubshell.parentSubshell">
            <summary>Pointer to parent subshell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSubshell.nextSubshell">
            <summary>Pointer to next subshell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSubshell.childSubshell">
            <summary>Pointer to first child subshell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSubshell.firstFace">
            <summary>Pointer to first face in subshell.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatSubshell.firstWire">
            <summary>Pointer to first wire in subshell.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSubshell.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSubshell.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSubshell.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatSubshell.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatSubshell.Next">
            <summary>
            Get the next entity of the same type if this entity is a member in a list.
            </summary>
            <remarks>
            Returns <c>null</c> if this entity is not in a list or if it is the last member of the list
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatSubshell.ParentSubshell">
            <summary>
            Get the parent subshell of this subshell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatSubshell.NextSubshell">
            <summary>
            Get the next shubshell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatSubshell.ChildSubshell">
            <summary>
            Get the first child subshell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatSubshell.FirstFace">
            <summary>
            Get the first face of this subshell.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatSubshell.FirstWire">
            <summary>
            Get the first wire of this subshell.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatPoint">
            <summary>
            SAT point entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatPoint.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatPoint.location">
            <summary>The point's location.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPoint.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPoint.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPoint.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPoint.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatPoint.GetTransformedLocation(WW.Math.Matrix4D)">
            <summary>
            Get a transformed locatiopn.
            </summary>
            <param name="transformation">transformation</param>
            <returns>transformed location</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatPoint.Location">
            <summary>
            Get/set the location of this point.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSpherePrimitive">
            <summary>
            SAT sphere primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSpherePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSpherePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSpherePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatSpherePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineSingularityType">
            <summary>
            B-spline surface singularity type
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineSingularityType.BSplineSingularityTypeEnumValues">
            <summary> B-spline curve or surface type strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineSingularityType.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineSingularityType.WriteDataTo(WW.Cad.Model.Acis.ISatWriter,WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineSingularityType.BSplineSingularityTypeEnum)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Support.BSplineSingularityType.BSplineSingularityTypeEnum">
            <summary>
            B-spline curve or surface type.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatSkinSurfaceNetCurve">
            <summary>
            SAT base class for net curve used in skin surface.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatSkinSurfaceNetCurve.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SkinSupport.SatSkinSurfaceNetCurve.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarCrossSection">
            <summary>
            SAT class for fixed width var radius object.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarCrossSection.CrossSectionTypeEnumValues">
            <summary> type of cross section enum strings.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarCrossSection.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarCrossSection.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatVarCrossSection.CrossSectionType">
            <summary>
            type of cross section
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRotationSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRotationSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRotationSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRotationSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRotationSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatNetSplineSurfacePrimitive">
            <summary>
            This surface class defines a net surface between a list of curves.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatNetSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatNetSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatNetSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatNetSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatCosCurve">
            <summary>
            SAT base class for blend support cos curve primitives.
            <remarks>
            Blend support surface of Curve On Surface (COS) type
            </remarks>
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatCosCurve.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatCosCurve.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatHelixIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatHelixIntCurPrimitive.OldTagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatHelixIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatHelixIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatHelixIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatEdgeLawData">
            <summary>
            SAT class for Edge Law data.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatEdgeLawData.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatEdgeLawData.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatEdgeLawData.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatEdgeLawData.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatNullCurvePrimitive">
            <summary>
            Null curve primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatNullCurvePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatNullCurvePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatNullCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatNullCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Curves.SatNullCurvePrimitive.AddToApproxmation(WW.Cad.Model.Acis.SatEntities.SatLoop,WW.Cad.Model.Acis.SatEntities.SatCurve,WW.Cad.Model.Acis.SatEntities.SatCoedge,WW.Cad.Model.Acis.SatEntities.Primitives.Curves.ApproximatedCurve,WW.Cad.Model.Acis.Accuracy)">
            <summary>
            Add approximated points of this curve to an approximation.
            </summary>
            <param name="loop">loop to which this curve belongs</param>
            <param name="curve">curve to which this primitive belongs</param>
            <param name="coedge">coedge associated with curve</param>
            <param name="approximation">approximation</param>
            <param name="accuracy">desired accuracy of approximation</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.TSL.SatTSLAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.TSL.SatTSLAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.TSL.SatTSLColorAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.TSL.SatTSLColorAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.TSL.SatTSLColorAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.TSL.SatTSLColorAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstChamferAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstChamferAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstChamferAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstChamferAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealPCurveGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealPCurveGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealPCurveGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealPCurveGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSimGeomAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSimGeomAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSimGeomAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealAggregateSimGeomAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyePointListAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Eye.SatEyePointListAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="T:WW.Cad.IO.Dwg.DwgClassesWriter">
            <summary>
            Writes the class definitions in <see cref="P:WW.Cad.Model.DxfModel.Classes"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfShapeFileControlBuilder">
            <summary>
            Similar to DxfTableControlBuilder, but cannot use that class
            because shape files (text styles) are a little different (doesn't use keyed collection because
            the shape file name may be empty in case the text style represents a shape (rather than a font).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Polyline3D">
            <summary>
            Represents a 3D polyline primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Polyline3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline3D.#ctor(System.Collections.Generic.IList{WW.Math.Point3D},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Polyline3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline3D.#ctor(WW.Math.Geometry.Polyline3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Polyline3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline3D.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline3D.CreatePrimitive(WW.Math.Geometry.Polyline3D)">
            <summary>
            A factory method for creating a primitive for specified polyline.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Polyline3D.CreatePrimitive(System.Collections.Generic.IList{WW.Math.Point3D},System.Boolean)">
            <summary>
            A factory method for creating a primitive for specified optionally closed polyline.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline3D.Points">
            <summary>
            Gets or sets the points.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Polyline3D.Closed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Drawing.Surface.Polyline3D"/> is closed.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.PositionedCharTriangulation">
            <summary>
            Positioned <see cref="P:WW.Cad.Drawing.PositionedCharTriangulation.CharTriangulation"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ImageDrawable">
            <summary>
            Drawable for drawing an image.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ImageDrawable.#ctor(System.Drawing.Image,WW.Math.Geometry.Polyline4D,WW.Math.Geometry.Polyline4D,WW.Math.Vector4D,WW.Math.Vector4D,WW.Math.Vector4D,System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.GDI.ImageDrawable"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="clipPolygon">The clip polygon (may be null).</param>
            <param name="imageBoundary">The image boundary.</param>
            <param name="transformedOrigin">The transformed origin.</param>
            <param name="transformedXAxis">The transformed X axis.</param>
            <param name="transformedYAxis">The transformed Y axis.</param>
            <param name="color">The color.</param>
            <param name="penWidth">Width of the pen.</param>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColorContextWithFixedColor">
            <summary>
            Color context with a fixed foreground color.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.TextChunkDrawable">
            <summary>
            Draws a text chunk using Graphics.DrawString. 
            Limitation: doesn't work with true 3D transformations, so only use in 2D scenarios
            to draw crisp text using Graphics.DrawString.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.GdiDrawContext2">
            <summary>
            A GDI draw context with support for a custom transformer (might be e.g. non-linear).
            </summary>
        </member>
        <member name="T:WW.Cad.Base.DxfMessageCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Base.DxfMessage"/> elements.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.CaseInsensitiveStringComparer">
            <summary>
            Case insensitive string comparer.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.CaseInsensitiveStringComparer.Instance">
            <summary>
            A case insensitive string comparer instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.CaseInsensitiveStringComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.CaseInsensitiveStringComparer.Equals(System.String,System.String)">
            <summary>
            returns true when strings are equal (case insensitive).
            </summary>
        </member>
        <member name="M:WW.Cad.Base.CaseInsensitiveStringComparer.GetHashCode(System.String)">
            <summary>
            Returns hashcode of lower case string.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_MirrorInteractor_PickPoint1">
            <summary>
              Looks up a localized string similar to Pick the start point of the mirror line..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_MirrorInteractor_PickPoint2">
            <summary>
              Looks up a localized string similar to Pick the end point of the mirror line..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_MoveInteractor_PickBasePoint">
            <summary>
              Looks up a localized string similar to Pick the base point for moving the selection or click and drag the selection..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_MoveInteractor_PickTargetPoint">
            <summary>
              Looks up a localized string similar to Pick the target point for moving the selection..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_RotateInteractor_PickBasePoint">
            <summary>
              Looks up a localized string similar to Pick the base point for rotation..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_RotateInteractor_PickRefeferencePoint">
            <summary>
              Looks up a localized string similar to Pick the rotation reference point or enter the rotation value in degrees and press enter..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_RotateInteractor_PickTargetPoint">
            <summary>
              Looks up a localized string similar to Pick the rotation target point or enter the rotation value in degrees and press enter..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_ScaleFromBasePointInteractor_PickBasePoint">
            <summary>
              Looks up a localized string similar to Pick the base point for scaling..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_ScaleFromBasePointInteractor_PickRefeferencePoint">
            <summary>
              Looks up a localized string similar to Pick the scale reference point or enter the scale value and press enter..
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.Strings.SelectInteractor_ScaleFromBasePointInteractor_PickTargetPoint">
            <summary>
              Looks up a localized string similar to Pick the scaling target point or enter the scale value and press enter..
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.ControlPointCollection">
            <summary>
            An empty  control point collection (see <see cref="F:WW.Cad.Actions.ControlPointCollection.Empty"/>).
            </summary>
        </member>
        <member name="F:WW.Cad.Actions.ControlPointCollection.Empty">
            <summary>
            An empty control point collection (no control points can be added to it).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.BoundaryPathType">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/> <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Type">type</see> flags for <see cref="T:WW.Cad.Model.Entities.DxfHatch"/> boundary.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.HatchStyle"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.None">
            <summary>
            Default (<see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath"/> consists of <see cref="T:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.Edge">edges</see>).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.External">
            <summary>
            External.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.Polyline">
            <summary>
            Polyline2D.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.Derived">
            <summary>
            Derived.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.Textbox">
            <summary>
            Textbox. 
            </summary>
            <remarks>
            Text boxes are subtracted from the hatch, unless <see cref="F:WW.Cad.Model.Entities.BoundaryPathType.TextIsland"/> is set.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.Outermost">
            <summary>
            Outer most. 
            This is used when the <see cref="P:WW.Cad.Model.Entities.DxfHatch.HatchStyle"/> is <see cref="F:WW.Cad.Model.Entities.HatchStyle.Outer"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.NotClosed">
            <summary>
            Loop is not closed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.SelfIntersecting">
            <summary>
            Self-intersecting loop.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.TextIsland">
            <summary>
            Text loop surrounded by an even number of loops.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.Duplicate">
            <summary>
            Duplicate loop.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.IsAnnotative">
            <summary>
            The bounding area is an annotative block.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.DoesNotSupportScale">
            <summary>
            The bounding type does not support scaling
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.ForceAnnoAllVisible">
            <summary>
            Forces all annotatives to be visible
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.OrientToPaper">
            <summary>
            Orients hatch loop to paper
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BoundaryPathType.IsAnnotativeBlock">
            <summary>
            Describes if the hatch is an annotative block.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.HatchPatternType">
            <summary>
            The type of <see cref="T:WW.Cad.Model.Entities.DxfHatch">hatch</see> pattern.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.DxfHatch"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPattern"/>
            <seealso cref="T:WW.Cad.IO.PatternReader"/>
        </member>
        <member name="F:WW.Cad.Model.Entities.HatchPatternType.UserDefined">
            <summary>
            User defined.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.HatchPatternType.Predefined">
            <summary>
            Pre defined hatch pattern (pattern files not included in CadLib).
            AutoCAD stores its predefined patterns in <b>Acad.pat</b>.
            These patterns are not included in CadLib, but the file can be read 
            with <see cref="T:WW.Cad.IO.PatternReader"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.HatchPatternType.Custom">
            <summary>
            Custom hatch pattern from a pattern file.
            Custom hatch patterns are loaded from pattern files with extension .pat (see <see cref="T:WW.Cad.IO.PatternReader"/>).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.HatchStyle">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfHatch"/> style.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.BoundaryPathType"/>.
        </member>
        <member name="F:WW.Cad.Model.Entities.HatchStyle.Normal">
            <summary>
            Hatch “odd parity” area.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.HatchStyle.Outer">
            <summary>
            Hatch outermost area only.
            Only hatch areas within boundaries for which property <see cref="P:WW.Cad.Model.Entities.DxfHatch.BoundaryPath.IsOutermost"/>
            is <c>true</c> (flag <see cref="F:WW.Cad.Model.Entities.BoundaryPathType.Outermost"/> is set).
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.BoundaryPathType"/>.
        </member>
        <member name="F:WW.Cad.Model.Entities.HatchStyle.Ignore">
            <summary>
            Hatch through entire area.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.NamespaceDoc">
            <summary>
            Classes in this name space do reading and writing of dxf files.
            There is also a class for exporting images to .bmp, .tiff, .gif, .jpeg, .png.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.Severity">
            <summary>
            Represents a message severity.
            </summary>
            <seealso cref="T:WW.Cad.Base.DxfMessage"/>
        </member>
        <member name="F:WW.Cad.Base.Severity.Debug">
            <summary>
            Severity debug.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.Severity.Info">
            <summary>
            Severity info.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.Severity.Warning">
            <summary>
            Severity warning.
            </summary>
        </member>
        <member name="F:WW.Cad.Base.Severity.Error">
            <summary>
            Severity error.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.FileUtil">
            <summary>
            File utility class.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.FileUtil.GetSanitizedFileNameOrNull(System.String)">
            <summary>
            Gets a sanitized file name or null.
            </summary>
            <param name="filename">The filename.</param>
            <returns>Sanatized filename, or <c>null</c> if the filename is invalid.</returns>
        </member>
        <member name="M:WW.Cad.Base.FileUtil.GetFullFileName(System.String,System.String[])">
            <summary>
            Return full file name or null if not exist.
            </summary>
            <remarks>
            First look in path for the file, then in the current dir.
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.FileUtil.GetPath(System.String)">
            <summary>
            Get the path to look for files. Used for e.g. locating .shx files.
            First is looked in the dir of given filename, then in the assembly location.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfVersion">
            <summary>
            All supported DXF versions.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Unknown">
            <summary>
            Unknown revision.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf27">
            <summary>
            DXF revision 27 (AutoCAD 2013, AC1027).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf24">
            <summary>
            DXF revision 24.1.01 (AutoCAD 2010, AC1024).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf21">
            <summary>
            DXF revision 21.1.01 (AutoCAD 2007, AC1021).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf18">
            <summary>
            DXF revision 18.1.01 (AutoCAD 2004, AC1018).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf15">
            <summary>
            DXF revision 15.0.02 (AutoCAD 2000, 2002, AC1015).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf14">
            <summary>
            DXF revision 14.1.04 (AutoCAD release 14, AC1014).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf14Preview">
            <summary>
            DXF revision 14beta (preview of AutoCAD release 14, AC1013)
            </summary>
            <remarks>
            Don't create files with this version, 
            as 3rd party tools might have problems with it.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf13">
            <summary>
            DXF revision 13.1.01 (AutoCAD release 13, AC1012).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf12">
            <summary>
            DXF revision 11 and 12 (AC1009).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf10PlusUnofficial">
            <summary>
            Unofficial version (AC1008).
            </summary>
            <remarks>
            Don't create files with this version, 
            as 3rd party tools might have problems with it.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Dxf10">
            <summary>
            DXF revision 10 (AC1006).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfVersion.Current">
            <summary>
            Represents the current version.
            </summary>
        </member>
        <member name="T:WW.Cad.Base.BSplineD">
            <summary>
            B-Spline based on doubles.
            </summary>
            <remarks>
            Algorithms originate from "The NURBS Book".
            </remarks>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor creating default knot values.
            </summary>
            <param name="power"/>
            <param name="controlPointCount">
            If closed this is assumed to be exclusive the closing control point.
            </param>
            <param name="closed"/>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.#ctor(System.Int32,System.Double[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.#ctor(System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.IsValid(System.Int32)">
            <summary>
            This checks whether this spline is valid for a given number of control points.
            </summary>
            <param name="controlPointCount">number of control points</param>
            <returns><c>true</c>: spline is valid, <c>false</c>: spline is invalid</returns>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.GetKnotSpanIndex(System.Double)">
            <summary>
            Get knot span index of given value.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.EvaluateBasisFunctions(System.Int32,System.Double,System.Double[])">
            <summary>
            Evaluate non-vanishing basis functions.
            </summary>
            <param name="knotIndex">Knot index in knot vertex.</param>
            <param name="u">Spline parameter value.</param>
            <param name="result">should be of size <see cref="P:WW.Cad.Base.BSplineD.Power"/> + 1.</param>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.EvaluateRationalBasisFunctions(System.Int32,System.Double,System.Double[],System.Double[])">
            <summary>
            Evaluate non-vanishing rational basis functions.
            </summary>
            <remarks>
            When all weights are 1 the result is the same as for a non rational spline.
            </remarks>
            <param name="knotIndex">Knot index in knot vertex.</param>
            <param name="u">Spline parameter value.</param>
            <param name="weights">Control point weights.</param>
            <param name="result">should be of size <see cref="P:WW.Cad.Base.BSplineD.Power"/> + 1.</param>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.GetDerivativesBasisFunctions(System.Int32,System.Double,System.Double[0:,0:])">
            <summary>
            Compute the derivatives of the basis functions.
            </summary>
            <param name="knotIndex">Knot index in knot vertex.</param>
            <param name="u">Spline parameter value.</param>
            <param name="derivatives">
            Array of size [nr of knots, power + 1] for return of the coefficients of the derivatives.
            </param>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.CreateDefaultKnotValues(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates default spline knot values.
            </summary>
        </member>
        <member name="M:WW.Cad.Base.BSplineD.GetExpectedKnotCount(System.Int32,System.Int32)">
            <summary>
            Gets the expected knot count for the specified control point count and power (controlPointCount + power + 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Base.BSplineD.Power">
            <summary>
            Gets the spline power.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.BSplineD.Degree">
            <summary>
            Get the spline's degree.
            </summary>
            <remarks>
            Just another (more common) name for power.
            </remarks>
        </member>
        <member name="P:WW.Cad.Base.BSplineD.MinU">
            <summary>
            Gets the minimum valid parameter value;
            </summary>
        </member>
        <member name="P:WW.Cad.Base.BSplineD.MaxU">
            <summary>
            Gets the maximum valid parameter value.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.BSplineD.KnotValues">
            <summary>
            Spline knots.
            </summary>
        </member>
        <member name="P:WW.Cad.Base.BSplineD.KnotCount">
            <summary>
            Get the number of knots in this spline.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.VertexFlags">
            <summary>
            Flags that apply to a <see cref="T:WW.Cad.Model.Entities.DxfVertex"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.None">
            <summary>
            Empty flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.IsCurveFitVertex">
            <summary>
            Extra vertex created by curve-fitting (approximation vertex).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.HasTangent">
            <summary>
            Curve-fit tangent defined for this vertex. A curve-fit tangent
            direction of 0 may be omitted from DXF output but is significant if this
            bit is set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.Unused">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.IsSplineVertex">
            <summary>
            Spline vertex created by spline-fitting (approximation vertex).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.IsSplineFrameControlPoint">
            <summary>
            Spline frame control point.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.Is3DPolylineVertex">
            <summary>
            3D polyline vertex.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.Is3DPolygonMeshVertex">
            <summary>
            If set the vertex is part of a 3D polygon mesh. 
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.VertexFlags.IsPolyfaceMeshVertex">
            <summary>
            Polyface mesh vertex. If <see cref="F:WW.Cad.Model.Entities.VertexFlags.Is3DPolygonMeshVertex"/> is not set then
            the vertex represents a face, other wise it represents a point.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.IDictionaryEntry">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.DxfDictionary"/> entry.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.IDictionaryEntry.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.IDictionaryEntry.Dictionary">
            <summary>
            Gets or sets the dictionary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.IDictionaryEntry.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.IDictionaryEntry.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.IDictionaryEntry.ValueReferenceIsHard"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.IDictionaryEntry.ValueReferenceIsHard">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:WW.Cad.Model.Objects.IDictionaryEntry.Value"/> reference is a hard reference.
            The default value is <c>false</c>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.IDictionaryEntry.Value"/>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfImageDef">
            <summary>
            Represents an image definition as referenced by <see cref="T:WW.Cad.Model.Entities.DxfRasterImage">DxfRasterImage</see>.
            </summary>
            <example>
            Below is an example of how to create an image definition and an image.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Cad.IO;
using WW.Math;

namespace WW.Cad.Examples {
    public class ImageWriteExample {
        public static void CreateModelWithImage() {
            DxfModel model = new DxfModel();

            DxfImageDef imageDef = new DxfImageDef(model);
            imageDef.Filename = "image.png";
            imageDef.Size = new Size2D(840d, 525d);
            imageDef.DefaultPixelSize = new Size2D(1d, 1d);
            imageDef.ImageIsLoaded = true;
            model.Images.Add(imageDef);

            DxfImage image = new DxfImage();
            image.ImageDef = imageDef;
            image.InsertionPoint = new Point3D(3d, 2d, 0d);
            image.ImageDisplayFlags = ImageDisplayFlags.ShowImage;
            image.SetDefaultBoundaryVertices();
            model.Entities.Add(image);

            DxfWriter.Write("Image Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfImageDef.#ctor(WW.Cad.Model.DxfModel)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfImageDef"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfImageDef.SetBitmap(WW.Drawing.IBitmap)">
            <summary>
            Sets the bitmap.
            </summary>
            <remarks>
            Normally the bitmap gets read by CadLib based on the <see cref="P:WW.Cad.Model.Objects.DxfImageDef.Filename"/>.
            However in some cases the user might explicitly want to set the bitmap instance.
            The bitmap is not part of/embedded into the DXF/DWG file. 
            The DXF/DWG file only contains the <see cref="P:WW.Cad.Model.Objects.DxfImageDef.Filename"/> reference.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfImageDef.GetDwgObjectType(WW.Cad.IO.Dwg.DwgObjectWriter)">
            <summary>
            Gets the DWG object type constant.
            </summary>
            <param name="w">The writer.</param>
            <returns>
            Object type constant, possibly depending on version.
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfImageDef.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfImageDef.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfImageDef.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfImageDef.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified image using the specified clone context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfImageDef.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfImageDef.Filename">
            <summary>
            Gets or sets the filename.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfImageDef.Bitmap">
            <summary>
            Gets the bitmap.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfImageDef.Size">
            <summary>
            Gets or sets the image size in pixels.
            This size should match the actual bitmap size.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfImageDef.DefaultPixelSize">
            <summary>
            Gets or sets the default pixel size in AutoCAD units (see <see cref="P:WW.Cad.Model.Objects.DxfImageDef.ResolutionUnits"/>).
            The default value is (1, 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfImageDef.ResolutionUnits">
            <summary>
            Gets or sets the resolution units.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfImageDef.ImageIsLoaded">
            <summary>
            Gets or sets whether the image is loaded.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfImageDef.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfImageDef.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfCellStyleMap">
            <summary>
            A cell style map, associated with a <see cref="T:WW.Cad.Model.Objects.DxfTableStyle"/>.
            For internal use only.
            </summary>
            <remarks>
            This class was introduced in AutoCAD 2008.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfCellStyleMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfCellStyleMap"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfCellStyleMap.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfCellStyleMap.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfCellStyleMap.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies the contents from specified object.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfCellStyleMap.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns>
              <c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfCellStyleMap.CellStyles">
            <summary>
            Gets the cell styles.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfCellStyleMap.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfCellStyleMap.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfCellStyleMap.Name">
            <summary>
            Gets or sets the name (set does not do anything, the name is fixed).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.MeasurementUnits">
            <summary>
            Measurement units.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.MeasurementUnits.English">
            <summary>
            English.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.MeasurementUnits.Metric">
            <summary>
            Metric.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.SimpleTextBreaker">
            <summary>
            Text breaker which just breaks a text line depending on a single character.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.SimpleTextBreaker.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="breakRemoveChars">break characters which are removed when breaking (usually whitespace)</param>
            <param name="breakAfterChars">break characters where the break appears after the character</param>
            <param name="breakBeforeChars">break characters where the break appears before the character</param>
        </member>
        <member name="M:WW.Cad.Model.Text.SimpleTextBreaker.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="breakRemoveChars">break characters which are removed when breaking (usually whitespace)</param>
            <param name="breakAfterChars">break characters where the break appears after the character</param>
        </member>
        <member name="M:WW.Cad.Model.Text.SimpleTextBreaker.BreakBefore(System.String,System.Int32@)">
            <summary>
            Break a text before a given position.
            </summary>
            <param name="text">text to break</param>
            <param name="position">the position before which the text has to be broken,
            and the break position on return or <c>-1</c> if no break was possible</param>
            <returns>
            a pair of texts representing the broken parts of the original text or
            <c>null</c> if it was not possible to break the text before the given position
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.SimpleTextBreaker.BreakAfter(System.String,System.Int32@)">
            <summary>
            Break a text after a given position.
            </summary>
            <param name="text">text to break</param>
            <param name="position">the position before which the text has to be broken,
            and the break position on return or <c>-1</c> if no break was possible</param>
            <returns>
            a pair of texts representing the broken parts of the original text or
            <c>null</c> if it was not possible to break the text before the given position
            </returns>
        </member>
        <member name="T:WW.Cad.Model.ObjectSortingFlags">
            <summary>
            Bitmask flags to set the various object sorting types defined in AutoCAD.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.NoSorting">
            <summary>
            Don't sort any objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.ObjectSelectionSort">
            <summary>
            Sorts for object selection.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.ObjectSnapSort">
            <summary>
            Sorts for object snap.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.RedrawSort">
            <summary>
            Sorts for redraw.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.SlideSort">
            <summary>
            Sorts for MSLIDE command slide creation.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.RegenSort">
            <summary>
            Sorts for REGEN commands.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.PlottingSort">
            <summary>
            Sorts for plotting.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.PostscriptSort">
            <summary>
            Sorts for PostScript output.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ObjectSortingFlags.AllSortingMethods">
            <summary>
            Enable all sorting methods.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfPolygonSplineMesh">
            <summary>
            Represents a polygon spline mesh (bezier, 2nd or 3rd degree spline surface).
            </summary>
            <remarks>
            <para>
            The spline can be of degree 2 (quadratic) or 3 (cubic), see property <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.SplineType">SplineType</see>.
            </para>
            <para>
            The spline is defined by its <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ControlPoints"/> and its degree (<see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.SplineType">SplineType</see>).
            </para>
            <para>
            The <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ApproximationPoints"/> are derived from the control points and are required
            for rendering by programs that itself don't calculate the spline curve from the control points 
            (see method <see cref="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.RecalculateApproximationPoints(System.UInt16,System.UInt16)"/>).
            </para>
            <para>
            The polygon mesh is optionally closed in m and/or n direction.
            See properties <see cref="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.ClosedInMDirection"/> and
            <see cref="P:WW.Cad.Model.Entities.DxfPolygonMeshBase.ClosedInNDirection"/>.
            </para>
            </remarks>
            <example>
            An example of how to create and write a dxf file containing DxfPolygonSplineMesh objects.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Math;

namespace Examples {
    public class PolygonSplineMeshExample {
        public void Demonstrate()
        {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            // Create a polygon spline surface.
            DxfPolygonSplineMesh polyline6 = new DxfPolygonSplineMesh(SplineType.CubicBSpline);
            polyline6.Color = EntityColors.Green;
            polyline6.MControlPointCount = 4;
            polyline6.NControlPointCount = 4;
            polyline6.ControlPoints.Add(new DxfVertex3D(0, 4, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(0, 5, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(0, 6, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(0, 7, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(1, 4, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(1, 5, 1));
            polyline6.ControlPoints.Add(new DxfVertex3D(1, 6, 1));
            polyline6.ControlPoints.Add(new DxfVertex3D(1, 7, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(2, 4, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(2, 5, 1));
            polyline6.ControlPoints.Add(new DxfVertex3D(2, 6, 1));
            polyline6.ControlPoints.Add(new DxfVertex3D(2, 7, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(3, 4, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(3, 5, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(3, 6, 0));
            polyline6.ControlPoints.Add(new DxfVertex3D(3, 7, 0));
            model.Entities.Add(polyline6);
    
            DxfWriter.Write("WriteDxfPolyline3DTest-R14.dxf", model, false);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolyline3DSpline"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfPolygonMesh"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolygonMesh"/> class.
            </summary>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.SplineType">SplineType</see> to cubic.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.#ctor(WW.Cad.Model.Entities.SplineType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolygonMesh"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolygonMesh"/> class.
            </summary>
            <remarks>
            Sets the <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.SplineType">SplineType</see> to cubic.
            </remarks>
            <param name="mControlPointCount">Number of control points in m-direction.</param>
            <param name="nControlPointCount">Number of control points in n-direction.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.#ctor(WW.Cad.Model.Entities.SplineType,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfPolygonMesh"/> class.
            </summary>
            <param name="splineType">The spline type.</param>
            <param name="mControlPointCount">Number of control points in m-direction.</param>
            <param name="nControlPointCount">Number of control points in n-direction.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.RecalculateApproximationPoints(System.UInt16,System.UInt16)">
            <summary>
            Fills the <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ApproximationPoints"/> based on the <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ControlPoints"/> and given 
            <paramref name="mApproximationPointCount"/>, <paramref name="nApproximationPointCount"/>.
            </summary>
            <remarks>
            This method can be called explicitly to create the approximation points.
            If there are no approximation points then they will be created when writing the spline to file
            using <see cref="P:WW.Cad.Model.DxfHeader.NumberOfSplineSegments"/> + 1.
            </remarks>
            <param name="mApproximationPointCount">
            Number of points in m-direction by which to approximate the spline surface.
            </param>
            <param name="nApproximationPointCount">
            Number of points in n-direction by which to approximate the spline surface.
            </param>
            <seealso cref="P:WW.Cad.Model.DxfHeader.NumberOfSplineSegments"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified polygon spline mesh in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ExecuteDeepHelper(WW.Cad.Model.Action,System.Collections.Generic.Stack{WW.Cad.Model.DxfHandledObject})">
            <summary>
            Assigns a new handle to this object if has a zero handle.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfPolygonSplineMesh.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ControlPoints">
            <summary>
            Gets the (<see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>) control point list.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ApproximationPoints">
            <summary>
            Gets the (<see cref="T:WW.Cad.Model.Entities.DxfVertex3D"/>) approximation point list.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.MControlPointCount">
            <summary>
            Gets or sets the control point count in the M direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.NControlPointCount">
            <summary>
            Gets or sets the control point count in the N direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.SplineType">
            <summary>
            Gets or sets the spline type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.SmoothSurfaceMDensity">
            <summary>
            Gets or sets the smooth surface density in M direction.
            </summary>
            <remarks>
            This value pertains the first dimension length of <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ApproximationPoints"/>.
            The spline surface is approximated by a polygon mesh defined by the <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ApproximationPoints"/>, 
            calculated from the <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ControlPoints"/>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.SmoothSurfaceNDensity">
            <summary>
            Gets or sets the smooth surface density in N direction.
            </summary>
            <remarks>
            This value pertains the second dimension length of <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ApproximationPoints"/>.
            The spline surface is approximated by a polygon mesh defined by the <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ApproximationPoints"/>, 
            calculated from the <see cref="P:WW.Cad.Model.Entities.DxfPolygonSplineMesh.ControlPoints"/>.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfVertex2DCollection">
            <summary>
            <see cref="T:WW.Cad.Model.Entities.DxfVertex2D"/> collection.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2DCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfVertex2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2DCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2DCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2DCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.#ctor(System.Collections.Generic.IList{WW.Math.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2DCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.#ctor(WW.Math.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfVertex2DCollection"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.Add(WW.Math.Point2D)">
            <summary>
            Adds the specified vertex.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.Add(System.Double,System.Double)">
            <summary>
            Adds a vertex with specified coordinates.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.AddRange(System.Collections.Generic.IEnumerable{WW.Math.Point2D})">
            <summary>
            Adds the specified vertices.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.AddRange(WW.Math.Point2D[])">
            <summary>
            Adds the specified vertices.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfVertex2DCollection.GetIVertex2D(System.Int32)">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Entities.IVertex2D"/> object at the specified index.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.EndCaps">
            <summary>
            Represents a line's end caps.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EndCaps.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EndCaps.Round">
            <summary>
            Round.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EndCaps.Angle">
            <summary>
            Angle.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.EndCaps.Square">
            <summary>
            Square.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableBreakRowRange">
            <summary>
            Represents a table break row range. For internal use only.
            See also <see cref="T:WW.Cad.Model.Entities.DxfTableBreakData"/>.
            </summary>
            <remarks>
            This represents calculated data based on information from <see cref="T:WW.Cad.Model.Entities.DxfTableBreakHeight"/>.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableBreakData"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableBreakRowRange.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableBreakRowRange.CopyFrom(WW.Cad.Model.Entities.DxfTableBreakRowRange)">
            <summary>
            Copies the contents from specified instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakRowRange.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakRowRange.StartRowIndex">
            <summary>
            Gets or sets the start row index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfTableBreakRowRange.EndRowIndex">
            <summary>
            Gets or sets the end row index.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.CellAngleFormat">
            <summary>
            Represents the table cell angle format.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAngleFormat.None">
            <summary>
            None (e.g. 97.378).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAngleFormat.DecimalDegrees">
            <summary>
            Decimal degrees (e.g. 97).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAngleFormat.DegreesMinutesSeconds">
            <summary>
            Degrees, minutes and seconds (e.g. 97d).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAngleFormat.Gradians">
            <summary>
            Gradians (e.g. 108g).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAngleFormat.Radians">
            <summary>
            Radians (e.g. 2r).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAngleFormat.SurveyorsUnits">
            <summary>
            Surveyor's units (e.g. N 97d).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.CellAngleFormat.CurrentUnits">
            <summary>
            Current degrees (e.g. 97).
            </summary>
        </member>
        <member name="T:WW.Cad.IO.StreamUtil">
            <summary>
            Represents a class containing streaming utility methods.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.StreamUtil.CloneMemoryStream(WW.IO.PagedMemoryStream)">
            <summary>
            Clones the specified memory stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.StreamUtil.CloneToMemoryStream(System.IO.Stream,System.Int32,WW.IO.MemoryPageCache)">
            <summary>
            Clones the contents from specified source stream into a memory stream.
            Only clones from the source stream's current position onwards, length bytes long.
            </summary>
            <param name="source">The source stream.</param>
            <param name="length">The number of bytes to clone.</param>
            <param name="memoryPageCache">The memory page cache.</param>
        </member>
        <member name="T:WW.Cad.Model.ViewUtil">
            <summary>
            Helper methods for handling views.
            </summary>
            <remarks>
            The methods of this class work on <see cref="T:WW.Cad.Model.IViewDescription"/>, and all relevant view-related classes provide 
            a property which returns a proxy fulfilling this interface: 
            <see cref="P:WW.Cad.Model.Tables.DxfView.ViewDescription"/>, <see cref="P:WW.Cad.Model.Entities.DxfViewport.ViewDescription"/>, <see cref="P:WW.Cad.Model.Tables.DxfVPort.ViewDescription"/>.
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.ViewUtil.DefaultFocalLength">
            Default focal length for camera: 50 mm. 
        </member>
        <member name="F:WW.Cad.Model.ViewUtil.FilmImageWidth">
            Image width of 35mm photographic film: 36mm. 
        </member>
        <member name="F:WW.Cad.Model.ViewUtil.FilmImageHeight">
            Image width of 35mm photographic film: 24mm. 
        </member>
        <member name="M:WW.Cad.Model.ViewUtil.GetTransform(WW.Cad.Model.IViewDescription,WW.Math.Geometry.Rectangle2D,System.Boolean)">
            <summary>
            Get the transformation which maps a view into a given rectangle.
            </summary>
            <remarks>
            <para>
            Although a view might define clipping around its boundary and possibly also front and back clipping,
            the returned transformation does not care for that. Front and back clipping are rarely used, and
            the clipping around the boundary can be substituted by defining a 2D clipping region in your drawing subsystem 
            (most 2D drawing routines allow setting a clip region). Just take care that the <paramref name="targetRectangle"/>
            has the correct aspect ratio and use it also as the clipping region. 
            </para>
            </remarks>
            <param name="view">
            The view for which the display transformation is requested. 
            Various view-related classes provide a <c>ViewDescription</c>
            property which can be used as a parameter for this method.
            </param>
            <param name="targetRectangle">Target rectangle. If it does not have the aspect ratio of the view, the view is centered.</param>
            <param name="invertY">Invert the Y direction? This is necessary for screen display.</param>
            <returns>
            Transformation matrix which maps the viewport centered into the given rectangle. 
            The matrix will not be invertable for perspective views.
            </returns>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.ViewDescription"/>
            <seealse cref="P:WW.Cad.Model.Tables.DxfView.ViewDescription"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.ViewDescription"/>
        </member>
        <member name="M:WW.Cad.Model.ViewUtil.GetTransform(WW.Cad.Model.IViewDescription,WW.Math.Size2D,System.Boolean)">
            <summary>
            Get the transformation which maps a view into a rectangle of a given size.
            </summary>
            <remarks>
            <para>
            Although a view might define clipping around its boundary and possibly also front and back clipping,
            the returned transformation does not care for that. Front and back clipping are rarely used, and
            the clipping around the boundary can be substituted by defining a 2D clipping region in your drawing subsystem 
            (most 2D drawing routines allow setting a clip region). Just take care that the <paramref name="targetRectangle"/>
            has the correct aspect ratio and use it also as the clipping region. 
            </para>
            </remarks>
            <param name="view">
            The view for which the display transformation is requested. 
            Various view-related classes provide a <c>ViewDescription</c>
            property which can be used as a parameter for this method.
            </param>
            <param name="targetSize">Size of target rectangle. If it does not have the aspect ratio of the view, the view is centered.</param>
            <param name="invertY">Invert the Y direction? This is necessary for screen display.</param>
            <returns>
            Transformation matrix which maps the viewport centered into the given rectangle. 
            The matrix will not be invertable for perspective views.
            </returns>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.ViewDescription"/>
            <seealse cref="P:WW.Cad.Model.Tables.DxfView.ViewDescription"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.ViewDescription"/>
        </member>
        <member name="M:WW.Cad.Model.ViewUtil.GetTransform(WW.Cad.Model.IViewDescription,System.Double,System.Double,System.Boolean)">
            <summary>
            Get the transformation which maps a view into a rectangle of a given size.
            </summary>
            <remarks>
            <para>
            Although a view might define clipping around its boundary and possibly also front and back clipping,
            the returned transformation does not care for that. Front and back clipping are rarely used, and
            the clipping around the boundary can be substituted by defining a 2D clipping region in your drawing subsystem 
            (most 2D drawing routines allow setting a clip region). Just take care that the <paramref name="targetRectangle"/>
            has the correct aspect ratio and use it also as the clipping region. 
            </para>
            </remarks>
            <param name="view">
            The view for which the display transformation is requested. 
            Various view-related classes provide a <c>ViewDescription</c>
            property which can be used as a parameter for this method.
            </param>
            <param name="targetSize">Size of target rectangle. If it does not have the aspect ratio of the view, the view is centered.</param>
            <param name="invertY">Invert the Y direction? This is necessary for screen display.</param>
            <returns>
            Transformation matrix which maps the viewport centered into the given rectangle. 
            The matrix will not be invertable for perspective views.
            </returns>
            <seealso cref="P:WW.Cad.Model.Tables.DxfVPort.ViewDescription"/>
            <seealse cref="P:WW.Cad.Model.Tables.DxfView.ViewDescription"/>
            <seealso cref="P:WW.Cad.Model.Entities.DxfViewport.ViewDescription"/>
        </member>
        <member name="M:WW.Cad.Model.ViewUtil.GetBasicModelToViewportTransform(WW.Cad.Model.IViewDescription)">
            <summary>
            Get the basic model transformation which fits a view into its viewport.
            </summary>
            <param name="view">The view.</param>
            <returns>Basic model to viewport transformation.</returns>
        </member>
        <member name="T:WW.Cad.Model.Entities.WireTransform">
            <summary>
            Represenst a transformation that is applied to a <see cref="T:WW.Cad.Model.Entities.Wire"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.WireTransform.XAxis">
            <summary>
            Gets or sets the x-axis. The default value is (1, 0, 0).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.WireTransform.YAxis">
            <summary>
            Gets or sets the y-axis. The default value is (0, 1, 0).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.WireTransform.ZAxis">
            <summary>
            Gets or sets the z-axis. The default value is (0, 0, 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.WireTransform.Translation">
            <summary>
            Gets or sets the translation. The default value is (0, 0, 0).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.WireTransform.Scale">
            <summary>
            Gets or sets the scale factor. The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.WireTransform.HasRotation">
            <summary>
            Gets or sets a value indicating whether this instance has rotation.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.WireTransform.HasReflection">
            <summary>
            Gets or sets a value indicating whether this instance has reflection.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.WireTransform.HasShear">
            <summary>
            Gets or sets a value indicating whether this instance has shear.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.Wire">
            <summary>
            Represents a wire (used by <see cref="T:WW.Cad.Model.Entities.DxfModelerGeometry"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Wire.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Wire.SelectionMarker">
            <summary>
            Gets or sets the selection marker.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Wire.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Wire.AcisIndex">
            <summary>
            Gets or sets the ACIS index.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Wire.Points">
            <summary>
            Gets the points.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Wire.Transform">
            <summary>
            Gets or sets the transform.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.EntityEventArgs">
            <summary>
            Event args including an entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.EntityEventArgs.#ctor(WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.EntityEventArgs"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:WW.Cad.Model.Entities.EntityEventArgs.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatPhongShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatPhongShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatPhongShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatPhongShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatWire">
            <summary>
            SAT wire entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatWire.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatWire.nextWire">
            <summary>Pointer to next wire.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatWire.firstCoedge">
            <summary>Pointer to first coedge.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatWire.bodyOrShell">
            <summary>Pointer to body or shell containing wire.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatWire.subshell">
            <summary>Pointer to subshell containing wire.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatWire.containmentOuter">
            <summary>Containment.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatWire.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatWire.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatWire.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatWire.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatWire.Next">
            <summary>
            Get the next entity of the same type if this entity is a member in a list.
            </summary>
            <remarks>
            Returns <c>null</c> if this entity is not in a list or if it is the last member of the list
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatWire.NextWire">
            <summary>
            Get the next wire.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatWire.FirstCoedge">
            <summary>
            Get the first coedge belonging to this wire.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatWire.BodyOrShell">
            <summary>
            Get the body or shell to which this wire belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatWire.Subshell">
            <summary>
            Get the subshell to which this wire belongs.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatWire.ContainmentOuter">
            <summary>
            Is this wire in outer containment?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatTCoedge">
            <summary>
            SAT tcoedge entity.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatCoedge">
            <summary>
            SAT coedge entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCoedge.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCoedge.nextCoedge">
            <summary>Pointer to next coedge.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCoedge.previousCoedge">
            <summary>Pointer to previous coedge. </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCoedge.partnerCoedge">
            <summary>Pointer to partner coedge.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCoedge.edge">
            <summary>Pointer to edge on which coedge lies.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCoedge.directionReversed">
            <summary>Is the direction reversed in respect to edge enumeration?</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCoedge.loopOrWire">
            <summary>Pointer to loop or wire to which coedge belongs.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatCoedge.pcurve">
            <summary>Pointer to pcurve (not as a SatPCurve, because we don't know how to read one).</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCoedge.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCoedge.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCoedge.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatCoedge.CollectWireframes(WW.Cad.Model.Acis.IndexedWireframeCollection)">
            <summary>
            Collect all wires belonging to this entity.
            </summary>
            <param name="wires">indexed wireframe collection where to add wires</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.NextCoedge">
            <summary>
            Get the next coedge in the loop.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.PreviousCoedge">
            <summary>
            Get the previous coedge in the loop.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.PartnerCoedge">
            <summary>
            Get the partner coedge.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.Edge">
            <summary>
            Get the edge bounding this coedge.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.DirectionReversed">
            <summary>
            Is the direction of this coedge reversed?
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.LoopOrWire">
            <summary>
            Get the loop or wire to which this coedge belongs.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.Pcurve">
            <summary>
            Get the parametric curve associated with this coedge.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.StartVertex">
            <summary>
            Get the start vertex.
            </summary>
            <remarks>This takes care whether the coedge is reversed or not.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.EndVertex">
            <summary>
            Get the end vertex.
            </summary>
            <remarks>This takes care whether the coedge is reversed or not.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.StartPoint">
            <summary>
            Get the start point.
            </summary>
            <remarks>This takes care whether the coedge is reversed or not.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.EndPoint">
            <summary>
            Get the end point.
            </summary>
            <remarks>This takes care whether the coedge is reversed or not.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.StartLocation">
            <summary>
            Get the start location.
            </summary>
            <remarks>This takes care whether the coedge is reversed or not.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.EndLocation">
            <summary>
            Get the end location.
            </summary>
            <remarks>This takes care whether the coedge is reversed or not.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatCoedge.Next">
            <summary>
            Get the next entity of the same type if this entity is a member in a list.
            </summary>
            <remarks>
            Returns <c>null</c> if this entity is not in a list or if it is the last member of the list
            </remarks>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTCoedge.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTCoedge.intervalStart">
            <summary>Pointer to next coedge.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTCoedge.intervalEnd">
            <summary>Pointer to previous coedge. </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatTCoedge.curve">
            <summary>Pointer to 3d curve.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTCoedge.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTCoedge.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatTCoedge.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.SatAsmheader">
            <summary>
            SAT asmheader entity.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatAsmheader.TagName">
            <summary>
            Tag name in file.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.SatAsmheader.extentedVersion">
            <summary>
            Extented version.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatAsmheader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatAsmheader.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatAsmheader.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.SatAsmheader.RegisterToFile(WW.Cad.Model.Acis.SatFile)">
            <summary>
            Register this entity to a SAT file.
            </summary>
            <remarks>
            Most entities are not registered directly to a SAT file.
            </remarks>
            <param name="satFile">SAT file to register to</param>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.SatAsmheader.ExtentedVersion">
            <summary>
            Get the extended version information.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRuledTaperSplineSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRuledTaperSplineSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRuledTaperSplineSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRuledTaperSplineSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatRuledTaperSplineSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatImplicitSubPCurvePrimitive">
            <summary>
            SAT class for implicit parameter space curve primitives.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatImplicitSubPCurvePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatImplicitSubPCurvePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubParameterSpaceCurves.SatImplicitSubPCurvePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatProjectionIntCurPrimitive">
            <summary>
            SAT primitive. Interpolated curve.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatProjectionIntCurPrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatProjectionIntCurPrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatProjectionIntCurPrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubCurves.SatProjectionIntCurPrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawDefinition">
            <summary>
            SAT base class for Law definitions.
            <remarks>
            The sample string for the law definition:
            Law : "TRANS((TRANS(VEC(X,X2,X3),TRANS1))O(CUR(EDGE2)),TRANS3)"
            Three LawData elements are stored after law string:
                TRANS1 - data for transform
                EDGE2  - data for edge
                TRANS3 - data for transform
            </remarks>
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawDefinition.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Law.SatLawDefinition.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstBlendConstRoundAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstBlendConstRoundAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstBlendConstRoundAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Sys.SatSysBlendFaceFaceBlendConstBlendConstRoundAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealCurveGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealCurveGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealCurveGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealCurveGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameStringAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameStringAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameStringAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Generic.SatGenericNameStringAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.IO.PdfPageConfiguration">
            <summary>
            Represents a page configuration for the <see cref="T:WW.Cad.IO.PdfExporter"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.PdfPageConfiguration.#ctor(WW.Cad.Model.DxfModel,WW.Cad.Drawing.GraphicsConfig,WW.Math.Matrix4D,System.Drawing.Printing.PaperSize)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.PdfPageConfiguration"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfPageConfiguration.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfPageConfiguration.GraphicsConfig">
            <summary>
            Gets the graphics config.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfPageConfiguration.Transform">
            <summary>
            Gets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfPageConfiguration.DrawingUnitsToPdfUnits">
            <summary>
            Gets or sets the paper space to PDF scale factor 
            (used to determine the line width based on each entity's <see cref="F:WW.Cad.Model.Entities.DxfEntity.lineWeight">line weight</see>).
            The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfPageConfiguration.Layout">
            <summary>
            Gets or sets the layout.
            When <c>null</c> the model layout is exported to PDF.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfPageConfiguration.Viewports">
            <summary>
            Gets or sets the viewports.
            When <c>null</c> all the viewports of the paper space <see cref="P:WW.Cad.IO.PdfPageConfiguration.Layout"/> are exported
            if the layout is set.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.PdfPageConfiguration.PaperSize">
            <summary>
            Gets or sets the size of the paper.
            (see also <see cref="T:WW.Cad.Drawing.PaperSizes"/> and <see cref="T:System.Drawing.Printing.PaperKind"/> to
            get a paper size from a paper kind.)
            The default value is the letter format.
            </summary>
            <seealso cref="T:WW.Cad.Drawing.PaperSizes"/>
            <seealso cref="T:System.Drawing.Printing.PaperKind"/>
        </member>
        <member name="P:WW.Cad.IO.PdfPageConfiguration.ClipRectangle">
            <summary>
            Gets or sets the clip rectangle.
            The units are the same as for <see cref="P:WW.Cad.IO.PdfPageConfiguration.PaperSize"/>, in hundredths of an inch.
            The default value is null.
            </summary>
            <remarks>
            Note that the PDF x-axis points right and the y-axis points up,
            and the origin is at the bottom left. 
            The first corner of the rectangle should be the bottom left.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.FromLittleEndian(System.UInt32)">
            <summary>
            Same as ToLittleEndian (simple reverses bytes if system is big endian).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.Write(System.IO.Stream,System.UInt64)">
            <summary>
            Writes the specified value to the specified stream (in little endian byte order).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.Write(System.IO.Stream,System.Int64)">
            <summary>
            Writes the specified value to the specified stream (in little endian byte order).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.Write(System.IO.Stream,System.UInt32)">
            <summary>
            Writes the specified value to the specified stream (in little endian byte order).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.Write(System.IO.Stream,System.Int32)">
            <summary>
            Writes the specified value to the specified stream (in little endian byte order).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.Write(System.IO.Stream,System.UInt16)">
            <summary>
            Writes the specified value to the specified stream (in little endian byte order).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.Write(System.IO.Stream,System.Int16)">
            <summary>
            Writes the specified value to the specified stream (in little endian byte order).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.Write(System.IO.Stream,System.Single)">
            <summary>
            Writes the specified value to the specified stream (in little endian byte order).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Dwg.PlatformUtil.Write(System.IO.Stream,System.Double)">
            <summary>
            Writes the specified value to the specified stream (in little endian byte order).
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Builders.DxfTableBuilder.AddCell(WW.Cad.Model.Entities.TableCellType2005)">
            <summary>
            Used by DXF reader.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Builders.DxfPolylineInfo">
            <summary>
            Temporary data container until the exact type of polyline can be determined based on its Flags.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.WireframeGraphicsFactory2ColorChanger">
            <summary>
            This is a wireframe graphics factory wrapper class to forward drawing calls and change the drawable color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.WireframeGraphicsFactory2ColorChanger.#ctor(WW.Cad.Drawing.IWireframeGraphicsFactory2,System.Func{WW.Drawing.ArgbColor,WW.Drawing.ArgbColor})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.WireframeGraphicsFactoryColorChanger"/> class.
            </summary>
            <param name="graphicsFactory">The wrapped graphics factory.</param>
            <param name="colorChanger">The color changer function.</param>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsFactory2ColorChanger.GraphicsFactory">
            <summary>
            Gets the wrapped graphics factory.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.WireframeGraphicsFactory2ColorChanger.ColorChanger">
            <summary>
            Gets or sets the color changer function.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.TextLine">
            <summary>
            The <see cref="T:WW.Cad.Drawing.TextLineSection"/>s for a single line of text.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.TextLine.GetBounds(WW.Math.Bounds2D)">
            <summary>
            Get the bounds.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.TextLine.GetBounds">
            <summary>
            Get the bounds.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.TextLine.Move(WW.Math.Vector2D)">
            <summary>
            Moves the text line by specified translation.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLine.Sections">
            <summary>
            Gets the sections.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLine.Top">
            <summary>
            Gets the max top of all blocks.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLine.Bottom">
            <summary>
            Gets the min bottom of all blocks.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.TexturedTriangleList">
            <summary>
            Represents a textured triangle list primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.TexturedTriangleList.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TexturedTriangleList.RgbaBytes">
            <summary>
            Gets or sets the RGBA bytes.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TexturedTriangleList.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TexturedTriangleList.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TexturedTriangleList.Normal">
            <summary>
            Gets or sets the normal vector.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TexturedTriangleList.Triangles">
            <summary>
            Gets or sets the triangles.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TexturedTriangleList.TextureCoordinates">
            <summary>
            Gets or sets the texture coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.TexturedTriangleList.Points">
            <summary>
            Gets or sets the points.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.GraphicElementBlock2">
            <summary>
            A graphic element block in the context of one or more inserts.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementBlock2.#ctor(WW.Math.Matrix4D,WW.Cad.Model.Tables.DxfLayer,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElementBlock2"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementBlock2.Matches(WW.Cad.Model.Tables.DxfLayer,WW.Cad.Model.Entities.EntityColor,WW.Cad.Model.Tables.DxfLineType)">
            <summary>
            Determines whether this graphic element block matches
            specified by block/by layer attributes.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementBlock2.Add(WW.Cad.Drawing.Surface.IGraphicElement)">
            <summary>
            Adds the specified graphic element.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock2.GraphicElements">
            <summary>
            Gets the graphic elements.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock2.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock2.LayerEnabled">
            <summary>
            Gets or sets a value indicating whether the layer is enabled.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock2.LayerFrozen">
            <summary>
            Gets or sets a value indicating whether the layer is frozen.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock2.ByLayerColor">
            <summary>
            Gets or sets the bylayer color.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock2.ByLayerLineType">
            <summary>
            Gets or sets the bylayer line type.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock2.ByBlockColor">
            <summary>
            Gets or sets the byblock color.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock2.ByBlockLineType">
            <summary>
            Gets or sets the byblock line type.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.GraphicElement1Node">
            <summary>
            Same as <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1"/>, but can have a next node.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1Node"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1Node.#ctor(WW.Drawing.ArgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1Node"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1Node.#ctor(WW.Cad.Drawing.Surface.Geometry,WW.Drawing.ArgbColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElement1Node"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElement1Node.Accept(WW.Cad.Drawing.Surface.IGraphicElementVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElement1Node.Next">
            <summary>
            Gets or sets the next node (may be <c>null</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Polyline2D2WN">
            <summary>
            Represents a polyline based on <see cref="T:WW.Cad.Drawing.Point2D2WN"/> objects.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.Polyline2D2WN.Factory">
            <summary>
            Gets the factory.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor(System.Boolean,WW.Cad.Drawing.Point2D2WN[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{WW.Cad.Drawing.Point2D2WN})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor(WW.Cad.Drawing.Point2D2WN[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Drawing.Point2D2WN})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.#ctor(WW.Math.Geometry.Polyline{WW.Cad.Drawing.Point2D2WN})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Polyline2D2WN"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.GetLength">
            <summary>
            Gets the total length.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Polyline2D2WN.GetLength(System.Collections.Generic.IList{WW.Cad.Drawing.Point2D2WN},System.Boolean)">
            <summary>
            Gets the total length of the polyline defined by specified points.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Node">
            <summary>
            A node representing a point during editing of an entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Node"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Node.#ctor(WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Node"/> class.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Node.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Node.HighLighted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WW.Cad.Drawing.Node"/> is selected.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.BoundsCalculator">
            <summary>
            This class calculates the <see cref="T:WW.Math.Bounds3D"/> of a <see cref="T:WW.Cad.Model.DxfModel"/> or <see cref="T:WW.Cad.Model.Entities.DxfEntity"/>.
            </summary>
            <remarks>
            First call one of the <see cref="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel)"/> overloads and then the <see cref="P:WW.Cad.Drawing.BoundsCalculator.Bounds"/> property can
            be called to get the result.
            GetBounds can be called more than once, to e.g. get the bounds of a number of entities.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.BoundsCalculator"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.#ctor(WW.Math.Bounds3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.BoundsCalculator"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.#ctor(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.BoundsCalculator"/> class.
            </summary>
            <param name="graphicsConfig">The graphics configuration.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.#ctor(WW.Math.Bounds3D,WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.BoundsCalculator"/> class.
            </summary>
            <param name="bounds">The bounds to operate on.</param>
            <param name="graphicsConfig">The graphics configuration.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel)">
            <summary>
            Gets the bounds for given dxf model from entities in model space.
            </summary>
            <remarks>
            <para>
            Entities that are in paper space are not taken into account.
            </para>
            </remarks>
            <param name="model">The model to get the bounds of.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Math.Matrix4D)">
            <summary>
            Gets the bounds for given dxf model from entities in model space.
            </summary>
            <remarks>
            <para>
            Entities that are in paper space are not drawn.
            </para>
            </remarks>
            <param name="model">The model to get the bounds of.</param>
            <param name="modelTransform">The transform to apply to the model.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Cad.Model.Entities.DxfEntity)">
            <summary>
            Gets the bounds for given entity in model space.
            </summary>
            <param name="model">The model.</param>
            <param name="entity">The entity to get the bounds of.</param>
            <remarks>Entities that are in paper space are not taken into account.</remarks>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Gets the bounds for given entity in model space.
            </summary>
            <param name="model">The model.</param>
            <param name="entity">The entity to get the bounds of.</param>
            <param name="modelTransform">The transform to apply to the entity.</param>
            <remarks>Entities that are in paper space are not taken into account.</remarks>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity})">
            <summary>
            Gets the bounds for given entities in model space.
            </summary>
            <param name="model">The model.</param>
            <param name="entities">The entities to get the bounds of.</param>
            <remarks>Entities that are in paper space are not taken into account.</remarks>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Gets the bounds for given entities in model space.
            </summary>
            <param name="model">The model.</param>
            <param name="entities">The entities to get the bounds of.</param>
            <param name="modelTransform">The transform to apply to the entities.</param>
            <remarks>Entities that are in paper space are not taken into account.</remarks>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout)">
            <summary>
            Gets the bounds for given layout.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the layout's <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model.</param>
            <param name="layout">The layout to get the bounds of.</param>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Math.Matrix4D)">
            <summary>
            Gets the bounds for given layout.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the layout's <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model.</param>
            <param name="layout">The layout to get the bounds of.</param>
            <param name="postTransform">The post transform.</param>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport})">
            <summary>
            Gets the bounds for given layout using given view ports.
            </summary>
            <remarks>
            <para>
            Entities in model space are transformed to paper space according to 
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </para>
            </remarks>
            <param name="model">The model.</param>
            <param name="layout">The layout to get the bounds of.</param>
            <param name="viewports">
            The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.
            </param>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.ICollection{WW.Cad.Model.Entities.DxfViewport},WW.Math.Matrix4D)">
            <summary>
            Gets the bounds for given layout using given view ports.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout to get the bounds of.</param>
            <param name="viewports">The view ports that describe the transformations to paper space.
            Use <see cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/> to get all the viewports of a layout.</param>
            <param name="postTransform">The post transform.</param>
            <remarks>
            Entities in model space are transformed to paper space according to
            the given <see cref="T:WW.Cad.Model.Entities.DxfViewport">view ports</see>.
            Entities that are already in paper space are not affected.
            Note that the first view port in <see cref="T:WW.Cad.Model.DxfModel"/> represents paper space
            itself and should not be displayed.
            </remarks>
            <seealso cref="P:WW.Cad.Model.Objects.DxfLayout.Viewports"/>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,WW.Cad.Model.Entities.DxfEntity,WW.Math.Matrix4D)">
            <summary>
            Gets the bounds for given paper space entity on given layout.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout to get the bounds of.</param>
            <param name="paperSpaceEntity">The paper space entity (should be part of specified layout).</param>
            <param name="postTransform">The post transform.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.GetBounds(WW.Cad.Model.DxfModel,WW.Cad.Model.Objects.DxfLayout,System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfEntity},WW.Math.Matrix4D)">
            <summary>
            Gets the bounds for given paper space entities on given layout.
            </summary>
            <param name="model">The model.</param>
            <param name="layout">The layout to get the bounds of.</param>
            <param name="paperSpaceEntities">The paper space entities (should be part of specified layout).</param>
            <param name="postTransform">The post transform.</param>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.CreateGraphicsFactory">
            <summary>
            Creates a graphics factory that is used to calculate the bounds 
            (the resulting bounds will be <see cref="P:WW.Cad.Drawing.BoundsCalculator.Bounds"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.BoundsCalculator.CreateTransformingGraphicsFactory(WW.Math.Matrix4D)">
            <summary>
            Creates a transforming graphics factory that is used to calculate the bounds using
            specified transform
            (the resulting bounds will be <see cref="P:WW.Cad.Drawing.BoundsCalculator.Bounds"/>).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.BoundsCalculator.Bounds">
            <summary>
            Gets the bounds.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.CharTriangulationCache">
            <summary>
            Represents a character triangulation cache.
            </summary>
            <remarks>
            Triangulation is a computationally expensive operation, so caching avoids triangulating
            the same character many times.
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.CharTriangulationCache.GetTriangulation(WW.Math.Geometry.IShape2D,WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the triangulation for a specified font family/style and character.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.NamespaceDoc">
            <summary>
            Objects are similar to <see cref="T:WW.Cad.Model.Entities.DxfEntity">entities</see>, 
            except that they have no graphical or
            geometric meaning. All objects that are not entities 
            (namespace <see cref="N:WW.Cad.Model.Entities"/> or symbol table records
            or symbol tables (namespace <see cref="N:WW.Cad.Model.Tables"/>) are stored in this section.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.ColoredRayPath">
            <summary>
            A colored ray path (can also be a line though).
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredRayPath.#ctor(System.Nullable{WW.Math.Vector4D},WW.Math.Geometry.Segment4D,WW.Drawing.ArgbColor,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredRayPath.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredRayPath.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.ColoredRayPath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfRay">
            <summary>
            Ray entity with starting point and direction, extending to infinity on one end.
            </summary>
            <remarks>
            This entity was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf13">release 13</see>.
            </remarks>
            <example>
            An example of how to create and write a dxf file containing a ray.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class RayExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            Vector3D rayDirection = new Vector3D(1, 1, 0);
            rayDirection.Normalize();
            DxfRay ray = new DxfRay(new Point3D(0.5, 0.2, 0), rayDirection);
            model.Entities.Add(ray);
    
            DxfWriter.Write("Ray Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfRay"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.#ctor(WW.Math.Point3D,WW.Math.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfRay"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified ray in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfRay.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRay.Direction">
            <summary>
            Gets or sets the direction (unit length vector).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRay.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRay.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfRay.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.StandardFlags">
            <summary>
            Standard flags for tables (e.g. <see cref="T:WW.Cad.Model.Tables.DxfDimensionStyle"/>).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.StandardFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.StandardFlags.IsExternallyDependent">
            <summary>
            If set, view is externally dependent on an xref.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.StandardFlags.IsResolvedExternalRef">
            <summary>
            If both this flag and <see cref="F:WW.Cad.Model.Tables.StandardFlags.IsExternallyDependent"/> are set, the externally dependent xref
            has been successfully resolved.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.StandardFlags.IsReferenced">
            <summary>
            If set, the table entry was referenced by at least one entity in the
            drawing the last time the drawing was edited.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PenAndBrush.InitThreadStatics">
            <summary>
            Must be called once per thread.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.AlternateUnitFormat">
            <summary>
            Units format for alternate units of all dimension style families except angular.
            The main difference with <see cref="T:WW.Cad.Model.LinearUnitFormat"/> is that the architectural and fractional
            unit formats are combined with the <see cref="T:WW.Cad.Model.FractionFormat"/> flag, but only
            allowing stacked and not stacked (so diagonal is not possible).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.None">
            <summary>None.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.Scientific">
            <summary>Scientific.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.Decimal">
            <summary>Decimal.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.Engineering">
            <summary>Engineering.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.ArchitecturalStacked">
            <summary>Architectural (stacked).</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.FractionalStacked">
            <summary>Fractional (stacked).</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.Architectural">
            <summary>Architectural (not stacked, numerator and denominator on single line).</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.Fractional">
            <summary>Fractional (not stacked, numerator and denominator on single line)</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AlternateUnitFormat.WindowsDesktop">
            <summary>Windows desktop.</summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.AssociativeDimensioning">
            <summary>Associative dimensioning (only in <see cref="T:WW.Cad.Model.DxfHeader"/> section).</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AssociativeDimensioning.DrawIndividualLines">
            <summary>Draw individual lines.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.AssociativeDimensioning.CreateAssociativeDimensioning">
            <summary>Create associative dimensioning.</summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.ArrowTextFit">
            <summary>
            DxfDimension variable: Controls dimension text and arrow placement when space is
            not sufficient to place both within the extension lines (only in <see cref="T:WW.Cad.Model.DxfHeader"/>).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ArrowTextFit.TextAndArrowsOutside">
            <summary>Place both text and arrows outside extension lines.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ArrowTextFit.MoveArrowsBeforeText">
            <summary>Move arrows first, then text.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ArrowTextFit.MoveTextBeforeArrows">
            <summary>Move texts firstm then arrows.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ArrowTextFit.MoveBest">
            <summary>Move either text or arrows, whichever fits best</summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.TextAlignment">
            <summary>Horizontal dimension text position.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextAlignment.Centered">
            <summary>Above dimension line and center-justified between extension lines.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextAlignment.Left">
            <summary>Above dimension line and next to first extension line.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextAlignment.Right">
            <summary>Above dimesnion line and next to second extension line.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextAlignment.LeftCentered">
            <summary>Above and center-justified to first extension line.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextAlignment.RightCentered">
            <summary>Above and center-justified to second extension line.</summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.TextMovement">
            <summary>DxfDimension text movement rules.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextMovement.MoveLineWithText">
            <summary>Moves the dimension line with dimension text.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextMovement.AddLeaderWhenTextMoved">
            <summary>Adds a leader when dimension text is moved.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.TextMovement.FreeTextPosition">
            <summary>Allows text to be moved freely without a leader.</summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.ToleranceAlignment">
            <summary>Tolerance alignment.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ToleranceAlignment.Top">
            <summary>Top.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ToleranceAlignment.Middle">
            <summary>Middle.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.ToleranceAlignment.Bottom">
            <summary>Bottom.</summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.CursorUpdate">
            <summary>Cursor functionality for user positioned text.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.CursorUpdate.ControlsLinePosition">
            <summary>Controls only the dimension line location.</summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.CursorUpdate.ControlsTextAndLinePosition">
            <summary>Controls text position as well as the dimension line location.</summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfUcs">
            <summary>
            User coordinate system.
            </summary>
            <remarks>
            A UCS must have a <see cref="P:WW.Cad.Model.Tables.DxfUcs.Name"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> class.
            </summary>
            <remarks>
            Note that a UCS must have a <see cref="P:WW.Cad.Model.Tables.DxfUcs.Name"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.#ctor(System.String,WW.Math.Point3D,WW.Math.Vector3D,WW.Math.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfUcs"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the UCS.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.GetOrigin(WW.Cad.Model.OrthographicType)">
            <summary>
            Get the origin + relative origin associated with given orthographic.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.GetRelativeOrigin(WW.Cad.Model.OrthographicType)">
            <summary>
            Get the relative origin associated with given orthographic.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.SetRelativeOrigin(WW.Cad.Model.OrthographicType,WW.Math.Vector3D)">
            <summary>
            Set the relative origin associated with given orthographic.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfUcs.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified UCS in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.Elevation">
            <summary>
            Gets or sets the elevation.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.Tables.DxfUcs.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            <para>Available in all supported versions.</para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this line type is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this line type is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this line type is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.OrthographicViewType">
            <summary>
            Gets or sets the orthograohic view type of this UCS.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.OrthographicReference">
            <summary>
            Gets or sets the orthograpic reference of this UCS.
            The orthographic reference is the UCS that the orthographic UCS is relative to.
            If <c>null</c> the orthografic UCS is relative to WCS.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.OrthographicBackDOrigin">
            <summary>
            Gets or sets the relative origin associated with <see cref="F:WW.Cad.Model.OrthographicType.Back"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.OrthographicBottomDOrigin">
            <summary>
            Gets or sets the relative origin associated with <see cref="F:WW.Cad.Model.OrthographicType.Bottom"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.OrthographicFrontDOrigin">
            <summary>
            Gets or sets the relative origin associated with <see cref="F:WW.Cad.Model.OrthographicType.Front"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.OrthographicLeftDOrigin">
            <summary>
            Gets or sets the relative origin associated with <see cref="F:WW.Cad.Model.OrthographicType.Left"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.OrthographicRightDOrigin">
            <summary>
            Gets or sets the relative origin associated with <see cref="F:WW.Cad.Model.OrthographicType.Right"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.OrthographicTopDOrigin">
            <summary>
            Gets or sets the relative origin associated with <see cref="F:WW.Cad.Model.OrthographicType.Top"/>.
            </summary>
            <remarks>Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15"/>, not available in earlier versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.XAxis">
            <summary>
            Gets or sets the x-axis.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfUcs.YAxis">
            <summary>
            Gets or sets the y-axis.
            </summary>
            <remarks>Available in all supported versions.</remarks>
        </member>
        <member name="T:WW.Cad.Model.ShadePlotMode">
            <summary>
            Shade plot mode for <see cref="T:WW.Cad.Model.Entities.DxfViewport"/> or <see cref="T:WW.Cad.Model.Objects.DxfPlotSettings"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadePlotMode.AsDisplayed">
            <summary>
            As displayed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadePlotMode.Wireframe">
            <summary>
            Wire frame.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadePlotMode.Hidden">
            <summary>
            Hidden.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ShadePlotMode.Rendered">
            <summary>
            Rendered.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.PointPath">
            <summary>
            A drawable point.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PointPath.#ctor(WW.Math.Vector4D)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PointPath.Draw(System.Drawing.Graphics,WW.Cad.Drawing.GDI.PenAndBrush,System.Boolean,WW.Math.Matrix4D,WW.Cad.Drawing.GDI.IColorContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PointPath.Draw(System.Drawing.Graphics,WW.Drawing.Rasterizer2D,WW.Cad.Drawing.GDI.PenAndBrush,System.Boolean,WW.Math.Matrix4D,WW.Cad.Drawing.GDI.IColorContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PointPath.Draw(System.Drawing.Drawing2D.GraphicsPath,System.Boolean,WW.Math.Matrix4D)">
            <summary>
            Draw onto given graphics path.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.PointPath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.ShxBigFont1_0Reader">
            <summary>
            reader for shx big font 1.1 files.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ShxBigFont1_0Reader.#ctor(System.IO.BinaryReader,System.Text.Encoding,WW.Cad.Model.Entities.ShxFile)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.ShxBigFont1_0Reader.Read">
            <summary>
            Read shapes into shape file.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.Group">
            <summary>
            Dxf group containing group code and value.
            </summary>
        </member>
        <member name="F:WW.Cad.IO.Group.Empty">
            <summary>
            The empty group.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Group.#ctor(System.Int32,System.Object,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Group.#ctor(System.Int32,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Group.GetValueString(System.Int32)">
            <summary>
            Gets the value string.
            </summary>
            <param name="baseCode">The base code (e.g. 5009 for Point3D's Y and Z coordinates).</param>
        </member>
        <member name="M:WW.Cad.IO.Group.ToString">
            <summary>
            String representation.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.Group.Equals(System.Object)">
            <summary>Is other object equal to this one?</summary>
        </member>
        <member name="M:WW.Cad.IO.Group.GetHashCode">
            <summary>Is other object equal to this one?</summary>
        </member>
        <member name="M:WW.Cad.IO.Group.op_Equality(WW.Cad.IO.Group,WW.Cad.IO.Group)">
            <summary>Are given two groups equal?</summary>
        </member>
        <member name="M:WW.Cad.IO.Group.op_Inequality(WW.Cad.IO.Group,WW.Cad.IO.Group)">
            <summary>Are given two groups unequal?</summary>
        </member>
        <member name="P:WW.Cad.IO.Group.Code">
            <summary>
            Group code.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Group.Value">
            <summary>
            Group value.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Group.ValueString">
            <summary>
            Value string.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Group.Int16">
            <summary>
            Gets the value as a short. 
            Needed because ushort/short definitions of DXF are pretty loose.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Group.UInt16">
            <summary>
            Gets the value as a ushort. 
            Needed because ushort/short definitions of DXF are pretty loose.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLineType">
            <summary>
            Represents a line type that can be applied to a <see cref="T:WW.Cad.Model.Entities.DxfEntity">entity</see> (property <see cref="P:WW.Cad.Model.Entities.DxfEntity.LineType"/>).
            </summary>
            <remarks>
            <para>
            A line type must have a <see cref="P:WW.Cad.Model.Tables.DxfLineType.Name"/>.
            </para>
            <para>
            The appearance of the line type is defined by the <see cref="P:WW.Cad.Model.Tables.DxfLineType.Elements"/> property.
            Each element has a <see cref="P:WW.Cad.Model.Tables.DxfLineType.Element.Length">Length</see> property.
            A negative value represents a space, zero represents a dot, a positive value represents a line segment.
            </para>
            <para>
            There are a few predefined line types: 
            <see cref="P:WW.Cad.Model.DxfModel.ContinuousLineType"/>,
            <see cref="P:WW.Cad.Model.DxfModel.ByBlockLineType"/> and
            <see cref="P:WW.Cad.Model.DxfModel.ByLayerLineType"/>.
            </para>
            </remarks>
            <example>
            Below is an example of how to a create line type and apply it to a circle.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace WW.Cad.Test.Examples {
    public class DxfLineTypeExample {
        public void DemonstrateDxfLineTypes() {
            DxfModel model = new DxfModel(DxfVersion.Dxf15);

            // A dash length of 0.5, followed by a space of 0.3.
            DxfLineType dashedLineType = new DxfLineType("Dashed", 0.5d, -0.3d);
            model.LineTypes.Add(dashedLineType);

            // A dash length of 0.5, followed by a space of 0.3, 
            // followed by a dot, followed by a space of 0.2.
            DxfLineType dashDotLineType = new DxfLineType("Dash dot", 0.5d, -0.3d, 0d, -0.2d);
            model.LineTypes.Add(dashDotLineType);

            // A complex line type.
            DxfLineType complexLineType = new DxfLineType("-- D - S");
            {
                DxfLineType.Element element = new DxfLineType.Element();
                element.Length = 2d;
                complexLineType.Elements.Add(element);
            }
            {
                DxfLineType.Element element = new DxfLineType.Element();
                element.Text = "D";
                element.IsText = true;
                element.TextStyle = model.DefaultTextStyle;
                complexLineType.Elements.Add(element);
            }
            {
                DxfLineType.Element element = new DxfLineType.Element();
                element.Length = 1d;
                complexLineType.Elements.Add(element);
            }
            {
                DxfLineType.Element element = new DxfLineType.Element();
                element.Text = "S";
                element.IsText = true;
                element.TextStyle = model.DefaultTextStyle;
                complexLineType.Elements.Add(element);
            }
            model.LineTypes.Add(complexLineType);

            DxfCircle circle1 = new DxfCircle(new Point2D(0d, 0d), 10d);
            circle1.LineType = dashedLineType;
            model.Entities.Add(circle1);

            DxfCircle circle2 = new DxfCircle(new Point2D(15d, 0d), 10d);
            circle2.LineType = dashDotLineType;
            model.Entities.Add(circle2);

            DxfLine line = new DxfLine();
            line.Start = new Point3D(-10d, -2d, 0d);
            line.End = new Point3D(30d, -2d, 0d);
            line.LineType = complexLineType;
            model.Entities.Add(line);

            DxfWriter.Write("LineType Example.dxf", model);
            DwgWriter.Write("LineType Example.dwg", model);
        }
    }
}
</code>
            </example>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.LineType"/>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLineType.LineTypeNameContinuous">
            <summary>
            The name for line type Continuous. 
            See also <see cref="P:WW.Cad.Model.DxfModel.ContinuousLineType"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLineType.LineTypeNameByBlock">
            <summary>
            The name for line type ByBlock.
            See also <see cref="P:WW.Cad.Model.DxfModel.ByBlockLineType"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLineType.LineTypeNameByLayer">
            <summary>
            The name for line type ByLayer.
            See also <see cref="P:WW.Cad.Model.DxfModel.ByLayerLineType"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> class.
            </summary>
            <remarks>
            Note that a line type must have a <see cref="P:WW.Cad.Model.Tables.DxfLineType.Name"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.#ctor(System.String,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> class.
            </summary>
            <param name="name">
            The unique name by which a line type can be identified. 
            May not contain any spaces.
            </param>
            <param name="lengths">
            A list of doubles containing line piece lenghts.
            Less than 0 is space, equal to 0 is dot, greater than 0 is line.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.#ctor(System.String,System.String,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> class.
            </summary>
            <param name="name">
            The unique name by which a line type can be identified. 
            May not contain any spaces.
            </param>
            <param name="description">The line type description.</param>
            <param name="lengths">
            A list of doubles containing line piece lenghts.
            Less than 0 is space, equal to 0 is dot, greater than 0 is line.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.#ctor(System.String,System.String,System.Boolean,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> class.
            </summary>
            <param name="name">The unique name by which a line type can be identified.</param>
            <param name="description">The line type description.</param>
            <param name="lengths">
            A list of doubles containing line piece lenghts.
            Less than 0 is space, equal to 0 is dot, greater than 0 is line.
            </param>
            <param name="modifyable">
            Specifies whether the line type should be modifyable.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Accept(WW.Cad.Model.Tables.ITableRecordVisitor)">
            <summary>
            Accept the specified visitor.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Validates the line type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.ToString">
            <summary>
            String representation.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified line type in the context of the specified target model.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Name">
            <summary>
            Gets or sets the unique name.
            </summary>
            <remarks>
            <para>
            The name must be set to a value unequal to <c>null</c>.
            </para>
            <para>
            For <see cref="F:WW.Cad.Model.DxfVersion.Dxf14"/> and earlier the name 
            may not contain any spaces and may not be longer than 31 characters.
            Each character of the name should be a letter, 
            digit or one of the following letters: $-_*.
            This constraint is checked when writing the dxf file by method <see cref="M:WW.Cad.Model.Tables.DxfLineType.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})"/>.
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.TotalLength">
            <summary>
            Gets the total length of the pattern.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.IsModifyable">
            <summary>
            Gets if the line type is modifyable. Default is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.IsExternallyDependent">
            <summary>
            Gets or sets a value indicating whether this line type is externally dependent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.IsResolvedExternalRef">
            <summary>
            Gets or sets a value indicating whether this line type is a resolved external reference, 
            or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.IsReferenced">
            <summary>
            Gets or sets a value indicating whether this line type is a referenced by at least one entity in the drawing.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Elements">
            <summary>
            Gets the <see cref="T:WW.Cad.Model.Tables.DxfLineType.Element">elements</see>.
            </summary>
            <remarks>
            Complex line type elements were introduced in version <see cref="T:DxfVersion.Dxf13"/>.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Tables.DxfLineType.Element"/>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLineType.Element">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Tables.DxfLineType">line type</see> element.
            </summary>
            <remarks>
            <para>
            The main element property is the <see cref="P:WW.Cad.Model.Tables.DxfLineType.Element.Length"/> property defining
            the element length.
            A negative value represents a space, zero represents a dot, a positive value represents a line segment.
            </para>
            <para>
            </para>
            Complex line type elements were introduced in version <see cref="T:DxfVersion.Dxf13"/>.
            </remarks>
            <seealso cref="T:WW.Cad.Model.Tables.DxfLineType"/>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLineType.Element.extendedShape">
            <summary>
            The shape which is displayed for this element, <c>null</c> if there is no shape or it couldn't be loaded.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Element.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLineType.Element"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Element.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Tables.DxfLineType.Element"/> class.
            </summary>
            <param name="length">
            The element length.
            A negative value represents a space, zero represents a dot, a positive value represents a line segment.
            </param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Element.GetShapeInsertionTransformation(System.Double)">
            <summary>
            Get the basic transformation used to insert the shape returned by <see cref="P:WW.Cad.Model.Tables.DxfLineType.Element.ExtendedShape"/>.
            </summary>
            <param name="ltScaling">The line type scaling.</param>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Element.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Element.CopyFrom(WW.Cad.Model.Tables.DxfLineType.Element,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified complex element in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Element.Resolve(WW.Cad.Model.DxfModel)">
            <summary>
            If this is a special line type using a shape or text, 
            try to load and prepare the shape or text.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.Length">
            <summary>
            Gets or sets the length.
            A negative value represents a space, zero represents a dot, a positive value represents a line segment.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.ElementType">
            <summary>
            Gets or sets the type of the complex element.
            The default value is <see cref="T:ElementType.None"/>.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.RotationIsAbsolute">
            <summary>
            Gets or sets a value indicating whether the rotation is absolute.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLineType.Element.Rotation"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.IsText">
            <summary>
            Gets or sets a value indicating whether the the element is a text string.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLineType.Element.Text"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.IsShape">
            <summary>
            Gets or sets a value indicating whether the element is a shape.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLineType.Element.ShapeNumber"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.ShapeNumber">
            <summary>
            Gets or sets the shape number of the shape found in the shape file referenced by <see cref="P:WW.Cad.Model.Tables.DxfLineType.Element.TextStyle"/>.
            When a shape is to be displayed, the text style's font file name points to an .shx file containing the shapes.
            The default value is 0.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLineType.Element.IsShape"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.TextStyle">
            <summary>
            Gets or sets the text style.
            The default value is <c>null.</c>
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.Scale">
            <summary>
            Gets or sets the scale.
            The default value is 1.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.Rotation">
            <summary>
            Gets or sets the rotation in radians (absolute or relative depending on <see cref="P:WW.Cad.Model.Tables.DxfLineType.Element.RotationIsAbsolute"/>).
            The default value is 0.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLineType.Element.RotationIsAbsolute"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.Offset">
            <summary>
            Gets or sets the offset.
            The default value is (0, 0).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.Text">
            <summary>
            Gets or sets the text.
            The default value is <c>null</c>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Tables.DxfLineType.Element.IsText"/>
        </member>
        <member name="P:WW.Cad.Model.Tables.DxfLineType.Element.ExtendedShape">
            <summary>
            Get the extended shape.
            </summary>
            <remarks>
            The extended shape is either created from a text or a shape symbol.
            </remarks>
            <return>
            The extended shape defined for this element, or <c>null</c> if there is no shape or it couldn't be loaded.
            </return>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLineType.Element.ElementResolver">
            <summary>
            Resolve element after cloning.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Tables.DxfLineType.Element.ElementResolver.#ctor(WW.Cad.Model.Tables.DxfLineType.Element)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The element registered for late resolving.</param>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLineType.ElementCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Tables.DxfLineType.Element"/> elements.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLineType.WinFormsPicker">
            <summary>
            A picker to pick a line type in a <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Tables.DxfLineType.ElementType">
            <summary>
            Represents a line type complex element type.
            </summary>
            <seealso cref="T:WW.Cad.Model.Tables.DxfLineType"/>
            <seealso cref="T:WW.Cad.Model.Tables.DxfLineType.Element"/>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLineType.ElementType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLineType.ElementType.RotationIsAbsolute">
            <summary>
            The rotation angle is absolute, otherwise it is relative.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLineType.ElementType.IsText">
            <summary>
            Complex element is a text string.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Tables.DxfLineType.ElementType.IsShape">
            <summary>
            Complex element is a shape.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfBlockBegin">
            <summary>
            Represents the beginning of a entity block.
            Only used by AutoCAD internally.
            </summary>
            <seealso cref="T:WW.Cad.Model.Tables.DxfBlock"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBlockBegin.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBlockBegin.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBlockBegin.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">Visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfBlockBegin.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfBlockBegin.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfBlockBegin.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.PlotStyleMode">
            <summary>
            Indicates whether the current drawing is in a Color-Dependent or Named Plot Style mode.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PlotStyleMode.Named">
            <summary>
            Uses named plot style tables in the current drawing.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.PlotStyleMode.ColorDependent">
            <summary>
            Uses color-dependent plot style tables in the current drawing.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.ResolutionUnits">
            <summary>
            Resolution units as used by <see cref="T:WW.Cad.Model.Objects.DxfImageDef"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ResolutionUnits.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ResolutionUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.ResolutionUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.MLineStyleFlags">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.DxfMLineStyle"/> flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.FillOn">
            <summary>
            Fill on.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.DisplayMiters">
            <summary>
            Display miters.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.StartSquareEndCap">
            <summary>
            Start square end (line) cap.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.StartInnerArcsCap">
            <summary>
            Start inner arcs cap.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.StartRoundCap">
            <summary>
            Start round (outer arcs) cap.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.EndSquareCap">
            <summary>
            End square (line) cap.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.EndInnerArcsCap">
            <summary>
            End inner arcs.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.MLineStyleFlags.EndRoundCap">
            <summary>
            End round (outer arcs) cap.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDictionaryWithDefault">
            <summary>
            Represents a dictionary with default.
            </summary>
            <remarks>
            The dictionary with default object was introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf15">release 15</see>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryWithDefault.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionaryWithDefault"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryWithDefault.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionaryWithDefault"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryWithDefault.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryWithDefault.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified dictionary in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryWithDefault.IsSupportedInVersion(WW.Cad.Model.DxfModel)">
            <summary>
            Gets whether this object is supported in given model version.
            </summary>
            <param name="model">The model.</param>
            <returns><c>true</c> if the object is supported in the model's version, <c>false</c> if it is unsupported.</returns>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryWithDefault.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryWithDefault.ObjectType">
            <summary>
            Gets the object type (e.g. MLINESTYLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryWithDefault.AcClass">
            <summary>
            Gets the autocad class (e.g. AcDbMlineStyle).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryWithDefault.DefaultEntry">
            <summary>
            Gets or sets the default entry.
            </summary>
            <remarks>
            Currently only used for plot style dictionary’s default entry, named “Normal”.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDictionaryEntry">
            <summary>
            <see cref="T:WW.Cad.Model.Objects.DxfDictionary"/> entry.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.DxfDictionary"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionaryEntry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntry.#ctor(System.String,WW.Cad.Model.Objects.DxfObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionaryEntry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntry.#ctor(System.String,WW.Cad.Model.Objects.DxfObject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionaryEntry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntry.#ctor(WW.Cad.Model.Objects.DxfObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Objects.DxfDictionaryEntry"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntry.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntry.CopyFrom(WW.Cad.Model.Objects.DxfDictionaryEntry,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from the specified dictionary entry in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDictionaryEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryEntry.Dictionary">
            <summary>
            Gets or sets the dictionary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryEntry.Name">
            <summary>
            Gets or sets the entry name.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryEntry.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfDictionaryEntry.ValueReferenceIsHard"/>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDictionaryEntry.ValueReferenceIsHard">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:WW.Cad.Model.Objects.DxfDictionaryEntry.Value"/> reference is a hard reference.
            The default value is <c>false</c>.
            </summary>
            <seealso cref="P:WW.Cad.Model.Objects.DxfDictionaryEntry.Value"/>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDictionaryEntry.Names">
            <summary>
            This class contains known dictionary entry names.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadColor">
            <summary>
            The ACAD_COLOR dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadFieldList">
            <summary>
            The ACAD_FIELDLIST dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadGroup">
            <summary>
            The ACAD_GROUP dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadImage">
            <summary>
            The ACAD_IMAGE_DICT dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadImageVars">
            <summary>
            The ACAD_IMAGE_VARS dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadLayout">
            <summary>
            The ACAD_LAYOUT dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadSortEnts">
            <summary>
            The ACAD_SORTENTS dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadMLeaderStyle">
            <summary>
            The ACAD_MLEADERSTYLE dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadMLineStyle">
            <summary>
            The ACAD_MLINESTYLE dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadTableStyle">
            <summary>
            The ACAD_TABLESTYLE dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadPlotSettings">
            <summary>
            The ACAD_PLOTSETTINGS dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.VariableDictionary">
            <summary>
            The AcDbVariableDictionary dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadPlotStyleName">
            <summary>
            The ACAD_PLOTSTYLENAME dictionary entry.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.DxfDictionaryEntry.Names.AcadScaleList">
            <summary>
            The scales dictionary.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.TrueTypeFontTextMetrics">
            <summary>
            Text metrics for TrueType fonts.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Text.TrueTypeFontTextMetrics.InternalFontSize">
            <summary>
            Font metrics depends on font size because of size hints. 
            But we want to get a consistent result throughout all operation,
            so we calculate everything with a fixed font size (otherwise line 
            breaks could change while zooming in or printing) and do the 
            scaling to the model size afterwards.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.GetFont(System.String,System.Boolean)">
            <summary>
            Get a basic font.
            </summary>
            <param name="fontFileName">font file name</param>
            <param name="bold">bold font?</param>
            <returns>basic font</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.#ctor(WW.Cad.Model.Text.TextBlockSettings,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">settings using a TrueType font</param>
            <param name="useBigfont">use bigfont?</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="fontFileName">TTF font name.</param>
            <param name="bold">Bold font?</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.#ctor(System.String,WW.Cad.Model.Text.TextBlockSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Text.TrueTypeFontTextMetrics"/> class.
            </summary>
            <param name="fontFileName">Name of the font file, which oberrides the settings' file.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.IsCharacterInFont(System.Char)">
            <summary>
            Is the given character contained in this font.
            </summary>
            <param name="ch">character</param>
            <returns></returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.GetBounds(System.String,WW.Math.Matrix2D,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounds of some text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <param name="transformation">transformation from canonical font to real font</param>
            <param name="wsh">How to include white space in the bounding box</param>
            <param name="characterXAdvances">Optional: if not <c>null</c> the the advance on the x-axis of each character is calculated and added to this list.</param>
            <returns>
            bounds if the text was written at position 0,0
            </returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.GetInternalPath(System.String)">
            <summary>
            Creates a path from a text.
            </summary>
            <remarks>
            The created path is in internal coordinates. 
            Use <see cref="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.CanonicalScaling"/> to transform the path to canonical size.
            </remarks>
            <param name="text">The text.</param>
            <returns>The path in internal coordinates.</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.InternalAdvance(System.String,System.Collections.Generic.IList{WW.Math.Vector2D})">
            <summary>
            Get the internal advance of a text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <returns>advance vector</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.CanonicalAdvance(System.String,System.Collections.Generic.IList{WW.Math.Vector2D})">
            <summary>
            Get the canonical advance of a text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <returns>advance vector</returns>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.Font">
            <summary>
            Get the underlying font.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.CanonicalScaling">
            <summary>
            Get the scaling transformation from the internally used font to canonical size.
            (Maps the character 'M' height of font with size <see cref="F:WW.Cad.Model.Text.TrueTypeFontTextMetrics.InternalFontSize"/> to the value 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.BaseLineOffset">
            <summary>
            Gets the base line offset.
            </summary>
            <value>The base line offset.</value>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.SystemFontScaling">
            <summary>
            Get the height scaling for system fonts.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.CanonicalAscent">
            <summary>
            Get the canonical ascent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.CanonicalDescent">
            <summary>
            Get the canonical descent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.IsFallback">
            <summary>
            Is this font a fallback font?
            </summary>
            <remarks>
            A font is a fallback font if the original font was not found.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Text.TrueTypeFontTextMetrics.BasicTrueTypeFont">
            <summary>
            Helper class for keeping information of the basic TTF.
            </summary>
            <remarks>
            The basic TTF is kept in a generic size, but scaled down to the canonical size on requests.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.BasicTrueTypeFont.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="fontFileName">font file name</param>
            <param name="bold">bold font?</param>
        </member>
        <member name="M:WW.Cad.Model.Text.TrueTypeFontTextMetrics.BasicTrueTypeFont.GetCanonicalGlyph(System.Char)">
            <summary>
            Gets the canonical glyph for a character.
            </summary>
            <param name="c">The character for which the glyph is requested.</param>
            <returns>The canonical glyph.</returns>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.BasicTrueTypeFont.IsFallback">
            <summary>
            Is this font a fallback font?
            </summary>
            <remarks>
            A font is a fallback font if the original font was not found.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.BasicTrueTypeFont.CanonicalScaling">
            <summary>
            Get the scaling transformation from the internally used font to canonical size.
            (maps the character 'M' height of font with size <see cref="F:WW.Cad.Model.Text.TrueTypeFontTextMetrics.InternalFontSize"/> to the value 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.TrueTypeFontTextMetrics.BasicTrueTypeFont.SystemFontScaling">
            <summary>
            Get the scaling between the system font size and the DXF font size.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Text.ShxFontTextMetrics">
            <summary>
            Text metrics for SHX fonts.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Text.ShxFontTextMetrics.#ctor(WW.Cad.Model.Text.TextBlockSettings,WW.Cad.Model.Entities.ShxFile)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">text block settings using a SHX font</param>
            <param name="shxFile">SHX file containing the font</param>
        </member>
        <member name="M:WW.Cad.Model.Text.ShxFontTextMetrics.GetBounds(System.String,WW.Math.Matrix2D,WW.Cad.Model.Text.WhiteSpaceHandlingFlags)">
            <summary>
            Get the bounds of some text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <param name="transformation">transformation from canonical font to real font</param>
            <param name="wsh">How to include white space in the bounding box</param>
            <returns>bounds if the text was written at position 0,0</returns>
        </member>
        <member name="M:WW.Cad.Model.Text.ShxFontTextMetrics.CanonicalAdvance(System.String,System.Collections.Generic.IList{WW.Math.Vector2D})">
            <summary>
            Get the canonical advance of a text.
            </summary>
            <param name="text">text (not expected to contain line feeds)</param>
            <param name="characterAdvances">The character advances.</param>
            <returns>
            advance vector
            </returns>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxFontTextMetrics.ShxFile">
            <summary>
            Get the SHX file on which this metrics is based.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxFontTextMetrics.ToCanonicalScale">
            <summary>
            Get the scale used to scale this font into its canonical form.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxFontTextMetrics.CanonicalAscent">
            <summary>
            Get the canonical ascent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxFontTextMetrics.CanonicalDescent">
            <summary>
            Get the canonical descent.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Text.ShxFontTextMetrics.LineFeedAdvance">
            <summary>
            Get the advance of a line feed.
            </summary>
            <remarks>
            This only handles the line feed, not the carriage return.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.ProxyFlags">
            <summary>
            Represents the proxy flags for a <see cref="T:WW.Cad.Model.DxfClass"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.EraseAllowed">
            <summary>
            Erase allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.TransformAllowed">
            <summary>
            Transform allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.ColorChangeAllowed">
            <summary>
            Clor change allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.LayerChangeAllowed">
            <summary>
            Layer change allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.LinetypeChangeAllowed">
            <summary>
            Line type change allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.LinetypeScaleChangeAllowed">
            <summary>
            Line type scale change allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.VisibilityChangeAllowed">
            <summary>
            Visibility change allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.CloningAllowed">
            <summary>
            Cloning allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.LineweightChangeAllowed">
            <summary>
            Line weight change allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.PlotStyleNameChangeAllowed">
            <summary>
            Plot Style Name change allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.DisablesProxyWarningDialog">
            <summary>
            Disables proxy warning dialog.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.R13FormatProxy">
            <summary>
            A R13 format proxy.
            This flag is not written after R13.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.AllOperationsExceptCloningAllowed">
            <summary>
            All operation except cloning are allowed.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.ProxyFlags.AllOperationsAllowed">
            <summary>
            All operations are allowed.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfUnknownEntity">
            <summary>
            Represents an unknown entity.
            By default unknown entities are not read from DWG/DXF files. 
            To read them pass <c>true</c> for the <c>loadUnknownObjects</c> in the <see cref="M:WW.Cad.IO.CadReader.Read(System.String,System.Boolean)"/> method.
            </summary>
            <remarks>
            Rendering of proxy graphics (from property <see cref="P:WW.Cad.Model.Entities.DxfUnknownEntity.ProxyGraphics"/>) for unknown entities is supported if
            the entity has proxy graphics. 
            The proxy graphics represents the graphical representation of the entity.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfUnknownEntity.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">Visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfUnknownEntity.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw the entity as wire frame (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible">Visible</see> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfUnknownEntity.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfUnknownEntity.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfUnknownEntity.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfUnknownEntity.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfUnknownEntity.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfUnknownEntity.ProxyGraphics">
            <summary>
            Gets or sets the proxy graphics (may be <c>null</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfUnknownEntity.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfUnknownEntity.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.Dxf3DFace">
            <summary>
            3D face entity, built from three or four <see cref="T:WW.Math.Point3D"/> objects.
            </summary>
            <remarks>
            Any of the edges of the face can be made visible or invisible using the
            properties <see cref="P:WW.Cad.Model.Entities.Dxf3DFace.FirstEdgeInvisible"/>, <see cref="P:WW.Cad.Model.Entities.Dxf3DFace.SecondEdgeInvisible"/>,
            <see cref="P:WW.Cad.Model.Entities.Dxf3DFace.ThirdEdgeInvisible"/> and <see cref="P:WW.Cad.Model.Entities.Dxf3DFace.FourthEdgeInvisible"/>.
            </remarks>
            <example>
            An example of how to create and write a DXF file containing a 3D face.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class FaceExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel(DxfVersion.Dxf14);
    
            Dxf3DFace face1 = new Dxf3DFace(
                new Point3D(0, 0, 0),
                new Point3D(2, 0, 0),
                new Point3D(2, 2, 0),
                new Point3D(0, 2, 0)
            );
            face1.Color = EntityColors.Red;
            model.Entities.Add(face1);

            Dxf3DFace face2 = new Dxf3DFace(
                new Point3D(0, 0, 0),
                new Point3D(0, 0, 2),
                new Point3D(0, 2, 2),
                new Point3D(0, 2, 0)
            );
            face2.Color = EntityColors.Red;
            model.Entities.Add(face2);
    
            DxfWriter.Write("Face Example.dxf", model, false);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.#ctor(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.#ctor(WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.#ctor(WW.Cad.Model.Entities.EntityColor,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D,WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.#ctor(System.Collections.Generic.IList{WW.Math.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/> class.
            </summary>
            <param name="points">
            Must contain 3 or 4 points.
            </param>
            <exception cref="T:System.ArgumentException">Thrown when points does not have 3 or 4 elements.</exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.#ctor(WW.Cad.Model.Entities.EntityColor,System.Collections.Generic.IList{WW.Math.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.Dxf3DFace"/> class.
            </summary>
            <param name="points">
            Must contain 3 or 4 points.
            </param>
            <param name="color">The face color.</param>
            <exception cref="T:System.ArgumentException">Thrown when points does not have 3 or 4 elements.</exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.ISurfaceGraphicsFactory)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.DrawInternal(WW.Cad.Drawing.DrawContext.Surface,WW.Cad.Drawing.Surface.Graphics,WW.Cad.Drawing.Surface.IGraphicElementBlock)">
            <summary>
            Draw the entity as surfaces (only called when <see cref="P:WW.Cad.Model.Entities.DxfEntity.Visible"/> and not in a frozen layer).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified 3D face in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.Validate(WW.Cad.Model.DxfModel,System.Collections.Generic.IList{WW.Cad.Base.DxfMessage})">
            <summary>
            Check object for correctness.
            </summary>
            <param name="model">The model context in which to check for correctness.</param>
            <param name="messages">Messages if any, null otherwise.</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D)">
            <summary>
            Transform the entity.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.TransformMe(WW.Cad.Drawing.TransformConfig,WW.Math.Matrix4D,WW.Actions.CommandGroup)">
            <summary>
            Transform the entity
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.Dxf3DFace.GetClipBoundary(WW.Cad.Drawing.GraphicsConfig)">
            <summary>
            Gets the clip boundary.
            The graphics configuration object is used to determine the precision of the clip boundary.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DFace.Points">
            <summary>
            Get all corner points (<see cref="T:WW.Math.Point3D"/>) of face (three or four).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DFace.FirstEdgeInvisible">
            <summary>
            Gets or sets a value indicating whether the first edge is invisible.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DFace.SecondEdgeInvisible">
            <summary>
            Gets or sets a value indicating whether the second edge is invisible.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DFace.ThirdEdgeInvisible">
            <summary>
            Gets or sets a value indicating whether the third edge is invisible.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DFace.FourthEdgeInvisible">
            <summary>
            Gets or sets a value indicating whether the fourth edge is invisible.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DFace.EntityType">
            <summary>
            Gets the entity type (e.g. CIRCLE).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.Dxf3DFace.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbCircle).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.BackgroundFillFlags">
            <summary>
            Represents a background fill flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BackgroundFillFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BackgroundFillFlags.UseBackgroundFillColor">
            <summary>
            Use the background color as defined by <see cref="P:WW.Cad.Model.Entities.DxfMText.BackgroundFillInfo"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Entities.BackgroundFillFlags.UseDrawingWindowColor">
            <summary>
            Use the drawing window color.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfExtendedDataCollection">
            <summary>
            Keyed collection.
            The item's key is the <see cref="P:DxfExtendedData.AppId"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedDataCollection.GetKeyForItem(WW.Cad.Model.DxfExtendedData)">
            <summary>
            Extracts the key from the specified element (the <see cref="P:DxfExtendedData.ApplicationName"/>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedDataCollection.TryGetValue(WW.Cad.Model.Tables.DxfAppId,WW.Cad.Model.DxfExtendedData@)">
            <summary>
            Gets the value associated with the specified key. 
            </summary>
            <returns><c>true</c> if the Dictionary contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedDataCollection.TryGetValue(WW.Cad.Model.DxfModel,System.String,WW.Cad.Model.DxfExtendedData@)">
            <summary>
            Gets the value associated with the specified key. 
            The model paremeter is used to first get the app ID object for specified name.
            </summary>
            <returns><c>true</c> if the Dictionary contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedDataCollection.Get(WW.Cad.Model.DxfModel,System.String)">
            <summary>
            Gets the value associated with the specified key. 
            The model paremeter is used to first get the app ID object for specified name.
            Returns <c>null</c> if not present.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedDataCollection.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Get a deep copy of this collection.
            </summary>
            <param name="cloneContext">clone context</param>
            <returns>deep copy or <code>null</code> depending on <paramref name="cloneContext"/></returns>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedDataCollection.Contains(WW.Cad.Model.DxfModel,System.String)">
            <summary>
            Returns whether this collections contains the specified app ID name.
            The model paremeter is used to first get the app ID object for specified name.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfExtendedDataCollection.Update(WW.Cad.Model.DxfExtendedData,WW.Cad.Model.Tables.DxfAppId)">
            <summary>
            Update sorting on AppID changes.
            </summary>
            <param name="item">Item with changed appid.</param>
        </member>
        <member name="T:WW.Cad.Model.Objects.TableCellStylePropertyFlags">
            <summary>
            Represents the <see cref="T:WW.Cad.Model.Objects.DxfTableCellStyle">cell style</see> property flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStylePropertyFlags.None">
            <summary>
            No flag set.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStylePropertyFlags.MarginLeft">
            <summary>
            In AutoCAD this is the horizontal margin (so both left + right).
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellStylePropertyFlags.MarginTop">
            <summary>
            In AutoCAD this is the vertical margin (so both top + bottom).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.TableCellContentLayoutFlags">
            <summary>
            Represents layout flags for a <see cref="T:WW.Cad.Model.Entities.DxfTableCell2005"/>.
            Used by <see cref="T:WW.Cad.Model.Objects.DxfTableCellStyle"/>.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellContentLayoutFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellContentLayoutFlags.Flow">
            <summary>
            Flow.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellContentLayoutFlags.StackedHorizontal">
            <summary>
            Stacked horizontal.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Objects.TableCellContentLayoutFlags.StackedVertical">
            <summary>
            Stacked vertical.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfTableCellRange">
            <summary>
            Represents a <see cref="T:WW.Cad.Model.Entities.DxfTableCell2005">cell</see> range.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTableCellRange"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfTableCellRange"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRange.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether this cell range contains the specified row/column index.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfTableCellRange.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTableCellRange.TopRowIndex">
            <summary>
            Gets or sets the index of the top row.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTableCellRange.LeftColumnIndex">
            <summary>
            Gets or sets the index of the left column.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTableCellRange.BottomRowIndex">
            <summary>
            Gets or sets the index of the bottom row.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfTableCellRange.RightColumnIndex">
            <summary>
            Gets or sets the index of the right column.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Action">
            <summary>
            Represents a delegate for performing an action using specified handled object as parameter.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat">
            <summary>
            Represents the abstract value format of e.g. a <see cref="T:WW.Cad.Model.DxfValue"/>.
            </summary>
            <remarks>
            Use one of the following concrete value format sub classes:
            <list>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.None"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.General"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.Angle"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.Currency"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.Date"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.DecimalNumber"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.Percentage"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.Point2D"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.Point3D"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.String"/></item>
                <item><see cref="T:WW.Cad.Model.DxfValueFormat.WholeNumber"/></item>
            </list>
            </remarks>
            <example>
            This example demonstrates how create a table, and set several cell value formats and values.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class DxfValueFormatExample {
        public void Example() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTable table = new DxfTable(model.DefaultTableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 2;

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");

            DxfValueFormat.DecimalNumber decimalCellFormat = new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal);
            decimalCellFormat.Precision = 3; // Show 3 decimals
            table.Rows[2].Cells[0].Contents.Add(decimalCellFormat, 12.3456789d);

            DxfValueFormat.Currency currencyCellFormat = new DxfValueFormat.Currency("€");
            table.Rows[3].Cells[0].Contents.Add(currencyCellFormat, 12.3456789d);

            DxfValueFormat.String stringCellFormat = new DxfValueFormat.String(CellStringFormat.TitleCase);
            table.Rows[4].Cells[0].Contents.Add(stringCellFormat, "a test string");

            model.Entities.Add(table);

            DxfWriter.Write("Value Format Example.dxf", model);
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTable2005"/>
            <seealso cref="T:WW.Cad.Model.Entities.DxfTableCell2005"/>
            <seealso cref="T:WW.Cad.Model.DxfValue"/>
        </member>
        <member name="F:WW.Cad.Model.DxfValueFormat.NoneInstance">
            <summary>
            The none value format.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfValueFormat.GeneralInstance">
            <summary>
            The general value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.#ctor(WW.Cad.Model.ValueDataType,WW.Cad.Model.ValueUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.#ctor(WW.Cad.Model.ValueDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Create(WW.Cad.Model.ValueDataType,WW.Cad.Model.ValueUnitType)">
            <summary>
            Creates a new <see cref="T:WW.Cad.Model.DxfValueFormat"/> instance for the specified cell data type.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.ParseFormatElement(System.Int32@)">
            <summary>
            Parses a format element string that starts with the percent character.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.GetSquareBracketedString(System.Int32@,System.String@)">
            <summary>
            Gets the string between square brackets from the format string.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.GetInt(System.Int32@,System.Int32@)">
            <summary>
            Gets the integer from the format string.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Model.DxfValueFormat.Changed">
            <summary>
            Occurs when the value format changed.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.DataType">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.UnitType">
            <summary>
            Gets the type of the unit.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.None">
            <summary>
            Represents no value format.
            This format has no formatting options.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.None.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.None"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.None.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.General">
            <summary>
            Represents the general value format.
            This format has no formatting options.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.General.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.General"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.General.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.String">
            <summary>
            Represents the string value format.
            </summary>
            <example>
            This example demonstrates how create a table, and set several cells formats and values.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class DxfValueFormatExample {
        public void Example() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTable table = new DxfTable(model.DefaultTableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 2;

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");

            DxfValueFormat.DecimalNumber decimalCellFormat = new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal);
            decimalCellFormat.Precision = 3; // Show 3 decimals
            table.Rows[2].Cells[0].Contents.Add(decimalCellFormat, 12.3456789d);

            DxfValueFormat.Currency currencyCellFormat = new DxfValueFormat.Currency("€");
            table.Rows[3].Cells[0].Contents.Add(currencyCellFormat, 12.3456789d);

            DxfValueFormat.String stringCellFormat = new DxfValueFormat.String(CellStringFormat.TitleCase);
            table.Rows[4].Cells[0].Contents.Add(stringCellFormat, "a test string");

            model.Entities.Add(table);

            DxfWriter.Write("Value Format Example.dxf", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.String"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.String.#ctor(WW.Cad.Model.CellStringFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.String"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.String.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.String.ParseFormatElement(System.Int32@)">
            <summary>
            Parses a format element string that starts with the percent character.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.String.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.String.CellStringFormat">
            <summary>
            Gets or sets the table cell string format (the default value is <c>CellStringFormat.None</c>).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.DecimalNumber">
            <summary>
            Represents the decimal number value format.
            </summary>
            <example>
            This example demonstrates how create a table, and set several cells formats and values.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class DxfValueFormatExample {
        public void Example() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTable table = new DxfTable(model.DefaultTableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 2;

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");

            DxfValueFormat.DecimalNumber decimalCellFormat = new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal);
            decimalCellFormat.Precision = 3; // Show 3 decimals
            table.Rows[2].Cells[0].Contents.Add(decimalCellFormat, 12.3456789d);

            DxfValueFormat.Currency currencyCellFormat = new DxfValueFormat.Currency("€");
            table.Rows[3].Cells[0].Contents.Add(currencyCellFormat, 12.3456789d);

            DxfValueFormat.String stringCellFormat = new DxfValueFormat.String(CellStringFormat.TitleCase);
            table.Rows[4].Cells[0].Contents.Add(stringCellFormat, "a test string");

            model.Entities.Add(table);

            DxfWriter.Write("Value Format Example.dxf", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Numeric3">
            <summary>
            Extends the <see cref="T:WW.Cad.Model.DxfValueFormat.Numeric2"/> value format with a <c>Precision</c> and a
            <see cref="P:WW.Cad.Model.DxfValueFormat.Numeric3.DecimalSeparator"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Numeric2">
            <summary>
            Extends the <see cref="T:WW.Cad.Model.DxfValueFormat.Numeric"/> value format with a <see cref="P:WW.Cad.Model.DxfValueFormat.Numeric2.ConversionFactor"/> and a
            <see cref="P:WW.Cad.Model.DxfValueFormat.Numeric2.ThousandsSeparator"/>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Numeric">
            <summary>
            Represents an abstract numeric base class for numeric table cell formats.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfValueFormat.Numeric.DefaultThousandsSeparator">
            <summary>
            The default thousands separator is a comma.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Numeric.ParseFormatElement(System.Int32@)">
            <summary>
            Parses a format element string that starts with the percent character.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Numeric.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Numeric.Prefix">
            <summary>
            Gets or sets the prefix string (the default value is <c>null</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Numeric.Postfix">
            <summary>
            Gets or sets the postfix string (the default value is <c>null</c>).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Numeric2.ParseFormatElement(System.Int32@)">
            <summary>
            Parses a format element string that starts with the percent character.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Numeric2.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Numeric2.ConversionFactor">
            <summary>
            Gets or sets the conversion factor (the default value is 1).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Numeric2.ThousandsSeparator">
            <summary>
            Gets or sets the thousands separator (the default value is a comma).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Numeric3.ParseFormatElement(System.Int32@)">
            <summary>
            Parses the format element.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Numeric3.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string (does not write the precision).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Numeric3._Precision">
            <summary>
            Gets or sets the precision.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Numeric3.DecimalSeparator">
            <summary>
            Gets or sets the decimal separator character (the default value is a dot).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.DecimalNumber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.DecimalNumber"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.DecimalNumber.#ctor(System.Nullable{WW.Cad.Model.LinearUnitFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.DecimalNumber"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.DecimalNumber.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.DecimalNumber.ParseFormatElement(System.Int32@)">
            <summary>
            Parses the format element.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.DecimalNumber.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.DecimalNumber.LinearUnitFormat">
            <summary>
            Gets or sets the cell linear number format (the default value is <c>null</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.DecimalNumber.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <remarks>
            <para>
            For decimal, engineering and scientific units the precision indicates the number of decimals.
            </para>
            <para>
            For architectural units the precision corresponds to the precision in inches:
            <list type="table">
             <listheader>
              <term>value</term>
              <description>precision in feet/inches</description>
             </listheader>
             <item>
              <term>0</term>
              <description>0'0"</description>
             </item>
             <item>
              <term>1</term>
              <description>0'0 1/2"</description>
             </item>
             <item>
              <term>1</term>
              <description>0'0 1/4"</description>
             </item>
             <item>
              <term>1</term>
              <description>0'0 1/8"</description>
             </item>
             <item>
              <term>1</term>
              <description>0'0 1/16"</description>
             </item>
             <item>
              <term>1</term>
              <description>0'0 1/32"</description>
             </item>
             <item>
              <term>1</term>
              <description>0'0 1/64"</description>
             </item>
             <item>
              <term>1</term>
              <description>0'0 1/128"</description>
             </item>
             <item>
              <term>1</term>
              <description>0'0 1/256"</description>
             </item>
            </list>
            </para>
            <para>
            For fractional units the precision corresponds to the denominator:
            <list type="table">
             <listheader>
              <term>value</term>
              <description>denominator</description>
             </listheader>
             <item>
              <term>0</term>
              <description>0</description>
             </item>
             <item>
              <term>1</term>
              <description>0 1/2</description>
             </item>
             <item>
              <term>1</term>
              <description>0 1/4</description>
             </item>
             <item>
              <term>1</term>
              <description>0 1/8</description>
             </item>
             <item>
              <term>1</term>
              <description>0 1/16</description>
             </item>
             <item>
              <term>1</term>
              <description>0 1/32</description>
             </item>
             <item>
              <term>1</term>
              <description>0 1/64</description>
             </item>
             <item>
              <term>1</term>
              <description>0 1/128</description>
             </item>
             <item>
              <term>1</term>
              <description>0 1/256</description>
             </item>
            </list>            
            </para>
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.DecimalNumber.SuppressZeroFeet">
            <summary>
            Gets or sets a value indicating whether to suppress zero feet.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.DecimalNumber.SuppressZeroInches">
            <summary>
            Gets or sets a value indicating whether to suppress zero inches.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.DecimalNumber.SuppressLeadingZeros">
            <summary>
            Gets or sets a value indicating whether to suppress leading zeros.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.DecimalNumber.SuppressTrailingZeros">
            <summary>
            Gets or sets a value indicating whether suppress trailing zeros.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.DecimalNumber.ZeroSuppressionFlags">
            <summary>
            Gets or sets the zero suppression flags (the default value is <c>None</c>).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Percentage">
            <summary>
            Represents a percentage value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Percentage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.Percentage"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Percentage.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Percentage.ParseFormatElement(System.Int32@)">
            <summary>
            Parses the format element.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Percentage.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Percentage.Precision">
            <summary>
            Gets or sets the precision (the number of decimals that are displayed).
            The default value is 2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Percentage.SuppressZeroFeet">
            <summary>
            Gets or sets a value indicating whether to suppress zero feet.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Percentage.SuppressZeroInches">
            <summary>
            Gets or sets a value indicating whether to suppress zero inches.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Percentage.SuppressLeadingZeros">
            <summary>
            Gets or sets a value indicating whether to suppress leading zeros.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Percentage.SuppressTrailingZeros">
            <summary>
            Gets or sets a value indicating whether suppress trailing zeros.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Percentage.ZeroSuppressionFlags">
            <summary>
            Gets or sets the zero suppression flags (the default value is <c>None</c>).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Point2D">
            <summary>
            Represents a 3D point with x, y and z coordinates.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfValueFormat.Point2D.DefaultCoordinateSeparator">
            <summary>
            The default coordinate separator is a comma.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Point2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.Point2D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Point2D.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Point2D.ParseFormatElement(System.Int32@)">
            <summary>
            Parses the format element.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Point2D.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Point2D.CoordinateSeparator">
            <summary>
            Gets or sets the coordinate separator character. 
            The default value is a comma ','.
            Other typical values are a semicolon ';' or a slash '/'.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Point2D.DisplayX">
            <summary>
            Gets or sets a value indicating whether to display the X coordinate (the default value is <c>true</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Point2D.DisplayY">
            <summary>
            Gets or sets a value indicating whether to display the Y coordinate (the default value is <c>true</c>).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Point3D">
            <summary>
            Represents a 3D point with x, y and z coordinates.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DxfValueFormat.Point3D.DefaultCoordinateSeparator">
            <summary>
            The default coordinate separator is a comma.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Point3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.Point3D"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Point3D.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Point3D.ParseFormatElement(System.Int32@)">
            <summary>
            Parses the format element.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Point3D.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Point3D.CoordinateSeparator">
            <summary>
            Gets or sets the coordinate separator character. 
            The default value is a comma ','.
            Other typical values are a semicolon ';' or a slash '/'.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Point3D.DisplayX">
            <summary>
            Gets or sets a value indicating whether to display the X coordinate (the default value is <c>true</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Point3D.DisplayY">
            <summary>
            Gets or sets a value indicating whether to display the Y coordinate (the default value is <c>true</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Point3D.DisplayZ">
            <summary>
            Gets or sets a value indicating whether to display the Z coordinate (the default value is <c>true</c>).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Angle">
            <summary>
            Represents the angle value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Angle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.Angle"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Angle.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Angle.ParseFormatElement(System.Int32@)">
            <summary>
            Parses the format element.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Angle.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Angle.CellAngleFormat">
            <summary>
            Gets or sets the cell angle format (the default value is <c>None</c>).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Angle.DecimalSeparator">
            <summary>
            Gets or sets the decimal separator.
            The default value is a dot.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Angle.Precision">
            <summary>
            Gets or sets the precision.
            The default value is 0.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Currency">
            <summary>
            Represents the currency value format.
            </summary>
            <example>
            This example demonstrates how create a table, and set several cells formats and values.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class DxfValueFormatExample {
        public void Example() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTable table = new DxfTable(model.DefaultTableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 2;

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");

            DxfValueFormat.DecimalNumber decimalCellFormat = new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal);
            decimalCellFormat.Precision = 3; // Show 3 decimals
            table.Rows[2].Cells[0].Contents.Add(decimalCellFormat, 12.3456789d);

            DxfValueFormat.Currency currencyCellFormat = new DxfValueFormat.Currency("€");
            table.Rows[3].Cells[0].Contents.Add(currencyCellFormat, 12.3456789d);

            DxfValueFormat.String stringCellFormat = new DxfValueFormat.String(CellStringFormat.TitleCase);
            table.Rows[4].Cells[0].Contents.Add(stringCellFormat, "a test string");

            model.Entities.Add(table);

            DxfWriter.Write("Value Format Example.dxf", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Currency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.Currency"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Currency.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.Currency"/> class.
            </summary>
            <param name="prefix">The prefix (e.g. $ or €).</param>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Currency.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Currency.ParseFormatElement(System.Int32@)">
            <summary>
            Parses a format element string that starts with the percent character.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Currency.AppendToFormatString(System.Text.StringBuilder)">
            <summary>
            Appends to format string.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Currency.Precision">
            <summary>
            Gets or sets the precision.
            The default value is 2.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Currency.UseBracketsForNegativeNumbers">
            <summary>
            Gets or sets a value indicating whether to use brackets for negative numbers in stead of a minus sign.
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.WholeNumber">
            <summary>
            Represents the whole number (integer) value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.WholeNumber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.WholeNumber"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.WholeNumber.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.Date">
            <summary>
            Represents the date value format.
            </summary>
            <example>
            This example shows how create a table, merge cells and create a custom table style.
            <code lang="cs">
using System;
using System.Collections.Generic;
using System.Text;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Math;

namespace WW.Cad.Test {
    public class TableExample {
        public void CreateTableExample() {
            DxfModel model = new DxfModel(DxfVersion.Dxf21);

            DxfTableStyle tableStyle = new DxfTableStyle("Double bordered");
            tableStyle.DataCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.DataCellStyle.SetAllBordersColor(Colors.Green);
            tableStyle.TitleCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.SetAllBordersBorderType(BorderType.Double);
            tableStyle.HeaderCellStyle.ContentColor = Colors.Blue;
            model.TableStyles.Add(tableStyle);

            DxfTable table = new DxfTable(tableStyle);
            table.InsertionPoint = new Point3D(0d, 10d, 0d);

            table.RowCount = 6;
            table.ColumnCount = 3;

            foreach (DxfTableColumn column in table.Columns) {
                column.Width = 8d;
            }

            table.Rows[0].Cells[0].Contents.Add(new DxfValueFormat.String(), "The table title");
            table.Rows[1].Cells[0].Contents.Add(new DxfValueFormat.String(), "Column 1 Header");
            table.Rows[1].Cells[1].Contents.Add(new DxfValueFormat.String(), "Column 2 Header");
            table.Rows[1].Cells[2].Contents.Add(new DxfValueFormat.String(), "Column 3 Header");
            table.Rows[2].Cells[0].Contents.Add(new DxfValueFormat.String(), "Text");
            table.Rows[2].Cells[0].CellStyleOverrides.ContentColor = Colors.Red;
            table.Rows[4].Cells[0].Contents.Add(DxfValueFormat.Date.CreateRegionalLongDateTime(), DateTime.Now);
            table.Rows[5].Cells[0].Contents.Add(new DxfValueFormat.DecimalNumber(LinearUnitFormat.Decimal), 123.45d);

            // Merge the title row cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(0, 0, 0, 2));
            // This demonstrates a merged cell block of 3 by 2 cells.
            table.MergedCellRanges.Add(new DxfTableCellRange(2, 0, 3, 2));

            model.Entities.Add(table);

            DxfWriter.Write("Table Example.dxf", model);
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Date.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.Date"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Date.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.DxfValueFormat.Date"/> class.
            </summary>
            <param name="formatString">See property <see cref="P:WW.Cad.Model.DxfValueFormat.Date.FormatString"/> for a description of the format string.</param>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Date.Clone">
            <summary>
            Clones this value format.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Date.CreateRegionalLongDate">
            <summary>
            Creates a regional long date value format (e.g. Saturday, March 29, 2008).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Date.CreateRegionalLongDateTime">
            <summary>
            Creates a regional long date time value format (e.g. Saturday, March 29, 2008 7:51:24 PM).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Date.CreateRegionalShortDate">
            <summary>
            Creates a regional short date value format (e.g. 3/29/2008).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Date.CreateRegionalShortDateTime">
            <summary>
            Creates a regional short date time value format (e.g. 3/29/2008 7:51:24 PM).
            </summary>
        </member>
        <member name="M:WW.Cad.Model.DxfValueFormat.Date.CreateRegionalTime">
            <summary>
            Creates a regional time value format.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.DxfValueFormat.Date.FormatString">
            <summary>
            Gets or sets the format string (the default value is <c>null</c>).
            </summary>
            <remarks>
            The following sub strings can be used in the date format string.
            <list type="table">
             <listheader>
              <term>Sub string</term>
              <description>Explanation</description>
             </listheader>
             <item>
              <term>M</term>
              <description>month number</description>
             </item>
             <item>
              <term>d</term>
              <description>day number</description>
             </item>
             <item>
              <term>dd</term>
              <description>day number</description>
             </item>
             <item>
              <term>yy</term>
              <description>year number (2 digits)</description>
             </item>
             <item>
              <term>yyyy</term>
              <description>year number (4 digits)</description>
             </item>
             <item>
              <term>dddd</term>
              <description>day spelled out</description>
             </item>
             <item>
              <term>MMMM</term>
              <description>month spelled out</description>
             </item>
             <item>
              <term>MMM</term>
              <description>3 letter abbreviation of month</description>
             </item>
             <item>
              <term>h</term>
              <description>hours (0-11)</description>
             </item>
             <item>
              <term>HH</term>
              <description>hours (0-23)</description>
             </item>
             <item>
              <term>mm</term>
              <description>minutes</description>
             </item>
             <item>
              <term>ss</term>
              <description>seconds</description>
             </item>
             <item>
              <term>tt</term>
              <description>AM/PM</description>
             </item>
             <item>
              <term>%#x</term>
              <description>regional long date: e.g. Saturday, March 29, 2008</description>
             </item>
             <item>
              <term>%#c</term>
              <description>regional long date time: e.g. Saturday, March 29, 2008 7:51:24 PM</description>
             </item>
             <item>
              <term>%x</term>
              <description>regional short date: e.g. 3/29/2008</description>
             </item>
             <item>
              <term>%c</term>
              <description>regional short date time: e.g. 3/29/2008 7:51:24 PM</description>
             </item>
             <item>
              <term>%X</term>
              <description>regional time</description>
             </item>
            </list>
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.DxfValueFormat.ObjectHandle">
            <summary>
            Represents a handle to another object in the file.
            </summary>
            <remarks>
            Currently format options are completely unknown.
            This class exists merely to support reading and 
            writing of files containing this value format.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfTableCellCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Cad.Model.Entities.DxfTableCell"/> elements.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellCollection.#ctor(System.Collections.Generic.IEnumerable{WW.Cad.Model.Entities.DxfTableCell})">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellCollection"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfTableCellCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.DxfTableCellCollection"/> class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet">
            <summary>
            Represents the dynamic block parameters value set.
            </summary>
            <remarks>
            Stores linear or angular distance. May have bounded limits, possible values defined by some value step
            of by predefined list.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.CopyFrom(WW.Cad.Model.CloneContext,WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet)">
            <summary>
            Copies all fields from specified object.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.ValueSetFlags">
            <summary>
            Gets or sets the value set flags. Default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.BoundedBelow">
            <summary>
            Gets or sets the minimum possible distance value. Default value is 0.
            </summary>
            <remarks>
            Some zero or positive value.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.BoundedAbove">
            <summary>
            Gets or sets the maximum possible distance value. Default value is 0.
            </summary>
            <remarks>
            Some zero or positive value. Should be more than low bound.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.Increment">
            <summary>
            Gets or sets the increment value. Default value is 0.
            </summary>
            <remarks>
            Defines possible values by step. Low, low + step, ...
            List canbe open, if upper bound was not defined.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.List">
            <summary>
            Gets or sets the list.
            </summary>
            <remarks>
            Defines possible values by list.
            Incompatible with Increment.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.AngularFlag">
            <summary>
            Gets or sets the angular flag value. Default value is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.AngularDirection">
            <summary>
            Gets or sets the angular direction flag value. Default value is false.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockParametersValueSet.ValueSetType">
            <summary>
            Bit flags to define limitation to cntrolled parameter.
            </summary>
            <remarks>
            Increment and List bits should not be used together.
            </remarks>
        </member>
        <member name="T:WW.Cad.Model.Objects.DynamicBlock.DxfBlockMoveAction">
            <summary>
            Represents the dynamic block move action.
            </summary>
            <remarks>
            Attached DXF entities can be moved by distance and angle.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockMoveAction.Accept(WW.Cad.Model.Objects.IObjectVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Objects.IObjectVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Objects.IObjectVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockMoveAction.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <param name="cloneContext"></param>
            <returns>Cloned object.</returns>
            <remarks>
            The original and cloned object are stored in the clone context.
            The second time the Clone method is called, the clone from the first
            call is found in the clone context and returned.
            So for each new clone a new CloneContext instance has to be used.
            </remarks>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Objects.DynamicBlock.DxfBlockMoveAction.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copy object contents of given object in the context of given target model.
            </summary>
            <param name="from">The object to copy from</param>
            <param name="cloneContext">The clone context.</param>
            <exception cref="!:DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is 
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockMoveAction.ActionConnections">
            <summary>
            Gets or sets the connections for move action.
            </summary>
            <remarks>
            BaseXDelta nad EndYDelta parameters.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockMoveAction.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DynamicBlock.DxfBlockMoveAction.AcClass">
            <summary>
            Gets the autocad class.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Objects.DxfDataCell">
            <summary>
            Represents a data cell inside a <see cref="T:WW.Cad.Model.Objects.DxfDataTable"/> <seealso cref="T:WW.Cad.Model.Objects.DxfDataColumn">column</seealso>.
            </summary>
            <example>
            The example below shows how to create a data table and set cell values.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class DataTableExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            DxfCircle circle = new DxfCircle(EntityColors.Red, Point2D.Zero, 2d);
            model.Entities.Add(circle);

            DxfXRecord xRecord = new DxfXRecord();
            xRecord.Values.Add(1, "A string");

            // Create a data table.
            DxfDataTable dataTable = new DxfDataTable();
            dataTable.Name = "My table";
            dataTable.ColumnCount = 2;
            dataTable.RowCount = 1;

            dataTable.Columns[0].CellType = DataCellType.String;
            dataTable.Columns[0].Name = "Name";
            dataTable.Columns[0].Cells[0].Value = new DxfDataCellValue.String("XRecord reference");

            dataTable.Columns[1].Name = "Object";
            dataTable.Columns[1].CellType = DataCellType.HardOwnerId;
            dataTable.Columns[1].Cells[0].Value = new DxfDataCellValue.HardOwnerId(xRecord);
            xRecord.SetOwnerObjectSoftReference(dataTable);

            // Store the data table in the circle's extension dictionary.
            circle.ExtensionDictionary = new DxfDictionary();
            circle.ExtensionDictionary.Entries.Add(
                new DxfDictionaryEntry("My table", dataTable)
            );

            DwgWriter.Write("DataTable example.dwg", model);
            DxfWriter.Write("DataTable example.dxf", model);
        }
    }
}
  </code>
            </example>
            <seealso cref="T:WW.Cad.Model.Objects.DxfDataTable"/>
            <seealso cref="T:WW.Cad.Model.Objects.DxfDataColumn"/>
        </member>
        <member name="M:WW.Cad.Model.Objects.DxfDataCell.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.DxfDataCell.Value">
            <summary>
            Gets or sets the value.
            The value may not be <c>null</c>.
            The default value is <see cref="F:WW.Cad.Model.Objects.DxfDataCellValue.Unknown.Instance"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">thrown when setting a <c>null</c> value.</exception>
            <example>
            The example below shows how to create a data table and set cell values.
            <code lang="cs">
using System;

using WW.Cad.IO;
using WW.Cad.Model;
using WW.Cad.Model.Entities;
using WW.Cad.Model.Objects;
using WW.Cad.Model.Tables;
using WW.Math;

namespace Examples {
    public class DataTableExample {
        public void Demonstrate() {
            DxfModel model = new DxfModel();

            DxfCircle circle = new DxfCircle(EntityColors.Red, Point2D.Zero, 2d);
            model.Entities.Add(circle);

            DxfXRecord xRecord = new DxfXRecord();
            xRecord.Values.Add(1, "A string");

            // Create a data table.
            DxfDataTable dataTable = new DxfDataTable();
            dataTable.Name = "My table";
            dataTable.ColumnCount = 2;
            dataTable.RowCount = 1;

            dataTable.Columns[0].CellType = DataCellType.String;
            dataTable.Columns[0].Name = "Name";
            dataTable.Columns[0].Cells[0].Value = new DxfDataCellValue.String("XRecord reference");

            dataTable.Columns[1].Name = "Object";
            dataTable.Columns[1].CellType = DataCellType.HardOwnerId;
            dataTable.Columns[1].Cells[0].Value = new DxfDataCellValue.HardOwnerId(xRecord);
            xRecord.SetOwnerObjectSoftReference(dataTable);

            // Store the data table in the circle's extension dictionary.
            circle.ExtensionDictionary = new DxfDictionary();
            circle.ExtensionDictionary.Entries.Add(
                new DxfDictionaryEntry("My table", dataTable)
            );

            DwgWriter.Write("DataTable example.dwg", model);
            DxfWriter.Write("DataTable example.dxf", model);
        }
    }
}
  </code>
            </example>
        </member>
        <member name="T:WW.Cad.Model.Objects.Annotations.DxfLeaderObjectContextData">
            <summary>
            Annotation context data for <see cref="T:WW.Cad.Model.Entities.DxfLeader"/>
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfLeaderObjectContextData.HookLineDirection">
            <summary>
            Gets or sets the hook line direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfLeaderObjectContextData.HorizontalDirection">
            <summary>
            Gets or sets the "horizontal" direction.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfLeaderObjectContextData.LastVertexOffsetFromAnnotation">
            <summary>
            Gets or sets the offset of the last leader vertex from 
            the block reference insertion point.
            </summary>
            <remarks>
            Introduced in <see cref="F:WW.Cad.Model.DxfVersion.Dxf14">release 14</see>.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfLeaderObjectContextData.LastVertexOffsetFromBlock">
            <summary>
            Gets or sets the offset of the last leader vertex 
            from the annotation placement point.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Objects.Annotations.DxfLeaderObjectContextData.Vertices">
            <summary>
            Gets or the vertices (defined in the WCS).
            The arrow head (if enabled) is attached to the first vertex.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner">
            <summary>
            Wrapper for plot style owner, which replaces the color.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.#ctor(WW.Cad.Model.Entities.IPlotPropertyOwner,WW.Cad.Model.Entities.EntityColor,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner"/> class.
            </summary>
            <param name="baseOwner">The base owner used for everything but color.</param>
            <param name="replaceColor">Color used as replacement.</param>
            <param name="replaceAlpha">Alpha value used as replacement.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.#ctor(WW.Cad.Model.Entities.IPlotPropertyOwner,WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner"/> class using an opaque color.
            </summary>
            <param name="baseOwner">The base owner used for everything but color.</param>
            <param name="replaceColor">Color used as replacement.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.#ctor(WW.Cad.Model.Entities.IPlotPropertyOwner,WW.Cad.Model.Color,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner"/> class.
            </summary>
            <param name="baseOwner">The base owner used for everything but color.</param>
            <param name="replaceColor">Color used as replacement.</param>
            <param name="replaceAlpha">Alpha value used as replacement.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.#ctor(WW.Cad.Model.Entities.IPlotPropertyOwner,WW.Cad.Model.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner"/> class using an opaque color.
            </summary>
            <param name="baseOwner">The base owner used for everything but color.</param>
            <param name="replaceColor">Color used as replacement.</param>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.GetColor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Color"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <returns>The color (with <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> applied).</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.GetEntityColor(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Entities.EntityColor"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
            <returns>The entity color.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.GetAlpha(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="P:WW.Cad.Model.Entities.DxfEntity.Transparency"/> of this entity depending on the <see cref="T:WW.Cad.Model.Tables.DxfBlock"/> context.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.GetLineType(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the <see cref="T:WW.Cad.Model.Tables.DxfLineType"/> of this entity depending 
            on the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> and <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> context.
            </summary>
            <remarks>
            <seealso cref="T:WW.Cad.Model.Tables.DxfLineType"/>
            </remarks>
            <returns>The line type.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.GetLineWeight(WW.Cad.Drawing.DrawContext)">
            <summary>
            Return the effective line weight of this entity depending 
            on the <see cref="T:WW.Cad.Model.Entities.DxfInsert"/> and <see cref="T:WW.Cad.Model.Tables.DxfLayer"/> context.
            </summary>
            <remarks>
            <seealso cref="P:WW.Cad.Model.Entities.DxfEntity.LineWeight"/>
            </remarks>
            <returns>The effective line weight in 100th of mm.</returns>
        </member>
        <member name="M:WW.Cad.Model.Entities.OverrideColorPlotPropertyOwner.GetLayer(WW.Cad.Drawing.DrawContext)">
            <summary>
            Get the layer this entity is in, using the given drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfOle">
            <summary>
            Represents an ole entity.
            </summary>
            <remarks>
            During rendering a bitmap is created of which the size is determined by <see cref="P:WW.Cad.Drawing.GraphicsConfig.OleImageSize"/>.
            </remarks>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfOle.Preview(System.Int32,System.Int32)">
            <summary>
            Return bitmap preview of OLE.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfOle.Clone(WW.Cad.Model.CloneContext)">
            <summary>
            Clones this object in the context of given model context.
            </summary>
            <returns>Cloned object.</returns>
            <exception cref="T:WW.Cad.Base.DxfException">
            Thrown when reference to e.g. a line type is missing.
            (only when the clone context's reference resolution type is
            <see cref="F:WW.Cad.Model.ReferenceResolutionType.FailOnMissing"/>.)
            </exception>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfOle.Accept(WW.Cad.Model.Entities.IEntityVisitor)">
            <summary>
            Accepts the specified <see cref="T:WW.Cad.Model.Entities.IEntityVisitor">visitor</see>.
            </summary>
            <seealso cref="T:WW.Cad.Model.Entities.IEntityVisitor"/>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfOle.CopyFrom(WW.Cad.Model.DxfHandledObject,WW.Cad.Model.CloneContext)">
            <summary>
            Copies from specified ole in the context of the specified target model.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfOle.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Entities.DxfOle.DrawInternal(WW.Cad.Drawing.DrawContext.Wireframe,WW.Cad.Drawing.IWireframeGraphicsFactory2)">
            <summary>
            Draw.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.OleDataVersion">
            <summary>
            Gets or sets the Ole data version.
            The default value is 2. Only version 2 supported.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.OleItemVersion">
            <summary>
            Gets or sets the Ole data version.
            The default is 256.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.ItemId">
            <summary>
            Gets or sets the OLE Id.
            </summary>
            <remarks>
            Must be unique per database. See DxfModel.UpdateOleItemCounter and DxfModel.UniqueOleItemCounter also.
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.AdviseType">
            <summary>
            Gets or sets the advise type of OLE.
            The default is Aspect.Content
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.DrawAspect">
            <summary>
            Gets or sets the draw aspect of OLE.
            The default is Aspect.Icon.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.UserType">
            <summary>
            Gets or sets the user type string.
            As example "Adobe Acrobat Document".
            The default value is null.
            </summary>
            <remarks>
            In case if ole data is valid, ole user type from ole data will be return. 
            In other case return value will be equal to passed via set. 
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.Moniker">
            <summary>
            Gets or sets the moniker flag.
            The default is false.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.OleData">
            <summary>
            Gets or sets the OLE data.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.HimetricWidth">
            <summary>
            Gets or sets the hi metric width.
            The default is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.HimetricHeight">
            <summary>
            Gets or sets the hi metric height.
            The default is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.UpperLeft">
            <summary>
            Gets or sets the UpperLeft coner of Ole in world coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.UpperRight">
            <summary>
            Gets or sets the UpperRight coner of Ole in world coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.LowerRight">
            <summary>
            Gets or sets the LowerRight coner of Ole in world coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.LowerLeft">
            <summary>
            Gets or sets the LowerLeft coner of Ole in world coordinates.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.UnknownLong">
            <summary>
            Gets or sets the unknown field.
            The default value is 0.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.OleObjectType">
            <summary>
            Gets or sets the ole object type field.
            The default value is Type.Unknown.
            </summary>
            <remarks>
            In case if ole data is valid, ole item type from ole data will be return. 
            In other case return value will be equal to passed via set. 
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.LinkPath">
            <summary>
            Gets or sets the path to ole. if ole item type is Link.
            The default value is null.
            </summary>
            <remarks>
            In case if ole data is valid, path from ole data will be return. 
            In other case return value will be equal to passed via set. 
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.UnknownByte1">
            <summary>
            Gets or sets the unknown field.
            The default value is 0x80.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.UnknownByte2">
            <summary>
            Gets or sets the unknown field.
            The default value is 0x55.
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.Quality">
            <summary>
            Gets or sets the quality field.
            The default value is QualityType.Monochrome.
            </summary>
            <remarks>
            See also XDataFields.AutoQuality
            </remarks>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.OleXData">
            <summary>
            Fields stored in xData
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.EntityType">
            <summary>
            Gets the entity type (e.g. OLE2FRAME).
            </summary>
        </member>
        <member name="P:WW.Cad.Model.Entities.DxfOle.AcClass">
            <summary>
            Gets the entity sub class (e.g. AcDbOle2Frame).
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfOle.Aspect">
            <summary>
            Aspect levels.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfOle.Type">
            <summary>
            Ole types.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Entities.DxfOle.QualityType">
            <summary>
            Quality levels.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.DataStorage.SchemaPropertyFlags">
            <summary>
            <see cref="T:WW.Cad.Model.DataStorage.SchemaProperty"/> flags.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.SchemaPropertyFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.SchemaPropertyFlags.Unknown1">
            <summary>
            Unknown 1. If this bit is set, all other bits should be cleared.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.SchemaPropertyFlags.HasNoType">
            <summary>
            Has no type.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.DataStorage.SchemaPropertyFlags.Unknown2">
            <summary>
            Unknown 2. If this bit is set, all other bits should be cleared.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatPlainShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatPlainShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatPlainShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatPlainShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatShader.SatChrome2DShader.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatChrome2DShader.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatChrome2DShader.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatShader.SatChrome2DShader.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive">
            <summary>
            SAT plane primitive.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.root">
            <summary>The root point.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.normal">
            <summary>Normal to plane.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.uVector">
            <summary>u vector.</summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.reverseV">
            <summary>v direction reversed?</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data to writer.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.GetParameterPolyline(WW.Cad.Model.Acis.SatEntities.SatCoedge)">
            <summary>
            Get a parametric polylin shape for a mapped edge.
            </summary>
            <remarks>
            Take care of singularities!
            </remarks>
            <param name="edge">edge to map</param>
            <returns>polyline in parameter space or <code>null</code> if there is no useful mapping</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.PointParamMapper">
            <summary>
            Get a mapper from model space to the param space of this surface and back.
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.Mapping">
            <summary>
            Helper class for mapping from model to parameter space.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.Mapping.#ctor(WW.Math.Matrix4D,WW.Math.Matrix4D,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.Mapping.MapPoint(WW.Math.Point3D)">
            <summary>
            Map a coordinate triple interpreted as a point to the parameter space.
            </summary>
            <param name="point">point to map</param>
            <returns>point in parameter space</returns>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.Mapping.MapParametricPoint(System.Double,System.Double)">
            <summary>
            Map a parameter point to a 3D point.
            </summary>
            <param name="u">u parameter</param>
            <param name="v">v parameter</param>
            <returns>point in 3D space</returns>
        </member>
        <member name="P:WW.Cad.Model.Acis.SatEntities.Primitives.Surfaces.SatPlanePrimitive.Mapping.IsRightHandedParametric">
            <summary>
            Are the parametric coordinates right-handed?
            </summary>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSurfacePrimitive">
            <summary>
            SAT sub surface primitives.
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSurfacePrimitive.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSurfacePrimitive.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSurfacePrimitive.ReadDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the object data from its stored format.
            </summary>
            <param name="reader">reader to read from</param>
            <exception cref="T:WW.Cad.Model.Acis.SatFormatException">if the format is broken</exception>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.SatSweepSurfacePrimitive.WriteDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the object data.
            </summary>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatZeroCurve">
            <summary>
            SAT base class for blend support zero curve primitives.
            <remarks>
            Blend support surface of zero type. There is no strong opinion about the purpose of this type.
            But some example files are available and we can investigate SatZeroCurve later.
            </remarks>
            </summary>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatZeroCurve.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Primitives.SubSurfaces.BlendSupport.SatZeroCurve.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealVertexGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealVertexGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealVertexGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealVertexGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="F:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealFaceGeomBuildAttribute.TagName">
            <summary>The tag name used in a SAT file.</summary>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealFaceGeomBuildAttribute.GetTag(System.Int32)">
            <summary>
            Return tag of entity according with SAT format version
            </summary>
            <param name="version">version of SAT format</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealFaceGeomBuildAttribute.ReadOwnDataFrom(WW.Cad.Model.Acis.ISatReader)">
            <summary>
            Read the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before reading own data.
            </remarks>
            <param name="reader">reader to read from</param>
        </member>
        <member name="M:WW.Cad.Model.Acis.SatEntities.Attributes.Heal.SatHealFaceGeomBuildAttribute.WriteOwnDataTo(WW.Cad.Model.Acis.ISatWriter)">
            <summary>
            Write the own data of this entity.
            </summary>
            <remarks>
            Overriding methods should call the super method before writing own data.
            </remarks>
            <param name="writer">writer to write to</param>
        </member>
        <member name="T:WW.Cad.IO.DwgReader">
            <summary>
            Class for reading an AutoCAD DWG file into a <see cref="T:WW.Cad.Model.DxfModel">model</see> object.
            </summary>
            <remarks>
            DWG versions 13, 14, 2000, 2004, 2007, 2010 and 2013 are supported.
            </remarks>
            <example>
            Below is an example of how to read a DWG (or DXF) file and export to several formats.
            <code lang="cs">
using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfExportExample
{
    class DxfExportExample
    {
        public static void Main(string[] args)
        {
            if (args.Length != 2) {
                Console.WriteLine("Usage: DxfExportExample [png|tiff|jpeg|bmp|gif|pdf] &lt;DXF or DWG file&gt;");
                Environment.Exit(0);
            }
            string format = args[0];
            string filename = args[1];

            DxfModel model = null;
            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
            string outfile = Path.GetFileNameWithoutExtension(Path.GetFullPath(filename));
            Stream stream;
            if (format == "pdf") {
                BoundsCalculator boundsCalculator = new BoundsCalculator();
                boundsCalculator.GetBounds(model);
                Bounds3D bounds = boundsCalculator.Bounds;
                PaperSize paperSize = PaperSizes.GetPaperSize(PaperKind.Letter);
                // Lengths in inches.
                float pageWidth = (float)paperSize.Width / 100f;
                float pageHeight = (float)paperSize.Height / 100f;
                float margin = 0.5f;
                // Scale and transform such that its fits max width/height
                // and the top left middle of the cad drawing will match the 
                // top middle of the pdf page.
                // The transform transforms to pdf pixels.
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    new Point3D(bounds.Center.X, bounds.Corner2.Y, 0d),
                    new Point3D(new Vector3D(margin, margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth - margin, pageHeight - margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth / 2d, pageHeight - margin, 0d) * PdfExporter.InchToPixel)
                );
                using (stream = File.Create(outfile + ".pdf")) {
                    PdfExporter pdfGraphics = new PdfExporter(stream);
                    pdfGraphics.DrawPage(
                        model, 
                        GraphicsConfig.WhiteBackgroundCorrectForBackColor, 
                        to2DTransform,
                        paperSize
                    );
                    pdfGraphics.EndDocument();
                }
            } else {
                GDIGraphics3D graphics = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
                Size maxSize = new Size(500, 500);
                Bitmap bitmap = 
                    ImageExporter.CreateAutoSizedBitmap(
                        model, 
                        graphics, 
                        Matrix4D.Identity, 
                        System.Drawing.Color.Black, 
                        maxSize
                    );
                switch (format) {
                    case "bmp":
                        using (stream = File.Create(outfile + ".bmp")) {
                            ImageExporter.EncodeImageToBmp(bitmap, stream);
                        }
                        break;
                    case "gif":
                        using (stream = File.Create(outfile + ".gif")) {
                            ImageExporter.EncodeImageToGif(bitmap, stream);
                        }
                        break;
                    case "tiff":
                        using (stream = File.Create(outfile + ".tiff")) {
                            ImageExporter.EncodeImageToTiff(bitmap, stream);
                        }
                        break;
                    case "png":
                        using (stream = File.Create(outfile + ".png")) {
                            ImageExporter.EncodeImageToPng(bitmap, stream);
                        }
                        break;
                    case "jpg":
                        using (stream = File.Create(outfile + ".jpg")) {
                            ImageExporter.EncodeImageToJpeg(bitmap, stream);
                        }
                        break;
                    default:
                        Console.WriteLine("Unknown format " + format + ".");
                        break;
                }
            }
        }
    }
}
</code>
            </example>
            <seealso cref="T:WW.Cad.IO.DwgWriter"/>
            <seealso cref="T:WW.Cad.IO.DxfReader"/>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DwgReader"/> class.
            </summary>
            <param name="stream">
            The stream to read from.
            </param>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.IO.DwgReader"/> class.
            </summary>
            <param name="filename">The filename of the file to open.</param>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Read(System.String)">
            <summary>
            Reads a DWG file from the specified filename.
            </summary>
            <example>
            Below is an example of how to read a DWG (or DXF) file and export to several formats.
            <code lang="cs">
using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfExportExample
{
    class DxfExportExample
    {
        public static void Main(string[] args)
        {
            if (args.Length != 2) {
                Console.WriteLine("Usage: DxfExportExample [png|tiff|jpeg|bmp|gif|pdf] &lt;DXF or DWG file&gt;");
                Environment.Exit(0);
            }
            string format = args[0];
            string filename = args[1];

            DxfModel model = null;
            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
            string outfile = Path.GetFileNameWithoutExtension(Path.GetFullPath(filename));
            Stream stream;
            if (format == "pdf") {
                BoundsCalculator boundsCalculator = new BoundsCalculator();
                boundsCalculator.GetBounds(model);
                Bounds3D bounds = boundsCalculator.Bounds;
                PaperSize paperSize = PaperSizes.GetPaperSize(PaperKind.Letter);
                // Lengths in inches.
                float pageWidth = (float)paperSize.Width / 100f;
                float pageHeight = (float)paperSize.Height / 100f;
                float margin = 0.5f;
                // Scale and transform such that its fits max width/height
                // and the top left middle of the cad drawing will match the 
                // top middle of the pdf page.
                // The transform transforms to pdf pixels.
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    new Point3D(bounds.Center.X, bounds.Corner2.Y, 0d),
                    new Point3D(new Vector3D(margin, margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth - margin, pageHeight - margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth / 2d, pageHeight - margin, 0d) * PdfExporter.InchToPixel)
                );
                using (stream = File.Create(outfile + ".pdf")) {
                    PdfExporter pdfGraphics = new PdfExporter(stream);
                    pdfGraphics.DrawPage(
                        model, 
                        GraphicsConfig.WhiteBackgroundCorrectForBackColor, 
                        to2DTransform,
                        paperSize
                    );
                    pdfGraphics.EndDocument();
                }
            } else {
                GDIGraphics3D graphics = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
                Size maxSize = new Size(500, 500);
                Bitmap bitmap = 
                    ImageExporter.CreateAutoSizedBitmap(
                        model, 
                        graphics, 
                        Matrix4D.Identity, 
                        System.Drawing.Color.Black, 
                        maxSize
                    );
                switch (format) {
                    case "bmp":
                        using (stream = File.Create(outfile + ".bmp")) {
                            ImageExporter.EncodeImageToBmp(bitmap, stream);
                        }
                        break;
                    case "gif":
                        using (stream = File.Create(outfile + ".gif")) {
                            ImageExporter.EncodeImageToGif(bitmap, stream);
                        }
                        break;
                    case "tiff":
                        using (stream = File.Create(outfile + ".tiff")) {
                            ImageExporter.EncodeImageToTiff(bitmap, stream);
                        }
                        break;
                    case "png":
                        using (stream = File.Create(outfile + ".png")) {
                            ImageExporter.EncodeImageToPng(bitmap, stream);
                        }
                        break;
                    case "jpg":
                        using (stream = File.Create(outfile + ".jpg")) {
                            ImageExporter.EncodeImageToJpeg(bitmap, stream);
                        }
                        break;
                    default:
                        Console.WriteLine("Unknown format " + format + ".");
                        break;
                }
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Read(System.String,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Reads a DWG file from the specified filename.
            </summary>
            <example>
            Below is an example of how to read a DWG (or DXF) file and export to several formats.
            <code lang="cs">
using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfExportExample
{
    class DxfExportExample
    {
        public static void Main(string[] args)
        {
            if (args.Length != 2) {
                Console.WriteLine("Usage: DxfExportExample [png|tiff|jpeg|bmp|gif|pdf] &lt;DXF or DWG file&gt;");
                Environment.Exit(0);
            }
            string format = args[0];
            string filename = args[1];

            DxfModel model = null;
            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
            string outfile = Path.GetFileNameWithoutExtension(Path.GetFullPath(filename));
            Stream stream;
            if (format == "pdf") {
                BoundsCalculator boundsCalculator = new BoundsCalculator();
                boundsCalculator.GetBounds(model);
                Bounds3D bounds = boundsCalculator.Bounds;
                PaperSize paperSize = PaperSizes.GetPaperSize(PaperKind.Letter);
                // Lengths in inches.
                float pageWidth = (float)paperSize.Width / 100f;
                float pageHeight = (float)paperSize.Height / 100f;
                float margin = 0.5f;
                // Scale and transform such that its fits max width/height
                // and the top left middle of the cad drawing will match the 
                // top middle of the pdf page.
                // The transform transforms to pdf pixels.
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    new Point3D(bounds.Center.X, bounds.Corner2.Y, 0d),
                    new Point3D(new Vector3D(margin, margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth - margin, pageHeight - margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth / 2d, pageHeight - margin, 0d) * PdfExporter.InchToPixel)
                );
                using (stream = File.Create(outfile + ".pdf")) {
                    PdfExporter pdfGraphics = new PdfExporter(stream);
                    pdfGraphics.DrawPage(
                        model, 
                        GraphicsConfig.WhiteBackgroundCorrectForBackColor, 
                        to2DTransform,
                        paperSize
                    );
                    pdfGraphics.EndDocument();
                }
            } else {
                GDIGraphics3D graphics = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
                Size maxSize = new Size(500, 500);
                Bitmap bitmap = 
                    ImageExporter.CreateAutoSizedBitmap(
                        model, 
                        graphics, 
                        Matrix4D.Identity, 
                        System.Drawing.Color.Black, 
                        maxSize
                    );
                switch (format) {
                    case "bmp":
                        using (stream = File.Create(outfile + ".bmp")) {
                            ImageExporter.EncodeImageToBmp(bitmap, stream);
                        }
                        break;
                    case "gif":
                        using (stream = File.Create(outfile + ".gif")) {
                            ImageExporter.EncodeImageToGif(bitmap, stream);
                        }
                        break;
                    case "tiff":
                        using (stream = File.Create(outfile + ".tiff")) {
                            ImageExporter.EncodeImageToTiff(bitmap, stream);
                        }
                        break;
                    case "png":
                        using (stream = File.Create(outfile + ".png")) {
                            ImageExporter.EncodeImageToPng(bitmap, stream);
                        }
                        break;
                    case "jpg":
                        using (stream = File.Create(outfile + ".jpg")) {
                            ImageExporter.EncodeImageToJpeg(bitmap, stream);
                        }
                        break;
                    default:
                        Console.WriteLine("Unknown format " + format + ".");
                        break;
                }
            }
        }
    }
}
</code>
            </example>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Read(System.String,WW.Cad.Base.ProgressEventHandler,WW.Cad.Base.DxfMessageCollection@)">
            <summary>
            Reads a DWG file from the specified filename.
            </summary>
            <example>
            Below is an example of how to read a DWG (or DXF) file and export to several formats.
            <code lang="cs">
using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;

using WW.Cad.Base;
using WW.Cad.Drawing;
using WW.Cad.Drawing.GDI;
using WW.Cad.IO;
using WW.Cad.Model;
using WW.Math;

namespace DxfExportExample
{
    class DxfExportExample
    {
        public static void Main(string[] args)
        {
            if (args.Length != 2) {
                Console.WriteLine("Usage: DxfExportExample [png|tiff|jpeg|bmp|gif|pdf] &lt;DXF or DWG file&gt;");
                Environment.Exit(0);
            }
            string format = args[0];
            string filename = args[1];

            DxfModel model = null;
            try {
                string extension = Path.GetExtension(filename);
                if (string.Compare(extension, ".dwg", true) == 0) {
                    model = DwgReader.Read(filename);
                } else {
                    model = DxfReader.Read(filename);
                }
            } catch (Exception e) {
                Console.Error.WriteLine("Error occurred: " + e.Message);
                Environment.Exit(1);
            }
            string outfile = Path.GetFileNameWithoutExtension(Path.GetFullPath(filename));
            Stream stream;
            if (format == "pdf") {
                BoundsCalculator boundsCalculator = new BoundsCalculator();
                boundsCalculator.GetBounds(model);
                Bounds3D bounds = boundsCalculator.Bounds;
                PaperSize paperSize = PaperSizes.GetPaperSize(PaperKind.Letter);
                // Lengths in inches.
                float pageWidth = (float)paperSize.Width / 100f;
                float pageHeight = (float)paperSize.Height / 100f;
                float margin = 0.5f;
                // Scale and transform such that its fits max width/height
                // and the top left middle of the cad drawing will match the 
                // top middle of the pdf page.
                // The transform transforms to pdf pixels.
                Matrix4D to2DTransform = DxfUtil.GetScaleTransform(
                    bounds.Corner1,
                    bounds.Corner2,
                    new Point3D(bounds.Center.X, bounds.Corner2.Y, 0d),
                    new Point3D(new Vector3D(margin, margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth - margin, pageHeight - margin, 0d) * PdfExporter.InchToPixel),
                    new Point3D(new Vector3D(pageWidth / 2d, pageHeight - margin, 0d) * PdfExporter.InchToPixel)
                );
                using (stream = File.Create(outfile + ".pdf")) {
                    PdfExporter pdfGraphics = new PdfExporter(stream);
                    pdfGraphics.DrawPage(
                        model, 
                        GraphicsConfig.WhiteBackgroundCorrectForBackColor, 
                        to2DTransform,
                        paperSize
                    );
                    pdfGraphics.EndDocument();
                }
            } else {
                GDIGraphics3D graphics = new GDIGraphics3D(GraphicsConfig.BlackBackgroundCorrectForBackColor);
                Size maxSize = new Size(500, 500);
                Bitmap bitmap = 
                    ImageExporter.CreateAutoSizedBitmap(
                        model, 
                        graphics, 
                        Matrix4D.Identity, 
                        System.Drawing.Color.Black, 
                        maxSize
                    );
                switch (format) {
                    case "bmp":
                        using (stream = File.Create(outfile + ".bmp")) {
                            ImageExporter.EncodeImageToBmp(bitmap, stream);
                        }
                        break;
                    case "gif":
                        using (stream = File.Create(outfile + ".gif")) {
                            ImageExporter.EncodeImageToGif(bitmap, stream);
                        }
                        break;
                    case "tiff":
                        using (stream = File.Create(outfile + ".tiff")) {
                            ImageExporter.EncodeImageToTiff(bitmap, stream);
                        }
                        break;
                    case "png":
                        using (stream = File.Create(outfile + ".png")) {
                            ImageExporter.EncodeImageToPng(bitmap, stream);
                        }
                        break;
                    case "jpg":
                        using (stream = File.Create(outfile + ".jpg")) {
                            ImageExporter.EncodeImageToJpeg(bitmap, stream);
                        }
                        break;
                    default:
                        Console.WriteLine("Unknown format " + format + ".");
                        break;
                }
            }
        }
    }
}
</code>
            </example>
            <param name="filename">Path of DWG file.</param>
            <param name="progressEventHandler">Progress handler (possibly <c>null</c>).</param>
            <param name="messageReturn">A collection of the messages and warnings issued during the read process.</param>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Read(System.IO.Stream)">
            <summary>
            Reads a DWG file from the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Read(System.IO.Stream,WW.Cad.Base.ProgressEventHandler)">
            <summary>
            Reads a DWG file from the specified stream.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Read(System.IO.Stream,WW.Cad.Base.ProgressEventHandler,WW.Cad.Base.DxfMessageCollection@)">
            <summary>
            Reads a DWG file from the specified stream.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="progressEventHandler">Progress handler (possibly <c>null</c>).</param>
            <param name="messageReturn">A collection of the messages and warnings issued during the read process.</param>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Read">
            <summary>
            Creates <see cref="T:WW.Cad.Model.DxfModel"/> and reads the DWG file contents into the created model.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Read(WW.Cad.Model.DxfModel)">
            <summary>
            Reads the contents of the DWG file into given <see cref="T:WW.Cad.Model.DxfModel"/> object.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.ReadAppInfo">
            <summary>
            Not always goes right...
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.GetSectionBitStream(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the section bit stream.
            </summary>
            <param name="sectionName">Name of the section (R18 and later).</param>
            <param name="sectionIndex">Index of the section (before R18).</param>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.GetSectionByteStream(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the section byte stream.
            </summary>
            <param name="sectionName">Name of the section (R18 and later).</param>
            <param name="sectionIndex">Index of the section (before R18).</param>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.GetSectionStream(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the section stream.
            </summary>
            <param name="sectionName">Name of the section (R18 and later).</param>
            <param name="sectionIndex">Index of the section (before R18).</param>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.OnProgress(WW.Cad.Base.ProgressEventArgs)">
            <summary>
            Fire the <see cref="E:WW.Cad.IO.DwgReader.Progress"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.ReadFileHeader">
            <summary>
            Reads the file header so the code page and section locators are known.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.RSDecode(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Does Reed Solomon decoding without actually using Reed Solomon.
            </summary>
            <remarks>
            Note that 'systematic' Reed Solomon is used where the data itself
            is reused in the encoded data.
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.ReadObjectMap">
            <summary>
            Reads the object map.
            </summary>
            <remarks>
            The Object Map is a table which gives the location of each object in the file.
            This table is broken into sections.  
            </remarks>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.ReadSecondHeader">
            <summary>
            The second header contains only redundant data,
            but read it for understanding the section.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.DwgReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:WW.Cad.IO.DwgReader.Progress">
            <summary>
            The progress event.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.DwgReader.LoadUnknownObjects">
            <summary>
            Gets or sets a value indicating whether to load unknown objects.
            The default value is <c>false</c>.
            Unknown entities might contain proxy graphics that can be displayed by CadLib.
            Proxy graphics contain the graphical representation of the object that is not directly supported
            by the DWG and DXF format.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.DwgReader.Messages">
            <summary>
            Gets the messages that were produced during the reading of a DWG file.
            </summary>
        </member>
        <member name="T:WW.Cad.IO.CadReader">
            <summary>
            Represents a utility class for reading DXF or DWG files.
            </summary>
            <remarks>
            <para>
            This is a convenience class that either uses <see cref="T:WW.Cad.IO.DxfReader"/> or <see cref="T:WW.Cad.IO.DwgReader"/>
            depending on the extension of the filename.
            </para>
            <para>
            DWG versions 13, 14, 2000, 2004 and 2007 are supported.
            </para>
            </remarks>
            <seealso cref="T:WW.Cad.IO.DxfReader"/>
            <seealso cref="T:WW.Cad.IO.DwgReader"/>
        </member>
        <member name="M:WW.Cad.IO.CadReader.Read(System.String)">
            <summary>
            Reads a model from the specified filename (either a .dxf or a .dwg file).
            </summary>
            <param name="filename">Path to file to read.</param>
            <seealso cref="T:WW.Cad.IO.DxfReader"/>
            <seealso cref="T:WW.Cad.IO.DwgReader"/>
        </member>
        <member name="M:WW.Cad.IO.CadReader.Read(System.String,System.Boolean)">
            <summary>
            Reads a model from the specified filename (either a .dxf or a .dwg file).
            </summary>
            <param name="filename">Path to file to read.</param>
            <seealso cref="T:WW.Cad.IO.DxfReader"/>
            <seealso cref="T:WW.Cad.IO.DwgReader"/>
        </member>
        <member name="M:WW.Cad.IO.CadReader.Read(System.String,System.Int32)">
            <summary>
            Reads a model from the specified filename (either a .dxf or a .dwg file).
            </summary>
            <param name="filename">Path to file to read.</param>
            <param name="defaultCodepage">Default code page if file does not define one.</param>
            <seealso cref="T:WW.Cad.IO.DxfReader"/>
            <seealso cref="T:WW.Cad.IO.DwgReader"/>
        </member>
        <member name="M:WW.Cad.IO.CadReader.Read(System.String,WW.Cad.Base.DxfMessageCollection@)">
            <summary>
            Reads a model from the specified filename (either a .dxf or a .dwg file).
            </summary>
            <param name="filename">Path to file to read.</param>
            <param name="defaultCodepage">Default code page if file does not define one.</param>
            <seealso cref="T:WW.Cad.IO.DxfReader"/>
            <seealso cref="T:WW.Cad.IO.DwgReader"/>
        </member>
        <member name="M:WW.Cad.IO.CadReader.IsDwgFilenameExtension(System.String)">
            <summary>
            Returns whether the specified filename extension is of a DWG file.
            </summary>
        </member>
        <member name="M:WW.Cad.IO.CadReader.IsDxfFilenameExtension(System.String)">
            <summary>
            Returns whether the specified filename extension is of a DXF file.
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Builders.DxfViewportBuilder.ViewportEntityHeaderHandle">
            <summary>
            Gets or sets the viewport entity header handle (only used in R13, R14).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Builders.DxfViewportBuilder.Id">
            <summary>
            Gets or sets the id (present in DXF files only).
            </summary>
        </member>
        <member name="P:WW.Cad.IO.Builders.DxfViewportBuilder.Status">
            <summary>
            Gets or sets the status (present in DXF files only).
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Wpf.GraphicsUtil">
            <summary>
            Graphics utility.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.Wpf.GraphicsUtil.ColorArgbToBrush">
            <summary>
            Cached WPF brushes.
            </summary>
        </member>
        <member name="F:WW.Cad.Drawing.Wpf.GraphicsUtil.PenKeyToPen">
            <summary>
            Cached WPF pens.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.GraphicsUtil.GetWpfPen(WW.Drawing.PenInfo)">
            <summary>
            Get pen with given color/pen width.
            </summary>
            <remarks>
            Get pen from this method in stead of creating a new pen
            for speed (creating a <see cref="T:System.Windows.Media.Pen"/> is expensive).
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.Wpf.GraphicsUtil.GetBrush(WW.Drawing.ArgbColor)">
            <summary>
            Get brush with given color.
            </summary>
            <remarks>
            Get brush from this method in stead of creating a new brush
            for speed (creating a <see cref="T:System.Windows.Media.Brush"/> is expensive).
            </remarks>
        </member>
        <member name="M:WW.Cad.Drawing.TextLineSection.#ctor(WW.Drawing.ArgbColor,System.Boolean,WW.Math.Point2D,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.TextLineSection.GetBounds(WW.Math.Bounds2D)">
            <summary>
            Get the bounds.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.Fill">
            <summary>
            Gets whether the text line should be filled.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.Position">
            <summary>
            Gets or sets the position (left baseline).
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.Ascent">
            <summary>
            Gets the ascent.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.Descent">
            <summary>
            Gets the descent.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.TopLeft">
            <summary>
            Get the top left point.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.BottomLeft">
            <summary>
            Get the bottom left point.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.TextLineSection.TopRight">
            <summary>
            Gets the top right point.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.Point">
            <summary>
            Represents a point primitive.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Point"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Point.#ctor(WW.Math.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.Point"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.Point.Accept(WW.Cad.Drawing.Surface.IPrimitiveVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.Point.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.Surface.GraphicElementBlock1">
            <summary>
            Represents a graphic element block in the context of one or more inserts.
            Should only contain graphic elements that have no line type.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementBlock1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElementBlock1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementBlock1.#ctor(WW.Cad.Model.Color,WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Drawing.Surface.GraphicElementBlock1"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementBlock1.Matches(WW.Cad.Model.Color,WW.Cad.Model.Entities.EntityColor)">
            <summary>
            Determines whether this graphic element block matches
            specified by block/by layer attributes.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.Surface.GraphicElementBlock1.Add(WW.Cad.Drawing.Surface.IGraphicElement)">
            <summary>
            Adds the specified graphic element.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock1.GraphicElements">
            <summary>
            Gets the graphic elements.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock1.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock1.ByLayerColor">
            <summary>
            Gets or sets the bylayer color.
            </summary>
        </member>
        <member name="P:WW.Cad.Drawing.Surface.GraphicElementBlock1.ByBlockColor">
            <summary>
            Gets or sets the byblock color.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.NullColoredDrawable">
            <summary>
            A drawable that doesn't draw anything.
            </summary>
        </member>
        <member name="T:WW.Cad.Drawing.GDI.EraseComplexPath">
            <summary>
            Path that can consist of several sub drawables.
            Counterpart of <see cref="!:ColoredComplex"/> to be able to draw using the background color.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.EraseComplexPath.#ctor(WW.Drawing.ArgbColor,WW.Cad.Drawing.GDI.IDrawable[],System.Boolean,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.EraseComplexPath.Draw(WW.Cad.Drawing.GDI.GdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.EraseComplexPath.Draw(WW.Cad.Drawing.GDI.FastGdiDrawContext)">
            <summary>
            Draw the path onto given graphics object.
            </summary>
        </member>
        <member name="M:WW.Cad.Drawing.GDI.EraseComplexPath.BoundingBox(WW.Math.Bounds3D,WW.Math.Matrix4D)">
            <summary>
            Calculate 3D bounding box of the graphics.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.DxfLineCreator">
            <summary>
            Class to create a <see cref="T:WW.Cad.Model.Entities.DxfLine"/> using the mouse.
            </summary>
            <remarks>
            Call <see cref="M:WW.Actions.Interactor.Activate"/> to activate this interactor.
            <see cref="M:WW.Actions.Interactor.Deactivate"/> is called automatically when the interaction is finished.
            </remarks>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.#ctor(WW.Cad.Model.DxfModel,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.DxfLwPolylineCreator"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="nodeSize">The node size.</param>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.ProcessMouseButtonDown(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when event <see cref="E:System.Windows.Forms.Control.MouseDown"/> is raised.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.ProcessMouseMove(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when event <see cref="E:System.Windows.Forms.Control.MouseMove"/> is raised.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.ProcessMouseButtonUp(WW.Actions.CanonicalMouseEventArgs,WW.Actions.InteractionContext)">
            <summary>
            Call this method when event <see cref="E:System.Windows.Forms.Control.MouseUp"/> is raised.
            </summary>
            <returns>
            Returns whether this interactor consumed the mouse event.
            </returns>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:WW.Cad.Actions.DxfLineCreator.Changed"/> event.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.OnActivated(System.EventArgs)">
            <summary>
            Is called when this interactor is activated.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="!:Deactivated"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.DxfLineCreator.Changed">
            <summary>
            Occurs when this interactor changed.
            </summary>
        </member>
        <member name="P:WW.Cad.Actions.DxfLineCreator.Entity">
            <summary>
            Gets the entity that this interactor operates on.
            </summary>
        </member>
        <member name="T:WW.Cad.Actions.DxfLineCreator.WinFormsDrawable">
            <summary>
            Represents a GDI drawable for the <see cref="T:WW.Cad.Actions.DxfLwPolylineCreator"/>.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.WinFormsDrawable.#ctor(WW.Cad.Actions.DxfLineCreator,WW.Cad.Drawing.GDI.GDIGraphics3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Cad.Actions.DxfLineCreator.WinFormsDrawable"/> class.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.WinFormsDrawable.Draw(System.Windows.Forms.PaintEventArgs,WW.Drawing.GraphicsHelper,WW.Actions.InteractionContext)">
            <summary>
            Draw this object.
            </summary>
        </member>
        <member name="M:WW.Cad.Actions.DxfLineCreator.WinFormsDrawable.OnRepaintRequested(System.EventArgs)">
            <summary>
            Raises the <see cref="E:WW.Cad.Actions.DxfLineCreator.WinFormsDrawable.RepaintRequested"/> event.
            </summary>
        </member>
        <member name="E:WW.Cad.Actions.DxfLineCreator.WinFormsDrawable.RepaintRequested">
            <summary>
            This event is raised when the interactor requests a repaint.
            </summary>
        </member>
    </members>
</doc>
